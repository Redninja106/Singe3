// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    internal static partial class OleAut32
    {
        /// <summary>Deallocates a string allocated previously by SysAllocString, SysAllocStringByteLen, SysReAllocString, SysAllocStringLen, or SysReAllocStringLen.</summary>
        /// <param name = "bstrString">The previously allocated string. If this parameter is <b>NULL</b>, the function simply returns.</param>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oleauto/nf-oleauto-sysfreestring">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("OleAut32", ExactSpelling = true)]
        internal static extern void SysFreeString(win32.System.OleAutomation.BSTR bstrString);
        /// <summary>
        /// Represents a Win32 handle that can be closed with <see cref = "OleAut32.SysFreeString"/>.
        /// </summary>
        internal class SysFreeStringSafeHandle : SafeHandle
        {
            private static readonly IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);
            internal SysFreeStringSafeHandle(): base(INVALID_HANDLE_VALUE, true)
            {
            }

            internal SysFreeStringSafeHandle(IntPtr preexistingHandle, bool ownsHandle = true): base(INVALID_HANDLE_VALUE, ownsHandle)
            {
                this.SetHandle(preexistingHandle);
            }

            public override bool IsInvalid => this.handle == default(IntPtr) || this.handle == INVALID_HANDLE_VALUE;
            protected override bool ReleaseHandle()
            {
                OleAut32.SysFreeString((win32.System.OleAutomation.BSTR)this.handle);
                return true;
            }
        }
    }
}