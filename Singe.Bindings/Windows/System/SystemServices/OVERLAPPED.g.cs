// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.SystemServices
    {
        /// <summary>Contains information used in asynchronous (overlapped) input/output (I/O).</summary>
        /// <remarks>
        /// <para>This structure should always be initialized to zero before it is used in a function call. If it is not, the function can fail and return <b>ERROR_INVALID_PARAMETER</b>.</para>
        /// <para>Use the <a href = "https://docs.microsoft.com/windows/desktop/api/shobjidl/nf-shobjidl-istreamasync-cancelio">IStreamAsync::CancelIo</a> function to cancel an asynchronous I/O operation.</para>
        /// <para>A common mistake is to reuse an <b>OVERLAPPED</b> structure before the previous asynchronous operation has been completed. Use a separate structure for each request. Create an event object for each thread that processes data.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//shobjidl/ns-shobjidl-overlapped#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct OVERLAPPED
        {
            /// <summary>
            /// <para>Type: <b>ULONG_PTR</b></para>
            /// <para>Reserved for operating system use. This member, which specifies a system-dependent status, is valid when the <a href = "https://docs.microsoft.com/windows/desktop/api/shobjidl/nf-shobjidl-istreamasync-overlappedresult">IStreamAsync::OverlappedResult</a> function returns without setting the extended error information to <b>ERROR_IO_PENDING</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//shobjidl/ns-shobjidl-overlapped#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal nuint Internal;
            /// <summary>
            /// <para>Type: <b>ULONG_PTR</b></para>
            /// <para>Reserved for operating system use. This member, which specifies the length of the data transferred, is valid when the <a href = "https://docs.microsoft.com/windows/desktop/api/shobjidl/nf-shobjidl-istreamasync-overlappedresult">IStreamAsync::OverlappedResult</a> function returns <b>TRUE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//shobjidl/ns-shobjidl-overlapped#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal nuint InternalHigh;
            internal win32.System.SystemServices.OVERLAPPED._Anonymous_e__Union Anonymous;
            /// <summary>
            /// <para>Type: <b>handle</b></para>
            /// <para>Handle to an event that is set to the signaled state when the operation has been completed. The calling process must set this member either to zero or a valid event handle before it calls any overlapped functions. To create an event object, use the <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-createeventa">CreateEvent</a> function. This function returns a handle that can be used to synchronize simultaneous I/O requests for a device.</para>
            /// <para>Functions such as <a href = "https://docs.microsoft.com/windows/desktop/api/shobjidl/nf-shobjidl-istreamasync-readasync">IStreamAsync::ReadAsync</a> and <a href = "https://docs.microsoft.com/windows/desktop/api/shobjidl/nf-shobjidl-istreamasync-writeasync">IStreamAsync::WriteAsync</a> set this handle to the nonsignaled state before they begin an I/O operation. When the operation has completed, the handle is set to the signaled state.</para>
            /// <para>Functions such as <a href = "https://docs.microsoft.com/windows/desktop/api/shobjidl/nf-shobjidl-istreamasync-overlappedresult">IStreamAsync::OverlappedResult</a> and the wait functions reset auto-reset events to the nonsignaled state. Therefore, if an auto-reset event is used, the application can stop responding if it waits for the operation to complete and then calls <b>IStreamAsync::OverlappedResult</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//shobjidl/ns-shobjidl-overlapped#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal win32.System.SystemServices.HANDLE hEvent;
            [StructLayout(LayoutKind.Explicit)]
            internal partial struct _Anonymous_e__Union
            {
                [FieldOffset(0)]
                internal win32.System.SystemServices.OVERLAPPED._Anonymous_e__Union._Anonymous_e__Struct Anonymous;
                [FieldOffset(0)]
                internal unsafe void *Pointer;
                internal partial struct _Anonymous_e__Struct
                {
                    internal uint Offset;
                    internal uint OffsetHigh;
                }
            }
        }
    }
}