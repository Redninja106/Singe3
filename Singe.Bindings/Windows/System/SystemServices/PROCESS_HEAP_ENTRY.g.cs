// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.SystemServices
    {
        /// <summary>Contains information about a heap element.</summary>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-process_heap_entry">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct PROCESS_HEAP_ENTRY
        {
            /// <summary>
            /// <para>A pointer to the data portion of the heap element.</para>
            /// <para>To initiate a <a href = "https://docs.microsoft.com/windows/desktop/api/heapapi/nf-heapapi-heapwalk">HeapWalk</a> heap enumeration, set <b>lpData</b> to <b>NULL</b>.</para>
            /// <para>If <b>PROCESS_HEAP_REGION</b> is used in the <b>wFlags</b> member, <b>lpData</b> points to the first virtual address used by the region.</para>
            /// <para>If <b>PROCESS_HEAP_UNCOMMITTED_RANGE</b> is used in <b>wFlags</b>, <b>lpData</b> points to the beginning of the range of uncommitted memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-process_heap_entry#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal unsafe void *lpData;
            /// <summary>
            /// <para>The size of the data portion of the heap element, in bytes.</para>
            /// <para>If <b>PROCESS_HEAP_REGION</b> is used in <b>wFlags</b>, <b>cbData</b> specifies the total size, in bytes, of the address space that is reserved for this region.</para>
            /// <para>If <b>PROCESS_HEAP_UNCOMMITTED_RANGE</b> is used in <b>wFlags</b>, <b>cbData</b> specifies the size, in bytes, of the range of uncommitted memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-process_heap_entry#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint cbData;
            /// <summary>
            /// <para>The size of the data used by the system to maintain information about the heap element, in bytes. These overhead bytes are in addition to the <b>cbData</b> bytes of the data portion of the heap element.</para>
            /// <para>If <b>PROCESS_HEAP_REGION</b> is used in <b>wFlags</b>, <b>cbOverhead</b> specifies the size, in bytes, of the heap control structures that describe the region.</para>
            /// <para>If <b>PROCESS_HEAP_UNCOMMITTED_RANGE</b> is used in <b>wFlags</b>, <b>cbOverhead</b> specifies the size, in bytes, of the control structures that describe this uncommitted range.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-process_heap_entry#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal byte cbOverhead;
            /// <summary>
            /// <para>A handle to the heap region that contains the heap element. A heap consists of one or more regions of virtual memory, each with a unique region index.</para>
            /// <para>In the first heap entry returned for most heap regions, <a href = "https://docs.microsoft.com/windows/desktop/api/heapapi/nf-heapapi-heapwalk">HeapWalk</a> uses the <b>PROCESS_HEAP_REGION</b> in the <b>wFlags</b> member. When this value is used, the members of the <b>Region</b> structure contain additional information about the region.</para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/heapapi/nf-heapapi-heapalloc">HeapAlloc</a> function sometimes uses the <a href = "https://docs.microsoft.com/windows/desktop/api/memoryapi/nf-memoryapi-virtualalloc">VirtualAlloc</a> function to allocate large blocks from a growable heap. The heap manager treats such a large block allocation as a separate region with a unique region index. <a href = "https://docs.microsoft.com/windows/desktop/api/heapapi/nf-heapapi-heapwalk">HeapWalk</a> does not use <b>PROCESS_HEAP_REGION</b> in the heap entry returned for a large block region, so the members of the <b>Region</b> structure are not valid. You can use the <a href = "https://docs.microsoft.com/windows/desktop/api/memoryapi/nf-memoryapi-virtualquery">VirtualQuery</a> function to get additional information about a large block region.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-process_heap_entry#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal byte iRegionIndex;
            /// <summary>
            /// <para>The properties of the heap element. Some values affect the meaning of other members of this <b>PROCESS_HEAP_ENTRY</b> data structure. The following values are defined.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//minwinbase/ns-minwinbase-process_heap_entry#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal ushort wFlags;
            internal win32.System.SystemServices.PROCESS_HEAP_ENTRY._Anonymous_e__Union Anonymous;
            [StructLayout(LayoutKind.Explicit)]
            internal partial struct _Anonymous_e__Union
            {
                [FieldOffset(0)]
                internal win32.System.SystemServices.PROCESS_HEAP_ENTRY._Anonymous_e__Union._Block_e__Struct Block;
                [FieldOffset(0)]
                internal win32.System.SystemServices.PROCESS_HEAP_ENTRY._Anonymous_e__Union._Region_e__Struct Region;
                internal partial struct _Block_e__Struct
                {
                    internal win32.System.SystemServices.HANDLE hMem;
                    internal __uint_3 dwReserved;
                    internal struct __uint_3
                    {
                        internal uint _0, _1, _2;
                        /// <summary>Always <c>3</c>.</summary>
                        internal int Length => 3;
                    }
                }

                internal partial struct _Region_e__Struct
                {
                    internal uint dwCommittedSize;
                    internal uint dwUnCommittedSize;
                    internal unsafe void *lpFirstBlock;
                    internal unsafe void *lpLastBlock;
                }
            }
        }
    }
}