// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.ProcessStatus
    {
        /// <summary>Contains the module load address, size, and entry point.</summary>
        /// <remarks>
        /// <para>The load address of a module is the same as the <b>HMODULE</b> value. The information returned in the <b>SizeOfImage</b> and <b>EntryPoint</b> members comes from the module's Portable Executable (PE) header. The module entry point is the location called during process startup, thread startup, process shutdown, and thread shutdown. While this is not the address of the <a href = "https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a> function, it should be close enough for most purposes.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//psapi/ns-psapi-moduleinfo#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct MODULEINFO
        {
            /// <summary>The load address of the module.</summary>
            internal unsafe void *lpBaseOfDll;
            /// <summary>The size of the linear space that the module occupies, in bytes.</summary>
            internal uint SizeOfImage;
            /// <summary>The entry point of the module.</summary>
            internal unsafe void *EntryPoint;
        }
    }
}