// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.OleAutomation
    {
        [Guid("0000002F-0000-0000-C000-000000000046")]
        internal unsafe struct IRecordInfo
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Initializes a new instance of a record.</summary>
            /// <param name = "pvNew">An instance of a record.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-recordinit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RecordInit(void *pvNew)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->RecordInit_4(pThis, pvNew);
            }

            /// <summary>Releases object references and other values of a record without deallocating the record.</summary>
            /// <param name = "pvExisting">The record to be cleared.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-recordclear">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RecordClear(void *pvExisting)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->RecordClear_5(pThis, pvExisting);
            }

            /// <summary>Copies an existing record into the passed in buffer.</summary>
            /// <param name = "pvExisting">The current record instance.</param>
            /// <param name = "pvNew">The destination where the record will be copied.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-recordcopy">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RecordCopy(void *pvExisting, void *pvNew)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->RecordCopy_6(pThis, pvExisting, pvNew);
            }

            /// <inheritdoc cref = "GetGuid(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetGuid(out global::System.Guid pguid)
            {
                fixed (global::System.Guid*pguidLocal = &pguid)
                {
                    win32.System.Com.HRESULT __result = this.GetGuid(pguidLocal);
                    return __result;
                }
            }

            /// <summary>Gets the GUID of the record type.</summary>
            /// <param name = "pguid">The class GUID of the TypeInfo that describes the UDT.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-getguid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGuid(global::System.Guid*pguid)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->GetGuid_7(pThis, pguid);
            }

            /// <inheritdoc cref = "GetName(win32.System.OleAutomation.BSTR*)"/>
            internal unsafe win32.System.Com.HRESULT GetName(out OleAut32.SysFreeStringSafeHandle pbstrName)
            {
                win32.System.OleAutomation.BSTR pbstrNameLocal;
                win32.System.Com.HRESULT __result = this.GetName(&pbstrNameLocal);
                pbstrName = new OleAut32.SysFreeStringSafeHandle(pbstrNameLocal, ownsHandle: true);
                return __result;
            }

            /// <summary>Gets the name of the record type.</summary>
            /// <param name = "pbstrName">The name.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-getname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetName([Optional] win32.System.OleAutomation.BSTR*pbstrName)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->GetName_8(pThis, pbstrName);
            }

            /// <inheritdoc cref = "GetSize(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSize(out uint pcbSize)
            {
                fixed (uint *pcbSizeLocal = &pcbSize)
                {
                    win32.System.Com.HRESULT __result = this.GetSize(pcbSizeLocal);
                    return __result;
                }
            }

            /// <summary>Gets the number of bytes of memory necessary to hold the record instance.</summary>
            /// <param name = "pcbSize">The size of a record instance, in bytes.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-getsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSize(uint *pcbSize)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->GetSize_9(pThis, pcbSize);
            }

            /// <summary>Retrieves the type information that describes a UDT or safearray of UDTs.</summary>
            /// <param name = "ppTypeInfo">The information type of the record.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-gettypeinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypeInfo(win32.System.OleAutomation.ITypeInfo**ppTypeInfo)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->GetTypeInfo_10(pThis, ppTypeInfo);
            }

            /// <inheritdoc cref = "GetField(void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*)"/>
            internal unsafe win32.System.Com.HRESULT GetField(void *pvData, string szFieldName, out win32.System.OleAutomation.VARIANT pvarField)
            {
                fixed (win32.System.OleAutomation.VARIANT*pvarFieldLocal = &pvarField)
                {
                    fixed (char *szFieldNameLocal = szFieldName)
                    {
                        win32.System.Com.HRESULT __result = this.GetField(pvData, szFieldNameLocal, pvarFieldLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Returns a pointer to the VARIANT containing the value of a given field name.</summary>
            /// <param name = "pvData">The instance of a record.</param>
            /// <param name = "szFieldName">The field name.</param>
            /// <param name = "pvarField">The VARIANT that you want to hold the value of the field name, <i>szFieldName</i>. On return, places a copy of the field's value in the variant.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-getfield">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetField(void *pvData, win32.System.SystemServices.PCWSTR szFieldName, win32.System.OleAutomation.VARIANT*pvarField)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->GetField_11(pThis, pvData, szFieldName, pvarField);
            }

            /// <inheritdoc cref = "GetFieldNoCopy(void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetFieldNoCopy(void *pvData, string szFieldName, out win32.System.OleAutomation.VARIANT pvarField, out void *ppvDataCArray)
            {
                fixed (void **ppvDataCArrayLocal = &ppvDataCArray)
                {
                    fixed (win32.System.OleAutomation.VARIANT*pvarFieldLocal = &pvarField)
                    {
                        fixed (char *szFieldNameLocal = szFieldName)
                        {
                            win32.System.Com.HRESULT __result = this.GetFieldNoCopy(pvData, szFieldNameLocal, pvarFieldLocal, ppvDataCArrayLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Returns a pointer to the value of a given field name without copying the value and allocating resources.</summary>
            /// <param name = "pvData">The instance of a record.</param>
            /// <param name = "szFieldName">The name of the field.</param>
            /// <param name = "pvarField">The VARIANT that will contain the UDT upon return.</param>
            /// <param name = "ppvDataCArray">Receives the value of the field upon return.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-getfieldnocopy">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFieldNoCopy(void *pvData, win32.System.SystemServices.PCWSTR szFieldName, win32.System.OleAutomation.VARIANT*pvarField, void **ppvDataCArray)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->GetFieldNoCopy_12(pThis, pvData, szFieldName, pvarField, ppvDataCArray);
            }

            /// <inheritdoc cref = "PutField(uint, void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*)"/>
            internal unsafe win32.System.Com.HRESULT PutField(uint wFlags, void *pvData, string szFieldName, in win32.System.OleAutomation.VARIANT pvarField)
            {
                fixed (win32.System.OleAutomation.VARIANT*pvarFieldLocal = &pvarField)
                {
                    fixed (char *szFieldNameLocal = szFieldName)
                    {
                        win32.System.Com.HRESULT __result = this.PutField(wFlags, pvData, szFieldNameLocal, pvarFieldLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Puts a variant into a field.</summary>
            /// <param name = "wFlags">
            /// <para>The only legal values for the wFlags parameter is INVOKE_PROPERTYPUT or INVOKE_PROPERTYPUTREF.</para>
            /// <para>If INVOKE_PROPERTYPUTREF is passed in then <b>PutField</b> just assigns the value of the variant that is passed in to the field using normal coercion rules.</para>
            /// <para>If INVOKE_PROPERTYPUT is passed in then specific rules apply. If the field is declared as a class that derives from <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> and the field's value is NULL then an error will be returned. If the field's value is not NULL then the variant will be passed to the default property supported by the object referenced by the field. If the field is not declared as a class derived from <b>IDispatch</b> then an error will be returned. If the field is declared as a variant of type VT_Dispatch then the default value of the object is assigned to the field. Otherwise, the variant's value is assigned to the field.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-putfield#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pvData">The pointer to an instance of the record.</param>
            /// <param name = "szFieldName">The name of the field of the record.</param>
            /// <param name = "pvarField">The pointer to the variant.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-putfield">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PutField(uint wFlags, void *pvData, win32.System.SystemServices.PCWSTR szFieldName, win32.System.OleAutomation.VARIANT*pvarField)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->PutField_13(pThis, wFlags, pvData, szFieldName, pvarField);
            }

            /// <inheritdoc cref = "PutFieldNoCopy(uint, void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*)"/>
            internal unsafe win32.System.Com.HRESULT PutFieldNoCopy(uint wFlags, void *pvData, string szFieldName, in win32.System.OleAutomation.VARIANT pvarField)
            {
                fixed (win32.System.OleAutomation.VARIANT*pvarFieldLocal = &pvarField)
                {
                    fixed (char *szFieldNameLocal = szFieldName)
                    {
                        win32.System.Com.HRESULT __result = this.PutFieldNoCopy(wFlags, pvData, szFieldNameLocal, pvarFieldLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Passes ownership of the data to the assigned field by placing the actual data into the field.</summary>
            /// <param name = "wFlags">The only legal values for the wFlags parameter is INVOKE_PROPERTYPUT or INVOKE_PROPERTYPUTREF.</param>
            /// <param name = "pvData">An instance of the record described by <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-irecordinfo">IRecordInfo</a>.</param>
            /// <param name = "szFieldName">The name of the field of the record.</param>
            /// <param name = "pvarField">The variant to be put into the field.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-putfieldnocopy">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PutFieldNoCopy(uint wFlags, void *pvData, win32.System.SystemServices.PCWSTR szFieldName, win32.System.OleAutomation.VARIANT*pvarField)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->PutFieldNoCopy_14(pThis, wFlags, pvData, szFieldName, pvarField);
            }

            /// <inheritdoc cref = "GetFieldNames(uint *, win32.System.OleAutomation.BSTR*)"/>
            internal unsafe win32.System.Com.HRESULT GetFieldNames(ref uint pcNames, out OleAut32.SysFreeStringSafeHandle rgBstrNames)
            {
                fixed (uint *pcNamesLocal = &pcNames)
                {
                    win32.System.OleAutomation.BSTR rgBstrNamesLocal;
                    win32.System.Com.HRESULT __result = this.GetFieldNames(pcNamesLocal, &rgBstrNamesLocal);
                    rgBstrNames = new OleAut32.SysFreeStringSafeHandle(rgBstrNamesLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Gets the names of the fields of the record.</summary>
            /// <param name = "pcNames">The number of names to return.</param>
            /// <param name = "rgBstrNames">
            /// <para>The name of the array of type BSTR.</para>
            /// <para>If the <i>rgBstrNames</i> parameter is NULL, then <i>pcNames</i> is returned with the number of field names.</para>
            /// <para>It the <i>rgBstrNames</i> parameter is not NULL, then the string names contained in <i>rgBstrNames</i> are returned. If the number of names in <i>pcNames</i> and <i>rgBstrNames</i> are not equal then the lesser number of the two is the number of returned field names. The caller needs to free the BSTRs inside the array returned in <i>rgBstrNames</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-getfieldnames#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-getfieldnames">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFieldNames(uint *pcNames, win32.System.OleAutomation.BSTR*rgBstrNames)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->GetFieldNames_15(pThis, pcNames, rgBstrNames);
            }

            /// <summary>Determines whether the record that is passed in matches that of the current record information.</summary>
            /// <param name = "pRecordInfo">The information of the record.</param>
            /// <returns>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-ismatchingtype">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.SystemServices.BOOL IsMatchingType(win32.System.OleAutomation.IRecordInfo*pRecordInfo)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->IsMatchingType_16(pThis, pRecordInfo);
            }

            /// <summary>Allocates memory for a new record, initializes the instance and returns a pointer to the record.</summary>
            /// <returns>This method returns a pointer to the created record.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-recordcreate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void *RecordCreate()
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->RecordCreate_17(pThis);
            }

            /// <inheritdoc cref = "RecordCreateCopy(void *, void **)"/>
            internal unsafe win32.System.Com.HRESULT RecordCreateCopy(void *pvSource, out void *ppvDest)
            {
                fixed (void **ppvDestLocal = &ppvDest)
                {
                    win32.System.Com.HRESULT __result = this.RecordCreateCopy(pvSource, ppvDestLocal);
                    return __result;
                }
            }

            /// <summary>Creates a copy of an instance of a record to the specified location.</summary>
            /// <param name = "pvSource">An instance of the record to be copied.</param>
            /// <param name = "ppvDest">The new record with data copied from <i>pvSource</i>.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-recordcreatecopy">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RecordCreateCopy(void *pvSource, void **ppvDest)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->RecordCreateCopy_18(pThis, pvSource, ppvDest);
            }

            /// <summary>Releases the resources and deallocates the memory of the record.</summary>
            /// <param name = "pvRecord">An instance of the record to be destroyed.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-irecordinfo-recorddestroy">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RecordDestroy(void *pvRecord)
            {
                fixed (IRecordInfo*pThis = &this)
                    return lpVtbl->RecordDestroy_19(pThis, pvRecord);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *, win32.System.Com.HRESULT>RecordInit_4;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *, win32.System.Com.HRESULT>RecordClear_5;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *, void *, win32.System.Com.HRESULT>RecordCopy_6;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, global::System.Guid*, win32.System.Com.HRESULT>GetGuid_7;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, win32.System.OleAutomation.BSTR*, win32.System.Com.HRESULT>GetName_8;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, uint *, win32.System.Com.HRESULT>GetSize_9;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, win32.System.OleAutomation.ITypeInfo**, win32.System.Com.HRESULT>GetTypeInfo_10;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*, win32.System.Com.HRESULT>GetField_11;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*, void **, win32.System.Com.HRESULT>GetFieldNoCopy_12;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, uint, void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*, win32.System.Com.HRESULT>PutField_13;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, uint, void *, win32.System.SystemServices.PCWSTR, win32.System.OleAutomation.VARIANT*, win32.System.Com.HRESULT>PutFieldNoCopy_14;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, uint *, win32.System.OleAutomation.BSTR*, win32.System.Com.HRESULT>GetFieldNames_15;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, win32.System.OleAutomation.IRecordInfo*, win32.System.SystemServices.BOOL>IsMatchingType_16;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *>RecordCreate_17;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *, void **, win32.System.Com.HRESULT>RecordCreateCopy_18;
                internal delegate *unmanaged[Stdcall]<IRecordInfo*, void *, win32.System.Com.HRESULT>RecordDestroy_19;
            }

            private Vtbl*lpVtbl;
        }
    }
}