// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.OleAutomation
    {
        [Guid("00020401-0000-0000-C000-000000000046")]
        internal unsafe struct ITypeInfo
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetTypeAttr(win32.System.OleAutomation.TYPEATTR**)"/>
            internal unsafe win32.System.Com.HRESULT GetTypeAttr(out win32.System.OleAutomation.TYPEATTR*ppTypeAttr)
            {
                fixed (win32.System.OleAutomation.TYPEATTR**ppTypeAttrLocal = &ppTypeAttr)
                {
                    win32.System.Com.HRESULT __result = this.GetTypeAttr(ppTypeAttrLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves a TYPEATTR structure that contains the attributes of the type description.</summary>
            /// <param name = "ppTypeAttr">The attributes of this type description.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-gettypeattr">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypeAttr(win32.System.OleAutomation.TYPEATTR**ppTypeAttr)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetTypeAttr_4(pThis, ppTypeAttr);
            }

            /// <summary>Retrieves the ITypeComp interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
            /// <param name = "ppTComp">The <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> of the containing type library.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-gettypecomp">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypeComp(win32.System.OleAutomation.ITypeComp**ppTComp)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetTypeComp_5(pThis, ppTComp);
            }

            /// <inheritdoc cref = "GetFuncDesc(uint, win32.System.OleAutomation.FUNCDESC**)"/>
            internal unsafe win32.System.Com.HRESULT GetFuncDesc(uint index, out win32.System.OleAutomation.FUNCDESC*ppFuncDesc)
            {
                fixed (win32.System.OleAutomation.FUNCDESC**ppFuncDescLocal = &ppFuncDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetFuncDesc(index, ppFuncDescLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the FUNCDESC structure that contains information about a specified function.</summary>
            /// <param name = "index">The index of the function whose description is to be returned. The <i>index</i> should be in the range of 0 to 1 less than the number of functions in this type.</param>
            /// <param name = "ppFuncDesc">A FUNCDESC structure that describes the specified function.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getfuncdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFuncDesc(uint index, win32.System.OleAutomation.FUNCDESC**ppFuncDesc)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetFuncDesc_6(pThis, index, ppFuncDesc);
            }

            /// <inheritdoc cref = "GetVarDesc(uint, win32.System.OleAutomation.VARDESC**)"/>
            internal unsafe win32.System.Com.HRESULT GetVarDesc(uint index, out win32.System.OleAutomation.VARDESC*ppVarDesc)
            {
                fixed (win32.System.OleAutomation.VARDESC**ppVarDescLocal = &ppVarDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetVarDesc(index, ppVarDescLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves a VARDESC structure that describes the specified variable.</summary>
            /// <param name = "index">The index of the variable whose description is to be returned. The index should be in the range of 0 to 1 less than the number of variables in this type.</param>
            /// <param name = "ppVarDesc">A VARDESC that describes the specified variable.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getvardesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVarDesc(uint index, win32.System.OleAutomation.VARDESC**ppVarDesc)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetVarDesc_7(pThis, index, ppVarDesc);
            }

            /// <inheritdoc cref = "GetNames(int, win32.System.OleAutomation.BSTR*, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetNames(int memid, out OleAut32.SysFreeStringSafeHandle rgBstrNames, uint cMaxNames, out uint pcNames)
            {
                fixed (uint *pcNamesLocal = &pcNames)
                {
                    win32.System.OleAutomation.BSTR rgBstrNamesLocal;
                    win32.System.Com.HRESULT __result = this.GetNames(memid, &rgBstrNamesLocal, cMaxNames, pcNamesLocal);
                    rgBstrNames = new OleAut32.SysFreeStringSafeHandle(rgBstrNamesLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Retrieves the variable with the specified member ID or the name of the property or method and the parameters that correspond to the specified function ID.</summary>
            /// <param name = "memid">The ID of the member whose name (or names) is to be returned.</param>
            /// <param name = "rgBstrNames">The caller-allocated array. On return, each of the elements contains the name (or names) associated with the member.</param>
            /// <param name = "cMaxNames">The length of the passed-in <i>rgBstrNames</i> array.</param>
            /// <param name = "pcNames">The number of names in the <i>rgBstrNames</i> array.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getnames">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetNames(int memid, win32.System.OleAutomation.BSTR*rgBstrNames, uint cMaxNames, uint *pcNames)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetNames_8(pThis, memid, rgBstrNames, cMaxNames, pcNames);
            }

            /// <inheritdoc cref = "GetRefTypeOfImplType(uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetRefTypeOfImplType(uint index, out uint pRefType)
            {
                fixed (uint *pRefTypeLocal = &pRefType)
                {
                    win32.System.Com.HRESULT __result = this.GetRefTypeOfImplType(index, pRefTypeLocal);
                    return __result;
                }
            }

            /// <summary>If a type description describes a COM class, it retrieves the type description of the implemented interface types.</summary>
            /// <param name = "index">The index of the implemented type whose handle is returned. The valid range is 0 to the <b>cImplTypes</b> field in the TYPEATTR structure.</param>
            /// <param name = "pRefType">A handle for the implemented interface (if any). This handle can be passed to <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getreftypeinfo">ITypeInfo::GetRefTypeInfo</a> to get the type description.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getreftypeofimpltype">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetRefTypeOfImplType(uint index, uint *pRefType)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetRefTypeOfImplType_9(pThis, index, pRefType);
            }

            /// <inheritdoc cref = "GetImplTypeFlags(uint, int *)"/>
            internal unsafe win32.System.Com.HRESULT GetImplTypeFlags(uint index, out int pImplTypeFlags)
            {
                fixed (int *pImplTypeFlagsLocal = &pImplTypeFlags)
                {
                    win32.System.Com.HRESULT __result = this.GetImplTypeFlags(index, pImplTypeFlagsLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the IMPLTYPEFLAGS enumeration for one implemented interface or base interface in a type description.</summary>
            /// <param name = "index">The index of the implemented interface or base interface for which to get the flags.</param>
            /// <param name = "pImplTypeFlags">The IMPLTYPEFLAGS enumeration value.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getimpltypeflags">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetImplTypeFlags(uint index, int *pImplTypeFlags)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetImplTypeFlags_10(pThis, index, pImplTypeFlags);
            }

            /// <inheritdoc cref = "GetIDsOfNames(win32.System.SystemServices.PWSTR*, uint, int *)"/>
            internal unsafe win32.System.Com.HRESULT GetIDsOfNames(Span<win32.System.SystemServices.PWSTR> rgszNames, Span<int> pMemId)
            {
                fixed (int *pMemIdLocal = pMemId)
                {
                    fixed (win32.System.SystemServices.PWSTR*rgszNamesLocal = rgszNames)
                    {
                        if (rgszNames.Length != pMemId.Length)
                            throw new ArgumentException();
                        win32.System.Com.HRESULT __result = this.GetIDsOfNames(rgszNamesLocal, (uint)pMemId.Length, pMemIdLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
            /// <param name = "rgszNames">An array of names to be mapped.</param>
            /// <param name = "cNames">The count of the names to be mapped.</param>
            /// <param name = "pMemId">Caller-allocated array in which name mappings are placed.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getidsofnames">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetIDsOfNames(win32.System.SystemServices.PWSTR*rgszNames, uint cNames, int *pMemId)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetIDsOfNames_11(pThis, rgszNames, cNames, pMemId);
            }

            /// <inheritdoc cref = "Invoke(void *, int, ushort, win32.System.OleAutomation.DISPPARAMS*, win32.System.OleAutomation.VARIANT*, win32.System.OleAutomation.EXCEPINFO*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT Invoke(void *pvInstance, int memid, ushort wFlags, ref win32.System.OleAutomation.DISPPARAMS pDispParams, out win32.System.OleAutomation.VARIANT pVarResult, out win32.System.OleAutomation.EXCEPINFO pExcepInfo, out uint puArgErr)
            {
                fixed (uint *puArgErrLocal = &puArgErr)
                {
                    fixed (win32.System.OleAutomation.EXCEPINFO*pExcepInfoLocal = &pExcepInfo)
                    {
                        fixed (win32.System.OleAutomation.VARIANT*pVarResultLocal = &pVarResult)
                        {
                            fixed (win32.System.OleAutomation.DISPPARAMS*pDispParamsLocal = &pDispParams)
                            {
                                win32.System.Com.HRESULT __result = this.Invoke(pvInstance, memid, wFlags, pDispParamsLocal, pVarResultLocal, pExcepInfoLocal, puArgErrLocal);
                                return __result;
                            }
                        }
                    }
                }
            }

            /// <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
            /// <param name = "pvInstance">An instance of the interface described by this type description.</param>
            /// <param name = "memid">The interface member.</param>
            /// <param name = "wFlags">
            /// <para>Flags describing the context of the invoke call.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-invoke#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDispParams">An array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
            /// <param name = "pVarResult">The result. Should be null if the caller does not expect any result. If <i>wFlags</i> specifies DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF, <i>pVarResultis</i> is ignored.</param>
            /// <param name = "pExcepInfo">An exception information structure, which is filled in only if DISP_E_EXCEPTION is returned. If <i>pExcepInfo</i> is null on input, only an HRESULT error will be returned.</param>
            /// <param name = "puArgErr">If Invoke returns DISP_E_TYPEMISMATCH, <i>puArgErr</i> indicates the index (within <i>rgvarg</i>) of the argument with incorrect type. If more than one argument returns an error, <i>puArgErr</i> indicates only the first argument with an error. Arguments in pDispParams-&gt;rgvarg appear in reverse order, so the first argument is the one having the highest index in the array. This parameter cannot be null.</param>
            /// <returns>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-invoke">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Invoke(void *pvInstance, int memid, ushort wFlags, win32.System.OleAutomation.DISPPARAMS*pDispParams, win32.System.OleAutomation.VARIANT*pVarResult, win32.System.OleAutomation.EXCEPINFO*pExcepInfo, uint *puArgErr)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->Invoke_12(pThis, pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
            }

            /// <inheritdoc cref = "GetDocumentation(int, win32.System.OleAutomation.BSTR*, win32.System.OleAutomation.BSTR*, uint *, win32.System.OleAutomation.BSTR*)"/>
            internal unsafe win32.System.Com.HRESULT GetDocumentation(int memid, out OleAut32.SysFreeStringSafeHandle pBstrName, out OleAut32.SysFreeStringSafeHandle pBstrDocString, out uint pdwHelpContext, out OleAut32.SysFreeStringSafeHandle pBstrHelpFile)
            {
                fixed (uint *pdwHelpContextLocal = &pdwHelpContext)
                {
                    win32.System.OleAutomation.BSTR pBstrNameLocal;
                    win32.System.OleAutomation.BSTR pBstrDocStringLocal;
                    win32.System.OleAutomation.BSTR pBstrHelpFileLocal;
                    win32.System.Com.HRESULT __result = this.GetDocumentation(memid, &pBstrNameLocal, &pBstrDocStringLocal, pdwHelpContextLocal, &pBstrHelpFileLocal);
                    pBstrName = new OleAut32.SysFreeStringSafeHandle(pBstrNameLocal, ownsHandle: true);
                    pBstrDocString = new OleAut32.SysFreeStringSafeHandle(pBstrDocStringLocal, ownsHandle: true);
                    pBstrHelpFile = new OleAut32.SysFreeStringSafeHandle(pBstrHelpFileLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
            /// <param name = "memid">The ID of the member whose documentation is to be returned.</param>
            /// <param name = "pBstrName">The name of the specified item. If the caller does not need the item name, <i>pBstrName</i> can be null.</param>
            /// <param name = "pBstrDocString">The documentation string for the specified item. If the caller does not need the documentation string, <i>pBstrDocString</i> can be null.</param>
            /// <param name = "pdwHelpContext">The Help localization context. If the caller does not need the Help context, it can be null.</param>
            /// <param name = "pBstrHelpFile">The fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, it can be null.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getdocumentation">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDocumentation(int memid, [Optional] win32.System.OleAutomation.BSTR*pBstrName, [Optional] win32.System.OleAutomation.BSTR*pBstrDocString, uint *pdwHelpContext, [Optional] win32.System.OleAutomation.BSTR*pBstrHelpFile)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetDocumentation_13(pThis, memid, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }

            /// <inheritdoc cref = "GetDllEntry(int, win32.System.OleAutomation.INVOKEKIND, win32.System.OleAutomation.BSTR*, win32.System.OleAutomation.BSTR*, ushort *)"/>
            internal unsafe win32.System.Com.HRESULT GetDllEntry(int memid, win32.System.OleAutomation.INVOKEKIND invKind, out OleAut32.SysFreeStringSafeHandle pBstrDllName, out OleAut32.SysFreeStringSafeHandle pBstrName, out ushort pwOrdinal)
            {
                fixed (ushort *pwOrdinalLocal = &pwOrdinal)
                {
                    win32.System.OleAutomation.BSTR pBstrDllNameLocal;
                    win32.System.OleAutomation.BSTR pBstrNameLocal;
                    win32.System.Com.HRESULT __result = this.GetDllEntry(memid, invKind, &pBstrDllNameLocal, &pBstrNameLocal, pwOrdinalLocal);
                    pBstrDllName = new OleAut32.SysFreeStringSafeHandle(pBstrDllNameLocal, ownsHandle: true);
                    pBstrName = new OleAut32.SysFreeStringSafeHandle(pBstrNameLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
            /// <param name = "memid">The ID of the member function whose DLL entry description is to be returned.</param>
            /// <param name = "invKind">The kind of member identified by <i>memid</i>. This is important for properties, because one <i>memid</i> can identify up to three separate functions.</param>
            /// <param name = "pBstrDllName">If not null, the function sets <i>pBstrDllName</i> to the name of the DLL.</param>
            /// <param name = "pBstrName">If not null, the function sets <i>pBstrName</i> to the name of the entry point. If the entry point is specified by an ordinal, this argument is null.</param>
            /// <param name = "pwOrdinal">If not null, and if the function is defined by an ordinal, the function sets <i>pwOrdinal</i> to the ordinal.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getdllentry">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDllEntry(int memid, win32.System.OleAutomation.INVOKEKIND invKind, [Optional] win32.System.OleAutomation.BSTR*pBstrDllName, [Optional] win32.System.OleAutomation.BSTR*pBstrName, ushort *pwOrdinal)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetDllEntry_14(pThis, memid, invKind, pBstrDllName, pBstrName, pwOrdinal);
            }

            /// <summary>If a type description references other type descriptions, it retrieves the referenced type descriptions.</summary>
            /// <param name = "hRefType">A handle to the referenced type description to return.</param>
            /// <param name = "ppTInfo">The referenced type description.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getreftypeinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetRefTypeInfo(uint hRefType, win32.System.OleAutomation.ITypeInfo**ppTInfo)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetRefTypeInfo_15(pThis, hRefType, ppTInfo);
            }

            /// <inheritdoc cref = "AddressOfMember(int, win32.System.OleAutomation.INVOKEKIND, void **)"/>
            internal unsafe win32.System.Com.HRESULT AddressOfMember(int memid, win32.System.OleAutomation.INVOKEKIND invKind, out void *ppv)
            {
                fixed (void **ppvLocal = &ppv)
                {
                    win32.System.Com.HRESULT __result = this.AddressOfMember(memid, invKind, ppvLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
            /// <param name = "memid">The member ID of the static member whose address is to be retrieved. The member ID is defined by the DISPID.</param>
            /// <param name = "invKind">Indicates whether the member is a property, and if so, what kind.</param>
            /// <param name = "ppv">The static member.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-addressofmember">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AddressOfMember(int memid, win32.System.OleAutomation.INVOKEKIND invKind, void **ppv)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->AddressOfMember_16(pThis, memid, invKind, ppv);
            }

            /// <inheritdoc cref = "CreateInstance(win32.System.Com.IUnknown*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateInstance(win32.System.Com.IUnknown*pUnkOuter, in global::System.Guid riid, out void *ppvObj)
            {
                fixed (void **ppvObjLocal = &ppvObj)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateInstance(pUnkOuter, riidLocal, ppvObjLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a new instance of a type that describes a component object class (coclass).</summary>
            /// <param name = "pUnkOuter">The controlling <b>IUnknown</b>. If Null, then a stand-alone instance is created. If valid, then an aggregate object is created.</param>
            /// <param name = "riid">An ID for the interface that the caller will use to communicate with the resulting object.</param>
            /// <param name = "ppvObj">An instance of the created object.</param>
            /// <returns>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-createinstance">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateInstance(win32.System.Com.IUnknown*pUnkOuter, global::System.Guid*riid, void **ppvObj)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->CreateInstance_17(pThis, pUnkOuter, riid, ppvObj);
            }

            /// <inheritdoc cref = "GetMops(int, win32.System.OleAutomation.BSTR*)"/>
            internal unsafe win32.System.Com.HRESULT GetMops(int memid, out OleAut32.SysFreeStringSafeHandle pBstrMops)
            {
                win32.System.OleAutomation.BSTR pBstrMopsLocal;
                win32.System.Com.HRESULT __result = this.GetMops(memid, &pBstrMopsLocal);
                pBstrMops = new OleAut32.SysFreeStringSafeHandle(pBstrMopsLocal, ownsHandle: true);
                return __result;
            }

            /// <summary>Retrieves marshaling information.</summary>
            /// <param name = "memid">The member ID that indicates which marshaling information is needed.</param>
            /// <param name = "pBstrMops">The opcode string used in marshaling the fields of the structure described by the referenced type description, or null if there is no information to return.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getmops">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMops(int memid, win32.System.OleAutomation.BSTR*pBstrMops)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetMops_18(pThis, memid, pBstrMops);
            }

            /// <inheritdoc cref = "GetContainingTypeLib(win32.System.OleAutomation.ITypeLib**, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetContainingTypeLib(win32.System.OleAutomation.ITypeLib**ppTLib, out uint pIndex)
            {
                fixed (uint *pIndexLocal = &pIndex)
                {
                    win32.System.Com.HRESULT __result = this.GetContainingTypeLib(ppTLib, pIndexLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the containing type library and the index of the type description within that type library.</summary>
            /// <param name = "ppTLib">The containing type library.</param>
            /// <param name = "pIndex">The index of the type description within the containing type library.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-getcontainingtypelib">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetContainingTypeLib(win32.System.OleAutomation.ITypeLib**ppTLib, uint *pIndex)
            {
                fixed (ITypeInfo*pThis = &this)
                    return lpVtbl->GetContainingTypeLib_19(pThis, ppTLib, pIndex);
            }

            /// <inheritdoc cref = "ReleaseTypeAttr(win32.System.OleAutomation.TYPEATTR*)"/>
            internal unsafe void ReleaseTypeAttr(in win32.System.OleAutomation.TYPEATTR pTypeAttr)
            {
                fixed (win32.System.OleAutomation.TYPEATTR*pTypeAttrLocal = &pTypeAttr)
                {
                    this.ReleaseTypeAttr(pTypeAttrLocal);
                }
            }

            /// <summary>Releases a TYPEATTR previously returned by ITypeInfo::GetTypeAttr.</summary>
            /// <param name = "pTypeAttr">The TYPEATTR to be freed.</param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-releasetypeattr">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ReleaseTypeAttr(win32.System.OleAutomation.TYPEATTR*pTypeAttr)
            {
                fixed (ITypeInfo*pThis = &this)
                    lpVtbl->ReleaseTypeAttr_20(pThis, pTypeAttr);
            }

            /// <inheritdoc cref = "ReleaseFuncDesc(win32.System.OleAutomation.FUNCDESC*)"/>
            internal unsafe void ReleaseFuncDesc(in win32.System.OleAutomation.FUNCDESC pFuncDesc)
            {
                fixed (win32.System.OleAutomation.FUNCDESC*pFuncDescLocal = &pFuncDesc)
                {
                    this.ReleaseFuncDesc(pFuncDescLocal);
                }
            }

            /// <summary>Releases a FUNCDESC previously returned by ITypeInfo::GetFuncDesc.</summary>
            /// <param name = "pFuncDesc">The FUNCDESC to be freed.</param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-releasefuncdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ReleaseFuncDesc(win32.System.OleAutomation.FUNCDESC*pFuncDesc)
            {
                fixed (ITypeInfo*pThis = &this)
                    lpVtbl->ReleaseFuncDesc_21(pThis, pFuncDesc);
            }

            /// <inheritdoc cref = "ReleaseVarDesc(win32.System.OleAutomation.VARDESC*)"/>
            internal unsafe void ReleaseVarDesc(in win32.System.OleAutomation.VARDESC pVarDesc)
            {
                fixed (win32.System.OleAutomation.VARDESC*pVarDescLocal = &pVarDesc)
                {
                    this.ReleaseVarDesc(pVarDescLocal);
                }
            }

            /// <summary>Releases a VARDESC previously returned by ITypeInfo::GetVarDesc.</summary>
            /// <param name = "pVarDesc">The VARDESC to be freed.</param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypeinfo-releasevardesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ReleaseVarDesc(win32.System.OleAutomation.VARDESC*pVarDesc)
            {
                fixed (ITypeInfo*pThis = &this)
                    lpVtbl->ReleaseVarDesc_22(pThis, pVarDesc);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.OleAutomation.TYPEATTR**, win32.System.Com.HRESULT>GetTypeAttr_4;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.OleAutomation.ITypeComp**, win32.System.Com.HRESULT>GetTypeComp_5;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, uint, win32.System.OleAutomation.FUNCDESC**, win32.System.Com.HRESULT>GetFuncDesc_6;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, uint, win32.System.OleAutomation.VARDESC**, win32.System.Com.HRESULT>GetVarDesc_7;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, int, win32.System.OleAutomation.BSTR*, uint, uint *, win32.System.Com.HRESULT>GetNames_8;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, uint, uint *, win32.System.Com.HRESULT>GetRefTypeOfImplType_9;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, uint, int *, win32.System.Com.HRESULT>GetImplTypeFlags_10;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.SystemServices.PWSTR*, uint, int *, win32.System.Com.HRESULT>GetIDsOfNames_11;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, void *, int, ushort, win32.System.OleAutomation.DISPPARAMS*, win32.System.OleAutomation.VARIANT*, win32.System.OleAutomation.EXCEPINFO*, uint *, win32.System.Com.HRESULT>Invoke_12;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, int, win32.System.OleAutomation.BSTR*, win32.System.OleAutomation.BSTR*, uint *, win32.System.OleAutomation.BSTR*, win32.System.Com.HRESULT>GetDocumentation_13;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, int, win32.System.OleAutomation.INVOKEKIND, win32.System.OleAutomation.BSTR*, win32.System.OleAutomation.BSTR*, ushort *, win32.System.Com.HRESULT>GetDllEntry_14;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, uint, win32.System.OleAutomation.ITypeInfo**, win32.System.Com.HRESULT>GetRefTypeInfo_15;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, int, win32.System.OleAutomation.INVOKEKIND, void **, win32.System.Com.HRESULT>AddressOfMember_16;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.Com.IUnknown*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateInstance_17;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, int, win32.System.OleAutomation.BSTR*, win32.System.Com.HRESULT>GetMops_18;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.OleAutomation.ITypeLib**, uint *, win32.System.Com.HRESULT>GetContainingTypeLib_19;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.OleAutomation.TYPEATTR*, void>ReleaseTypeAttr_20;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.OleAutomation.FUNCDESC*, void>ReleaseFuncDesc_21;
                internal delegate *unmanaged[Stdcall]<ITypeInfo*, win32.System.OleAutomation.VARDESC*, void>ReleaseVarDesc_22;
            }

            private Vtbl*lpVtbl;
        }
    }
}