// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.OleAutomation
    {
        [Guid("00020402-0000-0000-C000-000000000046")]
        internal unsafe struct ITypeLib
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Provides the number of type descriptions that are in a type library.</summary>
            /// <returns>The number of type descriptions in the type library.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-gettypeinfocount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetTypeInfoCount()
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->GetTypeInfoCount_4(pThis);
            }

            /// <summary>Retrieves the specified type description in the library.</summary>
            /// <param name = "index">The index of the interface to be returned.</param>
            /// <param name = "ppTInfo">If successful, returns a pointer to the pointer to the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> interface.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-gettypeinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypeInfo(uint index, win32.System.OleAutomation.ITypeInfo**ppTInfo)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->GetTypeInfo_5(pThis, index, ppTInfo);
            }

            /// <inheritdoc cref = "GetTypeInfoType(uint, win32.System.OleAutomation.TYPEKIND*)"/>
            internal unsafe win32.System.Com.HRESULT GetTypeInfoType(uint index, out win32.System.OleAutomation.TYPEKIND pTKind)
            {
                fixed (win32.System.OleAutomation.TYPEKIND*pTKindLocal = &pTKind)
                {
                    win32.System.Com.HRESULT __result = this.GetTypeInfoType(index, pTKindLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the type of a type description.</summary>
            /// <param name = "index">The index of the type description within the type library.</param>
            /// <param name = "pTKind">The <a href = "https://docs.microsoft.com/windows/desktop/api/oaidl/ne-oaidl-typekind">TYPEKIND</a> enumeration value for the type description.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-gettypeinfotype">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypeInfoType(uint index, win32.System.OleAutomation.TYPEKIND*pTKind)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->GetTypeInfoType_6(pThis, index, pTKind);
            }

            /// <inheritdoc cref = "GetTypeInfoOfGuid(global::System.Guid*, win32.System.OleAutomation.ITypeInfo**)"/>
            internal unsafe win32.System.Com.HRESULT GetTypeInfoOfGuid(in global::System.Guid guid, win32.System.OleAutomation.ITypeInfo**ppTinfo)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.GetTypeInfoOfGuid(guidLocal, ppTinfo);
                    return __result;
                }
            }

            /// <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
            /// <param name = "guid">The GUID of the type description.</param>
            /// <param name = "ppTinfo">The <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</a> interface.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-gettypeinfoofguid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypeInfoOfGuid(global::System.Guid*guid, win32.System.OleAutomation.ITypeInfo**ppTinfo)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->GetTypeInfoOfGuid_7(pThis, guid, ppTinfo);
            }

            /// <inheritdoc cref = "GetLibAttr(win32.System.OleAutomation.TLIBATTR**)"/>
            internal unsafe win32.System.Com.HRESULT GetLibAttr(out win32.System.OleAutomation.TLIBATTR*ppTLibAttr)
            {
                fixed (win32.System.OleAutomation.TLIBATTR**ppTLibAttrLocal = &ppTLibAttr)
                {
                    win32.System.Com.HRESULT __result = this.GetLibAttr(ppTLibAttrLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the structure that contains the library's attributes.</summary>
            /// <param name = "ppTLibAttr">The library's attributes.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-getlibattr">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLibAttr(win32.System.OleAutomation.TLIBATTR**ppTLibAttr)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->GetLibAttr_8(pThis, ppTLibAttr);
            }

            /// <summary>Enables a client compiler to bind to the types, variables, constants, and global functions for a library.</summary>
            /// <param name = "ppTComp">The <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> instance for this <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypelib">ITypeLib</a>. A client compiler uses the methods in the <b>ITypeComp</b> interface to bind to types in <b>ITypeLib</b>, as well as to the global functions, variables, and constants defined in <b>ITypeLib</b></param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-gettypecomp">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypeComp(win32.System.OleAutomation.ITypeComp**ppTComp)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->GetTypeComp_9(pThis, ppTComp);
            }

            /// <inheritdoc cref = "GetDocumentation(int, win32.System.OleAutomation.BSTR*, win32.System.OleAutomation.BSTR*, uint *, win32.System.OleAutomation.BSTR*)"/>
            internal unsafe win32.System.Com.HRESULT GetDocumentation(int index, out OleAut32.SysFreeStringSafeHandle pBstrName, out OleAut32.SysFreeStringSafeHandle pBstrDocString, out uint pdwHelpContext, out OleAut32.SysFreeStringSafeHandle pBstrHelpFile)
            {
                fixed (uint *pdwHelpContextLocal = &pdwHelpContext)
                {
                    win32.System.OleAutomation.BSTR pBstrNameLocal;
                    win32.System.OleAutomation.BSTR pBstrDocStringLocal;
                    win32.System.OleAutomation.BSTR pBstrHelpFileLocal;
                    win32.System.Com.HRESULT __result = this.GetDocumentation(index, &pBstrNameLocal, &pBstrDocStringLocal, pdwHelpContextLocal, &pBstrHelpFileLocal);
                    pBstrName = new OleAut32.SysFreeStringSafeHandle(pBstrNameLocal, ownsHandle: true);
                    pBstrDocString = new OleAut32.SysFreeStringSafeHandle(pBstrDocStringLocal, ownsHandle: true);
                    pBstrHelpFile = new OleAut32.SysFreeStringSafeHandle(pBstrHelpFileLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Retrieves the documentation string for the library, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
            /// <param name = "index">The index of the type description whose documentation is to be returned. If <i>index</i> is -1, then the documentation for the library itself is returned.</param>
            /// <param name = "pBstrName">The name of the specified item. If the caller does not need the item name, then <i>pBstrName</i> can be null.</param>
            /// <param name = "pBstrDocString">The documentation string for the specified item. If the caller does not need the documentation string, then <i>pBstrDocString</i> can be null..</param>
            /// <param name = "pdwHelpContext">The Help context identifier (ID) associated with the specified item. If the caller does not need the Help context ID, then <i>pdwHelpContext</i> can be null.</param>
            /// <param name = "pBstrHelpFile">The fully qualified name of the Help file. If the caller does not need the Help file name, then <i>pBstrHelpFile</i> can be null.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-getdocumentation">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDocumentation(int index, [Optional] win32.System.OleAutomation.BSTR*pBstrName, [Optional] win32.System.OleAutomation.BSTR*pBstrDocString, uint *pdwHelpContext, [Optional] win32.System.OleAutomation.BSTR*pBstrHelpFile)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->GetDocumentation_10(pThis, index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }

            /// <inheritdoc cref = "IsName(win32.System.SystemServices.PWSTR, uint, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT IsName(win32.System.SystemServices.PWSTR szNameBuf, uint lHashVal, out win32.System.SystemServices.BOOL pfName)
            {
                fixed (win32.System.SystemServices.BOOL*pfNameLocal = &pfName)
                {
                    win32.System.Com.HRESULT __result = this.IsName(szNameBuf, lHashVal, pfNameLocal);
                    return __result;
                }
            }

            /// <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
            /// <param name = "szNameBuf">The string to test. If this method is successful, <i>szNameBuf</i> is modified to match the case (capitalization) found in the type library.</param>
            /// <param name = "lHashVal">The hash value of <i>szNameBuf</i>.</param>
            /// <param name = "pfName">True if <i>szNameBuf</i> was found in the type library; otherwise false.</param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-isname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT IsName(win32.System.SystemServices.PWSTR szNameBuf, uint lHashVal, win32.System.SystemServices.BOOL*pfName)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->IsName_11(pThis, szNameBuf, lHashVal, pfName);
            }

            /// <inheritdoc cref = "FindName(win32.System.SystemServices.PWSTR, uint, win32.System.OleAutomation.ITypeInfo**, int *, ushort *)"/>
            internal unsafe win32.System.Com.HRESULT FindName(win32.System.SystemServices.PWSTR szNameBuf, uint lHashVal, win32.System.OleAutomation.ITypeInfo**ppTInfo, int *rgMemId, ref ushort pcFound)
            {
                fixed (ushort *pcFoundLocal = &pcFound)
                {
                    win32.System.Com.HRESULT __result = this.FindName(szNameBuf, lHashVal, ppTInfo, rgMemId, pcFoundLocal);
                    return __result;
                }
            }

            /// <summary>Finds occurrences of a type description in a type library. This may be used to quickly verify that a name exists in a type library.</summary>
            /// <param name = "szNameBuf">The name to search for.</param>
            /// <param name = "lHashVal">A hash value to speed up the search, computed by the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/api/oleauto/nf-oleauto-lhashvalofnamesys">LHashValOfNameSys</a> function. If <i>lHashVal</i> = 0, a value is computed.</param>
            /// <param name = "ppTInfo">An array of pointers to the type descriptions that contain the name specified in <i>szNameBuf</i>. This parameter cannot be null.</param>
            /// <param name = "rgMemId">An array of the found items; <i>rgMemId</i>[<i>i</i>] is the MEMBERID that indexes into the type description specified by <i>ppTInfo</i>[<i>i</i>]. This parameter cannot be null.</param>
            /// <param name = "pcFound">
            /// <para>On entry, indicates how many instances to look for. For example, *<i>pcFound</i> = 1 can be called to find the first occurrence. The search stops when one is found.</para>
            /// <para>On exit, indicates the number of instances that were found. If the in and out values of *<i>pcFound</i> are identical, there may be more type descriptions that contain the name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-findname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-findname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindName(win32.System.SystemServices.PWSTR szNameBuf, uint lHashVal, win32.System.OleAutomation.ITypeInfo**ppTInfo, int *rgMemId, ushort *pcFound)
            {
                fixed (ITypeLib*pThis = &this)
                    return lpVtbl->FindName_12(pThis, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound);
            }

            /// <inheritdoc cref = "ReleaseTLibAttr(win32.System.OleAutomation.TLIBATTR*)"/>
            internal unsafe void ReleaseTLibAttr(in win32.System.OleAutomation.TLIBATTR pTLibAttr)
            {
                fixed (win32.System.OleAutomation.TLIBATTR*pTLibAttrLocal = &pTLibAttr)
                {
                    this.ReleaseTLibAttr(pTLibAttrLocal);
                }
            }

            /// <summary>Releases the TLIBATTR originally obtained from GetLibAttr.</summary>
            /// <param name = "pTLibAttr">The TLIBATTR to be freed.</param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//oaidl/nf-oaidl-itypelib-releasetlibattr">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ReleaseTLibAttr(win32.System.OleAutomation.TLIBATTR*pTLibAttr)
            {
                fixed (ITypeLib*pThis = &this)
                    lpVtbl->ReleaseTLibAttr_13(pThis, pTLibAttr);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ITypeLib*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, uint>GetTypeInfoCount_4;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, uint, win32.System.OleAutomation.ITypeInfo**, win32.System.Com.HRESULT>GetTypeInfo_5;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, uint, win32.System.OleAutomation.TYPEKIND*, win32.System.Com.HRESULT>GetTypeInfoType_6;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, global::System.Guid*, win32.System.OleAutomation.ITypeInfo**, win32.System.Com.HRESULT>GetTypeInfoOfGuid_7;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, win32.System.OleAutomation.TLIBATTR**, win32.System.Com.HRESULT>GetLibAttr_8;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, win32.System.OleAutomation.ITypeComp**, win32.System.Com.HRESULT>GetTypeComp_9;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, int, win32.System.OleAutomation.BSTR*, win32.System.OleAutomation.BSTR*, uint *, win32.System.OleAutomation.BSTR*, win32.System.Com.HRESULT>GetDocumentation_10;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, win32.System.SystemServices.PWSTR, uint, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>IsName_11;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, win32.System.SystemServices.PWSTR, uint, win32.System.OleAutomation.ITypeInfo**, int *, ushort *, win32.System.Com.HRESULT>FindName_12;
                internal delegate *unmanaged[Stdcall]<ITypeLib*, win32.System.OleAutomation.TLIBATTR*, void>ReleaseTLibAttr_13;
            }

            private Vtbl*lpVtbl;
        }
    }
}