// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.OleAutomation
    {
        [DebuggerDisplay("{Value}")]
        internal unsafe readonly partial struct BSTR : IEquatable<BSTR>
        {
            internal readonly char *Value;
            internal BSTR(char *value) => this.Value = value;
            public static implicit operator char *(BSTR value) => value.Value;
            public static explicit operator BSTR(char *value) => new BSTR(value);
            public static implicit operator IntPtr(BSTR value) => new IntPtr(value.Value);
            public static explicit operator BSTR(IntPtr value) => new BSTR((char *)value.ToPointer());
            public bool Equals(BSTR other) => this.Value == other.Value;
            public override bool Equals(object obj) => obj is BSTR other && this.Equals(other);
            public override int GetHashCode() => unchecked((int)this.Value);
            public override string ToString() => Marshal.PtrToStringBSTR(new IntPtr(this.Value));
            public static unsafe implicit operator ReadOnlySpan<char>(BSTR bstr) => bstr.Value != null ? new ReadOnlySpan<char>(bstr.Value, *((int *)bstr.Value - 1) / 2) : default(ReadOnlySpan<char>);
            internal ReadOnlySpan<char> AsSpan() => this;
        }
    }
}