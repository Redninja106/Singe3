// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.Com
    {
        [Guid("00000002-0000-0000-C000-000000000046")]
        internal unsafe struct IMalloc
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IMalloc*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IMalloc*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IMalloc*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Allocates a block of memory.</summary>
            /// <param name = "cb">The size of the memory block to be allocated, in bytes.</param>
            /// <returns>
            /// <para>If the method succeeds, the return value is a pointer to the allocated block of memory. Otherwise, it is <b>NULL</b>.</para>
            /// <para>Applications should always check the return value from this method, even when requesting small amounts of memory, because there is no guarantee the memory will be allocated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imalloc-alloc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void *Alloc(nuint cb)
            {
                fixed (IMalloc*pThis = &this)
                    return lpVtbl->Alloc_4(pThis, cb);
            }

            /// <summary>Changes the size of a previously allocated block of memory.</summary>
            /// <param name = "pv">A pointer to the block of memory to be reallocated. This parameter can be <b>NULL</b>, as discussed in the Remarks section below.</param>
            /// <param name = "cb">The size of the memory block to be reallocated, in bytes. This parameter can be 0, as discussed in the Remarks section below.</param>
            /// <returns>If the method succeeds, the return value is a pointer to the reallocated block of memory. Otherwise, it is <b>NULL</b>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imalloc-realloc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void *Realloc([Optional] void *pv, nuint cb)
            {
                fixed (IMalloc*pThis = &this)
                    return lpVtbl->Realloc_5(pThis, pv, cb);
            }

            /// <summary>Frees a previously allocated block of memory.</summary>
            /// <param name = "pv">A pointer to the memory block to be freed. If this parameter is <b>NULL</b>, this method has no effect.</param>
            /// <remarks>
            /// <para>This method frees a block of memory previously allocated through a call to <a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imalloc-alloc">IMalloc::Alloc</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imalloc-realloc">IMalloc::Realloc</a>. The number of bytes freed equals the number of bytes that were allocated. After the call, the block of memory pointed to by <i>pv</i> is invalid and can no longer be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imalloc-free#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void Free([Optional] void *pv)
            {
                fixed (IMalloc*pThis = &this)
                    lpVtbl->Free_6(pThis, pv);
            }

            /// <summary>Retrieves the size of a previously allocated block of memory.</summary>
            /// <param name = "pv">A pointer to the block of memory.</param>
            /// <returns>The size of the allocated memory block in bytes or, if <i>pv</i> is a <b>NULL</b> pointer, -1.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imalloc-getsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe nuint GetSize([Optional] void *pv)
            {
                fixed (IMalloc*pThis = &this)
                    return lpVtbl->GetSize_7(pThis, pv);
            }

            /// <summary>Determines whether this allocator was used to allocate the specified block of memory.</summary>
            /// <param name = "pv">A pointer to the block of memory. If this parameter is a <b>NULL</b> pointer, -1 is returned.</param>
            /// <returns>
            /// <para>This method can return the following values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imalloc-didalloc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe int DidAlloc([Optional] void *pv)
            {
                fixed (IMalloc*pThis = &this)
                    return lpVtbl->DidAlloc_8(pThis, pv);
            }

            /// <summary>Minimizes the heap as much as possible by releasing unused memory to the operating system, coalescing adjacent free blocks, and committing free pages.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imalloc-heapminimize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void HeapMinimize()
            {
                fixed (IMalloc*pThis = &this)
                    lpVtbl->HeapMinimize_9(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IMalloc*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IMalloc*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IMalloc*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IMalloc*, nuint, void *>Alloc_4;
                internal delegate *unmanaged[Stdcall]<IMalloc*, void *, nuint, void *>Realloc_5;
                internal delegate *unmanaged[Stdcall]<IMalloc*, void *, void>Free_6;
                internal delegate *unmanaged[Stdcall]<IMalloc*, void *, nuint>GetSize_7;
                internal delegate *unmanaged[Stdcall]<IMalloc*, void *, int>DidAlloc_8;
                internal delegate *unmanaged[Stdcall]<IMalloc*, void>HeapMinimize_9;
            }

            private Vtbl*lpVtbl;
        }
    }
}