// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace System.Com
    {
        [Guid("00000100-0000-0000-C000-000000000046")]
        internal unsafe struct IEnumUnknown
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IEnumUnknown*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IEnumUnknown*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IEnumUnknown*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Retrieves the specified number of items in the enumeration sequence.</summary>
            /// <param name = "celt">The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</param>
            /// <param name = "rgelt">
            /// <para>An array of enumerated items.</para>
            /// <para>The enumerator is responsible for calling <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a>, and the caller is responsible for calling <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> through each pointer enumerated. If <i>celt</i> is greater than 1, the caller must also pass a non-NULL pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumunknown-next#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pceltFetched">The number of items that were retrieved. This parameter is always less than or equal to the number of items requested.</param>
            /// <returns>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumunknown-next">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Next(uint celt, win32.System.Com.IUnknown**rgelt, [Optional] uint *pceltFetched)
            {
                fixed (IEnumUnknown*pThis = &this)
                    return lpVtbl->Next_4(pThis, celt, rgelt, pceltFetched);
            }

            /// <summary>Skips over the specified number of items in the enumeration sequence.</summary>
            /// <param name = "celt">The number of items to be skipped.</param>
            /// <returns>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumunknown-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Skip(uint celt)
            {
                fixed (IEnumUnknown*pThis = &this)
                    return lpVtbl->Skip_5(pThis, celt);
            }

            /// <summary>Resets the enumeration sequence to the beginning.</summary>
            /// <returns>The return value is S_OK.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumunknown-reset">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Reset()
            {
                fixed (IEnumUnknown*pThis = &this)
                    return lpVtbl->Reset_6(pThis);
            }

            /// <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
            /// <param name = "ppenum">A pointer to the cloned enumerator object.</param>
            /// <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumunknown-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Clone(win32.System.Com.IEnumUnknown**ppenum)
            {
                fixed (IEnumUnknown*pThis = &this)
                    return lpVtbl->Clone_7(pThis, ppenum);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IEnumUnknown*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IEnumUnknown*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IEnumUnknown*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IEnumUnknown*, uint, win32.System.Com.IUnknown**, uint *, win32.System.Com.HRESULT>Next_4;
                internal delegate *unmanaged[Stdcall]<IEnumUnknown*, uint, win32.System.Com.HRESULT>Skip_5;
                internal delegate *unmanaged[Stdcall]<IEnumUnknown*, win32.System.Com.HRESULT>Reset_6;
                internal delegate *unmanaged[Stdcall]<IEnumUnknown*, win32.System.Com.IEnumUnknown**, win32.System.Com.HRESULT>Clone_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}