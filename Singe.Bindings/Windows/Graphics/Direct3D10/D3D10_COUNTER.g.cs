// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D10
    {
        /// <summary>Performance counter types.</summary>
        /// <remarks>
        /// <para>In addition to these performance counters, independent hardware vendors may define their own set of performance counters for their devices. The enum values for these counters would start after D3D10_COUNTER_DEVICE_DEPENDENT_0 and would be defined by those hardware vendors.</para>
        /// <para>A device can support one or more of these performance counters, but it is not required to support any of them.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/ne-d3d10-d3d10_counter#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal enum D3D10_COUNTER
        {
            /// <summary>Percentage of the time that the GPU is idle.</summary>
            D3D10_COUNTER_GPU_IDLE = 0,
            /// <summary>Percentage of the time that the GPU does vertex processing.</summary>
            D3D10_COUNTER_VERTEX_PROCESSING = 1,
            /// <summary>Percentage of the time that the GPU does geometry processing.</summary>
            D3D10_COUNTER_GEOMETRY_PROCESSING = 2,
            /// <summary>Percentage of the time that the GPU does pixel processing.</summary>
            D3D10_COUNTER_PIXEL_PROCESSING = 3,
            /// <summary>Percentage of the time that the GPU does other processing (not vertex, geometry, or pixel processing).</summary>
            D3D10_COUNTER_OTHER_GPU_PROCESSING = 4,
            /// <summary>Percentage of bandwidth used on a host adapter. Value returned by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-getdata">ID3D10Asynchronous::GetData</a> between 0.0 and 1.0 when using this counter.</summary>
            D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5,
            /// <summary>Percentage of bandwidth used by the local video memory. Value returned by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-getdata">ID3D10Asynchronous::GetData</a> between 0.0 and 1.0 when using this counter</summary>
            D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6,
            /// <summary>Percentage of throughput used for vertices. Value returned by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-getdata">ID3D10Asynchronous::GetData</a> between 0.0 and 1.0 when using this counter</summary>
            D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7,
            /// <summary>Percentage of throughput used for triangle setup. Value returned by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-getdata">ID3D10Asynchronous::GetData</a> between 0.0 and 1.0 when using this counter</summary>
            D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8,
            /// <summary>Percentage of throughput used for the fillrate. Value returned by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-getdata">ID3D10Asynchronous::GetData</a> between 0.0 and 1.0 when using this counter.</summary>
            D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9,
            /// <summary>Percentage of time that a vertex shader spends sampling resources.</summary>
            D3D10_COUNTER_VS_MEMORY_LIMITED = 10,
            /// <summary>Percentage of time that a vertex shader spends doing computations.</summary>
            D3D10_COUNTER_VS_COMPUTATION_LIMITED = 11,
            /// <summary>Percentage of time that a geometry shader spends sampling resources.</summary>
            D3D10_COUNTER_GS_MEMORY_LIMITED = 12,
            /// <summary>Percentage of time that a geometry shader spends doing computations.</summary>
            D3D10_COUNTER_GS_COMPUTATION_LIMITED = 13,
            /// <summary>Percentage of time that a pixel shader spends sampling resources.</summary>
            D3D10_COUNTER_PS_MEMORY_LIMITED = 14,
            /// <summary>Percentage of time that a pixel shader spends doing computations.</summary>
            D3D10_COUNTER_PS_COMPUTATION_LIMITED = 15,
            /// <summary>Percentage of vertex data that was read from the vertex cache. For example, if 6 vertices were added to the cache and 3 of them were read from the cache, then the hit rate would be 0.5.</summary>
            D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16,
            /// <summary>Percentage of texel data that was read from the vertex cache. For example, if 6 texels were added to the cache and 3 of them were read from the cache, then the hit rate would be 0.5.</summary>
            D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 17,
            /// <summary>Start of the device-dependent counters. See remarks.</summary>
            D3D10_COUNTER_DEVICE_DEPENDENT_0 = 1073741824,
        }
    }
}