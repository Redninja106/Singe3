// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D10
    {
        [Guid("9B7E4C04-342C-4106-A19F-4F2704F689F0")]
        internal unsafe struct ID3D10Texture2D
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetDevice(win32.Graphics.Direct3D10.ID3D10Device**ppDevice)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    lpVtbl->GetDevice_4(pThis, ppDevice);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->GetPrivateData_5(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->SetPrivateData_6(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_7(pThis, guid, pData);
            }

            /// <inheritdoc cref = "GetType(win32.Graphics.Direct3D10.D3D10_RESOURCE_DIMENSION*)"/>
            internal unsafe void GetType(out win32.Graphics.Direct3D10.D3D10_RESOURCE_DIMENSION rType)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_RESOURCE_DIMENSION*rTypeLocal = &rType)
                {
                    this.GetType(rTypeLocal);
                }
            }

            internal unsafe void GetType(win32.Graphics.Direct3D10.D3D10_RESOURCE_DIMENSION*rType)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    lpVtbl->GetType_8(pThis, rType);
            }

            internal void SetEvictionPriority(uint EvictionPriority)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    lpVtbl->SetEvictionPriority_9(pThis, EvictionPriority);
            }

            internal uint GetEvictionPriority()
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->GetEvictionPriority_10(pThis);
            }

            /// <inheritdoc cref = "Map(uint, win32.Graphics.Direct3D10.D3D10_MAP, uint, win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE2D*)"/>
            internal unsafe win32.System.Com.HRESULT Map(uint Subresource, win32.Graphics.Direct3D10.D3D10_MAP MapType, uint MapFlags, out win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE2D pMappedTex2D)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE2D*pMappedTex2DLocal = &pMappedTex2D)
                {
                    win32.System.Com.HRESULT __result = this.Map(Subresource, MapType, MapFlags, pMappedTex2DLocal);
                    return __result;
                }
            }

            /// <summary>Get a pointer to the data contained in a subresource, and deny GPU access to that subresource.</summary>
            /// <param name = "Subresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index number of the subresource. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-d3d10calcsubresource">D3D10CalcSubresource</a> for more details.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "MapType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_map">D3D10_MAP</a></b></para>
            /// <para>Integer that specifies the CPU's read and write permissions for a resource. For possible values, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_map">D3D10_MAP</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "MapFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_map_flag">Flag</a> that specifies what the CPU should do when the GPU is busy. This flag is optional.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pMappedTex2D">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_mapped_texture2d">D3D10_MAPPED_TEXTURE2D</a>*</b></para>
            /// <para>Pointer to a structure (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_mapped_texture2d">D3D10_MAPPED_TEXTURE2D</a>) that is filled in by the function and contains a pointer to the resource data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this function succeeds, it returns S_OK.</para>
            /// <para>All of the Map methods have identical return values and operating restrictions. These are listed in the remarks section of <a href = "/windows/desktop/api/d3d10/nf-d3d10-id3d10texture1d-map">ID3D10Texture1D::Map</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-map">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Map(uint Subresource, win32.Graphics.Direct3D10.D3D10_MAP MapType, uint MapFlags, win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE2D*pMappedTex2D)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    return lpVtbl->Map_11(pThis, Subresource, MapType, MapFlags, pMappedTex2D);
            }

            /// <summary>Invalidate the pointer to the resource that was retrieved by ID3D10Texture2D::Map, and re-enable GPU access to the resource.</summary>
            /// <param name = "Subresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Subresource</a> to be unmapped. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-d3d10calcsubresource">D3D10CalcSubresource</a> for more details.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-unmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A subresource must be mapped before Unmap is called.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-unmap#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Unmap(uint Subresource)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    lpVtbl->Unmap_12(pThis, Subresource);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*)"/>
            internal unsafe void GetDesc(out win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*pDescLocal = &pDesc)
                {
                    this.GetDesc(pDescLocal);
                }
            }

            /// <summary>Get the properties of the texture resource.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture2d_desc">D3D10_TEXTURE2D_DESC</a>*</b></para>
            /// <para>Pointer to a resource description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture2d_desc">D3D10_TEXTURE2D_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10texture2d-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDesc(win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*pDesc)
            {
                fixed (ID3D10Texture2D*pThis = &this)
                    lpVtbl->GetDesc_13(pThis, pDesc);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, win32.Graphics.Direct3D10.ID3D10Device**, void>GetDevice_4;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_7;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, win32.Graphics.Direct3D10.D3D10_RESOURCE_DIMENSION*, void>GetType_8;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, uint, void>SetEvictionPriority_9;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, uint>GetEvictionPriority_10;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, uint, win32.Graphics.Direct3D10.D3D10_MAP, uint, win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE2D*, win32.System.Com.HRESULT>Map_11;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, uint, void>Unmap_12;
                internal delegate *unmanaged[Stdcall]<ID3D10Texture2D*, win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*, void>GetDesc_13;
            }

            private Vtbl*lpVtbl;
        }
    }
}