// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D10
    {
        [Guid("9B7E4C0F-342C-4106-A19F-4F2704F689F0")]
        internal unsafe struct ID3D10Device
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Set the constant buffers used by the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting constant buffers to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSSetConstantBuffers_4(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Bind an array of shader resources to the pixel shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If you bind a subresource as an input and an output, this API will fill the destination shader resource slot with <b>NULL</b>. The debug layer (when active) will alert you if this is true.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-createshaderresourceview">ID3D10Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSSetShaderResources_5(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Sets a pixel shader to the device.</summary>
            /// <param name = "pPixelShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10pixelshader">ID3D10PixelShader</a>*</b></para>
            /// <para>Pointer to a pixel shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10pixelshader">ID3D10PixelShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetShader([Optional] win32.Graphics.Direct3D10.ID3D10PixelShader*pPixelShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSSetShader_6(pThis, pPixelShader);
            }

            /// <summary>Set an array of sampler states to the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSSetSamplers_7(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Set a vertex shader to the device.</summary>
            /// <param name = "pVertexShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10vertexshader">ID3D10VertexShader</a>*</b></para>
            /// <para>Pointer to a vertex shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10vertexshader">ID3D10VertexShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetShader([Optional] win32.Graphics.Direct3D10.ID3D10VertexShader*pVertexShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSSetShader_8(pThis, pVertexShader);
            }

            /// <summary>Draw indexed, non-instanced primitives.</summary>
            /// <param name = "IndexCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of indices to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartIndexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first index to use when accesssing the vertex buffer; begin at <i>StartIndexLocation</i> to index vertices from the vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b></para>
            /// <para>Offset from the start of the vertex buffer to the first vertex.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">draw API</a> submits work to the rendering pipeline.</para>
            /// <para>If the sum of both indices is negative, the result of the function call is undefined.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexed#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->DrawIndexed_9(pThis, IndexCount, StartIndexLocation, BaseVertexLocation);
            }

            /// <summary>Draw non-indexed, non-instanced primitives.</summary>
            /// <param name = "VertexCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of vertices to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first vertex, which is usually an offset in a vertex buffer; it could also be used as the first vertex id generated for a shader parameter marked with the <b>SV_TargetId</b> <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">system-value semantic</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">draw API</a> submits work to the rendering pipeline.</para>
            /// <para>The vertex data for a draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has vertex data marked with the <b>SV_VertexId</b> <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">system-value semantic</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-draw#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Draw(uint VertexCount, uint StartVertexLocation)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->Draw_10(pThis, VertexCount, StartVertexLocation);
            }

            /// <summary>Set the constant buffers used by the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting constant buffers to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-pssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSSetConstantBuffers_11(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Bind an input-layout object to the input-assembler stage.</summary>
            /// <param name = "pInputLayout">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10inputlayout">ID3D10InputLayout</a>*</b></para>
            /// <para>A pointer to the input-layout object (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10inputlayout">ID3D10InputLayout</a>), which describes the input buffers that will be read by the IA stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Input-layout objects describe how vertex buffer data is streamed into the IA pipeline stage. To create an input-layout object, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-createinputlayout">ID3D10Device::CreateInputLayout</a>.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetinputlayout#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetInputLayout([Optional] win32.Graphics.Direct3D10.ID3D10InputLayout*pInputLayout)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IASetInputLayout_12(pThis, pInputLayout);
            }

            /// <inheritdoc cref = "IASetVertexBuffers(uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *)"/>
            internal unsafe void IASetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, ReadOnlySpan<uint> pStrides, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IASetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            /// <summary>Bind an array of vertex buffers to the input-assembler stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The first <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">input slot</a> for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. A maximum of 16 or 32 input slots (ranges from 0 to either D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 or D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of vertex buffers in the array. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppVertexBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>*</b></para>
            /// <para>A pointer to an array of vertex buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>). The vertex buffers must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_VERTEX_BUFFER</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pStrides">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of stride values; one stride value for each buffer in the vertex-buffer array. Each stride is the size (in bytes) of the elements that are to be used from that vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOffsets">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of offset values; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For information about creating vertex buffers, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-creating">Create a Vertex Buffer</a>.</para>
            /// <para>Calling this method using a buffer that is currently bound for writing (i.e. bound to the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-stream-stage">stream output</a> pipeline stage) will effectively bind <b>NULL</b> instead because a buffer cannot be bound as both an input and an output at the same time.</para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-api-features-layers">Debug Layer</a> will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetvertexbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IASetVertexBuffers_13(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            /// <summary>Bind an index buffer to the input-assembler stage.</summary>
            /// <param name = "pIndexBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>*</b></para>
            /// <para>A pointer to a buffer (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) that contains indices. The index buffer must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_INDEX_BUFFER</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>Specifies format of the data in the index buffer. The only formats allowed for index buffer data are 16-bit (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_R16_UINT</a>) and 32-bit (<b>DXGI_FORMAT_R32_UINT</b>) integers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Offset">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Offset (in bytes) from the start of the index buffer to the first index to use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For information about creating index buffers, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-creating">Create an Index Buffer</a>.</para>
            /// <para>Calling this method using a buffer that is currently bound for writing (i.e. bound to the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-stream-stage">stream output</a> pipeline stage) will effectively bind <b>NULL</b> instead because a buffer cannot be bound as both an input and an output at the same time.</para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-api-features-layers">Debug Layer</a> will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetindexbuffer#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetIndexBuffer([Optional] win32.Graphics.Direct3D10.ID3D10Buffer*pIndexBuffer, win32.Graphics.Dxgi.DXGI_FORMAT Format, uint Offset)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IASetIndexBuffer_14(pThis, pIndexBuffer, Format, Offset);
            }

            /// <summary>Draw indexed, instanced primitives.</summary>
            /// <param name = "IndexCountPerInstance">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Size of the index buffer used in each instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InstanceCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of instances to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartIndexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b></para>
            /// <para>Index of the first vertex. The index is signed, which allows a negative index. If the negative index plus the index value from the index buffer are less than 0, the result is undefined.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartInstanceLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">draw API</a> submits work to the rendering pipeline.</para>
            /// <para>Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. Indexing requires multiple vertex buffers: at least one for per-vertex data and a second buffer for per-instance data. For an example of instancing, see the <a href = "https://msdn.microsoft.com/library/Ee416415(v=VS.85).aspx">Instancing10 Sample</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawindexedinstanced#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->DrawIndexedInstanced_15(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }

            /// <summary>Draw non-indexed, instanced primitives.</summary>
            /// <param name = "VertexCountPerInstance">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of vertices to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InstanceCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of instances to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first vertex.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartInstanceLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">draw API</a> submits work to the rendering pipeline.</para>
            /// <para>Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. For an example of instancing, see the <a href = "https://msdn.microsoft.com/library/Ee416415(v=VS.85).aspx">Instancing10 Sample</a>.</para>
            /// <para>The vertex data for an instanced draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has instanced data identified with a <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">system-value semantic</a> (SV_InstanceID).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawinstanced#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->DrawInstanced_16(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }

            /// <summary>Set the constant buffers used by the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting constant buffers to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will not hold references to the interfaces passed in. For that reason, applications should be careful not to release interfaces currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSSetConstantBuffers_17(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Set a geometry shader to the device.</summary>
            /// <param name = "pShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader</a>*</b></para>
            /// <para>Pointer to a geometry shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetShader([Optional] win32.Graphics.Direct3D10.ID3D10GeometryShader*pShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSSetShader_18(pThis, pShader);
            }

            /// <summary>Bind information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
            /// <param name = "Topology">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb205334(v=vs.85)">D3D10_PRIMITIVE_TOPOLOGY</a></b></para>
            /// <para>The type of primitive and ordering of the primitive data (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb205334(v=vs.85)">D3D10_PRIMITIVE_TOPOLOGY</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetprimitivetopology#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iasetprimitivetopology">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void IASetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY Topology)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IASetPrimitiveTopology_19(pThis, Topology);
            }

            /// <summary>Bind an array of shader resources to the vertex shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If you bind a subresource as an input and an output, this API will fill the destination shader resource slot with <b>NULL</b>. The debug layer (when active) will alert you if this is true.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-createshaderresourceview">ID3D10Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSSetShaderResources_20(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Set an array of sampler states to the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSSetSamplers_21(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Set a rendering predicate.</summary>
            /// <param name = "pPredicate">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10predicate">ID3D10Predicate</a>*</b></para>
            /// <para>Pointer to a predicate (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10predicate">ID3D10Predicate</a>). A <b>NULL</b> value indicates "no" predication; in this case, the value of PredicateValue is irrelevent but will be preserved for <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-getpredication">ID3D10Device::GetPredication</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "PredicateValue">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para>If <b>TRUE</b>, rendering will be affected by when the predicate's conditions are met. If <b>FALSE</b>, rendering will be affected when the conditions are not met.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The predicate must be in the "issued" or "signaled" state to be used for predication. While the predicate is set for predication, calls to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-begin">ID3D10Asynchronous::Begin</a> and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-end">ID3D10Asynchronous::End</a> are invalid.</para>
            /// <para>This method is used to denote that subsequent rendering and resource manipulation commands are not actually performed if the resulting Predicate data of the Predicate is equal to the PredicateValue. However, some Predicates are only hints, so they may not actually prevent operations from being performed.</para>
            /// <para>The primary usefulness of Predication is to allow an application to issue graphics commands without taking the performance hit of spinning, waiting for <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-getdata">ID3D10Asynchronous::GetData</a> to return. So, Predication can occur while <b>ID3D10Asynchronous::GetData</b> returns S_FALSE. Another way to think of it: an application can also use Predication as a fallback, if it is possible that <b>ID3D10Asynchronous::GetData</b> returns S_FALSE. If <b>ID3D10Asynchronous::GetData</b> returns S_OK, the application can skip calling the graphics commands manually with it's own application logic.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setpredication#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetPredication([Optional] win32.Graphics.Direct3D10.ID3D10Predicate*pPredicate, win32.System.SystemServices.BOOL PredicateValue)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->SetPredication_22(pThis, pPredicate, PredicateValue);
            }

            /// <summary>Bind an array of shader resources to the geometry shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If you bind a subresource as an input and an output, this API will fill the destination shader resource slot with <b>NULL</b>. The debug layer (when active) will alert you if this is true.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-createshaderresourceview">ID3D10Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSSetShaderResources_23(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Set an array of sampler states to the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSSetSamplers_24(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Bind one or more render targets and the depth-stencil buffer to the output-merger stage.</summary>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of render targets to bind.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRenderTargetViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rendertargetview">ID3D10RenderTargetView</a>*</b></para>
            /// <para>Pointer to an array of render targets (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rendertargetview">ID3D10RenderTargetView</a>) to bind to the device. If this parameter is <b>NULL</b>, no render targets are bound. See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilview">ID3D10DepthStencilView</a>*</b></para>
            /// <para>Pointer to a depth-stencil view (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilview">ID3D10DepthStencilView</a>) to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil state is not bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A call to <b>OMSetRenderTargets</b> overrides all bounded render targets and the depth stencil target regardless of the number of render targets in <i>ppRenderTargetViews</i>.</para>
            /// <para>The maximum number of render targets a device can have active at any given time is set by a #define in D3D10.h called D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT. It is invalid to try to set the same <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> to multiple render target slots.</para>
            /// <para>If any subresources are also currently bound for reading or writing (perhaps in a different part of the <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-pipeline-stages">pipeline</a>), those bind points will be <b>NULL</b>'ed out to prevent the same subresource from being read and written simultaneously in a single rendering operation.</para>
            /// <para>The method will not hold references to the interfaces passed in. For that reason, applications should be careful not to release interfaces currently in use by the device.</para>
            /// <para>See <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Binding Resources and Pipeline stages</a> for more information on binding resources.</para>
            /// <para>The pixel shader must be able to simultaneously render to at least eight separate render targets. All of these render targets must access the same type of resource: <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-buffer">Buffer</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture1d">Texture1D</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture1darray">Texture1DArray</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2d">Texture2D</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2darray">Texture2DArray</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture3d">Texture3D</a>, or <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-type">TextureCube</a>. All render targets must have the same size in all dimensions (width and height, and depth for 3D or array size for *Array types). If render targets use multisample anti-aliasing, all bound render targets and depth buffer must be the same form of multisample resource (that is, the sample counts must be the same). Each render target can have a different data format. These render target formats are not required to have identical bit-per-element counts.</para>
            /// <para>Any combination of the eight slots for render targets can have a render target set or not set.</para>
            /// <para>The same resource view cannot be bound to multiple render target slots simultaneously. However, you can set multiple non-overlapping resource views of a single resource as simultaneous multiple render targets.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetrendertargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilView*pDepthStencilView)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->OMSetRenderTargets_25(pThis, NumViews, ppRenderTargetViews, pDepthStencilView);
            }

            /// <inheritdoc cref = "OMSetBlendState(win32.Graphics.Direct3D10.ID3D10BlendState*, float *, uint)"/>
            internal unsafe void OMSetBlendState(win32.Graphics.Direct3D10.ID3D10BlendState*pBlendState, in float BlendFactor, uint SampleMask)
            {
                fixed (float *BlendFactorLocal = &BlendFactor)
                {
                    this.OMSetBlendState(pBlendState, BlendFactorLocal, SampleMask);
                }
            }

            /// <summary>Set the blend state of the output-merger stage.</summary>
            /// <param name = "pBlendState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10blendstate">ID3D10BlendState</a>*</b></para>
            /// <para>Pointer to a blend-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10blendstate">ID3D10BlendState</a>). Passing in <b>NULL</b> implies a default blend state. See remarks for further details.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BlendFactor">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both. If you created  the blend-state object with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_blend">D3D10_BLEND_BLEND_FACTOR</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_blend">D3D10_BLEND_INV_BLEND_FACTOR</a>, the blending stage uses the non-NULL array of blend factors. If you didn't create the blend-state object with <b>D3D10_BLEND_BLEND_FACTOR</b> or <b>D3D10_BLEND_INV_BLEND_FACTOR</b>, the blending stage does not use the non-NULL array of blend factors; the runtime stores the blend factors, and you can later call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate">ID3D11DeviceContext::OMGetBlendState</a> to retrieve the blend factors. If you pass <b>NULL</b>, the runtime uses or stores a blend factor equal to { 1, 1, 1, 1 }.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SampleMask">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>32-bit sample coverage. The default value is 0xffffffff. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Blend state is used by the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a> to determine how to blend together two RGB pixel values and two alpha values. The two RGB pixel values and two alpha values are the RGB pixel value and alpha value that the pixel shader outputs and the RGB pixel value and alpha value already in the output render target. The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_blend">blend option</a> controls the data source that the blending stage uses to modulate values for the pixel shader, render target, or both. The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_blend_op">blend operation</a> controls how the blending stage mathematically combines these modulated values.</para>
            /// <para>To create a blend-state interface, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-createblendstate">ID3D10Device::CreateBlendState</a>.</para>
            /// <para>Passing in <b>NULL</b> for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetblendstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetBlendState([Optional] win32.Graphics.Direct3D10.ID3D10BlendState*pBlendState, float *BlendFactor, uint SampleMask)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->OMSetBlendState_26(pThis, pBlendState, BlendFactor, SampleMask);
            }

            /// <summary>Sets the depth-stencil state of the output-merger stage.</summary>
            /// <param name = "pDepthStencilState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilstate">ID3D10DepthStencilState</a>*</b></para>
            /// <para>Pointer to a depth-stencil state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilstate">ID3D10DepthStencilState</a>) to bind to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StencilRef">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Reference value to perform against when doing a depth-stencil test. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To create a depth-stencil state interface, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-createdepthstencilstate">ID3D10Device::CreateDepthStencilState</a>.</para>
            /// <para>Depth-stencil state is used by the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger</a> stage to setup depth-stencil testing. The stencil reference value is the control value used in the depth-stencil test.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omsetdepthstencilstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetDepthStencilState([Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilState*pDepthStencilState, uint StencilRef)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->OMSetDepthStencilState_27(pThis, pDepthStencilState, StencilRef);
            }

            /// <inheritdoc cref = "SOSetTargets(uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *)"/>
            internal unsafe void SOSetTargets(win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    this.SOSetTargets((uint)pOffsets.Length, ppSOTargets, pOffsetsLocal);
                }
            }

            /// <summary>Set the target output buffers for the StreamOutput stage, which enables/disables the pipeline to stream-out data.</summary>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of buffer to bind to the device. A maximum of four output buffers can be set. If less than four are defined by the call, the remaining buffer slots are set to <b>NULL</b>. See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSOTargets">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>*</b></para>
            /// <para>The array of output buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) to bind to the device. The buffers must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_STREAM_OUTPUT</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOffsets">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Array of offsets to the output buffers from <i>ppSOTargets</i>, one offset for each buffer. The offset values must be in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Call <b>ID3D10Device::SOSetTargets</b> (before any draw calls) to stream data out; call SOSetTargets with <b>NULL</b> to stop streaming data out. For an example, see Exercise 01 from the GDC 2007 workshop, which sets the stream output rendertargets before calling draw methods in the RenderInstanceToStream function.</para>
            /// <para>An offset of -1 will cause the stream output buffer to be appended, continuing after the last location written to the buffer in a previous stream output pass.</para>
            /// <para>Calling this method using a buffer that is currently bound for writing will effectively bind <b>NULL</b> instead because a buffer cannot be bound as both an input and an output at the same time.</para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-api-features-layers">Debug Layer</a> will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sosettargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SOSetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->SOSetTargets_28(pThis, NumBuffers, ppSOTargets, pOffsets);
            }

            /// <summary>Draw geometry of an unknown size that was created by the geometry shader stage. See remarks.</summary>
            /// <remarks>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">draw API</a> submits work to the rendering pipeline.</para>
            /// <para>After data has been streamed out to <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-stream-stage">SO stage</a> buffers, those buffers can be again bound to the Input Assembler stage at input slot 0 and DrawAuto will draw them without the application needing to know the amount of data that was written to the buffers. A measurement of the amount of data written to the SO stage buffers is maintained internally when the data is streamed out. This means that the CPU does not need to fetch the measurement before re-binding the data that was streamed as input data. Although this amount is tracked internally, it is still the responsibility of applications to use input layouts to describe the format of the data in the SO stage buffers so that the layouts are available when the buffers are again bound to the input assembler.</para>
            /// <para>The following diagram shows the DrawAuto process.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-drawauto#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawAuto()
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->DrawAuto_29(pThis);
            }

            /// <summary>Set the rasterizer state for the rasterizer stage of the pipeline.</summary>
            /// <param name = "pRasterizerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rasterizerstate">ID3D10RasterizerState</a>*</b></para>
            /// <para>Pointer to a rasterizer-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rasterizerstate">ID3D10RasterizerState</a>) to bind to the pipeline.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To create a rasterizer state interface, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-createrasterizerstate">ID3D10Device::CreateRasterizerState</a>. For more details on setting up the rasterizer state, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage-getting-started">Set Rasterizer State</a>.</para>
            /// <para>The method will not hold a reference to the interfaces passed in. For that reason, applications should be careful not to release an interface currently in use by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetState([Optional] win32.Graphics.Direct3D10.ID3D10RasterizerState*pRasterizerState)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->RSSetState_30(pThis, pRasterizerState);
            }

            /// <inheritdoc cref = "RSSetViewports(uint, win32.Graphics.Direct3D10.D3D10_VIEWPORT*)"/>
            internal unsafe void RSSetViewports(ReadOnlySpan<win32.Graphics.Direct3D10.D3D10_VIEWPORT> pViewports)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewportsLocal = pViewports)
                {
                    this.RSSetViewports((uint)pViewports.Length, pViewportsLocal);
                }
            }

            /// <summary>Bind an array of viewports to the rasterizer stage of the pipeline.</summary>
            /// <param name = "NumViewports">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of viewports to bind.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pViewports">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_viewport">D3D10_VIEWPORT</a>*</b></para>
            /// <para>An array of viewports (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_viewport">D3D10_VIEWPORT</a>) to bind to the device. Each viewport must have its extents within the allowed ranges: D3D10_VIEWPORT_BOUNDS_MIN, D3D10_VIEWPORT_BOUNDS_MAX, D3D10_MIN_DEPTH, and D3D10_MAX_DEPTH.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled.</para>
            /// <para>Which viewport to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">shader semantic syntax</a>). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first viewport in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetviewports#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetViewports(uint NumViewports, [Optional] win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewports)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->RSSetViewports_31(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSSetScissorRects(uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSSetScissorRects(ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.RSSetScissorRects((uint)pRects.Length, pRectsLocal);
                }
            }

            /// <summary>Bind an array of scissor rectangles to the rasterizer stage.</summary>
            /// <param name = "NumRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of scissor rectangles to bind.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-rect">D3D10_RECT</a>*</b></para>
            /// <para>An array of scissor rectangles (see <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-rect">D3D10_RECT</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The scissor rectangles will only be used if ScissorEnable is set to true in the rasterizer state (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_rasterizer_desc">D3D10_RASTERIZER_DESC</a>).</para>
            /// <para>Which scissor rectangle to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">shader semantic syntax</a>). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first scissor rectangle in the array.</para>
            /// <para>Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-rssetviewports">ID3D10Device::RSSetViewports</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rssetscissorrects#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetScissorRects(uint NumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->RSSetScissorRects_32(pThis, NumRects, pRects);
            }

            /// <inheritdoc cref = "CopySubresourceRegion(win32.Graphics.Direct3D10.ID3D10Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*)"/>
            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Direct3D10.D3D10_BOX? pSrcBox)
            {
                win32.Graphics.Direct3D10.D3D10_BOX pSrcBoxLocal = pSrcBox.HasValue ? pSrcBox.Value : default(win32.Graphics.Direct3D10.D3D10_BOX);
                this.CopySubresourceRegion(pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox.HasValue ? &pSrcBoxLocal : null);
            }

            /// <summary>Copy a region from a source resource to a destination resource.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>A pointer to the destination resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Subresource</a> index of the destination.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstX">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The x coordinate of the upper left corner of the destination region.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstY">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The y coordinate of the upper left corner of the destination region.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstZ">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The z coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>A pointer to the source resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Subresource</a> index of the source.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcBox">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_box">D3D10_BOX</a>*</b></para>
            /// <para>A 3D box (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_box">D3D10_BOX</a>) that defines the source subresource that can be copied. If <b>NULL</b>, the entire source subresource is copied. The box must fit within the source resource.</para>
            /// <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>CopySubresourceRegion</b> doesn't perform a copy operation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The source box must be within the size of the source resource. The destination location is an absolute value (not a relative value). The destination location can be offset from the source location; however, the size of the region to copy (including the destination location) must fit in the destination resource.</para>
            /// <para>If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels.</para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-d3d10calcsubresource">D3D10CalcSubresource</a> is a helper function for calculating subresource indexes.</para>
            /// <para><b>CopySubresourceRegion</b> performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources must meet the following criteria:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copysubresourceregion#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource, uint SrcSubresource, [Optional] win32.Graphics.Direct3D10.D3D10_BOX*pSrcBox)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->CopySubresourceRegion_33(pThis, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
            }

            /// <summary>Copy the entire contents of the source resource to the destination resource using the GPU.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>A pointer to the destination resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>A pointer to the source resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method is unusual in that it causes the GPU to perform the copy operation (similar to a memcpy by the CPU). As a result, it has a few restrictions designed for improving performance. For instance, the source and destination resources:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-copyresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyResource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->CopyResource_34(pThis, pDstResource, pSrcResource);
            }

            /// <inheritdoc cref = "UpdateSubresource(win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*, void *, uint, uint)"/>
            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D10.D3D10_BOX? pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                win32.Graphics.Direct3D10.D3D10_BOX pDstBoxLocal = pDstBox.HasValue ? pDstBox.Value : default(win32.Graphics.Direct3D10.D3D10_BOX);
                this.UpdateSubresource(pDstResource, DstSubresource, pDstBox.HasValue ? &pDstBoxLocal : null, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            /// <summary>The CPU copies data from memory to a subresource created in non-mappable memory. See remarks.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>A pointer to the destination resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based index, that identifies the destination subresource. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-d3d10calcsubresource">D3D10CalcSubresource</a> for more details.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDstBox">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_box">D3D10_BOX</a>*</b></para>
            /// <para>A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If <b>NULL</b>, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_box">D3D10_BOX</a>).</para>
            /// <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>UpdateSubresource</b> doesn't perform an update operation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the source data in memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcRowPitch">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The size of one row of the source data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcDepthPitch">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The size of one depth slice of source data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For a shader-constant buffer; set pDstBox to <b>NULL</b>. It is not possible to use this method to partially update a shader-constant buffer.</para>
            /// <para>A resource cannot be used as a destination if:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-updatesubresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, [Optional] win32.Graphics.Direct3D10.D3D10_BOX*pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->UpdateSubresource_35(pThis, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            /// <inheritdoc cref = "ClearRenderTargetView(win32.Graphics.Direct3D10.ID3D10RenderTargetView*, float *)"/>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D10.ID3D10RenderTargetView*pRenderTargetView, in float ColorRGBA)
            {
                fixed (float *ColorRGBALocal = &ColorRGBA)
                {
                    this.ClearRenderTargetView(pRenderTargetView, ColorRGBALocal);
                }
            }

            /// <summary>Set all the elements in a render target to one value.</summary>
            /// <param name = "pRenderTargetView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rendertargetview">ID3D10RenderTargetView</a>*</b></para>
            /// <para>Pointer to the render target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ColorRGBA">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>A 4-component array that represents the color to fill the render target with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Applications that wish to clear a render target to a specific integer value bit pattern should render a screen-aligned quad instead of using this method.  The reason for this is because this method accepts as input a floating point value, which may not have the same bit pattern as the original integer.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-clearrendertargetview#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D10.ID3D10RenderTargetView*pRenderTargetView, float *ColorRGBA)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->ClearRenderTargetView_36(pThis, pRenderTargetView, ColorRGBA);
            }

            /// <summary>Clears the depth-stencil resource.</summary>
            /// <param name = "pDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilview">ID3D10DepthStencilView</a>*</b></para>
            /// <para>Pointer to the depth stencil to be cleared.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ClearFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Which parts of the buffer to clear. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_clear_flag">D3D10_CLEAR_FLAG</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Depth">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>Clear the depth buffer with this value. This value will be clamped between 0 and 1.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Stencil">
            /// <para>Type: <b>UINT8</b></para>
            /// <para>Clear the stencil buffer with this value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-cleardepthstencilview#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D10.ID3D10DepthStencilView*pDepthStencilView, uint ClearFlags, float Depth, byte Stencil)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->ClearDepthStencilView_37(pThis, pDepthStencilView, ClearFlags, Depth, Stencil);
            }

            /// <summary>Generates mipmaps for the given shader resource.</summary>
            /// <param name = "pShaderResourceView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>. The mipmaps will be generated for this shader resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-generatemips#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>GenerateMips may be called on any ID3D10ShaderResourceView in order to generate the lower mipmap levels. GenerateMips uses the largest mipmap level of the view to recursively generate the lower levels of the mip, stopping with the smallest level specified by the view. If the base resource was not created with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_RENDER_TARGET</a> and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_resource_misc_flag">D3D10_RESOURCE_MISC_GENERATE_MIPS</a>, this call has no effect.</para>
            /// <para>Video adapters that support <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9.1 and higher support generating mipmaps if you use any of these formats:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-generatemips#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GenerateMips(win32.Graphics.Direct3D10.ID3D10ShaderResourceView*pShaderResourceView)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GenerateMips_38(pThis, pShaderResourceView);
            }

            /// <summary>Copy a multisampled resource into a non-multisampled resource. This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>Destination resource. Must be a created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_usage">D3D10_USAGE_DEFAULT</a> flag and be single-sampled. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based index, that identifies the destination subresource. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-d3d10calcsubresource">D3D10CalcSubresource</a> for more details.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>Source resource. Must be multisampled.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The source subresource of the source resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Both the source and destination resources must be the same <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource type</a> and have the same dimensions.</para>
            /// <para>The source and destination must have compatible formats. There are three scenarios for this:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-resolvesubresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ResolveSubresource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Dxgi.DXGI_FORMAT Format)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->ResolveSubresource_39(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }

            /// <summary>Get the constant buffers used by the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSGetConstantBuffers_40(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get the pixel shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSGetShaderResources_41(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get the pixel shader currently set on the device.</summary>
            /// <param name = "ppPixelShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10pixelshader">ID3D10PixelShader</a>**</b></para>
            /// <para>Address of a pointer to a pixel shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10pixelshader">ID3D10PixelShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetShader(win32.Graphics.Direct3D10.ID3D10PixelShader**ppPixelShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSGetShader_42(pThis, ppPixelShader);
            }

            /// <summary>Get an array of sampler states from the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting samplers from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>**</b></para>
            /// <para>Arry of sampler-state interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>) to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSGetSamplers_43(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get the vertex shader currently set on the device.</summary>
            /// <param name = "ppVertexShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10vertexshader">ID3D10VertexShader</a>**</b></para>
            /// <para>Address of a pointer to a vertex shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10vertexshader">ID3D10VertexShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetShader(win32.Graphics.Direct3D10.ID3D10VertexShader**ppVertexShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSGetShader_44(pThis, ppVertexShader);
            }

            /// <summary>Get the constant buffers used by the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-psgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->PSGetConstantBuffers_45(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get a pointer to the input-layout object that is bound to the input-assembler stage.</summary>
            /// <param name = "ppInputLayout">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10inputlayout">ID3D10InputLayout</a>**</b></para>
            /// <para>A pointer to the input-layout object (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10inputlayout">ID3D10InputLayout</a>), which describes the input buffers that will be read by the IA stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For information about creating an input-layout object, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">Creating the Input-Layout Object</a>.</para>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetinputlayout#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetInputLayout(win32.Graphics.Direct3D10.ID3D10InputLayout**ppInputLayout)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IAGetInputLayout_46(pThis, ppInputLayout);
            }

            /// <inheritdoc cref = "IAGetVertexBuffers(uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *)"/>
            internal unsafe void IAGetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, Span<uint> pStrides, Span<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IAGetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            /// <summary>Get the vertex buffers bound to the input-assembler stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">input slot</a> of the first vertex buffer to get. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. A maximum of 16 or 32 input slots (ranges from 0 to either D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 or D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of vertex buffers to get starting at the offset. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppVertexBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>**</b></para>
            /// <para>A pointer to an array of vertex buffers returned by the method (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pStrides">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of stride values returned by the method; one stride value for each buffer in the vertex-buffer array. Each stride value is the size (in bytes) of the elements that are to be used from that vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOffsets">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of offset values returned by the method; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetvertexbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IAGetVertexBuffers_47(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            /// <summary>Get a pointer to the index buffer that is bound to the input-assembler stage.</summary>
            /// <param name = "pIndexBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>**</b></para>
            /// <para>A pointer to an index buffer returned by the method (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>*</b></para>
            /// <para>Specifies format of the data in the index buffer (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>). These formats provide the size and type of the data in the buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Offset">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Offset (in bytes) from the start of the index buffer, to the first index to use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetindexbuffer#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetIndexBuffer([Optional] win32.Graphics.Direct3D10.ID3D10Buffer**pIndexBuffer, [Optional] win32.Graphics.Dxgi.DXGI_FORMAT*Format, [Optional] uint *Offset)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IAGetIndexBuffer_48(pThis, pIndexBuffer, Format, Offset);
            }

            /// <summary>Get the constant buffers used by the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSGetConstantBuffers_49(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get the geometry shader currently set on the device.</summary>
            /// <param name = "ppGeometryShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader</a>**</b></para>
            /// <para>Address of a pointer to a geometry shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetShader(win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSGetShader_50(pThis, ppGeometryShader);
            }

            /// <inheritdoc cref = "IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*)"/>
            internal unsafe void IAGetPrimitiveTopology(out win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY pTopology)
            {
                fixed (win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopologyLocal = &pTopology)
                {
                    this.IAGetPrimitiveTopology(pTopologyLocal);
                }
            }

            /// <summary>Get information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
            /// <param name = "pTopology">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb205334(v=vs.85)">D3D10_PRIMITIVE_TOPOLOGY</a>*</b></para>
            /// <para>A pointer to the type of primitive, and ordering of the primitive data (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb205334(v=vs.85)">D3D10_PRIMITIVE_TOPOLOGY</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetprimitivetopology#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-iagetprimitivetopology">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopology)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->IAGetPrimitiveTopology_51(pThis, pTopology);
            }

            /// <summary>Get the vertex shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSGetShaderResources_52(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get an array of sampler states from the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting samplers from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>**</b></para>
            /// <para>Arry of sampler-state interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>) to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-vsgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->VSGetSamplers_53(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get the rendering predicate state.</summary>
            /// <param name = "ppPredicate">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10predicate">ID3D10Predicate</a>**</b></para>
            /// <para>Address of a pointer to a predicate (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10predicate">ID3D10Predicate</a>). Value stored here will be <b>NULL</b> upon device creation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pPredicateValue">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a>*</b></para>
            /// <para>Address of a boolean to fill with the predicate comparison value. <b>FALSE</b> upon device creation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getpredication#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetPredication([Optional] win32.Graphics.Direct3D10.ID3D10Predicate**ppPredicate, [Optional] win32.System.SystemServices.BOOL*pPredicateValue)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GetPredication_54(pThis, ppPredicate, pPredicateValue);
            }

            /// <summary>Get the geometry shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSGetShaderResources_55(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get an array of sampler states from the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting samplers from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>**</b></para>
            /// <para>Arry of sampler-state pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>) to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gsgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GSGetSamplers_56(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get pointers to the render targets and the depth-stencil buffer that are available to the output-merger stage.</summary>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of render targets to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRenderTargetViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rendertargetview">ID3D10RenderTargetView</a>**</b></para>
            /// <para>Pointer to an array of render targets views (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rendertargetview">ID3D10RenderTargetView</a>) to be filled with the render targets from the device. Specify <b>NULL</b> for this parameter when retrieval of a render target is not needed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilview">ID3D10DepthStencilView</a>**</b></para>
            /// <para>Pointer to a depth-stencil view (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilview">ID3D10DepthStencilView</a>) to be filled with the depth-stencil information from the device. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not needed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetrendertargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMGetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilView**ppDepthStencilView)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->OMGetRenderTargets_57(pThis, NumViews, ppRenderTargetViews, ppDepthStencilView);
            }

            /// <summary>Get the blend state of the output-merger stage.</summary>
            /// <param name = "ppBlendState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10blendstate">ID3D10BlendState</a>**</b></para>
            /// <para>Address of a pointer to a blend-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10blendstate">ID3D10BlendState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BlendFactor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>Array of blend factors, one for each RGBA component.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSampleMask">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10device-omsetblendstate">sample mask</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The reference count of the returned interface will be incremented by one when the blend state is retrieved. Applications must release returned pointer(s) when they are no longer needed, or else there will be a memory leak.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetblendstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMGetBlendState([Optional] win32.Graphics.Direct3D10.ID3D10BlendState**ppBlendState, [Optional] float *BlendFactor, [Optional] uint *pSampleMask)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->OMGetBlendState_58(pThis, ppBlendState, BlendFactor, pSampleMask);
            }

            /// <summary>Gets the depth-stencil state of the output-merger stage.</summary>
            /// <param name = "ppDepthStencilState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilstate">ID3D10DepthStencilState</a>**</b></para>
            /// <para>Address of a pointer to a depth-stencil state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilstate">ID3D10DepthStencilState</a>) to be filled with information from the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pStencilRef">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to the stencil reference value used in the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">depth-stencil</a> test.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-omgetdepthstencilstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMGetDepthStencilState([Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilState**ppDepthStencilState, [Optional] uint *pStencilRef)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->OMGetDepthStencilState_59(pThis, ppDepthStencilState, pStencilRef);
            }

            /// <inheritdoc cref = "SOGetTargets(uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *)"/>
            internal unsafe void SOGetTargets(win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, Span<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    this.SOGetTargets((uint)pOffsets.Length, ppSOTargets, pOffsetsLocal);
                }
            }

            /// <summary>Get the target output buffers for the StreamOutput stage of the pipeline.</summary>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to get. A maximum of four output buffers can be retrieved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sogettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSOTargets">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>**</b></para>
            /// <para>An array of output buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>) to be retrieved from the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sogettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOffsets">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Array of offsets to the output buffers from <i>ppSOTargets</i>, one offset for each buffer. The offset values are in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sogettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-sogettargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SOGetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->SOGetTargets_60(pThis, NumBuffers, ppSOTargets, pOffsets);
            }

            /// <summary>Get the rasterizer state from the rasterizer stage of the pipeline.</summary>
            /// <param name = "ppRasterizerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rasterizerstate">ID3D10RasterizerState</a>**</b></para>
            /// <para>Address of a pointer to a rasterizer-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rasterizerstate">ID3D10RasterizerState</a>) to fill with information from the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSGetState(win32.Graphics.Direct3D10.ID3D10RasterizerState**ppRasterizerState)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->RSGetState_61(pThis, ppRasterizerState);
            }

            /// <inheritdoc cref = "RSGetViewports(uint *, win32.Graphics.Direct3D10.D3D10_VIEWPORT*)"/>
            internal unsafe void RSGetViewports(ref uint NumViewports, win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewports)
            {
                fixed (uint *NumViewportsLocal = &NumViewports)
                {
                    this.RSGetViewports(NumViewportsLocal, pViewports);
                }
            }

            /// <summary>Get the array of viewports bound to the rasterizer stage</summary>
            /// <param name = "NumViewports">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Number of viewports in <i>pViewports</i>. If <i>pViewports</i> is <b>NULL</b>, this will be filled with the number of viewports currently bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pViewports">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_viewport">D3D10_VIEWPORT</a>*</b></para>
            /// <para>An array of viewports (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_viewport">D3D10_VIEWPORT</a>) to be filled with information from the device. If NumViewports is greater than the actual number of viewports currently bound, then unused members of the array will contain 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetviewports">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSGetViewports(uint *NumViewports, [Optional] win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewports)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->RSGetViewports_62(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSGetScissorRects(uint *, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSGetScissorRects(ref uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (uint *NumRectsLocal = &NumRects)
                {
                    this.RSGetScissorRects(NumRectsLocal, pRects);
                }
            }

            /// <summary>Get the array of scissor rectangles bound to the rasterizer stage.</summary>
            /// <param name = "NumRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Number of scissor rectangles to get. If pRects is <b>NULL</b>, this will be filled with the number of scissor rectangles currently bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-rect">D3D10_RECT</a>*</b></para>
            /// <para>An array of scissor rectangles (see <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-rect">D3D10_RECT</a>). If NumRects is greater than the number of scissor rects currently bound, then unused members of the array will contain 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-rsgetscissorrects">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSGetScissorRects(uint *NumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->RSGetScissorRects_63(pThis, NumRects, pRects);
            }

            /// <summary>Get the reason why the device was removed.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Possible return values include:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getdeviceremovedreason">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetDeviceRemovedReason()
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->GetDeviceRemovedReason_64(pThis);
            }

            /// <summary>Get the exception-mode flags.</summary>
            /// <param name = "RaiseFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_raise_flag">D3D10_RAISE_FLAG</a>. A default value of 0 means there are no flags.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setexceptionmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setexceptionmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetExceptionMode(uint RaiseFlags)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->SetExceptionMode_65(pThis, RaiseFlags);
            }

            /// <summary>Get the exception-mode flags.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <a href = "/windows/desktop/api/d3d10/ne-d3d10-d3d10_raise_flag">D3D10_RAISE_FLAG</a>. A default value of 0 means there are no flags.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getexceptionmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetExceptionMode()
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->GetExceptionMode_66(pThis);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            /// <summary>Get data from a device that is associated with a guid.</summary>
            /// <param name = "guid">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
            /// <para>Guid associated with the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Size of the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>void*</b></para>
            /// <para>Pointer to the data stored with the device. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the guid will be destroyed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getprivatedata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->GetPrivateData_67(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            /// <summary>Set data to a device and associate that data with a guid.</summary>
            /// <param name = "guid">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
            /// <para>Guid associated with the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Size of the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>Pointer to the data to be stored with this device. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the guid will be destroyed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setprivatedata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->SetPrivateData_68(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            /// <summary>Associate an IUnknown-derived interface with this device and associate that interface with an application-defined guid.</summary>
            /// <param name = "guid">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
            /// <para>Guid associated with the interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>const IUnknown*</b></para>
            /// <para>Pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>-derived interface to be associated with the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-setprivatedatainterface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_69(pThis, guid, pData);
            }

            /// <summary>Restore all default device settings; return the device to the state it was in when it was created.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-clearstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearState()
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->ClearState_70(pThis);
            }

            /// <summary>Send queued-up commands in the command buffer to the GPU.</summary>
            /// <remarks>
            /// <para>Most applications will not need to call this method. Calling this method when not necessary will incur a performance penalty. Each call to <b>Flush</b> incurs a significant amount of overhead.</para>
            /// <para>When Direct3D state-setting, present, or draw commands are called by an application, those commands are queued into an internal command buffer. <b>Flush</b> sends those commands to the GPU for processing. Normally, these commands are sent to the GPU automatically whenever Direct3D determines that they need to be, such as when the command buffer is full or when mapping a resource. <b>Flush</b> will send the commands manually.</para>
            /// <para><b>Flush</b> should be used when the CPU waits for an arbitrary amount of time (such as when calling <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-sleep">Sleep</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/id3dx10threadpump-waitforallitems">ID3DX10ThreadPump::WaitForAllItems</a>, or <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-waitforvblank">WaitForVBlank</a>.</para>
            /// <para>For more information about how flushing works, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d9/accurately-profiling-direct3d-api-calls">Accurately Profiling Direct3D API Calls (Direct3D 9)</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-flush#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Flush()
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->Flush_71(pThis);
            }

            /// <inheritdoc cref = "CreateBuffer(win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Buffer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBuffer(in win32.Graphics.Direct3D10.D3D10_BUFFER_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Buffer**ppBuffer)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateBuffer(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppBuffer);
                    return __result;
                }
            }

            /// <summary>Create a buffer (vertex buffer, index buffer, or shader-constant buffer).</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_buffer_desc">D3D10_BUFFER_DESC</a>*</b></para>
            /// <para>Pointer to a buffer description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_buffer_desc">D3D10_BUFFER_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>*</b></para>
            /// <para>Pointer to the initialization data (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>); use <b>NULL</b> to allocate space only.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer</a>**</b></para>
            /// <para>Address of a pointer to the buffer created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10buffer">ID3D10Buffer Interface</a>). Set this parameter to <b>NULL</b> to validate the other input parameters (S_FALSE indicates a pass).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBuffer(win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppBuffer)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateBuffer_72(pThis, pDesc, pInitialData, ppBuffer);
            }

            /// <inheritdoc cref = "CreateTexture1D(win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture1D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture1D(in win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Texture1D**ppTexture1D)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture1D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture1D);
                    return __result;
                }
            }

            /// <summary>Create an array of 1D textures (see Texture1D).</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture1d_desc">D3D10_TEXTURE1D_DESC</a>*</b></para>
            /// <para>Pointer to a 1D texture description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture1d_desc">D3D10_TEXTURE1D_DESC</a>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>*</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> descriptions (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>); one for each subresource (ordered by texture array index). Applications may not specify <b>NULL</b> for pInitialData when creating IMMUTABLE resources (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_usage">D3D10_USAGE</a>). If the resource is multisampled, pInitialData must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppTexture1D">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10texture1d">ID3D10Texture1D</a>**</b></para>
            /// <para>Address of a pointer to the created texture (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10texture1d">ID3D10Texture1D Interface</a>). Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture1d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTexture1D(win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, win32.Graphics.Direct3D10.ID3D10Texture1D**ppTexture1D)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateTexture1D_73(pThis, pDesc, pInitialData, ppTexture1D);
            }

            /// <inheritdoc cref = "CreateTexture2D(win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture2D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture2D(in win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Texture2D**ppTexture2D)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture2D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture2D);
                    return __result;
                }
            }

            /// <summary>Create an array of 2D textures (see Texture2D).</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture2d_desc">D3D10_TEXTURE2D_DESC</a>*</b></para>
            /// <para>Pointer to a 2D texture description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture2d_desc">D3D10_TEXTURE2D_DESC</a>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>*</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> descriptions (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>); one for each subresource (ordered by texture array index, then mip level). Applications may not specify <b>NULL</b> for pInitialData when creating IMMUTABLE resources (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_usage">D3D10_USAGE</a>). If the resource is multisampled, pInitialData must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppTexture2D">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10texture2d">ID3D10Texture2D</a>**</b></para>
            /// <para>Address of a pointer to the created texture (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10texture2d">ID3D10Texture2D Interface</a>). Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture2d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTexture2D(win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, win32.Graphics.Direct3D10.ID3D10Texture2D**ppTexture2D)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateTexture2D_74(pThis, pDesc, pInitialData, ppTexture2D);
            }

            /// <inheritdoc cref = "CreateTexture3D(win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture3D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture3D(in win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Texture3D**ppTexture3D)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture3D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture3D);
                    return __result;
                }
            }

            /// <summary>Create a single 3D texture (see Texture3D).</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture3d_desc">D3D10_TEXTURE3D_DESC</a>*</b></para>
            /// <para>Pointer to a 3D texture description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-cd3d10_texture3d_desc">D3D10_TEXTURE3D_DESC</a>). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>*</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> descriptions (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_subresource_data">D3D10_SUBRESOURCE_DATA</a>); one for each subresource (ordered by texture array index, then slice index, then mip level). Applications may not specify <b>NULL</b> for pInitialData when creating IMMUTABLE resources (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_usage">D3D10_USAGE</a>). If the resource is multisampled, pInitialData must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppTexture3D">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10texture3d">ID3D10Texture3D</a>**</b></para>
            /// <para>Address of a pointer to the created texture (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10texture3d">ID3D10Texture3D Interface</a>). Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createtexture3d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTexture3D(win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, win32.Graphics.Direct3D10.ID3D10Texture3D**ppTexture3D)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateTexture3D_75(pThis, pDesc, pInitialData, ppTexture3D);
            }

            /// <inheritdoc cref = "CreateShaderResourceView(win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC? pDesc, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppSRView)
            {
                win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateShaderResourceView(pResource, pDesc.HasValue ? &pDescLocal : null, ppSRView);
                return __result;
            }

            /// <summary>Create a shader-resource view for accessing data in a resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>Pointer to the <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource</a> that will serve as input to a shader. This resource must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_SHADER_RESOURCE</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_shader_resource_view_desc">D3D10_SHADER_RESOURCE_VIEW_DESC</a>*</b></para>
            /// <para>Pointer to a shader-resource-view description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_shader_resource_view_desc">D3D10_SHADER_RESOURCE_VIEW_DESC</a>). Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSRView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10shaderresourceview">ID3D10ShaderResourceView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createshaderresourceview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, [Optional] win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppSRView)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateShaderResourceView_76(pThis, pResource, pDesc, ppSRView);
            }

            /// <inheritdoc cref = "CreateRenderTargetView(win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10RenderTargetView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRenderTargetView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC? pDesc, win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRTView)
            {
                win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateRenderTargetView(pResource, pDesc.HasValue ? &pDescLocal : null, ppRTView);
                return __result;
            }

            /// <summary>Create a render-target view for accessing resource data.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>Pointer to the <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource</a> that will serve as the render target. This resource must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_RENDER_TARGET</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_render_target_view_desc">D3D10_RENDER_TARGET_VIEW_DESC</a>*</b></para>
            /// <para>Pointer to a render-target-view description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_render_target_view_desc">D3D10_RENDER_TARGET_VIEW_DESC</a>). Set this parameter to <b>NULL</b> to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRTView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rendertargetview">ID3D10RenderTargetView</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rendertargetview">ID3D10RenderTargetView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createrendertargetview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateRenderTargetView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, [Optional] win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRTView)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateRenderTargetView_77(pThis, pResource, pDesc, ppRTView);
            }

            /// <inheritdoc cref = "CreateDepthStencilView(win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC? pDesc, win32.Graphics.Direct3D10.ID3D10DepthStencilView**ppDepthStencilView)
            {
                win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateDepthStencilView(pResource, pDesc.HasValue ? &pDescLocal : null, ppDepthStencilView);
                return __result;
            }

            /// <summary>Create a depth-stencil view for accessing resource data.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>Pointer to the <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource</a> that will serve as the depth-stencil surface. This resource must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_DEPTH_STENCIL</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_depth_stencil_view_desc">D3D10_DEPTH_STENCIL_VIEW_DESC</a>*</b></para>
            /// <para>Pointer to a depth-stencil-view description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_depth_stencil_view_desc">D3D10_DEPTH_STENCIL_VIEW_DESC</a>). Set this parameter to <b>NULL</b> to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilview">ID3D10DepthStencilView</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilview">ID3D10DepthStencilView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createdepthstencilview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, [Optional] win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilView**ppDepthStencilView)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateDepthStencilView_78(pThis, pResource, pDesc, ppDepthStencilView);
            }

            /// <inheritdoc cref = "CreateInputLayout(win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*, uint, void *, nuint, win32.Graphics.Direct3D10.ID3D10InputLayout**)"/>
            internal unsafe win32.System.Com.HRESULT CreateInputLayout(ReadOnlySpan<win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC> pInputElementDescs, void *pShaderBytecodeWithInputSignature, nuint BytecodeLength, win32.Graphics.Direct3D10.ID3D10InputLayout**ppInputLayout)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*pInputElementDescsLocal = pInputElementDescs)
                {
                    win32.System.Com.HRESULT __result = this.CreateInputLayout(pInputElementDescsLocal, (uint)pInputElementDescs.Length, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
                    return __result;
                }
            }

            /// <summary>Create an input-layout object to describe the input-buffer data for the input-assembler stage.</summary>
            /// <param name = "pInputElementDescs">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_input_element_desc">D3D10_INPUT_ELEMENT_DESC</a>*</b></para>
            /// <para>An array of the input-assembler stage input data types; each type is described by an element description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_input_element_desc">D3D10_INPUT_ELEMENT_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumElements">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of input-data types in the array of input-elements.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pShaderBytecodeWithInputSignature">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader. To get this pointer see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>. The compiled shader code contains a <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-signatures">input signature</a> which is validated against the array of elements. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppInputLayout">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10inputlayout">ID3D10InputLayout</a>**</b></para>
            /// <para>A pointer to the input-layout object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10inputlayout">ID3D10InputLayout Interface</a>). To validate the other input parameters, set this pointer to be <b>NULL</b> and verify that the method returns S_FALSE.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createinputlayout">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateInputLayout(win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*pInputElementDescs, uint NumElements, void *pShaderBytecodeWithInputSignature, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10InputLayout**ppInputLayout)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateInputLayout_79(pThis, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
            }

            /// <summary>Create a vertex-shader object from a compiled shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader. To get this pointer see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled vertex shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppVertexShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10vertexshader">ID3D10VertexShader</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10vertexshader">ID3D10VertexShader Interface</a>. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createvertexshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateVertexShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10VertexShader**ppVertexShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateVertexShader_80(pThis, pShaderBytecode, BytecodeLength, ppVertexShader);
            }

            /// <summary>Create a geometry shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader. To get this pointer see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled geometry shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppGeometryShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader Interface</a>.  If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGeometryShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateGeometryShader_81(pThis, pShaderBytecode, BytecodeLength, ppGeometryShader);
            }

            /// <inheritdoc cref = "CreateGeometryShaderWithStreamOutput(void *, nuint, win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*, uint, uint, win32.Graphics.Direct3D10.ID3D10GeometryShader**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGeometryShaderWithStreamOutput(void *pShaderBytecode, nuint BytecodeLength, ReadOnlySpan<win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY> pSODeclaration, uint OutputStreamStride, win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*pSODeclarationLocal = pSODeclaration)
                {
                    win32.System.Com.HRESULT __result = this.CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclarationLocal, (uint)pSODeclaration.Length, OutputStreamStride, ppGeometryShader);
                    return __result;
                }
            }

            /// <summary>Creates a geometry shader that can write to streaming output buffers.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled geometry shader for a standard geometry shader plus stream output. For info on how to get this pointer, see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</para>
            /// <para>To create the stream output without using a geometry shader, pass a pointer to the output signature for the prior stage. To obtain this output signature, call the <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3dgetoutputsignatureblob">D3DGetOutputSignatureBlob</a> compiler function. You can also pass a pointer to the compiled <a href = "https://docs.microsoft.com/previous-versions/bb205146(v=vs.85)">vertex shader</a> that is used in the prior stage. This compiled shader provides the output signature for the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled geometry shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSODeclaration">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_so_declaration_entry">D3D10_SO_DECLARATION_ENTRY</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_so_declaration_entry">D3D10_SO_DECLARATION_ENTRY</a> array. Cannot be <b>NULL</b> if <i>NumEntries</i>&gt; 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumEntries">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of entries in the array pointed to by <i>pSODeclaration</i>. Minimum 0, maximum 64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "OutputStreamStride">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The size, in bytes, of each element in the array pointed to by <i>pSODeclaration</i>. This parameter is only used when the output slot is 0 for all entries in <i>pSODeclaration</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppGeometryShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10geometryshader">ID3D10GeometryShader Interface</a>. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-creategeometryshaderwithstreamoutput">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGeometryShaderWithStreamOutput(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*pSODeclaration, uint NumEntries, uint OutputStreamStride, [Optional] win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateGeometryShaderWithStreamOutput_82(pThis, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, OutputStreamStride, ppGeometryShader);
            }

            /// <summary>Create a pixel shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader. To get this pointer see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled pixel shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPixelShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10pixelshader">ID3D10PixelShader</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10pixelshader">ID3D10PixelShader Interface</a>. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createpixelshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePixelShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10PixelShader**ppPixelShader)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreatePixelShader_83(pThis, pShaderBytecode, BytecodeLength, ppPixelShader);
            }

            /// <inheritdoc cref = "CreateBlendState(win32.Graphics.Direct3D10.D3D10_BLEND_DESC*, win32.Graphics.Direct3D10.ID3D10BlendState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBlendState(in win32.Graphics.Direct3D10.D3D10_BLEND_DESC pBlendStateDesc, win32.Graphics.Direct3D10.ID3D10BlendState**ppBlendState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_BLEND_DESC*pBlendStateDescLocal = &pBlendStateDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateBlendState(pBlendStateDescLocal, ppBlendState);
                    return __result;
                }
            }

            /// <summary>Create a blend-state object that encapsules blend state for the output-merger stage.</summary>
            /// <param name = "pBlendStateDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_blend_desc">D3D10_BLEND_DESC</a>*</b></para>
            /// <para>Pointer to a blend-state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_blend_desc">D3D10_BLEND_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppBlendState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10blendstate">ID3D10BlendState</a>**</b></para>
            /// <para>Address of a pointer to the blend-state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10blendstate">ID3D10BlendState Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createblendstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBlendState(win32.Graphics.Direct3D10.D3D10_BLEND_DESC*pBlendStateDesc, [Optional] win32.Graphics.Direct3D10.ID3D10BlendState**ppBlendState)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateBlendState_84(pThis, pBlendStateDesc, ppBlendState);
            }

            /// <inheritdoc cref = "CreateDepthStencilState(win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilState(in win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc, win32.Graphics.Direct3D10.ID3D10DepthStencilState**ppDepthStencilState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*pDepthStencilDescLocal = &pDepthStencilDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateDepthStencilState(pDepthStencilDescLocal, ppDepthStencilState);
                    return __result;
                }
            }

            /// <summary>Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.</summary>
            /// <param name = "pDepthStencilDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_depth_stencil_desc">D3D10_DEPTH_STENCIL_DESC</a>*</b></para>
            /// <para>Pointer to a depth-stencil state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_depth_stencil_desc">D3D10_DEPTH_STENCIL_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDepthStencilState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilstate">ID3D10DepthStencilState</a>**</b></para>
            /// <para>Address of a pointer to the depth-stencil state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10depthstencilstate">ID3D10DepthStencilState Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createdepthstencilstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilState(win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*pDepthStencilDesc, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilState**ppDepthStencilState)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateDepthStencilState_85(pThis, pDepthStencilDesc, ppDepthStencilState);
            }

            /// <inheritdoc cref = "CreateRasterizerState(win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*, win32.Graphics.Direct3D10.ID3D10RasterizerState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRasterizerState(in win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC pRasterizerDesc, win32.Graphics.Direct3D10.ID3D10RasterizerState**ppRasterizerState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*pRasterizerDescLocal = &pRasterizerDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateRasterizerState(pRasterizerDescLocal, ppRasterizerState);
                    return __result;
                }
            }

            /// <summary>Create a rasterizer state object that tells the rasterizer stage how to behave.</summary>
            /// <param name = "pRasterizerDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_rasterizer_desc">D3D10_RASTERIZER_DESC</a>*</b></para>
            /// <para>Pointer to a rasterizer state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_rasterizer_desc">D3D10_RASTERIZER_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createrasterizerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRasterizerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rasterizerstate">ID3D10RasterizerState</a>**</b></para>
            /// <para>Address of a pointer to the rasterizer state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10rasterizerstate">ID3D10RasterizerState Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createrasterizerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createrasterizerstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateRasterizerState(win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*pRasterizerDesc, [Optional] win32.Graphics.Direct3D10.ID3D10RasterizerState**ppRasterizerState)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateRasterizerState_86(pThis, pRasterizerDesc, ppRasterizerState);
            }

            /// <inheritdoc cref = "CreateSamplerState(win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*, win32.Graphics.Direct3D10.ID3D10SamplerState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSamplerState(in win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC pSamplerDesc, win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplerState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*pSamplerDescLocal = &pSamplerDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSamplerState(pSamplerDescLocal, ppSamplerState);
                    return __result;
                }
            }

            /// <summary>Create a sampler-state object that encapsulates sampling information for a texture.</summary>
            /// <param name = "pSamplerDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_sampler_desc">D3D10_SAMPLER_DESC</a>*</b></para>
            /// <para>Pointer to a sampler state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_sampler_desc">D3D10_SAMPLER_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createsamplerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState</a>**</b></para>
            /// <para>Address of a pointer to the sampler state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10samplerstate">ID3D10SamplerState Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createsamplerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createsamplerstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSamplerState(win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*pSamplerDesc, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplerState)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateSamplerState_87(pThis, pSamplerDesc, ppSamplerState);
            }

            /// <inheritdoc cref = "CreateQuery(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Query**)"/>
            internal unsafe win32.System.Com.HRESULT CreateQuery(in win32.Graphics.Direct3D10.D3D10_QUERY_DESC pQueryDesc, win32.Graphics.Direct3D10.ID3D10Query**ppQuery)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pQueryDescLocal = &pQueryDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateQuery(pQueryDescLocal, ppQuery);
                    return __result;
                }
            }

            /// <summary>This interface encapsulates methods for querying information from the GPU.</summary>
            /// <param name = "pQueryDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_query_desc">D3D10_QUERY_DESC</a>*</b></para>
            /// <para>Pointer to a query description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_query_desc">D3D10_QUERY_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppQuery">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10query">ID3D10Query</a>**</b></para>
            /// <para>Address of a pointer to the query object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10query">ID3D10Query Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createquery">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateQuery(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pQueryDesc, [Optional] win32.Graphics.Direct3D10.ID3D10Query**ppQuery)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateQuery_88(pThis, pQueryDesc, ppQuery);
            }

            /// <inheritdoc cref = "CreatePredicate(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Predicate**)"/>
            internal unsafe win32.System.Com.HRESULT CreatePredicate(in win32.Graphics.Direct3D10.D3D10_QUERY_DESC pPredicateDesc, win32.Graphics.Direct3D10.ID3D10Predicate**ppPredicate)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pPredicateDescLocal = &pPredicateDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreatePredicate(pPredicateDescLocal, ppPredicate);
                    return __result;
                }
            }

            /// <summary>Creates a predicate.</summary>
            /// <param name = "pPredicateDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_query_desc">D3D10_QUERY_DESC</a>*</b></para>
            /// <para>Pointer to a query description where the type of query must be a D3D10_QUERY_SO_OVERFLOW_PREDICATE or D3D10_QUERY_OCCLUSION_PREDICATE (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_query_desc">D3D10_QUERY_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createpredicate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPredicate">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10predicate">ID3D10Predicate</a>**</b></para>
            /// <para>Address of a pointer to a predicate (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10predicate">ID3D10Predicate Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createpredicate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createpredicate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePredicate(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pPredicateDesc, [Optional] win32.Graphics.Direct3D10.ID3D10Predicate**ppPredicate)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreatePredicate_89(pThis, pPredicateDesc, ppPredicate);
            }

            /// <inheritdoc cref = "CreateCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.ID3D10Counter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateCounter(in win32.Graphics.Direct3D10.D3D10_COUNTER_DESC pCounterDesc, win32.Graphics.Direct3D10.ID3D10Counter**ppCounter)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pCounterDescLocal = &pCounterDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateCounter(pCounterDescLocal, ppCounter);
                    return __result;
                }
            }

            /// <summary>Create a counter object for measuring GPU performance.</summary>
            /// <param name = "pCounterDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_counter_desc">D3D10_COUNTER_DESC</a>*</b></para>
            /// <para>Pointer to a counter description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_counter_desc">D3D10_COUNTER_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppCounter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10counter">ID3D10Counter</a>**</b></para>
            /// <para>Address of a pointer to a counter (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10counter">ID3D10Counter Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this function succeeds, it will return S_OK. If it fails, possible return values are: S_FALSE, E_OUTOFMEMORY, DXGI_ERROR_UNSUPPORTED, DXGI_ERROR_NONEXCLUSIVE, or E_INVALIDARG.</para>
            /// <para>DXGI_ERROR_UNSUPPORTED is returned whenever the application requests to create a well-known counter, but the current device does not support it.</para>
            /// <para>DXGI_ERROR_NONEXCLUSIVE indicates that another device object is currently using the counters, so they cannot be used by this device at the moment.</para>
            /// <para>E_INVALIDARG is returned whenever an out-of-range well-known or device-dependent counter is requested, or when the simulataneously active counters have been exhausted.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-createcounter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pCounterDesc, [Optional] win32.Graphics.Direct3D10.ID3D10Counter**ppCounter)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CreateCounter_90(pThis, pCounterDesc, ppCounter);
            }

            /// <inheritdoc cref = "CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, out uint pFormatSupport)
            {
                fixed (uint *pFormatSupportLocal = &pFormatSupport)
                {
                    win32.System.Com.HRESULT __result = this.CheckFormatSupport(Format, pFormatSupportLocal);
                    return __result;
                }
            }

            /// <summary>Get the support of a given format on the installed video device.</summary>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumeration that describes a format for which to check for support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkformatsupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFormatSupport">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A bitfield of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_format_support">D3D10_FORMAT_SUPPORT</a> enumeration values describing how the specified format is supported on the installed device. The values are ORed together.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkformatsupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns E_INVALIDARG if the <i>Format</i> parameter is <b>NULL</b>, or returns E_FAIL if the described format does not exist.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkformatsupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint *pFormatSupport)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CheckFormatSupport_91(pThis, Format, pFormatSupport);
            }

            /// <inheritdoc cref = "CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SampleCount, out uint pNumQualityLevels)
            {
                fixed (uint *pNumQualityLevelsLocal = &pNumQualityLevels)
                {
                    win32.System.Com.HRESULT __result = this.CheckMultisampleQualityLevels(Format, SampleCount, pNumQualityLevelsLocal);
                    return __result;
                }
            }

            /// <summary>Get the number of quality levels available during multisampling.</summary>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>The texture format. See <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SampleCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of samples during multisampling.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumQualityLevels">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Number of quality levels supported by the adapter. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkmultisamplequalitylevels">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SampleCount, uint *pNumQualityLevels)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CheckMultisampleQualityLevels_92(pThis, Format, SampleCount, pNumQualityLevels);
            }

            /// <inheritdoc cref = "CheckCounterInfo(win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*)"/>
            internal unsafe void CheckCounterInfo(out win32.Graphics.Direct3D10.D3D10_COUNTER_INFO pCounterInfo)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*pCounterInfoLocal = &pCounterInfo)
                {
                    this.CheckCounterInfo(pCounterInfoLocal);
                }
            }

            /// <summary>Get a counter's information.</summary>
            /// <param name = "pCounterInfo">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_counter_info">D3D10_COUNTER_INFO</a>*</b></para>
            /// <para>Pointer to counter information (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_counter_info">D3D10_COUNTER_INFO</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounterinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounterinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CheckCounterInfo(win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*pCounterInfo)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->CheckCounterInfo_93(pThis, pCounterInfo);
            }

            /// <inheritdoc cref = "CheckCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckCounter(in win32.Graphics.Direct3D10.D3D10_COUNTER_DESC pDesc, out win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE pType, out uint pActiveCounters, win32.System.SystemServices.PSTR szName, uint *pNameLength, win32.System.SystemServices.PSTR szUnits, uint *pUnitsLength, win32.System.SystemServices.PSTR szDescription, uint *pDescriptionLength)
            {
                fixed (uint *pActiveCountersLocal = &pActiveCounters)
                {
                    fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*pTypeLocal = &pType)
                    {
                        fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CheckCounter(pDescLocal, pTypeLocal, pActiveCountersLocal, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Get the type, name, units of measure, and a description of an existing counter.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_counter_desc">D3D10_COUNTER_DESC</a>*</b></para>
            /// <para>Pointer to a counter description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ns-d3d10-d3d10_counter_desc">D3D10_COUNTER_DESC</a>). Specifies which counter information is to be retrieved about.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_counter_type">D3D10_COUNTER_TYPE</a>*</b></para>
            /// <para>Pointer to the data type of a counter (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_counter_type">D3D10_COUNTER_TYPE</a>). Specifies the data type of the counter being retrieved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pActiveCounters">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "szName">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b></para>
            /// <para>String to be filled with a brief name for the counter. May be <b>NULL</b> if the application is not interested in the name of the counter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNameLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Length of the string returned to szName. Can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "szUnits">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b></para>
            /// <para>Name of the units a counter measures, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pUnitsLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Length of the string returned to szUnits. Can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "szDescription">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b></para>
            /// <para>A description of the counter, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDescriptionLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Length of the string returned to szDescription. Can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-checkcounter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pDesc, win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*pType, uint *pActiveCounters, win32.System.SystemServices.PSTR szName, [Optional] uint *pNameLength, win32.System.SystemServices.PSTR szUnits, [Optional] uint *pUnitsLength, win32.System.SystemServices.PSTR szDescription, [Optional] uint *pDescriptionLength)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->CheckCounter_94(pThis, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }

            /// <summary>Get the flags used during the call to create the device with D3D10CreateDevice.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A bitfield containing the flags used to create the device. See <a href = "/windows/desktop/api/d3d10/ne-d3d10-d3d10_create_device_flag">D3D10_CREATE_DEVICE_FLAG</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-getcreationflags">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetCreationFlags()
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->GetCreationFlags_95(pThis);
            }

            /// <inheritdoc cref = "OpenSharedResource(win32.System.SystemServices.HANDLE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT OpenSharedResource(SafeHandle hResource, in global::System.Guid ReturnedInterface, void **ppResource)
            {
                bool hResourceAddRef = false;
                try
                {
                    fixed (global::System.Guid*ReturnedInterfaceLocal = &ReturnedInterface)
                    {
                        win32.System.SystemServices.HANDLE hResourceLocal;
                        if (hResource is object)
                        {
                            hResource.DangerousAddRef(ref hResourceAddRef);
                            hResourceLocal = (win32.System.SystemServices.HANDLE)hResource.DangerousGetHandle();
                        }
                        else
                            hResourceLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.OpenSharedResource(hResourceLocal, ReturnedInterfaceLocal, ppResource);
                        return __result;
                    }
                }
                finally
                {
                    if (hResourceAddRef)
                        hResource.DangerousRelease();
                }
            }

            /// <summary>Give a device access to a shared resource created on a different Direct3d device.</summary>
            /// <param name = "hResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HANDLE</a></b></para>
            /// <para>A resource handle. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ReturnedInterface">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (GUID) for the resource interface. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppResource">
            /// <para>Type: <b>void**</b></para>
            /// <para>Address of a pointer to the resource we are gaining access to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-opensharedresource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT OpenSharedResource(win32.System.SystemServices.HANDLE hResource, global::System.Guid*ReturnedInterface, [Optional] void **ppResource)
            {
                fixed (ID3D10Device*pThis = &this)
                    return lpVtbl->OpenSharedResource_96(pThis, hResource, ReturnedInterface, ppResource);
            }

            /// <summary>This method is not implemented.</summary>
            /// <param name = "Width">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Not applicable</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-settextfiltersize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Height">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Not applicable</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-settextfiltersize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method is not implemented, and should not be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-settextfiltersize#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetTextFilterSize(uint Width, uint Height)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->SetTextFilterSize_97(pThis, Width, Height);
            }

            /// <summary>This method is not implemented.</summary>
            /// <param name = "pWidth">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Not applicable</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gettextfiltersize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pHeight">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Not applicable</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gettextfiltersize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method is not implemented, and should not be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10device-gettextfiltersize#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetTextFilterSize([Optional] uint *pWidth, [Optional] uint *pHeight)
            {
                fixed (ID3D10Device*pThis = &this)
                    lpVtbl->GetTextFilterSize_98(pThis, pWidth, pHeight);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>VSSetConstantBuffers_4;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>PSSetShaderResources_5;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10PixelShader*, void>PSSetShader_6;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>PSSetSamplers_7;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10VertexShader*, void>VSSetShader_8;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, int, void>DrawIndexed_9;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, void>Draw_10;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>PSSetConstantBuffers_11;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10InputLayout*, void>IASetInputLayout_12;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *, void>IASetVertexBuffers_13;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Buffer*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, void>IASetIndexBuffer_14;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, uint, int, uint, void>DrawIndexedInstanced_15;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, uint, uint, void>DrawInstanced_16;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>GSSetConstantBuffers_17;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10GeometryShader*, void>GSSetShader_18;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY, void>IASetPrimitiveTopology_19;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>VSSetShaderResources_20;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>VSSetSamplers_21;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Predicate*, win32.System.SystemServices.BOOL, void>SetPredication_22;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>GSSetShaderResources_23;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>GSSetSamplers_24;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, win32.Graphics.Direct3D10.ID3D10RenderTargetView**, win32.Graphics.Direct3D10.ID3D10DepthStencilView*, void>OMSetRenderTargets_25;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10BlendState*, float *, uint, void>OMSetBlendState_26;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10DepthStencilState*, uint, void>OMSetDepthStencilState_27;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, void>SOSetTargets_28;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, void>DrawAuto_29;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10RasterizerState*, void>RSSetState_30;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, win32.Graphics.Direct3D10.D3D10_VIEWPORT*, void>RSSetViewports_31;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, win32.UI.DisplayDevices.RECT*, void>RSSetScissorRects_32;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*, void>CopySubresourceRegion_33;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.ID3D10Resource*, void>CopyResource_34;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*, void *, uint, uint, void>UpdateSubresource_35;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10RenderTargetView*, float *, void>ClearRenderTargetView_36;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10DepthStencilView*, uint, float, byte, void>ClearDepthStencilView_37;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView*, void>GenerateMips_38;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Dxgi.DXGI_FORMAT, void>ResolveSubresource_39;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>VSGetConstantBuffers_40;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>PSGetShaderResources_41;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10PixelShader**, void>PSGetShader_42;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>PSGetSamplers_43;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10VertexShader**, void>VSGetShader_44;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>PSGetConstantBuffers_45;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10InputLayout**, void>IAGetInputLayout_46;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *, void>IAGetVertexBuffers_47;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Buffer**, win32.Graphics.Dxgi.DXGI_FORMAT*, uint *, void>IAGetIndexBuffer_48;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>GSGetConstantBuffers_49;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10GeometryShader**, void>GSGetShader_50;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*, void>IAGetPrimitiveTopology_51;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>VSGetShaderResources_52;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>VSGetSamplers_53;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Predicate**, win32.System.SystemServices.BOOL*, void>GetPredication_54;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>GSGetShaderResources_55;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>GSGetSamplers_56;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, win32.Graphics.Direct3D10.ID3D10RenderTargetView**, win32.Graphics.Direct3D10.ID3D10DepthStencilView**, void>OMGetRenderTargets_57;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10BlendState**, float *, uint *, void>OMGetBlendState_58;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10DepthStencilState**, uint *, void>OMGetDepthStencilState_59;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, void>SOGetTargets_60;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10RasterizerState**, void>RSGetState_61;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint *, win32.Graphics.Direct3D10.D3D10_VIEWPORT*, void>RSGetViewports_62;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint *, win32.UI.DisplayDevices.RECT*, void>RSGetScissorRects_63;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.System.Com.HRESULT>GetDeviceRemovedReason_64;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, win32.System.Com.HRESULT>SetExceptionMode_65;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint>GetExceptionMode_66;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_67;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_68;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_69;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, void>ClearState_70;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, void>Flush_71;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Buffer**, win32.System.Com.HRESULT>CreateBuffer_72;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture1D**, win32.System.Com.HRESULT>CreateTexture1D_73;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture2D**, win32.System.Com.HRESULT>CreateTexture2D_74;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture3D**, win32.System.Com.HRESULT>CreateTexture3D_75;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, win32.System.Com.HRESULT>CreateShaderResourceView_76;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10RenderTargetView**, win32.System.Com.HRESULT>CreateRenderTargetView_77;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilView**, win32.System.Com.HRESULT>CreateDepthStencilView_78;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*, uint, void *, nuint, win32.Graphics.Direct3D10.ID3D10InputLayout**, win32.System.Com.HRESULT>CreateInputLayout_79;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, void *, nuint, win32.Graphics.Direct3D10.ID3D10VertexShader**, win32.System.Com.HRESULT>CreateVertexShader_80;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, void *, nuint, win32.Graphics.Direct3D10.ID3D10GeometryShader**, win32.System.Com.HRESULT>CreateGeometryShader_81;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, void *, nuint, win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*, uint, uint, win32.Graphics.Direct3D10.ID3D10GeometryShader**, win32.System.Com.HRESULT>CreateGeometryShaderWithStreamOutput_82;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, void *, nuint, win32.Graphics.Direct3D10.ID3D10PixelShader**, win32.System.Com.HRESULT>CreatePixelShader_83;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_BLEND_DESC*, win32.Graphics.Direct3D10.ID3D10BlendState**, win32.System.Com.HRESULT>CreateBlendState_84;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilState**, win32.System.Com.HRESULT>CreateDepthStencilState_85;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*, win32.Graphics.Direct3D10.ID3D10RasterizerState**, win32.System.Com.HRESULT>CreateRasterizerState_86;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*, win32.Graphics.Direct3D10.ID3D10SamplerState**, win32.System.Com.HRESULT>CreateSamplerState_87;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Query**, win32.System.Com.HRESULT>CreateQuery_88;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Predicate**, win32.System.Com.HRESULT>CreatePredicate_89;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.ID3D10Counter**, win32.System.Com.HRESULT>CreateCounter_90;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Dxgi.DXGI_FORMAT, uint *, win32.System.Com.HRESULT>CheckFormatSupport_91;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.System.Com.HRESULT>CheckMultisampleQualityLevels_92;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*, void>CheckCounterInfo_93;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.Com.HRESULT>CheckCounter_94;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint>GetCreationFlags_95;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, win32.System.SystemServices.HANDLE, global::System.Guid*, void **, win32.System.Com.HRESULT>OpenSharedResource_96;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint, uint, void>SetTextFilterSize_97;
                internal delegate *unmanaged[Stdcall]<ID3D10Device*, uint *, uint *, void>GetTextFilterSize_98;
            }

            private Vtbl*lpVtbl;
        }
    }
}