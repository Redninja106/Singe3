// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D10
    {
        [Guid("51B0CA8B-EC0B-4519-870D-8EE1CB5017C7")]
        internal unsafe struct ID3D10Effect
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Test an effect to see if it contains valid syntax.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para><b>TRUE</b> if the code syntax is valid; otherwise <b>FALSE</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-isvalid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsValid()
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->IsValid_4(pThis);
            }

            /// <summary>Test an effect to see if it is part of a memory pool.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para><b>TRUE</b> if the effect is pooled; otherwise <b>FALSE</b>. See <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectpool">ID3D10EffectPool Interface</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-ispool">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsPool()
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->IsPool_5(pThis);
            }

            /// <summary>Get the device that created the effect.</summary>
            /// <param name = "ppDevice">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10device">ID3D10Device</a>**</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10device">ID3D10Device Interface</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getdevice">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDevice(win32.Graphics.Direct3D10.ID3D10Device**ppDevice)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetDevice_6(pThis, ppDevice);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Direct3D10.D3D10_EFFECT_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Direct3D10.D3D10_EFFECT_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_EFFECT_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            /// <summary>Get an effect description.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10effect/ns-d3d10effect-d3d10_effect_desc">D3D10_EFFECT_DESC</a>*</b></para>
            /// <para>A pointer to an effect description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10effect/ns-d3d10effect-d3d10_effect_desc">D3D10_EFFECT_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Direct3D10.D3D10_EFFECT_DESC*pDesc)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetDesc_7(pThis, pDesc);
            }

            /// <summary>Get a constant buffer by index.</summary>
            /// <param name = "Index">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getconstantbufferbyindex#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectconstantbuffer">ID3D10EffectConstantBuffer</a>*</b></para>
            /// <para>A pointer to a <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectconstantbuffer">ID3D10EffectConstantBuffer Interface</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getconstantbufferbyindex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D10.ID3D10EffectConstantBuffer*GetConstantBufferByIndex(uint Index)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetConstantBufferByIndex_8(pThis, Index);
            }

            /// <summary>Get a constant buffer by name.</summary>
            /// <param name = "Name">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The constant-buffer name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getconstantbufferbyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectconstantbuffer">ID3D10EffectConstantBuffer</a>*</b></para>
            /// <para>A pointer to the constant buffer indicated by the Name. See <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectconstantbuffer">ID3D10EffectConstantBuffer</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getconstantbufferbyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D10.ID3D10EffectConstantBuffer*GetConstantBufferByName(win32.System.SystemServices.PCSTR Name)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetConstantBufferByName_9(pThis, Name);
            }

            /// <summary>Get a variable by index.</summary>
            /// <param name = "Index">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getvariablebyindex#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectvariable">ID3D10EffectVariable</a>*</b></para>
            /// <para>A pointer to a <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectvariable">ID3D10EffectVariable Interface</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getvariablebyindex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D10.ID3D10EffectVariable*GetVariableByIndex(uint Index)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetVariableByIndex_10(pThis, Index);
            }

            /// <summary>Get a variable by name.</summary>
            /// <param name = "Name">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The variable name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getvariablebyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectvariable">ID3D10EffectVariable</a>*</b></para>
            /// <para>A pointer to an <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectvariable">ID3D10EffectVariable Interface</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getvariablebyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D10.ID3D10EffectVariable*GetVariableByName(win32.System.SystemServices.PCSTR Name)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetVariableByName_11(pThis, Name);
            }

            /// <summary>Get a variable by semantic.</summary>
            /// <param name = "Semantic">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The semantic name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getvariablebysemantic#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectvariable">ID3D10EffectVariable</a>*</b></para>
            /// <para>A pointer to the effect variable indicated by the Semantic. See <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effectvariable">ID3D10EffectVariable Interface</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-getvariablebysemantic">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D10.ID3D10EffectVariable*GetVariableBySemantic(win32.System.SystemServices.PCSTR Semantic)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetVariableBySemantic_12(pThis, Semantic);
            }

            /// <summary>Get a technique by index.</summary>
            /// <param name = "Index">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-gettechniquebyindex#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effecttechnique">ID3D10EffectTechnique</a>*</b></para>
            /// <para>A pointer to an <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effecttechnique">ID3D10EffectTechnique Interface</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-gettechniquebyindex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D10.ID3D10EffectTechnique*GetTechniqueByIndex(uint Index)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetTechniqueByIndex_13(pThis, Index);
            }

            /// <summary>Get a technique by name.</summary>
            /// <param name = "Name">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The name of the technique.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-gettechniquebyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effecttechnique">ID3D10EffectTechnique</a>*</b></para>
            /// <para>A pointer to an <a href = "/windows/desktop/api/d3d10effect/nn-d3d10effect-id3d10effecttechnique">ID3D10EffectTechnique Interface</a>, or <b>NULL</b> if the technique is not found.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-gettechniquebyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D10.ID3D10EffectTechnique*GetTechniqueByName(win32.System.SystemServices.PCSTR Name)
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->GetTechniqueByName_14(pThis, Name);
            }

            /// <summary>Minimize the amount of memory required for an effect.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-optimize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Optimize()
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->Optimize_15(pThis);
            }

            /// <summary>Test an effect to see if the reflection metadata has been removed from memory.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para><b>TRUE</b> if the effect is optimized; otherwise <b>FALSE</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10effect/nf-d3d10effect-id3d10effect-isoptimized">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsOptimized()
            {
                fixed (ID3D10Effect*pThis = &this)
                    return lpVtbl->IsOptimized_16(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.SystemServices.BOOL>IsValid_4;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.SystemServices.BOOL>IsPool_5;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.Graphics.Direct3D10.ID3D10Device**, win32.System.Com.HRESULT>GetDevice_6;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.Graphics.Direct3D10.D3D10_EFFECT_DESC*, win32.System.Com.HRESULT>GetDesc_7;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, uint, win32.Graphics.Direct3D10.ID3D10EffectConstantBuffer*>GetConstantBufferByIndex_8;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D10.ID3D10EffectConstantBuffer*>GetConstantBufferByName_9;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, uint, win32.Graphics.Direct3D10.ID3D10EffectVariable*>GetVariableByIndex_10;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D10.ID3D10EffectVariable*>GetVariableByName_11;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D10.ID3D10EffectVariable*>GetVariableBySemantic_12;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, uint, win32.Graphics.Direct3D10.ID3D10EffectTechnique*>GetTechniqueByIndex_13;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D10.ID3D10EffectTechnique*>GetTechniqueByName_14;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.Com.HRESULT>Optimize_15;
                internal delegate *unmanaged[Stdcall]<ID3D10Effect*, win32.System.SystemServices.BOOL>IsOptimized_16;
            }

            private Vtbl*lpVtbl;
        }
    }
}