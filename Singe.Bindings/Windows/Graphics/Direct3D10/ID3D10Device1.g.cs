// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D10
    {
        [Guid("9B7E4C8F-342C-4106-A19F-4F2704F689F0")]
        internal unsafe struct ID3D10Device1
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSSetConstantBuffers_4(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void PSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSSetShaderResources_5(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void PSSetShader([Optional] win32.Graphics.Direct3D10.ID3D10PixelShader*pPixelShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSSetShader_6(pThis, pPixelShader);
            }

            internal unsafe void PSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSSetSamplers_7(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void VSSetShader([Optional] win32.Graphics.Direct3D10.ID3D10VertexShader*pVertexShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSSetShader_8(pThis, pVertexShader);
            }

            internal void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->DrawIndexed_9(pThis, IndexCount, StartIndexLocation, BaseVertexLocation);
            }

            internal void Draw(uint VertexCount, uint StartVertexLocation)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->Draw_10(pThis, VertexCount, StartVertexLocation);
            }

            internal unsafe void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSSetConstantBuffers_11(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void IASetInputLayout([Optional] win32.Graphics.Direct3D10.ID3D10InputLayout*pInputLayout)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IASetInputLayout_12(pThis, pInputLayout);
            }

            /// <inheritdoc cref = "IASetVertexBuffers(uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *)"/>
            internal unsafe void IASetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, ReadOnlySpan<uint> pStrides, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IASetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            internal unsafe void IASetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IASetVertexBuffers_13(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            internal unsafe void IASetIndexBuffer([Optional] win32.Graphics.Direct3D10.ID3D10Buffer*pIndexBuffer, win32.Graphics.Dxgi.DXGI_FORMAT Format, uint Offset)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IASetIndexBuffer_14(pThis, pIndexBuffer, Format, Offset);
            }

            internal void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->DrawIndexedInstanced_15(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }

            internal void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->DrawInstanced_16(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }

            internal unsafe void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSSetConstantBuffers_17(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void GSSetShader([Optional] win32.Graphics.Direct3D10.ID3D10GeometryShader*pShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSSetShader_18(pThis, pShader);
            }

            internal void IASetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY Topology)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IASetPrimitiveTopology_19(pThis, Topology);
            }

            internal unsafe void VSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSSetShaderResources_20(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void VSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSSetSamplers_21(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void SetPredication([Optional] win32.Graphics.Direct3D10.ID3D10Predicate*pPredicate, win32.System.SystemServices.BOOL PredicateValue)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->SetPredication_22(pThis, pPredicate, PredicateValue);
            }

            internal unsafe void GSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSSetShaderResources_23(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void GSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSSetSamplers_24(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void OMSetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilView*pDepthStencilView)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->OMSetRenderTargets_25(pThis, NumViews, ppRenderTargetViews, pDepthStencilView);
            }

            /// <inheritdoc cref = "OMSetBlendState(win32.Graphics.Direct3D10.ID3D10BlendState*, float *, uint)"/>
            internal unsafe void OMSetBlendState(win32.Graphics.Direct3D10.ID3D10BlendState*pBlendState, in float BlendFactor, uint SampleMask)
            {
                fixed (float *BlendFactorLocal = &BlendFactor)
                {
                    this.OMSetBlendState(pBlendState, BlendFactorLocal, SampleMask);
                }
            }

            internal unsafe void OMSetBlendState([Optional] win32.Graphics.Direct3D10.ID3D10BlendState*pBlendState, float *BlendFactor, uint SampleMask)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->OMSetBlendState_26(pThis, pBlendState, BlendFactor, SampleMask);
            }

            internal unsafe void OMSetDepthStencilState([Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilState*pDepthStencilState, uint StencilRef)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->OMSetDepthStencilState_27(pThis, pDepthStencilState, StencilRef);
            }

            /// <inheritdoc cref = "SOSetTargets(uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *)"/>
            internal unsafe void SOSetTargets(win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    this.SOSetTargets((uint)pOffsets.Length, ppSOTargets, pOffsetsLocal);
                }
            }

            internal unsafe void SOSetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->SOSetTargets_28(pThis, NumBuffers, ppSOTargets, pOffsets);
            }

            internal void DrawAuto()
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->DrawAuto_29(pThis);
            }

            internal unsafe void RSSetState([Optional] win32.Graphics.Direct3D10.ID3D10RasterizerState*pRasterizerState)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->RSSetState_30(pThis, pRasterizerState);
            }

            /// <inheritdoc cref = "RSSetViewports(uint, win32.Graphics.Direct3D10.D3D10_VIEWPORT*)"/>
            internal unsafe void RSSetViewports(ReadOnlySpan<win32.Graphics.Direct3D10.D3D10_VIEWPORT> pViewports)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewportsLocal = pViewports)
                {
                    this.RSSetViewports((uint)pViewports.Length, pViewportsLocal);
                }
            }

            internal unsafe void RSSetViewports(uint NumViewports, [Optional] win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewports)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->RSSetViewports_31(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSSetScissorRects(uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSSetScissorRects(ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.RSSetScissorRects((uint)pRects.Length, pRectsLocal);
                }
            }

            internal unsafe void RSSetScissorRects(uint NumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->RSSetScissorRects_32(pThis, NumRects, pRects);
            }

            /// <inheritdoc cref = "CopySubresourceRegion(win32.Graphics.Direct3D10.ID3D10Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*)"/>
            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Direct3D10.D3D10_BOX? pSrcBox)
            {
                win32.Graphics.Direct3D10.D3D10_BOX pSrcBoxLocal = pSrcBox.HasValue ? pSrcBox.Value : default(win32.Graphics.Direct3D10.D3D10_BOX);
                this.CopySubresourceRegion(pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox.HasValue ? &pSrcBoxLocal : null);
            }

            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource, uint SrcSubresource, [Optional] win32.Graphics.Direct3D10.D3D10_BOX*pSrcBox)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->CopySubresourceRegion_33(pThis, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
            }

            internal unsafe void CopyResource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->CopyResource_34(pThis, pDstResource, pSrcResource);
            }

            /// <inheritdoc cref = "UpdateSubresource(win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*, void *, uint, uint)"/>
            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D10.D3D10_BOX? pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                win32.Graphics.Direct3D10.D3D10_BOX pDstBoxLocal = pDstBox.HasValue ? pDstBox.Value : default(win32.Graphics.Direct3D10.D3D10_BOX);
                this.UpdateSubresource(pDstResource, DstSubresource, pDstBox.HasValue ? &pDstBoxLocal : null, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, [Optional] win32.Graphics.Direct3D10.D3D10_BOX*pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->UpdateSubresource_35(pThis, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            /// <inheritdoc cref = "ClearRenderTargetView(win32.Graphics.Direct3D10.ID3D10RenderTargetView*, float *)"/>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D10.ID3D10RenderTargetView*pRenderTargetView, in float ColorRGBA)
            {
                fixed (float *ColorRGBALocal = &ColorRGBA)
                {
                    this.ClearRenderTargetView(pRenderTargetView, ColorRGBALocal);
                }
            }

            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D10.ID3D10RenderTargetView*pRenderTargetView, float *ColorRGBA)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->ClearRenderTargetView_36(pThis, pRenderTargetView, ColorRGBA);
            }

            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D10.ID3D10DepthStencilView*pDepthStencilView, uint ClearFlags, float Depth, byte Stencil)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->ClearDepthStencilView_37(pThis, pDepthStencilView, ClearFlags, Depth, Stencil);
            }

            internal unsafe void GenerateMips(win32.Graphics.Direct3D10.ID3D10ShaderResourceView*pShaderResourceView)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GenerateMips_38(pThis, pShaderResourceView);
            }

            internal unsafe void ResolveSubresource(win32.Graphics.Direct3D10.ID3D10Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D10.ID3D10Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Dxgi.DXGI_FORMAT Format)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->ResolveSubresource_39(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }

            internal unsafe void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSGetConstantBuffers_40(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void PSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSGetShaderResources_41(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void PSGetShader(win32.Graphics.Direct3D10.ID3D10PixelShader**ppPixelShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSGetShader_42(pThis, ppPixelShader);
            }

            internal unsafe void PSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSGetSamplers_43(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void VSGetShader(win32.Graphics.Direct3D10.ID3D10VertexShader**ppVertexShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSGetShader_44(pThis, ppVertexShader);
            }

            internal unsafe void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->PSGetConstantBuffers_45(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void IAGetInputLayout(win32.Graphics.Direct3D10.ID3D10InputLayout**ppInputLayout)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IAGetInputLayout_46(pThis, ppInputLayout);
            }

            /// <inheritdoc cref = "IAGetVertexBuffers(uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *)"/>
            internal unsafe void IAGetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, Span<uint> pStrides, Span<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IAGetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            internal unsafe void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IAGetVertexBuffers_47(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            internal unsafe void IAGetIndexBuffer([Optional] win32.Graphics.Direct3D10.ID3D10Buffer**pIndexBuffer, [Optional] win32.Graphics.Dxgi.DXGI_FORMAT*Format, [Optional] uint *Offset)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IAGetIndexBuffer_48(pThis, pIndexBuffer, Format, Offset);
            }

            internal unsafe void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppConstantBuffers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSGetConstantBuffers_49(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void GSGetShader(win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSGetShader_50(pThis, ppGeometryShader);
            }

            /// <inheritdoc cref = "IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*)"/>
            internal unsafe void IAGetPrimitiveTopology(out win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY pTopology)
            {
                fixed (win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopologyLocal = &pTopology)
                {
                    this.IAGetPrimitiveTopology(pTopologyLocal);
                }
            }

            internal unsafe void IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopology)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->IAGetPrimitiveTopology_51(pThis, pTopology);
            }

            internal unsafe void VSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSGetShaderResources_52(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void VSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->VSGetSamplers_53(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void GetPredication([Optional] win32.Graphics.Direct3D10.ID3D10Predicate**ppPredicate, [Optional] win32.System.SystemServices.BOOL*pPredicateValue)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GetPredication_54(pThis, ppPredicate, pPredicateValue);
            }

            internal unsafe void GSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSGetShaderResources_55(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void GSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplers)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GSGetSamplers_56(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void OMGetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilView**ppDepthStencilView)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->OMGetRenderTargets_57(pThis, NumViews, ppRenderTargetViews, ppDepthStencilView);
            }

            internal unsafe void OMGetBlendState([Optional] win32.Graphics.Direct3D10.ID3D10BlendState**ppBlendState, [Optional] float *BlendFactor, [Optional] uint *pSampleMask)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->OMGetBlendState_58(pThis, ppBlendState, BlendFactor, pSampleMask);
            }

            internal unsafe void OMGetDepthStencilState([Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilState**ppDepthStencilState, [Optional] uint *pStencilRef)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->OMGetDepthStencilState_59(pThis, ppDepthStencilState, pStencilRef);
            }

            /// <inheritdoc cref = "SOGetTargets(uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *)"/>
            internal unsafe void SOGetTargets(win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, Span<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    this.SOGetTargets((uint)pOffsets.Length, ppSOTargets, pOffsetsLocal);
                }
            }

            internal unsafe void SOGetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppSOTargets, [Optional] uint *pOffsets)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->SOGetTargets_60(pThis, NumBuffers, ppSOTargets, pOffsets);
            }

            internal unsafe void RSGetState(win32.Graphics.Direct3D10.ID3D10RasterizerState**ppRasterizerState)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->RSGetState_61(pThis, ppRasterizerState);
            }

            /// <inheritdoc cref = "RSGetViewports(uint *, win32.Graphics.Direct3D10.D3D10_VIEWPORT*)"/>
            internal unsafe void RSGetViewports(ref uint NumViewports, win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewports)
            {
                fixed (uint *NumViewportsLocal = &NumViewports)
                {
                    this.RSGetViewports(NumViewportsLocal, pViewports);
                }
            }

            internal unsafe void RSGetViewports(uint *NumViewports, [Optional] win32.Graphics.Direct3D10.D3D10_VIEWPORT*pViewports)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->RSGetViewports_62(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSGetScissorRects(uint *, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSGetScissorRects(ref uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (uint *NumRectsLocal = &NumRects)
                {
                    this.RSGetScissorRects(NumRectsLocal, pRects);
                }
            }

            internal unsafe void RSGetScissorRects(uint *NumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->RSGetScissorRects_63(pThis, NumRects, pRects);
            }

            internal win32.System.Com.HRESULT GetDeviceRemovedReason()
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->GetDeviceRemovedReason_64(pThis);
            }

            internal win32.System.Com.HRESULT SetExceptionMode(uint RaiseFlags)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->SetExceptionMode_65(pThis, RaiseFlags);
            }

            internal uint GetExceptionMode()
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->GetExceptionMode_66(pThis);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->GetPrivateData_67(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->SetPrivateData_68(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_69(pThis, guid, pData);
            }

            internal void ClearState()
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->ClearState_70(pThis);
            }

            internal void Flush()
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->Flush_71(pThis);
            }

            /// <inheritdoc cref = "CreateBuffer(win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Buffer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBuffer(in win32.Graphics.Direct3D10.D3D10_BUFFER_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Buffer**ppBuffer)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateBuffer(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppBuffer);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBuffer(win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, [Optional] win32.Graphics.Direct3D10.ID3D10Buffer**ppBuffer)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateBuffer_72(pThis, pDesc, pInitialData, ppBuffer);
            }

            /// <inheritdoc cref = "CreateTexture1D(win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture1D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture1D(in win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Texture1D**ppTexture1D)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture1D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture1D);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateTexture1D(win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, win32.Graphics.Direct3D10.ID3D10Texture1D**ppTexture1D)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateTexture1D_73(pThis, pDesc, pInitialData, ppTexture1D);
            }

            /// <inheritdoc cref = "CreateTexture2D(win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture2D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture2D(in win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Texture2D**ppTexture2D)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture2D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture2D);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateTexture2D(win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, win32.Graphics.Direct3D10.ID3D10Texture2D**ppTexture2D)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateTexture2D_74(pThis, pDesc, pInitialData, ppTexture2D);
            }

            /// <inheritdoc cref = "CreateTexture3D(win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture3D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture3D(in win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC pDesc, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D10.ID3D10Texture3D**ppTexture3D)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture3D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture3D);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateTexture3D(win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*pInitialData, win32.Graphics.Direct3D10.ID3D10Texture3D**ppTexture3D)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateTexture3D_75(pThis, pDesc, pInitialData, ppTexture3D);
            }

            /// <inheritdoc cref = "CreateShaderResourceView(win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC? pDesc, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppSRView)
            {
                win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateShaderResourceView(pResource, pDesc.HasValue ? &pDescLocal : null, ppSRView);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, [Optional] win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView**ppSRView)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateShaderResourceView_76(pThis, pResource, pDesc, ppSRView);
            }

            /// <inheritdoc cref = "CreateRenderTargetView(win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10RenderTargetView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRenderTargetView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC? pDesc, win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRTView)
            {
                win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateRenderTargetView(pResource, pDesc.HasValue ? &pDescLocal : null, ppRTView);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateRenderTargetView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, [Optional] win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.ID3D10RenderTargetView**ppRTView)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateRenderTargetView_77(pThis, pResource, pDesc, ppRTView);
            }

            /// <inheritdoc cref = "CreateDepthStencilView(win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC? pDesc, win32.Graphics.Direct3D10.ID3D10DepthStencilView**ppDepthStencilView)
            {
                win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateDepthStencilView(pResource, pDesc.HasValue ? &pDescLocal : null, ppDepthStencilView);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateDepthStencilView(win32.Graphics.Direct3D10.ID3D10Resource*pResource, [Optional] win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilView**ppDepthStencilView)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateDepthStencilView_78(pThis, pResource, pDesc, ppDepthStencilView);
            }

            /// <inheritdoc cref = "CreateInputLayout(win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*, uint, void *, nuint, win32.Graphics.Direct3D10.ID3D10InputLayout**)"/>
            internal unsafe win32.System.Com.HRESULT CreateInputLayout(ReadOnlySpan<win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC> pInputElementDescs, void *pShaderBytecodeWithInputSignature, nuint BytecodeLength, win32.Graphics.Direct3D10.ID3D10InputLayout**ppInputLayout)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*pInputElementDescsLocal = pInputElementDescs)
                {
                    win32.System.Com.HRESULT __result = this.CreateInputLayout(pInputElementDescsLocal, (uint)pInputElementDescs.Length, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateInputLayout(win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*pInputElementDescs, uint NumElements, void *pShaderBytecodeWithInputSignature, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10InputLayout**ppInputLayout)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateInputLayout_79(pThis, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
            }

            internal unsafe win32.System.Com.HRESULT CreateVertexShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10VertexShader**ppVertexShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateVertexShader_80(pThis, pShaderBytecode, BytecodeLength, ppVertexShader);
            }

            internal unsafe win32.System.Com.HRESULT CreateGeometryShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateGeometryShader_81(pThis, pShaderBytecode, BytecodeLength, ppGeometryShader);
            }

            /// <inheritdoc cref = "CreateGeometryShaderWithStreamOutput(void *, nuint, win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*, uint, uint, win32.Graphics.Direct3D10.ID3D10GeometryShader**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGeometryShaderWithStreamOutput(void *pShaderBytecode, nuint BytecodeLength, ReadOnlySpan<win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY> pSODeclaration, uint OutputStreamStride, win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*pSODeclarationLocal = pSODeclaration)
                {
                    win32.System.Com.HRESULT __result = this.CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclarationLocal, (uint)pSODeclaration.Length, OutputStreamStride, ppGeometryShader);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateGeometryShaderWithStreamOutput(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*pSODeclaration, uint NumEntries, uint OutputStreamStride, [Optional] win32.Graphics.Direct3D10.ID3D10GeometryShader**ppGeometryShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateGeometryShaderWithStreamOutput_82(pThis, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, OutputStreamStride, ppGeometryShader);
            }

            internal unsafe win32.System.Com.HRESULT CreatePixelShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D10.ID3D10PixelShader**ppPixelShader)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreatePixelShader_83(pThis, pShaderBytecode, BytecodeLength, ppPixelShader);
            }

            /// <inheritdoc cref = "CreateBlendState(win32.Graphics.Direct3D10.D3D10_BLEND_DESC*, win32.Graphics.Direct3D10.ID3D10BlendState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBlendState(in win32.Graphics.Direct3D10.D3D10_BLEND_DESC pBlendStateDesc, win32.Graphics.Direct3D10.ID3D10BlendState**ppBlendState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_BLEND_DESC*pBlendStateDescLocal = &pBlendStateDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateBlendState(pBlendStateDescLocal, ppBlendState);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBlendState(win32.Graphics.Direct3D10.D3D10_BLEND_DESC*pBlendStateDesc, [Optional] win32.Graphics.Direct3D10.ID3D10BlendState**ppBlendState)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateBlendState_84(pThis, pBlendStateDesc, ppBlendState);
            }

            /// <inheritdoc cref = "CreateDepthStencilState(win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilState(in win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc, win32.Graphics.Direct3D10.ID3D10DepthStencilState**ppDepthStencilState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*pDepthStencilDescLocal = &pDepthStencilDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateDepthStencilState(pDepthStencilDescLocal, ppDepthStencilState);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateDepthStencilState(win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*pDepthStencilDesc, [Optional] win32.Graphics.Direct3D10.ID3D10DepthStencilState**ppDepthStencilState)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateDepthStencilState_85(pThis, pDepthStencilDesc, ppDepthStencilState);
            }

            /// <inheritdoc cref = "CreateRasterizerState(win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*, win32.Graphics.Direct3D10.ID3D10RasterizerState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRasterizerState(in win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC pRasterizerDesc, win32.Graphics.Direct3D10.ID3D10RasterizerState**ppRasterizerState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*pRasterizerDescLocal = &pRasterizerDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateRasterizerState(pRasterizerDescLocal, ppRasterizerState);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRasterizerState(win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*pRasterizerDesc, [Optional] win32.Graphics.Direct3D10.ID3D10RasterizerState**ppRasterizerState)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateRasterizerState_86(pThis, pRasterizerDesc, ppRasterizerState);
            }

            /// <inheritdoc cref = "CreateSamplerState(win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*, win32.Graphics.Direct3D10.ID3D10SamplerState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSamplerState(in win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC pSamplerDesc, win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplerState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*pSamplerDescLocal = &pSamplerDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSamplerState(pSamplerDescLocal, ppSamplerState);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSamplerState(win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*pSamplerDesc, [Optional] win32.Graphics.Direct3D10.ID3D10SamplerState**ppSamplerState)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateSamplerState_87(pThis, pSamplerDesc, ppSamplerState);
            }

            /// <inheritdoc cref = "CreateQuery(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Query**)"/>
            internal unsafe win32.System.Com.HRESULT CreateQuery(in win32.Graphics.Direct3D10.D3D10_QUERY_DESC pQueryDesc, win32.Graphics.Direct3D10.ID3D10Query**ppQuery)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pQueryDescLocal = &pQueryDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateQuery(pQueryDescLocal, ppQuery);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateQuery(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pQueryDesc, [Optional] win32.Graphics.Direct3D10.ID3D10Query**ppQuery)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateQuery_88(pThis, pQueryDesc, ppQuery);
            }

            /// <inheritdoc cref = "CreatePredicate(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Predicate**)"/>
            internal unsafe win32.System.Com.HRESULT CreatePredicate(in win32.Graphics.Direct3D10.D3D10_QUERY_DESC pPredicateDesc, win32.Graphics.Direct3D10.ID3D10Predicate**ppPredicate)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pPredicateDescLocal = &pPredicateDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreatePredicate(pPredicateDescLocal, ppPredicate);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreatePredicate(win32.Graphics.Direct3D10.D3D10_QUERY_DESC*pPredicateDesc, [Optional] win32.Graphics.Direct3D10.ID3D10Predicate**ppPredicate)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreatePredicate_89(pThis, pPredicateDesc, ppPredicate);
            }

            /// <inheritdoc cref = "CreateCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.ID3D10Counter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateCounter(in win32.Graphics.Direct3D10.D3D10_COUNTER_DESC pCounterDesc, win32.Graphics.Direct3D10.ID3D10Counter**ppCounter)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pCounterDescLocal = &pCounterDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateCounter(pCounterDescLocal, ppCounter);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pCounterDesc, [Optional] win32.Graphics.Direct3D10.ID3D10Counter**ppCounter)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateCounter_90(pThis, pCounterDesc, ppCounter);
            }

            /// <inheritdoc cref = "CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, out uint pFormatSupport)
            {
                fixed (uint *pFormatSupportLocal = &pFormatSupport)
                {
                    win32.System.Com.HRESULT __result = this.CheckFormatSupport(Format, pFormatSupportLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint *pFormatSupport)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CheckFormatSupport_91(pThis, Format, pFormatSupport);
            }

            /// <inheritdoc cref = "CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SampleCount, out uint pNumQualityLevels)
            {
                fixed (uint *pNumQualityLevelsLocal = &pNumQualityLevels)
                {
                    win32.System.Com.HRESULT __result = this.CheckMultisampleQualityLevels(Format, SampleCount, pNumQualityLevelsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SampleCount, uint *pNumQualityLevels)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CheckMultisampleQualityLevels_92(pThis, Format, SampleCount, pNumQualityLevels);
            }

            /// <inheritdoc cref = "CheckCounterInfo(win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*)"/>
            internal unsafe void CheckCounterInfo(out win32.Graphics.Direct3D10.D3D10_COUNTER_INFO pCounterInfo)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*pCounterInfoLocal = &pCounterInfo)
                {
                    this.CheckCounterInfo(pCounterInfoLocal);
                }
            }

            internal unsafe void CheckCounterInfo(win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*pCounterInfo)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->CheckCounterInfo_93(pThis, pCounterInfo);
            }

            /// <inheritdoc cref = "CheckCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckCounter(in win32.Graphics.Direct3D10.D3D10_COUNTER_DESC pDesc, out win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE pType, out uint pActiveCounters, win32.System.SystemServices.PSTR szName, uint *pNameLength, win32.System.SystemServices.PSTR szUnits, uint *pUnitsLength, win32.System.SystemServices.PSTR szDescription, uint *pDescriptionLength)
            {
                fixed (uint *pActiveCountersLocal = &pActiveCounters)
                {
                    fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*pTypeLocal = &pType)
                    {
                        fixed (win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CheckCounter(pDescLocal, pTypeLocal, pActiveCountersLocal, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CheckCounter(win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*pDesc, win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*pType, uint *pActiveCounters, win32.System.SystemServices.PSTR szName, [Optional] uint *pNameLength, win32.System.SystemServices.PSTR szUnits, [Optional] uint *pUnitsLength, win32.System.SystemServices.PSTR szDescription, [Optional] uint *pDescriptionLength)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CheckCounter_94(pThis, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }

            internal uint GetCreationFlags()
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->GetCreationFlags_95(pThis);
            }

            /// <inheritdoc cref = "OpenSharedResource(win32.System.SystemServices.HANDLE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT OpenSharedResource(SafeHandle hResource, in global::System.Guid ReturnedInterface, void **ppResource)
            {
                bool hResourceAddRef = false;
                try
                {
                    fixed (global::System.Guid*ReturnedInterfaceLocal = &ReturnedInterface)
                    {
                        win32.System.SystemServices.HANDLE hResourceLocal;
                        if (hResource is object)
                        {
                            hResource.DangerousAddRef(ref hResourceAddRef);
                            hResourceLocal = (win32.System.SystemServices.HANDLE)hResource.DangerousGetHandle();
                        }
                        else
                            hResourceLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.OpenSharedResource(hResourceLocal, ReturnedInterfaceLocal, ppResource);
                        return __result;
                    }
                }
                finally
                {
                    if (hResourceAddRef)
                        hResource.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT OpenSharedResource(win32.System.SystemServices.HANDLE hResource, global::System.Guid*ReturnedInterface, [Optional] void **ppResource)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->OpenSharedResource_96(pThis, hResource, ReturnedInterface, ppResource);
            }

            internal void SetTextFilterSize(uint Width, uint Height)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->SetTextFilterSize_97(pThis, Width, Height);
            }

            internal unsafe void GetTextFilterSize([Optional] uint *pWidth, [Optional] uint *pHeight)
            {
                fixed (ID3D10Device1*pThis = &this)
                    lpVtbl->GetTextFilterSize_98(pThis, pWidth, pHeight);
            }

            /// <inheritdoc cref = "CreateShaderResourceView1(win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView1(win32.Graphics.Direct3D10.ID3D10Resource*pResource, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1? pDesc, win32.Graphics.Direct3D10.ID3D10ShaderResourceView1**ppSRView)
            {
                win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1 pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1);
                win32.System.Com.HRESULT __result = this.CreateShaderResourceView1(pResource, pDesc.HasValue ? &pDescLocal : null, ppSRView);
                return __result;
            }

            /// <summary>Create a shader-resource view for accessing data in a resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10resource">ID3D10Resource</a>*</b></para>
            /// <para>Pointer to the <a href = "https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource</a> that will serve as input to a shader. This resource must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_bind_flag">D3D10_BIND_SHADER_RESOURCE</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-createshaderresourceview1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/ns-d3d10_1-d3d10_shader_resource_view_desc1">D3D10_SHADER_RESOURCE_VIEW_DESC1</a>*</b></para>
            /// <para>Pointer to a shader-resource-view description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/ns-d3d10_1-d3d10_shader_resource_view_desc1">D3D10_SHADER_RESOURCE_VIEW_DESC1</a>). Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-createshaderresourceview1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSRView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/nn-d3d10_1-id3d10shaderresourceview1">ID3D10ShaderResourceView1</a>**</b></para>
            /// <para>Address of a pointer to a shader-resource view (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/nn-d3d10_1-id3d10shaderresourceview1">ID3D10ShaderResourceView1 Interface</a>). Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-createshaderresourceview1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-createshaderresourceview1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView1(win32.Graphics.Direct3D10.ID3D10Resource*pResource, [Optional] win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1*pDesc, [Optional] win32.Graphics.Direct3D10.ID3D10ShaderResourceView1**ppSRView)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateShaderResourceView1_99(pThis, pResource, pDesc, ppSRView);
            }

            /// <inheritdoc cref = "CreateBlendState1(win32.Graphics.Direct3D10.D3D10_BLEND_DESC1*, win32.Graphics.Direct3D10.ID3D10BlendState1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBlendState1(in win32.Graphics.Direct3D10.D3D10_BLEND_DESC1 pBlendStateDesc, win32.Graphics.Direct3D10.ID3D10BlendState1**ppBlendState)
            {
                fixed (win32.Graphics.Direct3D10.D3D10_BLEND_DESC1*pBlendStateDescLocal = &pBlendStateDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateBlendState1(pBlendStateDescLocal, ppBlendState);
                    return __result;
                }
            }

            /// <summary>Create a blend-state object that encapsules blend state for the output-merger stage.</summary>
            /// <param name = "pBlendStateDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/ns-d3d10_1-d3d10_blend_desc1">D3D10_BLEND_DESC1</a>*</b></para>
            /// <para>Pointer to a blend-state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/ns-d3d10_1-d3d10_blend_desc1">D3D10_BLEND_DESC1</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-createblendstate1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppBlendState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/nn-d3d10_1-id3d10blendstate1">ID3D10BlendState1</a>**</b></para>
            /// <para>Address of a pointer to the blend-state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10_1/nn-d3d10_1-id3d10blendstate1">ID3D10BlendState1 Interface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-createblendstate1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-createblendstate1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBlendState1(win32.Graphics.Direct3D10.D3D10_BLEND_DESC1*pBlendStateDesc, [Optional] win32.Graphics.Direct3D10.ID3D10BlendState1**ppBlendState)
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->CreateBlendState1_100(pThis, pBlendStateDesc, ppBlendState);
            }

            /// <summary>Gets the feature level of the hardware device.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d10_1/ne-d3d10_1-d3d10_feature_level1">D3D10_FEATURE_LEVEL1</a></b></para>
            /// <para>The feature level (see <a href = "/windows/desktop/api/d3d10_1/ne-d3d10_1-d3d10_feature_level1">D3D10_FEATURE_LEVEL1</a>).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10_1/nf-d3d10_1-id3d10device1-getfeaturelevel">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct3D10.D3D10_FEATURE_LEVEL1 GetFeatureLevel()
            {
                fixed (ID3D10Device1*pThis = &this)
                    return lpVtbl->GetFeatureLevel_101(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>VSSetConstantBuffers_4;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>PSSetShaderResources_5;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10PixelShader*, void>PSSetShader_6;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>PSSetSamplers_7;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10VertexShader*, void>VSSetShader_8;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, int, void>DrawIndexed_9;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, void>Draw_10;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>PSSetConstantBuffers_11;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10InputLayout*, void>IASetInputLayout_12;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *, void>IASetVertexBuffers_13;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Buffer*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, void>IASetIndexBuffer_14;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, uint, int, uint, void>DrawIndexedInstanced_15;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, uint, uint, void>DrawInstanced_16;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>GSSetConstantBuffers_17;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10GeometryShader*, void>GSSetShader_18;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY, void>IASetPrimitiveTopology_19;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>VSSetShaderResources_20;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>VSSetSamplers_21;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Predicate*, win32.System.SystemServices.BOOL, void>SetPredication_22;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>GSSetShaderResources_23;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>GSSetSamplers_24;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, win32.Graphics.Direct3D10.ID3D10RenderTargetView**, win32.Graphics.Direct3D10.ID3D10DepthStencilView*, void>OMSetRenderTargets_25;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10BlendState*, float *, uint, void>OMSetBlendState_26;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10DepthStencilState*, uint, void>OMSetDepthStencilState_27;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, void>SOSetTargets_28;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, void>DrawAuto_29;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10RasterizerState*, void>RSSetState_30;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, win32.Graphics.Direct3D10.D3D10_VIEWPORT*, void>RSSetViewports_31;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, win32.UI.DisplayDevices.RECT*, void>RSSetScissorRects_32;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*, void>CopySubresourceRegion_33;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.ID3D10Resource*, void>CopyResource_34;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.D3D10_BOX*, void *, uint, uint, void>UpdateSubresource_35;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10RenderTargetView*, float *, void>ClearRenderTargetView_36;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10DepthStencilView*, uint, float, byte, void>ClearDepthStencilView_37;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView*, void>GenerateMips_38;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Direct3D10.ID3D10Resource*, uint, win32.Graphics.Dxgi.DXGI_FORMAT, void>ResolveSubresource_39;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>VSGetConstantBuffers_40;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>PSGetShaderResources_41;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10PixelShader**, void>PSGetShader_42;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>PSGetSamplers_43;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10VertexShader**, void>VSGetShader_44;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>PSGetConstantBuffers_45;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10InputLayout**, void>IAGetInputLayout_46;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, uint *, void>IAGetVertexBuffers_47;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Buffer**, win32.Graphics.Dxgi.DXGI_FORMAT*, uint *, void>IAGetIndexBuffer_48;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, void>GSGetConstantBuffers_49;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10GeometryShader**, void>GSGetShader_50;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*, void>IAGetPrimitiveTopology_51;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>VSGetShaderResources_52;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>VSGetSamplers_53;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Predicate**, win32.System.SystemServices.BOOL*, void>GetPredication_54;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, void>GSGetShaderResources_55;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, win32.Graphics.Direct3D10.ID3D10SamplerState**, void>GSGetSamplers_56;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, win32.Graphics.Direct3D10.ID3D10RenderTargetView**, win32.Graphics.Direct3D10.ID3D10DepthStencilView**, void>OMGetRenderTargets_57;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10BlendState**, float *, uint *, void>OMGetBlendState_58;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10DepthStencilState**, uint *, void>OMGetDepthStencilState_59;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, win32.Graphics.Direct3D10.ID3D10Buffer**, uint *, void>SOGetTargets_60;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10RasterizerState**, void>RSGetState_61;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint *, win32.Graphics.Direct3D10.D3D10_VIEWPORT*, void>RSGetViewports_62;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint *, win32.UI.DisplayDevices.RECT*, void>RSGetScissorRects_63;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.System.Com.HRESULT>GetDeviceRemovedReason_64;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, win32.System.Com.HRESULT>SetExceptionMode_65;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint>GetExceptionMode_66;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_67;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_68;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_69;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, void>ClearState_70;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, void>Flush_71;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_BUFFER_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Buffer**, win32.System.Com.HRESULT>CreateBuffer_72;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture1D**, win32.System.Com.HRESULT>CreateTexture1D_73;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture2D**, win32.System.Com.HRESULT>CreateTexture2D_74;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC*, win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA*, win32.Graphics.Direct3D10.ID3D10Texture3D**, win32.System.Com.HRESULT>CreateTexture3D_75;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView**, win32.System.Com.HRESULT>CreateShaderResourceView_76;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10RenderTargetView**, win32.System.Com.HRESULT>CreateRenderTargetView_77;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilView**, win32.System.Com.HRESULT>CreateDepthStencilView_78;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC*, uint, void *, nuint, win32.Graphics.Direct3D10.ID3D10InputLayout**, win32.System.Com.HRESULT>CreateInputLayout_79;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, void *, nuint, win32.Graphics.Direct3D10.ID3D10VertexShader**, win32.System.Com.HRESULT>CreateVertexShader_80;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, void *, nuint, win32.Graphics.Direct3D10.ID3D10GeometryShader**, win32.System.Com.HRESULT>CreateGeometryShader_81;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, void *, nuint, win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY*, uint, uint, win32.Graphics.Direct3D10.ID3D10GeometryShader**, win32.System.Com.HRESULT>CreateGeometryShaderWithStreamOutput_82;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, void *, nuint, win32.Graphics.Direct3D10.ID3D10PixelShader**, win32.System.Com.HRESULT>CreatePixelShader_83;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_BLEND_DESC*, win32.Graphics.Direct3D10.ID3D10BlendState**, win32.System.Com.HRESULT>CreateBlendState_84;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D10.ID3D10DepthStencilState**, win32.System.Com.HRESULT>CreateDepthStencilState_85;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC*, win32.Graphics.Direct3D10.ID3D10RasterizerState**, win32.System.Com.HRESULT>CreateRasterizerState_86;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC*, win32.Graphics.Direct3D10.ID3D10SamplerState**, win32.System.Com.HRESULT>CreateSamplerState_87;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Query**, win32.System.Com.HRESULT>CreateQuery_88;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_QUERY_DESC*, win32.Graphics.Direct3D10.ID3D10Predicate**, win32.System.Com.HRESULT>CreatePredicate_89;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.ID3D10Counter**, win32.System.Com.HRESULT>CreateCounter_90;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Dxgi.DXGI_FORMAT, uint *, win32.System.Com.HRESULT>CheckFormatSupport_91;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.System.Com.HRESULT>CheckMultisampleQualityLevels_92;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_COUNTER_INFO*, void>CheckCounterInfo_93;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_COUNTER_DESC*, win32.Graphics.Direct3D10.D3D10_COUNTER_TYPE*, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.Com.HRESULT>CheckCounter_94;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint>GetCreationFlags_95;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.System.SystemServices.HANDLE, global::System.Guid*, void **, win32.System.Com.HRESULT>OpenSharedResource_96;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint, uint, void>SetTextFilterSize_97;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, uint *, uint *, void>GetTextFilterSize_98;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.ID3D10Resource*, win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1*, win32.Graphics.Direct3D10.ID3D10ShaderResourceView1**, win32.System.Com.HRESULT>CreateShaderResourceView1_99;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_BLEND_DESC1*, win32.Graphics.Direct3D10.ID3D10BlendState1**, win32.System.Com.HRESULT>CreateBlendState1_100;
                internal delegate *unmanaged[Stdcall]<ID3D10Device1*, win32.Graphics.Direct3D10.D3D10_FEATURE_LEVEL1>GetFeatureLevel_101;
            }

            private Vtbl*lpVtbl;
        }
    }
}