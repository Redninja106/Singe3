// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D10
    {
        [Guid("9B7E4C0D-342C-4106-A19F-4F2704F689F0")]
        internal unsafe struct ID3D10Asynchronous
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetDevice(win32.Graphics.Direct3D10.ID3D10Device**ppDevice)
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    lpVtbl->GetDevice_4(pThis, ppDevice);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->GetPrivateData_5(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->SetPrivateData_6(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_7(pThis, guid, pData);
            }

            /// <summary>Starts the collection of GPU data.</summary>
            /// <remarks>
            /// <para>Calling Begin starts the asynchronous collection of GPU data. Calling <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-end">ID3D10Asynchronous::End</a> causes data collection to stop. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10asynchronous">ID3D10Asynchronous Interface</a> for additional information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10asynchronous-begin#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Begin()
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    lpVtbl->Begin_8(pThis);
            }

            /// <summary>Ends the collection of GPU data.</summary>
            /// <remarks>
            /// <para>Calling <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-begin">ID3D10Asynchronous::Begin</a> starts the asynchronous collection of GPU data. Calling <b>ID3D10Asynchronous::End</b> causes data collection to stop. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10asynchronous">ID3D10Asynchronous Interface</a> for additional information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10asynchronous-end#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void End()
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    lpVtbl->End_9(pThis);
            }

            /// <summary>Get data from the GPU asynchronously.</summary>
            /// <param name = "pData">
            /// <para>Type: <b>void*</b></para>
            /// <para>Address of memory that will receive the data. If <b>NULL</b>, <b>GetData</b> will be used only to check status. The type of data output depends on the type of asynchronous interface. See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10asynchronous-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Size of the data to retrieve or 0. This value can be obtained with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nf-d3d10-id3d10asynchronous-getdatasize">ID3D10Asynchronous::GetDataSize</a>. Must be 0 when <i>pData</i> is <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10asynchronous-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "GetDataFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Optional flags. Can be 0 or any combination of the flags enumerated by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/ne-d3d10-d3d10_async_getdata_flag">D3D10_ASYNC_GETDATA_FLAG</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10asynchronous-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this function succeeds, it returns S_OK. Otherwise, possible return values are the following:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10asynchronous-getdata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetData([Optional] void *pData, uint DataSize, uint GetDataFlags)
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->GetData_10(pThis, pData, DataSize, GetDataFlags);
            }

            /// <summary>Get the size of the data (in bytes) that is output when calling ID3D10Asynchronous::GetData.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Size of the data (in bytes) that is output when calling GetData.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d10/nf-d3d10-id3d10asynchronous-getdatasize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetDataSize()
            {
                fixed (ID3D10Asynchronous*pThis = &this)
                    return lpVtbl->GetDataSize_11(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, win32.Graphics.Direct3D10.ID3D10Device**, void>GetDevice_4;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_7;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, void>Begin_8;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, void>End_9;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, void *, uint, uint, win32.System.Com.HRESULT>GetData_10;
                internal delegate *unmanaged[Stdcall]<ID3D10Asynchronous*, uint>GetDataSize_11;
            }

            private Vtbl*lpVtbl;
        }
    }
}