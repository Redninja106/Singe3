// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("94D99BDB-F1F8-4AB0-B236-7DA0170EDAB1")]
        internal unsafe struct IDXGISwapChain3
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <inheritdoc cref = "GetDevice(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetDevice(in global::System.Guid riid, out void *ppDevice)
            {
                fixed (void **ppDeviceLocal = &ppDevice)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetDevice(riidLocal, ppDeviceLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDevice(global::System.Guid*riid, void **ppDevice)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetDevice_8(pThis, riid, ppDevice);
            }

            internal win32.System.Com.HRESULT Present(uint SyncInterval, uint Flags)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->Present_9(pThis, SyncInterval, Flags);
            }

            /// <inheritdoc cref = "GetBuffer(uint, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetBuffer(uint Buffer, in global::System.Guid riid, out void *ppSurface)
            {
                fixed (void **ppSurfaceLocal = &ppSurface)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetBuffer(Buffer, riidLocal, ppSurfaceLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetBuffer(uint Buffer, global::System.Guid*riid, void **ppSurface)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetBuffer_10(pThis, Buffer, riid, ppSurface);
            }

            internal unsafe win32.System.Com.HRESULT SetFullscreenState(win32.System.SystemServices.BOOL Fullscreen, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pTarget)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetFullscreenState_11(pThis, Fullscreen, pTarget);
            }

            internal unsafe win32.System.Com.HRESULT GetFullscreenState([Optional] win32.System.SystemServices.BOOL*pFullscreen, [Optional] win32.Graphics.Dxgi.IDXGIOutput**ppTarget)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetFullscreenState_12(pThis, pFullscreen, ppTarget);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDesc)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetDesc_13(pThis, pDesc);
            }

            internal win32.System.Com.HRESULT ResizeBuffers(uint BufferCount, uint Width, uint Height, win32.Graphics.Dxgi.DXGI_FORMAT NewFormat, uint SwapChainFlags)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->ResizeBuffers_14(pThis, BufferCount, Width, Height, NewFormat, SwapChainFlags);
            }

            /// <inheritdoc cref = "ResizeTarget(win32.Graphics.Dxgi.DXGI_MODE_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT ResizeTarget(in win32.Graphics.Dxgi.DXGI_MODE_DESC pNewTargetParameters)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pNewTargetParametersLocal = &pNewTargetParameters)
                {
                    win32.System.Com.HRESULT __result = this.ResizeTarget(pNewTargetParametersLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT ResizeTarget(win32.Graphics.Dxgi.DXGI_MODE_DESC*pNewTargetParameters)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->ResizeTarget_15(pThis, pNewTargetParameters);
            }

            internal unsafe win32.System.Com.HRESULT GetContainingOutput(win32.Graphics.Dxgi.IDXGIOutput**ppOutput)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetContainingOutput_16(pThis, ppOutput);
            }

            /// <inheritdoc cref = "GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(out win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS pStats)
            {
                fixed (win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStatsLocal = &pStats)
                {
                    win32.System.Com.HRESULT __result = this.GetFrameStatistics(pStatsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStats)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetFrameStatistics_17(pThis, pStats);
            }

            /// <inheritdoc cref = "GetLastPresentCount(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetLastPresentCount(out uint pLastPresentCount)
            {
                fixed (uint *pLastPresentCountLocal = &pLastPresentCount)
                {
                    win32.System.Com.HRESULT __result = this.GetLastPresentCount(pLastPresentCountLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetLastPresentCount(uint *pLastPresentCount)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetLastPresentCount_18(pThis, pLastPresentCount);
            }

            /// <inheritdoc cref = "GetDesc1(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc1(out win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc1(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDesc1(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetDesc1_19(pThis, pDesc);
            }

            /// <inheritdoc cref = "GetFullscreenDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetFullscreenDesc(out win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetFullscreenDesc(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFullscreenDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*pDesc)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetFullscreenDesc_20(pThis, pDesc);
            }

            /// <inheritdoc cref = "GetHwnd(win32.UI.WindowsAndMessaging.HWND*)"/>
            internal unsafe win32.System.Com.HRESULT GetHwnd(out win32.UI.WindowsAndMessaging.HWND pHwnd)
            {
                fixed (win32.UI.WindowsAndMessaging.HWND*pHwndLocal = &pHwnd)
                {
                    win32.System.Com.HRESULT __result = this.GetHwnd(pHwndLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetHwnd(win32.UI.WindowsAndMessaging.HWND*pHwnd)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetHwnd_21(pThis, pHwnd);
            }

            /// <inheritdoc cref = "GetCoreWindow(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetCoreWindow(in global::System.Guid refiid, out void *ppUnk)
            {
                fixed (void **ppUnkLocal = &ppUnk)
                {
                    fixed (global::System.Guid*refiidLocal = &refiid)
                    {
                        win32.System.Com.HRESULT __result = this.GetCoreWindow(refiidLocal, ppUnkLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetCoreWindow(global::System.Guid*refiid, void **ppUnk)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetCoreWindow_22(pThis, refiid, ppUnk);
            }

            /// <inheritdoc cref = "Present1(uint, uint, win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*)"/>
            internal unsafe win32.System.Com.HRESULT Present1(uint SyncInterval, uint PresentFlags, in win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS pPresentParameters)
            {
                fixed (win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*pPresentParametersLocal = &pPresentParameters)
                {
                    win32.System.Com.HRESULT __result = this.Present1(SyncInterval, PresentFlags, pPresentParametersLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT Present1(uint SyncInterval, uint PresentFlags, win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*pPresentParameters)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->Present1_23(pThis, SyncInterval, PresentFlags, pPresentParameters);
            }

            internal win32.System.SystemServices.BOOL IsTemporaryMonoSupported()
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->IsTemporaryMonoSupported_24(pThis);
            }

            internal unsafe win32.System.Com.HRESULT GetRestrictToOutput(win32.Graphics.Dxgi.IDXGIOutput**ppRestrictToOutput)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetRestrictToOutput_25(pThis, ppRestrictToOutput);
            }

            /// <inheritdoc cref = "SetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*)"/>
            internal unsafe win32.System.Com.HRESULT SetBackgroundColor(in win32.Graphics.Dxgi.DXGI_RGBA pColor)
            {
                fixed (win32.Graphics.Dxgi.DXGI_RGBA*pColorLocal = &pColor)
                {
                    win32.System.Com.HRESULT __result = this.SetBackgroundColor(pColorLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*pColor)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetBackgroundColor_26(pThis, pColor);
            }

            /// <inheritdoc cref = "GetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*)"/>
            internal unsafe win32.System.Com.HRESULT GetBackgroundColor(out win32.Graphics.Dxgi.DXGI_RGBA pColor)
            {
                fixed (win32.Graphics.Dxgi.DXGI_RGBA*pColorLocal = &pColor)
                {
                    win32.System.Com.HRESULT __result = this.GetBackgroundColor(pColorLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*pColor)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetBackgroundColor_27(pThis, pColor);
            }

            internal win32.System.Com.HRESULT SetRotation(win32.Graphics.Dxgi.DXGI_MODE_ROTATION Rotation)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetRotation_28(pThis, Rotation);
            }

            /// <inheritdoc cref = "GetRotation(win32.Graphics.Dxgi.DXGI_MODE_ROTATION*)"/>
            internal unsafe win32.System.Com.HRESULT GetRotation(out win32.Graphics.Dxgi.DXGI_MODE_ROTATION pRotation)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_ROTATION*pRotationLocal = &pRotation)
                {
                    win32.System.Com.HRESULT __result = this.GetRotation(pRotationLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetRotation(win32.Graphics.Dxgi.DXGI_MODE_ROTATION*pRotation)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetRotation_29(pThis, pRotation);
            }

            internal win32.System.Com.HRESULT SetSourceSize(uint Width, uint Height)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetSourceSize_30(pThis, Width, Height);
            }

            /// <inheritdoc cref = "GetSourceSize(uint *, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSourceSize(out uint pWidth, out uint pHeight)
            {
                fixed (uint *pHeightLocal = &pHeight)
                {
                    fixed (uint *pWidthLocal = &pWidth)
                    {
                        win32.System.Com.HRESULT __result = this.GetSourceSize(pWidthLocal, pHeightLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetSourceSize(uint *pWidth, uint *pHeight)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetSourceSize_31(pThis, pWidth, pHeight);
            }

            internal win32.System.Com.HRESULT SetMaximumFrameLatency(uint MaxLatency)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetMaximumFrameLatency_32(pThis, MaxLatency);
            }

            /// <inheritdoc cref = "GetMaximumFrameLatency(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(out uint pMaxLatency)
            {
                fixed (uint *pMaxLatencyLocal = &pMaxLatency)
                {
                    win32.System.Com.HRESULT __result = this.GetMaximumFrameLatency(pMaxLatencyLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(uint *pMaxLatency)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetMaximumFrameLatency_33(pThis, pMaxLatency);
            }

            /// <inheritdoc cref = "GetFrameLatencyWaitableObject()"/>
            internal unsafe Microsoft.Win32.SafeHandles.SafeFileHandle GetFrameLatencyWaitableObject_SafeHandle()
            {
                win32.System.SystemServices.HANDLE __result = this.GetFrameLatencyWaitableObject();
                return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
            }

            internal win32.System.SystemServices.HANDLE GetFrameLatencyWaitableObject()
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetFrameLatencyWaitableObject_34(pThis);
            }

            /// <inheritdoc cref = "SetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*)"/>
            internal unsafe win32.System.Com.HRESULT SetMatrixTransform(in win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F pMatrix)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrixLocal = &pMatrix)
                {
                    win32.System.Com.HRESULT __result = this.SetMatrixTransform(pMatrixLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrix)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetMatrixTransform_35(pThis, pMatrix);
            }

            /// <inheritdoc cref = "GetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetMatrixTransform(out win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F pMatrix)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrixLocal = &pMatrix)
                {
                    win32.System.Com.HRESULT __result = this.GetMatrixTransform(pMatrixLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrix)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetMatrixTransform_36(pThis, pMatrix);
            }

            /// <summary>Gets the index of the swap chain's current back buffer.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Returns the index of the current back buffer.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-getcurrentbackbufferindex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetCurrentBackBufferIndex()
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->GetCurrentBackBufferIndex_37(pThis);
            }

            /// <inheritdoc cref = "CheckColorSpaceSupport(win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckColorSpaceSupport(win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE ColorSpace, out uint pColorSpaceSupport)
            {
                fixed (uint *pColorSpaceSupportLocal = &pColorSpaceSupport)
                {
                    win32.System.Com.HRESULT __result = this.CheckColorSpaceSupport(ColorSpace, pColorSpaceSupportLocal);
                    return __result;
                }
            }

            /// <summary>Checks the swap chain's support for color space.</summary>
            /// <param name = "ColorSpace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a>-typed value that specifies color space type to check support for.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-checkcolorspacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pColorSpaceSupport">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A pointer to a variable that receives a combination of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_4/ne-dxgi1_4-dxgi_swap_chain_color_space_support_flag">DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for color space support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-checkcolorspacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>S_OK</b> on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-checkcolorspacesupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckColorSpaceSupport(win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE ColorSpace, uint *pColorSpaceSupport)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->CheckColorSpaceSupport_38(pThis, ColorSpace, pColorSpaceSupport);
            }

            /// <summary>Sets the color space used by the swap chain.</summary>
            /// <param name = "ColorSpace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a>-typed value that specifies the color space to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-setcolorspace1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>S_OK</b> on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-setcolorspace1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetColorSpace1(win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE ColorSpace)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->SetColorSpace1_39(pThis, ColorSpace);
            }

            /// <inheritdoc cref = "ResizeBuffers1(uint, uint, uint, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.System.Com.IUnknown**)"/>
            internal unsafe win32.System.Com.HRESULT ResizeBuffers1(uint Width, uint Height, win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SwapChainFlags, ReadOnlySpan<uint> pCreationNodeMask, win32.System.Com.IUnknown**ppPresentQueue)
            {
                fixed (uint *pCreationNodeMaskLocal = pCreationNodeMask)
                {
                    win32.System.Com.HRESULT __result = this.ResizeBuffers1((uint)pCreationNodeMask.Length, Width, Height, Format, SwapChainFlags, pCreationNodeMaskLocal, ppPresentQueue);
                    return __result;
                }
            }

            /// <summary>Changes the swap chain's back buffer size, format, and number of buffers, where the swap chain was created using a D3D12 command queue as an input device. This should be called when the application window is resized.</summary>
            /// <param name = "BufferCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <b>DXGI_MAX_SWAP_CHAIN_BUFFERS</b>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Width">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The new width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. You can't specify the width as zero if you called the <a href = "https://docs.microsoft.com/windows/win32/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition">IDXGIFactory2::CreateSwapChainForComposition</a> method to create the swap chain for a composition surface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Height">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The new height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. You can't specify the height as zero if you called the <a href = "https://docs.microsoft.com/windows/win32/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition">IDXGIFactory2::CreateSwapChainForComposition</a> method to create the swap chain for a composition surface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the new format of the back buffer. Set this value to <a href = "https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_UNKNOWN</a> to preserve the existing format of the back buffer. The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SwapChainFlags">
            /// <para>Type: <b>UINT</b></para>
            /// <para>A combination of <a href = "https://docs.microsoft.com/windows/win32/api/dxgi/ne-dxgi-dxgi_swap_chain_flag">DXGI_SWAP_CHAIN_FLAG</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pCreationNodeMask">
            /// <para>Type: <b>const UINT*</b></para>
            /// <para>An array of UINTs, of total size <i>BufferCount</i>, where the value indicates which node the back buffer should be created on. Buffers created using <b>ResizeBuffers1</b> with a non-null <i>pCreationNodeMask</i> array are visible to all nodes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPresentQueue">
            /// <para>Type: <b>IUnknown*</b></para>
            /// <para>An array of command queues (<a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12commandqueue">ID3D12CommandQueue</a> instances), of total size <i>BufferCount</i>. Each queue provided must match the corresponding creation node mask specified in the <i>pCreationNodeMask</i> array. When <b>Present()</b> is called, in addition to rotating to the next buffer for the next frame, the swapchain will also rotate through these command queues. This allows the app to control which queue requires synchronization for a given present operation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/win32/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgiswapchain3-resizebuffers1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT ResizeBuffers1(uint BufferCount, uint Width, uint Height, win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SwapChainFlags, uint *pCreationNodeMask, win32.System.Com.IUnknown**ppPresentQueue)
            {
                fixed (IDXGISwapChain3*pThis = &this)
                    return lpVtbl->ResizeBuffers1_40(pThis, BufferCount, Width, Height, Format, SwapChainFlags, pCreationNodeMask, ppPresentQueue);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetDevice_8;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, win32.System.Com.HRESULT>Present_9;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint, global::System.Guid*, void **, win32.System.Com.HRESULT>GetBuffer_10;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.System.SystemServices.BOOL, win32.Graphics.Dxgi.IDXGIOutput*, win32.System.Com.HRESULT>SetFullscreenState_11;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.System.SystemServices.BOOL*, win32.Graphics.Dxgi.IDXGIOutput**, win32.System.Com.HRESULT>GetFullscreenState_12;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.System.Com.HRESULT>GetDesc_13;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, uint, win32.Graphics.Dxgi.DXGI_FORMAT, uint, win32.System.Com.HRESULT>ResizeBuffers_14;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.HRESULT>ResizeTarget_15;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.IDXGIOutput**, win32.System.Com.HRESULT>GetContainingOutput_16;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*, win32.System.Com.HRESULT>GetFrameStatistics_17;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint *, win32.System.Com.HRESULT>GetLastPresentCount_18;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.System.Com.HRESULT>GetDesc1_19;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*, win32.System.Com.HRESULT>GetFullscreenDesc_20;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.UI.WindowsAndMessaging.HWND*, win32.System.Com.HRESULT>GetHwnd_21;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetCoreWindow_22;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*, win32.System.Com.HRESULT>Present1_23;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.System.SystemServices.BOOL>IsTemporaryMonoSupported_24;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.IDXGIOutput**, win32.System.Com.HRESULT>GetRestrictToOutput_25;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_RGBA*, win32.System.Com.HRESULT>SetBackgroundColor_26;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_RGBA*, win32.System.Com.HRESULT>GetBackgroundColor_27;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_MODE_ROTATION, win32.System.Com.HRESULT>SetRotation_28;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_MODE_ROTATION*, win32.System.Com.HRESULT>GetRotation_29;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, win32.System.Com.HRESULT>SetSourceSize_30;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint *, uint *, win32.System.Com.HRESULT>GetSourceSize_31;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint, win32.System.Com.HRESULT>SetMaximumFrameLatency_32;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint *, win32.System.Com.HRESULT>GetMaximumFrameLatency_33;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.System.SystemServices.HANDLE>GetFrameLatencyWaitableObject_34;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*, win32.System.Com.HRESULT>SetMatrixTransform_35;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*, win32.System.Com.HRESULT>GetMatrixTransform_36;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint>GetCurrentBackBufferIndex_37;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE, uint *, win32.System.Com.HRESULT>CheckColorSpaceSupport_38;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE, win32.System.Com.HRESULT>SetColorSpace1_39;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain3*, uint, uint, uint, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.System.Com.IUnknown**, win32.System.Com.HRESULT>ResizeBuffers1_40;
            }

            private Vtbl*lpVtbl;
        }
    }
}