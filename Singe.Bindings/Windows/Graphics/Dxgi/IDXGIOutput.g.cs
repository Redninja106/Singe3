// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("AE02EEDB-C735-4690-8D52-5A8DC20213AA")]
        internal unsafe struct IDXGIOutput
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Dxgi.DXGI_OUTPUT_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            /// <summary>Get a description of the output.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_output_desc">DXGI_OUTPUT_DESC</a>*</b></para>
            /// <para>A pointer to the output description (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_output_desc">DXGI_OUTPUT_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns a code that indicates success or failure. S_OK if successful, <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a> if <i>pDesc</i> is passed in as <b>NULL</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*pDesc)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetDesc_8(pThis, pDesc);
            }

            /// <inheritdoc cref = "GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, ref uint pNumModes, win32.Graphics.Dxgi.DXGI_MODE_DESC*pDesc)
            {
                fixed (uint *pNumModesLocal = &pNumModes)
                {
                    win32.System.Com.HRESULT __result = this.GetDisplayModeList(EnumFormat, Flags, pNumModesLocal, pDesc);
                    return __result;
                }
            }

            /// <summary>Gets the display modes that match the requested format and other input options.</summary>
            /// <param name = "EnumFormat">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>The color format (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Flags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Options for modes to include (see <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-enum-modes">DXGI_ENUM_MODES</a>). DXGI_ENUM_MODES_SCALING needs to be specified to expose the display modes that require scaling.  Centered modes, requiring no scaling and corresponding directly to the display output, are enumerated by default.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumModes">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Set <i>pDesc</i> to <b>NULL</b> so that <i>pNumModes</i> returns the number of display modes that match the format and the options. Otherwise, <i>pNumModes</i> returns the number of display modes returned in <i>pDesc</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>*</b></para>
            /// <para>A pointer to a list of display modes (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>); set to <b>NULL</b> to get the number of display modes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdisplaymodelist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the following <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>. It is rare, but possible, that the display modes available can change immediately after calling this method, in which case DXGI_ERROR_MORE_DATA is returned (if there is not enough room for all the display modes). If <b>GetDisplayModeList</b> is called from a Remote Desktop Services session (formerly Terminal Services session), DXGI_ERROR_NOT_CURRENTLY_AVAILABLE is returned.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdisplaymodelist">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, uint *pNumModes, [Optional] win32.Graphics.Dxgi.DXGI_MODE_DESC*pDesc)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetDisplayModeList_9(pThis, EnumFormat, Flags, pNumModes, pDesc);
            }

            /// <inheritdoc cref = "FindClosestMatchingMode(win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode(in win32.Graphics.Dxgi.DXGI_MODE_DESC pModeToMatch, out win32.Graphics.Dxgi.DXGI_MODE_DESC pClosestMatch, win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pClosestMatchLocal = &pClosestMatch)
                {
                    fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pModeToMatchLocal = &pModeToMatch)
                    {
                        win32.System.Com.HRESULT __result = this.FindClosestMatchingMode(pModeToMatchLocal, pClosestMatchLocal, pConcernedDevice);
                        return __result;
                    }
                }
            }

            /// <summary>Finds the display mode that most closely matches the requested display mode.</summary>
            /// <param name = "pModeToMatch">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>*</b></para>
            /// <para>The desired display mode (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>). Members of <b>DXGI_MODE_DESC</b> can be unspecified indicating no preference for that member.  A value of 0 for <b>Width</b> or <b>Height</b> indicates the value is unspecified.  If either <b>Width</b> or <b>Height</b> are 0, both must be 0.  A numerator and denominator of 0 in <b>RefreshRate</b> indicate it is unspecified. Other members of <b>DXGI_MODE_DESC</b> have enumeration values indicating the member is unspecified.  If <i>pConcernedDevice</i> is <b>NULL</b>, <b>Format</b>cannot be DXGI_FORMAT_UNKNOWN.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClosestMatch">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173064(v=vs.85)">DXGI_MODE_DESC</a>*</b></para>
            /// <para>The mode that most closely matches <i>pModeToMatch</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pConcernedDevice">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>*</b></para>
            /// <para>A pointer to the Direct3D device interface. If this parameter is <b>NULL</b>, only modes whose format matches that of <i>pModeToMatch</i> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned. For info about the formats that are supported for scan-out by the device at each feature level:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the following <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-findclosestmatchingmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode(win32.Graphics.Dxgi.DXGI_MODE_DESC*pModeToMatch, win32.Graphics.Dxgi.DXGI_MODE_DESC*pClosestMatch, [Optional] win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->FindClosestMatchingMode_10(pThis, pModeToMatch, pClosestMatch, pConcernedDevice);
            }

            /// <summary>Halt a thread until the next vertical blank occurs.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the following <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-waitforvblank">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT WaitForVBlank()
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->WaitForVBlank_11(pThis);
            }

            /// <summary>Takes ownership of an output.</summary>
            /// <param name = "pDevice">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface of a device (such as an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d10/nn-d3d10-id3d10device">ID3D10Device</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-takeownership#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Exclusive">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para>Set to <b>TRUE</b> to enable other threads or applications to take ownership of the device; otherwise, set to <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-takeownership#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-takeownership">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT TakeOwnership(win32.System.Com.IUnknown*pDevice, win32.System.SystemServices.BOOL Exclusive)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->TakeOwnership_12(pThis, pDevice, Exclusive);
            }

            /// <summary>Releases ownership of the output.</summary>
            /// <remarks>
            /// <para>If you are not using a swap chain, get access to an output by calling <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgioutput-takeownership">IDXGIOutput::TakeOwnership</a> and release it when you are finished by calling <b>IDXGIOutput::ReleaseOwnership</b>. An application that uses a swap chain will typically not call either of these methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-releaseownership#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ReleaseOwnership()
            {
                fixed (IDXGIOutput*pThis = &this)
                    lpVtbl->ReleaseOwnership_13(pThis);
            }

            /// <inheritdoc cref = "GetGammaControlCapabilities(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*)"/>
            internal unsafe win32.System.Com.HRESULT GetGammaControlCapabilities(out win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES pGammaCaps)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*pGammaCapsLocal = &pGammaCaps)
                {
                    win32.System.Com.HRESULT __result = this.GetGammaControlCapabilities(pGammaCapsLocal);
                    return __result;
                }
            }

            /// <summary>Gets a description of the gamma-control capabilities.</summary>
            /// <param name = "pGammaCaps">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173062(v=vs.85)">DXGI_GAMMA_CONTROL_CAPABILITIES</a>*</b></para>
            /// <para>A pointer to a  description of the gamma-control capabilities (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173062(v=vs.85)">DXGI_GAMMA_CONTROL_CAPABILITIES</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getgammacontrolcapabilities#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getgammacontrolcapabilities">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGammaControlCapabilities(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*pGammaCaps)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetGammaControlCapabilities_14(pThis, pGammaCaps);
            }

            /// <inheritdoc cref = "SetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*)"/>
            internal unsafe win32.System.Com.HRESULT SetGammaControl(in win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL pArray)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArrayLocal = &pArray)
                {
                    win32.System.Com.HRESULT __result = this.SetGammaControl(pArrayLocal);
                    return __result;
                }
            }

            /// <summary>Sets the gamma controls.</summary>
            /// <param name = "pArray">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a> structure that describes the gamma curve to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-setgammacontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-setgammacontrol">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArray)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->SetGammaControl_15(pThis, pArray);
            }

            /// <inheritdoc cref = "GetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*)"/>
            internal unsafe win32.System.Com.HRESULT GetGammaControl(out win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL pArray)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArrayLocal = &pArray)
                {
                    win32.System.Com.HRESULT __result = this.GetGammaControl(pArrayLocal);
                    return __result;
                }
            }

            /// <summary>Gets the gamma control settings.</summary>
            /// <param name = "pArray">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a>*</b></para>
            /// <para>An array of gamma control settings (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/bb173061(v=vs.85)">DXGI_GAMMA_CONTROL</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getgammacontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getgammacontrol">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArray)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetGammaControl_16(pThis, pArray);
            }

            /// <summary>Changes the display mode.</summary>
            /// <param name = "pScanoutSurface">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>*</b></para>
            /// <para>A pointer to a surface (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>) used for rendering an image to the screen. The surface must have been created as a back buffer (DXGI_USAGE_BACKBUFFER).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-setdisplaysurface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-setdisplaysurface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetDisplaySurface(win32.Graphics.Dxgi.IDXGISurface*pScanoutSurface)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->SetDisplaySurface_17(pThis, pScanoutSurface);
            }

            /// <summary>Gets a copy of the current display surface.</summary>
            /// <param name = "pDestination">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>*</b></para>
            /// <para>A pointer to a destination surface (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdisplaysurfacedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getdisplaysurfacedata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDisplaySurfaceData(win32.Graphics.Dxgi.IDXGISurface*pDestination)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetDisplaySurfaceData_18(pThis, pDestination);
            }

            /// <inheritdoc cref = "GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(out win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS pStats)
            {
                fixed (win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStatsLocal = &pStats)
                {
                    win32.System.Com.HRESULT __result = this.GetFrameStatistics(pStatsLocal);
                    return __result;
                }
            }

            /// <summary>Gets statistics about recently rendered frames.</summary>
            /// <param name = "pStats">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_frame_statistics">DXGI_FRAME_STATISTICS</a>*</b></para>
            /// <para>A pointer to frame statistics (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_frame_statistics">DXGI_FRAME_STATISTICS</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getframestatistics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this function succeeds, it returns S_OK. Otherwise, it might return <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgioutput-getframestatistics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStats)
            {
                fixed (IDXGIOutput*pThis = &this)
                    return lpVtbl->GetFrameStatistics_19(pThis, pStats);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*, win32.System.Com.HRESULT>GetDesc_8;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.HRESULT>GetDisplayModeList_9;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>FindClosestMatchingMode_10;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.System.Com.HRESULT>WaitForVBlank_11;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.System.Com.IUnknown*, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>TakeOwnership_12;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, void>ReleaseOwnership_13;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*, win32.System.Com.HRESULT>GetGammaControlCapabilities_14;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*, win32.System.Com.HRESULT>SetGammaControl_15;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*, win32.System.Com.HRESULT>GetGammaControl_16;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.IDXGISurface*, win32.System.Com.HRESULT>SetDisplaySurface_17;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.IDXGISurface*, win32.System.Com.HRESULT>GetDisplaySurfaceData_18;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput*, win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*, win32.System.Com.HRESULT>GetFrameStatistics_19;
            }

            private Vtbl*lpVtbl;
        }
    }
}