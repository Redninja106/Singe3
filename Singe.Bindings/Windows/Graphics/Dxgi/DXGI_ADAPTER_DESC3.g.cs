// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        /// <summary>Describes an adapter (or video card) that uses Microsoft DirectX Graphics Infrastructure (DXGI) 1.6.</summary>
        /// <remarks>
        /// <para>The <b>DXGI_ADAPTER_DESC3</b> structure provides a DXGI 1.6 description of an adapter.  This structure is initialized by using the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_6/nf-dxgi1_6-idxgiadapter4-getdesc3">IDXGIAdapter4::GetDesc3</a> method.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_6/ns-dxgi1_6-dxgi_adapter_desc3#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct DXGI_ADAPTER_DESC3
        {
            /// <summary>A string that contains the adapter description.</summary>
            internal __char_128 Description;
            /// <summary>The PCI ID of the hardware vendor.</summary>
            internal uint VendorId;
            /// <summary>The PCI ID of the hardware device.</summary>
            internal uint DeviceId;
            /// <summary>The PCI ID of the sub system.</summary>
            internal uint SubSysId;
            /// <summary>The PCI ID of the revision number of the adapter.</summary>
            internal uint Revision;
            /// <summary>The number of bytes of dedicated video memory that are not shared with the CPU.</summary>
            internal nuint DedicatedVideoMemory;
            /// <summary>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</summary>
            internal nuint DedicatedSystemMemory;
            /// <summary>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</summary>
            internal nuint SharedSystemMemory;
            /// <summary>A unique value that identifies the adapter. See <a href = "https://docs.microsoft.com/previous-versions/windows/hardware/drivers/ff549708(v=vs.85)">LUID</a> for a definition of the structure. <b>LUID</b> is defined in dxgi.h.</summary>
            internal win32.System.SystemServices.LUID AdapterLuid;
            /// <summary>A value of the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_6/ne-dxgi1_6-dxgi_adapter_flag3">DXGI_ADAPTER_FLAG3</a> enumeration that describes the adapter type.  The <b>DXGI_ADAPTER_FLAG_REMOTE</b> flag is reserved.</summary>
            internal win32.Graphics.Dxgi.DXGI_ADAPTER_FLAG3 Flags;
            /// <summary>A value of the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ne-dxgi1_2-dxgi_graphics_preemption_granularity">DXGI_GRAPHICS_PREEMPTION_GRANULARITY</a> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current graphics rendering task.</summary>
            internal win32.Graphics.Dxgi.DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity;
            /// <summary>A value of the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ne-dxgi1_2-dxgi_compute_preemption_granularity">DXGI_COMPUTE_PREEMPTION_GRANULARITY</a> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current compute task.</summary>
            internal win32.Graphics.Dxgi.DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity;
            internal struct __char_128
            {
                internal char _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127;
                /// <summary>Always <c>128</c>.</summary>
                internal int Length => 128;
            }
        }
    }
}