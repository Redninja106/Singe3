// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("770AAE78-F26F-4DBA-A829-253C83D1B387")]
        internal unsafe struct IDXGIFactory1
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            internal unsafe win32.System.Com.HRESULT EnumAdapters(uint Adapter, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->EnumAdapters_8(pThis, Adapter, ppAdapter);
            }

            internal win32.System.Com.HRESULT MakeWindowAssociation(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint Flags)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->MakeWindowAssociation_9(pThis, WindowHandle, Flags);
            }

            /// <inheritdoc cref = "GetWindowAssociation(win32.UI.WindowsAndMessaging.HWND*)"/>
            internal unsafe win32.System.Com.HRESULT GetWindowAssociation(out win32.UI.WindowsAndMessaging.HWND pWindowHandle)
            {
                fixed (win32.UI.WindowsAndMessaging.HWND*pWindowHandleLocal = &pWindowHandle)
                {
                    win32.System.Com.HRESULT __result = this.GetWindowAssociation(pWindowHandleLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetWindowAssociation(win32.UI.WindowsAndMessaging.HWND*pWindowHandle)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->GetWindowAssociation_10(pThis, pWindowHandle);
            }

            /// <inheritdoc cref = "CreateSwapChain(win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.Graphics.Dxgi.IDXGISwapChain**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChain(win32.System.Com.IUnknown*pDevice, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC pDesc, win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSwapChain(pDevice, pDescLocal, ppSwapChain);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSwapChain(win32.System.Com.IUnknown*pDevice, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDesc, win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->CreateSwapChain_11(pThis, pDevice, pDesc, ppSwapChain);
            }

            /// <inheritdoc cref = "CreateSoftwareAdapter(win32.System.SystemServices.HINSTANCE, win32.Graphics.Dxgi.IDXGIAdapter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSoftwareAdapter(SafeHandle Module, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                bool ModuleAddRef = false;
                try
                {
                    win32.System.SystemServices.HINSTANCE ModuleLocal;
                    if (Module is object)
                    {
                        Module.DangerousAddRef(ref ModuleAddRef);
                        ModuleLocal = (win32.System.SystemServices.HINSTANCE)Module.DangerousGetHandle();
                    }
                    else
                        ModuleLocal = default(win32.System.SystemServices.HINSTANCE);
                    win32.System.Com.HRESULT __result = this.CreateSoftwareAdapter(ModuleLocal, ppAdapter);
                    return __result;
                }
                finally
                {
                    if (ModuleAddRef)
                        Module.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSoftwareAdapter(win32.System.SystemServices.HINSTANCE Module, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->CreateSoftwareAdapter_12(pThis, Module, ppAdapter);
            }

            /// <summary>Enumerates both adapters (video cards) with or without outputs.</summary>
            /// <param name = "Adapter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The index of the adapter to enumerate.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgifactory1-enumadapters1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppAdapter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiadapter1">IDXGIAdapter1</a>**</b></para>
            /// <para>The address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiadapter1">IDXGIAdapter1</a> interface at the position specified by the <i>Adapter</i> parameter. This parameter must not be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgifactory1-enumadapters1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_FOUND</a> if the index is greater than or equal to the number of adapters in the local system, or <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a> if <i>ppAdapter</i> parameter is <b>NULL</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgifactory1-enumadapters1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT EnumAdapters1(uint Adapter, win32.Graphics.Dxgi.IDXGIAdapter1**ppAdapter)
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->EnumAdapters1_13(pThis, Adapter, ppAdapter);
            }

            /// <summary>Informs an application of the possible need to re-enumerate adapters.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para><b>FALSE</b>, if a new adapter is becoming available or the current adapter is going away. <b>TRUE</b>, no adapter changes.</para>
            /// <para><b>IsCurrent</b> returns <b>FALSE</b> to inform the calling application to re-enumerate adapters.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgifactory1-iscurrent">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsCurrent()
            {
                fixed (IDXGIFactory1*pThis = &this)
                    return lpVtbl->IsCurrent_14(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, uint, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>EnumAdapters_8;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, win32.UI.WindowsAndMessaging.HWND, uint, win32.System.Com.HRESULT>MakeWindowAssociation_9;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, win32.UI.WindowsAndMessaging.HWND*, win32.System.Com.HRESULT>GetWindowAssociation_10;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.Graphics.Dxgi.IDXGISwapChain**, win32.System.Com.HRESULT>CreateSwapChain_11;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, win32.System.SystemServices.HINSTANCE, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>CreateSoftwareAdapter_12;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, uint, win32.Graphics.Dxgi.IDXGIAdapter1**, win32.System.Com.HRESULT>EnumAdapters1_13;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory1*, win32.System.SystemServices.BOOL>IsCurrent_14;
            }

            private Vtbl*lpVtbl;
        }
    }
}