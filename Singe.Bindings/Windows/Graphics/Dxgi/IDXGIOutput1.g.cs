// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("00CDDEA8-939B-4B83-A340-A685226666CC")]
        internal unsafe struct IDXGIOutput1
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Dxgi.DXGI_OUTPUT_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*pDesc)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetDesc_8(pThis, pDesc);
            }

            /// <inheritdoc cref = "GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, ref uint pNumModes, win32.Graphics.Dxgi.DXGI_MODE_DESC*pDesc)
            {
                fixed (uint *pNumModesLocal = &pNumModes)
                {
                    win32.System.Com.HRESULT __result = this.GetDisplayModeList(EnumFormat, Flags, pNumModesLocal, pDesc);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, uint *pNumModes, [Optional] win32.Graphics.Dxgi.DXGI_MODE_DESC*pDesc)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetDisplayModeList_9(pThis, EnumFormat, Flags, pNumModes, pDesc);
            }

            /// <inheritdoc cref = "FindClosestMatchingMode(win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode(in win32.Graphics.Dxgi.DXGI_MODE_DESC pModeToMatch, out win32.Graphics.Dxgi.DXGI_MODE_DESC pClosestMatch, win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pClosestMatchLocal = &pClosestMatch)
                {
                    fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pModeToMatchLocal = &pModeToMatch)
                    {
                        win32.System.Com.HRESULT __result = this.FindClosestMatchingMode(pModeToMatchLocal, pClosestMatchLocal, pConcernedDevice);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode(win32.Graphics.Dxgi.DXGI_MODE_DESC*pModeToMatch, win32.Graphics.Dxgi.DXGI_MODE_DESC*pClosestMatch, [Optional] win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->FindClosestMatchingMode_10(pThis, pModeToMatch, pClosestMatch, pConcernedDevice);
            }

            internal win32.System.Com.HRESULT WaitForVBlank()
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->WaitForVBlank_11(pThis);
            }

            internal unsafe win32.System.Com.HRESULT TakeOwnership(win32.System.Com.IUnknown*pDevice, win32.System.SystemServices.BOOL Exclusive)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->TakeOwnership_12(pThis, pDevice, Exclusive);
            }

            internal void ReleaseOwnership()
            {
                fixed (IDXGIOutput1*pThis = &this)
                    lpVtbl->ReleaseOwnership_13(pThis);
            }

            /// <inheritdoc cref = "GetGammaControlCapabilities(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*)"/>
            internal unsafe win32.System.Com.HRESULT GetGammaControlCapabilities(out win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES pGammaCaps)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*pGammaCapsLocal = &pGammaCaps)
                {
                    win32.System.Com.HRESULT __result = this.GetGammaControlCapabilities(pGammaCapsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetGammaControlCapabilities(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*pGammaCaps)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetGammaControlCapabilities_14(pThis, pGammaCaps);
            }

            /// <inheritdoc cref = "SetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*)"/>
            internal unsafe win32.System.Com.HRESULT SetGammaControl(in win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL pArray)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArrayLocal = &pArray)
                {
                    win32.System.Com.HRESULT __result = this.SetGammaControl(pArrayLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArray)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->SetGammaControl_15(pThis, pArray);
            }

            /// <inheritdoc cref = "GetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*)"/>
            internal unsafe win32.System.Com.HRESULT GetGammaControl(out win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL pArray)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArrayLocal = &pArray)
                {
                    win32.System.Com.HRESULT __result = this.GetGammaControl(pArrayLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArray)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetGammaControl_16(pThis, pArray);
            }

            internal unsafe win32.System.Com.HRESULT SetDisplaySurface(win32.Graphics.Dxgi.IDXGISurface*pScanoutSurface)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->SetDisplaySurface_17(pThis, pScanoutSurface);
            }

            internal unsafe win32.System.Com.HRESULT GetDisplaySurfaceData(win32.Graphics.Dxgi.IDXGISurface*pDestination)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetDisplaySurfaceData_18(pThis, pDestination);
            }

            /// <inheritdoc cref = "GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(out win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS pStats)
            {
                fixed (win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStatsLocal = &pStats)
                {
                    win32.System.Com.HRESULT __result = this.GetFrameStatistics(pStatsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStats)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetFrameStatistics_19(pThis, pStats);
            }

            /// <inheritdoc cref = "GetDisplayModeList1(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC1*)"/>
            internal unsafe win32.System.Com.HRESULT GetDisplayModeList1(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, ref uint pNumModes, win32.Graphics.Dxgi.DXGI_MODE_DESC1*pDesc)
            {
                fixed (uint *pNumModesLocal = &pNumModes)
                {
                    win32.System.Com.HRESULT __result = this.GetDisplayModeList1(EnumFormat, Flags, pNumModesLocal, pDesc);
                    return __result;
                }
            }

            /// <summary>Gets the display modes that match the requested format and other input options.</summary>
            /// <param name = "EnumFormat">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the color format.</param>
            /// <param name = "Flags">
            /// <para>A combination of <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-enum-modes">DXGI_ENUM_MODES</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for display modes to include. You must specify DXGI_ENUM_MODES_SCALING to expose the display modes that require scaling.  Centered modes that require no scaling and correspond directly to the display output are enumerated by default.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-getdisplaymodelist1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumModes">
            /// <para>A pointer to a variable that receives the number of display modes that <b>GetDisplayModeList1</b> returns in the memory block to which <i>pDesc</i> points. Set <i>pDesc</i> to <b>NULL</b> so that <i>pNumModes</i> returns the number of display modes that match the format and the options. Otherwise, <i>pNumModes</i> returns the number of display modes returned in <i>pDesc</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-getdisplaymodelist1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">A pointer to a list of display modes; set to <b>NULL</b> to get the number of display modes.</param>
            /// <returns>
            /// <para>Returns one of the error codes described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic. It is rare, but possible, that the display modes available can change immediately after calling this method, in which case DXGI_ERROR_MORE_DATA is returned (if there is not enough room for all the display modes).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-getdisplaymodelist1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDisplayModeList1(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, uint *pNumModes, [Optional] win32.Graphics.Dxgi.DXGI_MODE_DESC1*pDesc)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetDisplayModeList1_20(pThis, EnumFormat, Flags, pNumModes, pDesc);
            }

            /// <inheritdoc cref = "FindClosestMatchingMode1(win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode1(in win32.Graphics.Dxgi.DXGI_MODE_DESC1 pModeToMatch, out win32.Graphics.Dxgi.DXGI_MODE_DESC1 pClosestMatch, win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC1*pClosestMatchLocal = &pClosestMatch)
                {
                    fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC1*pModeToMatchLocal = &pModeToMatch)
                    {
                        win32.System.Com.HRESULT __result = this.FindClosestMatchingMode1(pModeToMatchLocal, pClosestMatchLocal, pConcernedDevice);
                        return __result;
                    }
                }
            }

            /// <summary>Finds the display mode that most closely matches the requested display mode.</summary>
            /// <param name = "pModeToMatch">
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_mode_desc1">DXGI_MODE_DESC1</a> structure that describes the display mode to match. Members of <b>DXGI_MODE_DESC1</b> can be unspecified, which indicates no preference for that member.  A value of 0 for <b>Width</b> or <b>Height</b> indicates that the value is unspecified.  If either <b>Width</b> or <b>Height</b> is 0, both must be 0.  A numerator and denominator of 0 in <b>RefreshRate</b> indicate it is unspecified. Other members of <b>DXGI_MODE_DESC1</b> have enumeration values that indicate that the member is unspecified.  If <i>pConcernedDevice</i> is <b>NULL</b>, the <b>Format</b>member of <b>DXGI_MODE_DESC1</b> cannot be <b>DXGI_FORMAT_UNKNOWN</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-findclosestmatchingmode1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClosestMatch">A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_mode_desc1">DXGI_MODE_DESC1</a> structure that receives a description of the display mode that most closely matches the display mode described at <i>pModeToMatch</i>.</param>
            /// <param name = "pConcernedDevice">
            /// <para>A pointer to the Direct3D device interface. If this parameter is <b>NULL</b>, <b>FindClosestMatchingMode1</b> returns only modes whose format matches that of <i>pModeToMatch</i>; otherwise, <b>FindClosestMatchingMode1</b> returns only those formats that are supported for scan-out by the device. For info about the formats that are supported for scan-out by the device at each feature level:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-findclosestmatchingmode1#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>Returns one of the error codes described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-findclosestmatchingmode1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode1(win32.Graphics.Dxgi.DXGI_MODE_DESC1*pModeToMatch, win32.Graphics.Dxgi.DXGI_MODE_DESC1*pClosestMatch, [Optional] win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->FindClosestMatchingMode1_21(pThis, pModeToMatch, pClosestMatch, pConcernedDevice);
            }

            /// <summary>Copies the display surface (front buffer) to a user-provided resource.</summary>
            /// <param name = "pDestination">A pointer to a resource interface that represents the resource to which <b>GetDisplaySurfaceData1</b> copies the display surface.</param>
            /// <returns>Returns one of the error codes described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-getdisplaysurfacedata1">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDisplaySurfaceData1(win32.Graphics.Dxgi.IDXGIResource*pDestination)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->GetDisplaySurfaceData1_22(pThis, pDestination);
            }

            /// <summary>Creates a desktop duplication interface from the IDXGIOutput1 interface that represents an adapter output.</summary>
            /// <param name = "pDevice">A pointer to the Direct3D device interface that you can use to process the desktop image. This device must be created from the adapter to which the output is connected.</param>
            /// <param name = "ppOutputDuplication">A pointer to a variable that receives the new <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nn-dxgi1_2-idxgioutputduplication">IDXGIOutputDuplication</a> interface.</param>
            /// <returns>
            /// <para><b>DuplicateOutput</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutput1-duplicateoutput">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DuplicateOutput(win32.System.Com.IUnknown*pDevice, win32.Graphics.Dxgi.IDXGIOutputDuplication**ppOutputDuplication)
            {
                fixed (IDXGIOutput1*pThis = &this)
                    return lpVtbl->DuplicateOutput_23(pThis, pDevice, ppOutputDuplication);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*, win32.System.Com.HRESULT>GetDesc_8;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.HRESULT>GetDisplayModeList_9;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>FindClosestMatchingMode_10;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.System.Com.HRESULT>WaitForVBlank_11;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.System.Com.IUnknown*, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>TakeOwnership_12;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, void>ReleaseOwnership_13;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*, win32.System.Com.HRESULT>GetGammaControlCapabilities_14;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*, win32.System.Com.HRESULT>SetGammaControl_15;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*, win32.System.Com.HRESULT>GetGammaControl_16;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.IDXGISurface*, win32.System.Com.HRESULT>SetDisplaySurface_17;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.IDXGISurface*, win32.System.Com.HRESULT>GetDisplaySurfaceData_18;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*, win32.System.Com.HRESULT>GetFrameStatistics_19;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.System.Com.HRESULT>GetDisplayModeList1_20;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>FindClosestMatchingMode1_21;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.Graphics.Dxgi.IDXGIResource*, win32.System.Com.HRESULT>GetDisplaySurfaceData1_22;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput1*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.IDXGIOutputDuplication**, win32.System.Com.HRESULT>DuplicateOutput_23;
            }

            private Vtbl*lpVtbl;
        }
    }
}