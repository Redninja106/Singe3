// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("6007896C-3244-4AFD-BF18-A6D3BEDA5023")]
        internal unsafe struct IDXGIDevice3
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            internal unsafe win32.System.Com.HRESULT GetAdapter(win32.Graphics.Dxgi.IDXGIAdapter**pAdapter)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->GetAdapter_8(pThis, pAdapter);
            }

            /// <inheritdoc cref = "CreateSurface(win32.Graphics.Dxgi.DXGI_SURFACE_DESC*, uint, uint, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*, win32.Graphics.Dxgi.IDXGISurface**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSurface(in win32.Graphics.Dxgi.DXGI_SURFACE_DESC pDesc, uint NumSurfaces, uint Usage, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE? pSharedResource, win32.Graphics.Dxgi.IDXGISurface**ppSurface)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SURFACE_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE pSharedResourceLocal = pSharedResource.HasValue ? pSharedResource.Value : default(win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE);
                    win32.System.Com.HRESULT __result = this.CreateSurface(pDescLocal, NumSurfaces, Usage, pSharedResource.HasValue ? &pSharedResourceLocal : null, ppSurface);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSurface(win32.Graphics.Dxgi.DXGI_SURFACE_DESC*pDesc, uint NumSurfaces, uint Usage, [Optional] win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*pSharedResource, win32.Graphics.Dxgi.IDXGISurface**ppSurface)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->CreateSurface_9(pThis, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
            }

            /// <inheritdoc cref = "QueryResourceResidency(win32.System.Com.IUnknown**, win32.Graphics.Dxgi.DXGI_RESIDENCY*, uint)"/>
            internal unsafe win32.System.Com.HRESULT QueryResourceResidency(win32.System.Com.IUnknown**ppResources, Span<win32.Graphics.Dxgi.DXGI_RESIDENCY> pResidencyStatus)
            {
                fixed (win32.Graphics.Dxgi.DXGI_RESIDENCY*pResidencyStatusLocal = pResidencyStatus)
                {
                    win32.System.Com.HRESULT __result = this.QueryResourceResidency(ppResources, pResidencyStatusLocal, (uint)pResidencyStatus.Length);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryResourceResidency(win32.System.Com.IUnknown**ppResources, win32.Graphics.Dxgi.DXGI_RESIDENCY*pResidencyStatus, uint NumResources)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->QueryResourceResidency_10(pThis, ppResources, pResidencyStatus, NumResources);
            }

            internal win32.System.Com.HRESULT SetGPUThreadPriority(int Priority)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->SetGPUThreadPriority_11(pThis, Priority);
            }

            /// <inheritdoc cref = "GetGPUThreadPriority(int *)"/>
            internal unsafe win32.System.Com.HRESULT GetGPUThreadPriority(out int pPriority)
            {
                fixed (int *pPriorityLocal = &pPriority)
                {
                    win32.System.Com.HRESULT __result = this.GetGPUThreadPriority(pPriorityLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetGPUThreadPriority(int *pPriority)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->GetGPUThreadPriority_12(pThis, pPriority);
            }

            internal win32.System.Com.HRESULT SetMaximumFrameLatency(uint MaxLatency)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->SetMaximumFrameLatency_13(pThis, MaxLatency);
            }

            /// <inheritdoc cref = "GetMaximumFrameLatency(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(out uint pMaxLatency)
            {
                fixed (uint *pMaxLatencyLocal = &pMaxLatency)
                {
                    win32.System.Com.HRESULT __result = this.GetMaximumFrameLatency(pMaxLatencyLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(uint *pMaxLatency)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->GetMaximumFrameLatency_14(pThis, pMaxLatency);
            }

            internal unsafe win32.System.Com.HRESULT OfferResources(uint NumResources, win32.Graphics.Dxgi.IDXGIResource**ppResources, win32.Graphics.Dxgi.DXGI_OFFER_RESOURCE_PRIORITY Priority)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->OfferResources_15(pThis, NumResources, ppResources, Priority);
            }

            internal unsafe win32.System.Com.HRESULT ReclaimResources(uint NumResources, win32.Graphics.Dxgi.IDXGIResource**ppResources, [Optional] win32.System.SystemServices.BOOL*pDiscarded)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->ReclaimResources_16(pThis, NumResources, ppResources, pDiscarded);
            }

            /// <inheritdoc cref = "EnqueueSetEvent(win32.System.SystemServices.HANDLE)"/>
            internal unsafe win32.System.Com.HRESULT EnqueueSetEvent(SafeHandle hEvent)
            {
                bool hEventAddRef = false;
                try
                {
                    win32.System.SystemServices.HANDLE hEventLocal;
                    if (hEvent is object)
                    {
                        hEvent.DangerousAddRef(ref hEventAddRef);
                        hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                    }
                    else
                        hEventLocal = default(win32.System.SystemServices.HANDLE);
                    win32.System.Com.HRESULT __result = this.EnqueueSetEvent(hEventLocal);
                    return __result;
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            internal win32.System.Com.HRESULT EnqueueSetEvent(win32.System.SystemServices.HANDLE hEvent)
            {
                fixed (IDXGIDevice3*pThis = &this)
                    return lpVtbl->EnqueueSetEvent_17(pThis, hEvent);
            }

            /// <summary>Trims the graphics memory allocated by the IDXGIDevice3 DXGI device on the app's behalf.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidevice3-trim">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Trim()
            {
                fixed (IDXGIDevice3*pThis = &this)
                    lpVtbl->Trim_18(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>GetAdapter_8;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, win32.Graphics.Dxgi.DXGI_SURFACE_DESC*, uint, uint, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*, win32.Graphics.Dxgi.IDXGISurface**, win32.System.Com.HRESULT>CreateSurface_9;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, win32.System.Com.IUnknown**, win32.Graphics.Dxgi.DXGI_RESIDENCY*, uint, win32.System.Com.HRESULT>QueryResourceResidency_10;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, int, win32.System.Com.HRESULT>SetGPUThreadPriority_11;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, int *, win32.System.Com.HRESULT>GetGPUThreadPriority_12;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, uint, win32.System.Com.HRESULT>SetMaximumFrameLatency_13;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, uint *, win32.System.Com.HRESULT>GetMaximumFrameLatency_14;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, uint, win32.Graphics.Dxgi.IDXGIResource**, win32.Graphics.Dxgi.DXGI_OFFER_RESOURCE_PRIORITY, win32.System.Com.HRESULT>OfferResources_15;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, uint, win32.Graphics.Dxgi.IDXGIResource**, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>ReclaimResources_16;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, win32.System.SystemServices.HANDLE, win32.System.Com.HRESULT>EnqueueSetEvent_17;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice3*, void>Trim_18;
            }

            private Vtbl*lpVtbl;
        }
    }
}