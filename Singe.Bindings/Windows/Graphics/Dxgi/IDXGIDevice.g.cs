// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("54EC77FA-1377-44E6-8C32-88FD5F44C84C")]
        internal unsafe struct IDXGIDevice
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <summary>Returns the adapter for the specified device.</summary>
            /// <param name = "pAdapter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiadapter">IDXGIAdapter</a>**</b></para>
            /// <para>The address of an <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiadapter">IDXGIAdapter</a> interface pointer to the adapter.  This parameter must not be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-getadapter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> that indicates failure. If the <i>pAdapter</i> parameter is <b>NULL</b> this method returns E_INVALIDARG.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-getadapter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetAdapter(win32.Graphics.Dxgi.IDXGIAdapter**pAdapter)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->GetAdapter_8(pThis, pAdapter);
            }

            /// <inheritdoc cref = "CreateSurface(win32.Graphics.Dxgi.DXGI_SURFACE_DESC*, uint, uint, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*, win32.Graphics.Dxgi.IDXGISurface**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSurface(in win32.Graphics.Dxgi.DXGI_SURFACE_DESC pDesc, uint NumSurfaces, uint Usage, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE? pSharedResource, win32.Graphics.Dxgi.IDXGISurface**ppSurface)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SURFACE_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE pSharedResourceLocal = pSharedResource.HasValue ? pSharedResource.Value : default(win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE);
                    win32.System.Com.HRESULT __result = this.CreateSurface(pDescLocal, NumSurfaces, Usage, pSharedResource.HasValue ? &pSharedResourceLocal : null, ppSurface);
                    return __result;
                }
            }

            /// <summary>Returns a surface. This method is used internally and you should not call it directly in your application.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_surface_desc">DXGI_SURFACE_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_surface_desc">DXGI_SURFACE_DESC</a> structure that describes the surface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-createsurface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSurfaces">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of surfaces to create.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-createsurface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Usage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-usage">DXGI_USAGE</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-usage">DXGI_USAGE</a> flag that specifies how the surface is expected to be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-createsurface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSharedResource">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_shared_resource">DXGI_SHARED_RESOURCE</a>*</b></para>
            /// <para>An optional pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_shared_resource">DXGI_SHARED_RESOURCE</a> structure that contains shared resource information for opening views of such resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-createsurface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSurface">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>**</b></para>
            /// <para>The address of an <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a> interface pointer to the first created surface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-createsurface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; an error code otherwise.  For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-createsurface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSurface(win32.Graphics.Dxgi.DXGI_SURFACE_DESC*pDesc, uint NumSurfaces, uint Usage, [Optional] win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*pSharedResource, win32.Graphics.Dxgi.IDXGISurface**ppSurface)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->CreateSurface_9(pThis, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
            }

            /// <inheritdoc cref = "QueryResourceResidency(win32.System.Com.IUnknown**, win32.Graphics.Dxgi.DXGI_RESIDENCY*, uint)"/>
            internal unsafe win32.System.Com.HRESULT QueryResourceResidency(win32.System.Com.IUnknown**ppResources, Span<win32.Graphics.Dxgi.DXGI_RESIDENCY> pResidencyStatus)
            {
                fixed (win32.Graphics.Dxgi.DXGI_RESIDENCY*pResidencyStatusLocal = pResidencyStatus)
                {
                    win32.System.Com.HRESULT __result = this.QueryResourceResidency(ppResources, pResidencyStatusLocal, (uint)pResidencyStatus.Length);
                    return __result;
                }
            }

            /// <summary>Gets the residency status of an array of resources.</summary>
            /// <param name = "ppResources">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>*</b></para>
            /// <para>An array of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiresource">IDXGIResource</a> interfaces.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-queryresourceresidency#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pResidencyStatus">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_residency">DXGI_RESIDENCY</a>*</b></para>
            /// <para>An array of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_residency">DXGI_RESIDENCY</a> flags. Each element describes the residency status for corresponding element in the <i>ppResources</i> argument array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-queryresourceresidency#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumResources">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources in the <i>ppResources</i> argument array and <i>pResidencyStatus</i> argument array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-queryresourceresidency#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_DEVICE_REMOVED</a>, E_INVALIDARG, or E_POINTER (see <a href = "/windows/desktop/SecCrypto/common-hresult-values">Common HRESULT Values</a> and WinError.h for more information).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-queryresourceresidency">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT QueryResourceResidency(win32.System.Com.IUnknown**ppResources, win32.Graphics.Dxgi.DXGI_RESIDENCY*pResidencyStatus, uint NumResources)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->QueryResourceResidency_10(pThis, ppResources, pResidencyStatus, NumResources);
            }

            /// <summary>Sets the GPU thread priority.</summary>
            /// <param name = "Priority">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b></para>
            /// <para>A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-setgputhreadpriority#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Return S_OK if successful; otherwise, returns E_INVALIDARG if the <i>Priority</i> parameter is invalid.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-setgputhreadpriority">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetGPUThreadPriority(int Priority)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->SetGPUThreadPriority_11(pThis, Priority);
            }

            /// <inheritdoc cref = "GetGPUThreadPriority(int *)"/>
            internal unsafe win32.System.Com.HRESULT GetGPUThreadPriority(out int pPriority)
            {
                fixed (int *pPriorityLocal = &pPriority)
                {
                    win32.System.Com.HRESULT __result = this.GetGPUThreadPriority(pPriorityLocal);
                    return __result;
                }
            }

            /// <summary>Gets the GPU thread priority.</summary>
            /// <param name = "pPriority">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a>*</b></para>
            /// <para>A pointer to a variable that receives a value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-getgputhreadpriority#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Return S_OK if successful; otherwise, returns E_POINTER if the <i>pPriority</i> parameter is <b>NULL</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgidevice-getgputhreadpriority">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGPUThreadPriority(int *pPriority)
            {
                fixed (IDXGIDevice*pThis = &this)
                    return lpVtbl->GetGPUThreadPriority_12(pThis, pPriority);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>GetAdapter_8;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, win32.Graphics.Dxgi.DXGI_SURFACE_DESC*, uint, uint, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*, win32.Graphics.Dxgi.IDXGISurface**, win32.System.Com.HRESULT>CreateSurface_9;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, win32.System.Com.IUnknown**, win32.Graphics.Dxgi.DXGI_RESIDENCY*, uint, win32.System.Com.HRESULT>QueryResourceResidency_10;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, int, win32.System.Com.HRESULT>SetGPUThreadPriority_11;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice*, int *, win32.System.Com.HRESULT>GetGPUThreadPriority_12;
            }

            private Vtbl*lpVtbl;
        }
    }
}