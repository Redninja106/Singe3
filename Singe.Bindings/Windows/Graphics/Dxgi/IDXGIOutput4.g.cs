// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("DC7DCA35-2196-414D-9F53-617884032A60")]
        internal unsafe struct IDXGIOutput4
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Dxgi.DXGI_OUTPUT_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*pDesc)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetDesc_8(pThis, pDesc);
            }

            /// <inheritdoc cref = "GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, ref uint pNumModes, win32.Graphics.Dxgi.DXGI_MODE_DESC*pDesc)
            {
                fixed (uint *pNumModesLocal = &pNumModes)
                {
                    win32.System.Com.HRESULT __result = this.GetDisplayModeList(EnumFormat, Flags, pNumModesLocal, pDesc);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDisplayModeList(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, uint *pNumModes, [Optional] win32.Graphics.Dxgi.DXGI_MODE_DESC*pDesc)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetDisplayModeList_9(pThis, EnumFormat, Flags, pNumModes, pDesc);
            }

            /// <inheritdoc cref = "FindClosestMatchingMode(win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode(in win32.Graphics.Dxgi.DXGI_MODE_DESC pModeToMatch, out win32.Graphics.Dxgi.DXGI_MODE_DESC pClosestMatch, win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pClosestMatchLocal = &pClosestMatch)
                {
                    fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pModeToMatchLocal = &pModeToMatch)
                    {
                        win32.System.Com.HRESULT __result = this.FindClosestMatchingMode(pModeToMatchLocal, pClosestMatchLocal, pConcernedDevice);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode(win32.Graphics.Dxgi.DXGI_MODE_DESC*pModeToMatch, win32.Graphics.Dxgi.DXGI_MODE_DESC*pClosestMatch, [Optional] win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->FindClosestMatchingMode_10(pThis, pModeToMatch, pClosestMatch, pConcernedDevice);
            }

            internal win32.System.Com.HRESULT WaitForVBlank()
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->WaitForVBlank_11(pThis);
            }

            internal unsafe win32.System.Com.HRESULT TakeOwnership(win32.System.Com.IUnknown*pDevice, win32.System.SystemServices.BOOL Exclusive)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->TakeOwnership_12(pThis, pDevice, Exclusive);
            }

            internal void ReleaseOwnership()
            {
                fixed (IDXGIOutput4*pThis = &this)
                    lpVtbl->ReleaseOwnership_13(pThis);
            }

            /// <inheritdoc cref = "GetGammaControlCapabilities(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*)"/>
            internal unsafe win32.System.Com.HRESULT GetGammaControlCapabilities(out win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES pGammaCaps)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*pGammaCapsLocal = &pGammaCaps)
                {
                    win32.System.Com.HRESULT __result = this.GetGammaControlCapabilities(pGammaCapsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetGammaControlCapabilities(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*pGammaCaps)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetGammaControlCapabilities_14(pThis, pGammaCaps);
            }

            /// <inheritdoc cref = "SetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*)"/>
            internal unsafe win32.System.Com.HRESULT SetGammaControl(in win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL pArray)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArrayLocal = &pArray)
                {
                    win32.System.Com.HRESULT __result = this.SetGammaControl(pArrayLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArray)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->SetGammaControl_15(pThis, pArray);
            }

            /// <inheritdoc cref = "GetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*)"/>
            internal unsafe win32.System.Com.HRESULT GetGammaControl(out win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL pArray)
            {
                fixed (win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArrayLocal = &pArray)
                {
                    win32.System.Com.HRESULT __result = this.GetGammaControl(pArrayLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetGammaControl(win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*pArray)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetGammaControl_16(pThis, pArray);
            }

            internal unsafe win32.System.Com.HRESULT SetDisplaySurface(win32.Graphics.Dxgi.IDXGISurface*pScanoutSurface)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->SetDisplaySurface_17(pThis, pScanoutSurface);
            }

            internal unsafe win32.System.Com.HRESULT GetDisplaySurfaceData(win32.Graphics.Dxgi.IDXGISurface*pDestination)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetDisplaySurfaceData_18(pThis, pDestination);
            }

            /// <inheritdoc cref = "GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(out win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS pStats)
            {
                fixed (win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStatsLocal = &pStats)
                {
                    win32.System.Com.HRESULT __result = this.GetFrameStatistics(pStatsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStats)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetFrameStatistics_19(pThis, pStats);
            }

            /// <inheritdoc cref = "GetDisplayModeList1(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC1*)"/>
            internal unsafe win32.System.Com.HRESULT GetDisplayModeList1(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, ref uint pNumModes, win32.Graphics.Dxgi.DXGI_MODE_DESC1*pDesc)
            {
                fixed (uint *pNumModesLocal = &pNumModes)
                {
                    win32.System.Com.HRESULT __result = this.GetDisplayModeList1(EnumFormat, Flags, pNumModesLocal, pDesc);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDisplayModeList1(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, uint Flags, uint *pNumModes, [Optional] win32.Graphics.Dxgi.DXGI_MODE_DESC1*pDesc)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetDisplayModeList1_20(pThis, EnumFormat, Flags, pNumModes, pDesc);
            }

            /// <inheritdoc cref = "FindClosestMatchingMode1(win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode1(in win32.Graphics.Dxgi.DXGI_MODE_DESC1 pModeToMatch, out win32.Graphics.Dxgi.DXGI_MODE_DESC1 pClosestMatch, win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC1*pClosestMatchLocal = &pClosestMatch)
                {
                    fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC1*pModeToMatchLocal = &pModeToMatch)
                    {
                        win32.System.Com.HRESULT __result = this.FindClosestMatchingMode1(pModeToMatchLocal, pClosestMatchLocal, pConcernedDevice);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT FindClosestMatchingMode1(win32.Graphics.Dxgi.DXGI_MODE_DESC1*pModeToMatch, win32.Graphics.Dxgi.DXGI_MODE_DESC1*pClosestMatch, [Optional] win32.System.Com.IUnknown*pConcernedDevice)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->FindClosestMatchingMode1_21(pThis, pModeToMatch, pClosestMatch, pConcernedDevice);
            }

            internal unsafe win32.System.Com.HRESULT GetDisplaySurfaceData1(win32.Graphics.Dxgi.IDXGIResource*pDestination)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->GetDisplaySurfaceData1_22(pThis, pDestination);
            }

            internal unsafe win32.System.Com.HRESULT DuplicateOutput(win32.System.Com.IUnknown*pDevice, win32.Graphics.Dxgi.IDXGIOutputDuplication**ppOutputDuplication)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->DuplicateOutput_23(pThis, pDevice, ppOutputDuplication);
            }

            internal win32.System.SystemServices.BOOL SupportsOverlays()
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->SupportsOverlays_24(pThis);
            }

            /// <inheritdoc cref = "CheckOverlaySupport(win32.Graphics.Dxgi.DXGI_FORMAT, win32.System.Com.IUnknown*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckOverlaySupport(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, win32.System.Com.IUnknown*pConcernedDevice, out uint pFlags)
            {
                fixed (uint *pFlagsLocal = &pFlags)
                {
                    win32.System.Com.HRESULT __result = this.CheckOverlaySupport(EnumFormat, pConcernedDevice, pFlagsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CheckOverlaySupport(win32.Graphics.Dxgi.DXGI_FORMAT EnumFormat, win32.System.Com.IUnknown*pConcernedDevice, uint *pFlags)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->CheckOverlaySupport_25(pThis, EnumFormat, pConcernedDevice, pFlags);
            }

            /// <inheritdoc cref = "CheckOverlayColorSpaceSupport(win32.Graphics.Dxgi.DXGI_FORMAT, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE, win32.System.Com.IUnknown*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckOverlayColorSpaceSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE ColorSpace, win32.System.Com.IUnknown*pConcernedDevice, out uint pFlags)
            {
                fixed (uint *pFlagsLocal = &pFlags)
                {
                    win32.System.Com.HRESULT __result = this.CheckOverlayColorSpaceSupport(Format, ColorSpace, pConcernedDevice, pFlagsLocal);
                    return __result;
                }
            }

            /// <summary>Checks for overlay color space support.</summary>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the color format.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgioutput4-checkoverlaycolorspacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ColorSpace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a>-typed value that specifies color space type to check overlay support for.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgioutput4-checkoverlaycolorspacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pConcernedDevice">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>*</b></para>
            /// <para>A pointer to the Direct3D device interface. <b>CheckOverlayColorSpaceSupport</b> returns only support info about this scan-out device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgioutput4-checkoverlaycolorspacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A pointer to a variable that receives a combination of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_4/ne-dxgi1_4-dxgi_overlay_color_space_support_flag">DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for overlay color space support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgioutput4-checkoverlaycolorspacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>S_OK</b> on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_4/nf-dxgi1_4-idxgioutput4-checkoverlaycolorspacesupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckOverlayColorSpaceSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE ColorSpace, win32.System.Com.IUnknown*pConcernedDevice, uint *pFlags)
            {
                fixed (IDXGIOutput4*pThis = &this)
                    return lpVtbl->CheckOverlayColorSpaceSupport_26(pThis, Format, ColorSpace, pConcernedDevice, pFlags);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_OUTPUT_DESC*, win32.System.Com.HRESULT>GetDesc_8;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.HRESULT>GetDisplayModeList_9;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>FindClosestMatchingMode_10;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.System.Com.HRESULT>WaitForVBlank_11;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.System.Com.IUnknown*, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>TakeOwnership_12;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, void>ReleaseOwnership_13;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES*, win32.System.Com.HRESULT>GetGammaControlCapabilities_14;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*, win32.System.Com.HRESULT>SetGammaControl_15;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_GAMMA_CONTROL*, win32.System.Com.HRESULT>GetGammaControl_16;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.IDXGISurface*, win32.System.Com.HRESULT>SetDisplaySurface_17;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.IDXGISurface*, win32.System.Com.HRESULT>GetDisplaySurfaceData_18;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*, win32.System.Com.HRESULT>GetFrameStatistics_19;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.System.Com.HRESULT>GetDisplayModeList1_20;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.Graphics.Dxgi.DXGI_MODE_DESC1*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>FindClosestMatchingMode1_21;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.IDXGIResource*, win32.System.Com.HRESULT>GetDisplaySurfaceData1_22;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.IDXGIOutputDuplication**, win32.System.Com.HRESULT>DuplicateOutput_23;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.System.SystemServices.BOOL>SupportsOverlays_24;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_FORMAT, win32.System.Com.IUnknown*, uint *, win32.System.Com.HRESULT>CheckOverlaySupport_25;
                internal delegate *unmanaged[Stdcall]<IDXGIOutput4*, win32.Graphics.Dxgi.DXGI_FORMAT, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE, win32.System.Com.IUnknown*, uint *, win32.System.Com.HRESULT>CheckOverlayColorSpaceSupport_26;
            }

            private Vtbl*lpVtbl;
        }
    }
}