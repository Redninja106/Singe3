// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("DD95B90B-F05F-4F6A-BD65-25BFB264BD84")]
        internal unsafe struct IDXGISwapChainMedia
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGISwapChainMedia*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGISwapChainMedia*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGISwapChainMedia*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetFrameStatisticsMedia(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS_MEDIA*)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameStatisticsMedia(out win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS_MEDIA pStats)
            {
                fixed (win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS_MEDIA*pStatsLocal = &pStats)
                {
                    win32.System.Com.HRESULT __result = this.GetFrameStatisticsMedia(pStatsLocal);
                    return __result;
                }
            }

            /// <summary>Queries the system for a DXGI_FRAME_STATISTICS_MEDIA structure that indicates whether a custom refresh rate is currently approved by the system.</summary>
            /// <param name = "pStats">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_3/ns-dxgi1_3-dxgi_frame_statistics_media">DXGI_FRAME_STATISTICS_MEDIA</a> structure indicating whether the system currently approves the custom refresh rate request.</param>
            /// <returns>This method returns S_OK on success, or a DXGI error code on failure.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchainmedia-getframestatisticsmedia">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFrameStatisticsMedia(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS_MEDIA*pStats)
            {
                fixed (IDXGISwapChainMedia*pThis = &this)
                    return lpVtbl->GetFrameStatisticsMedia_4(pThis, pStats);
            }

            /// <summary>Requests a custom presentation duration (custom refresh rate).</summary>
            /// <param name = "Duration">The custom presentation duration, specified in hundreds of nanoseconds.</param>
            /// <returns>This method returns S_OK on success, or a DXGI error code on failure.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchainmedia-setpresentduration">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetPresentDuration(uint Duration)
            {
                fixed (IDXGISwapChainMedia*pThis = &this)
                    return lpVtbl->SetPresentDuration_5(pThis, Duration);
            }

            /// <inheritdoc cref = "CheckPresentDurationSupport(uint, uint *, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckPresentDurationSupport(uint DesiredPresentDuration, out uint pClosestSmallerPresentDuration, out uint pClosestLargerPresentDuration)
            {
                fixed (uint *pClosestLargerPresentDurationLocal = &pClosestLargerPresentDuration)
                {
                    fixed (uint *pClosestSmallerPresentDurationLocal = &pClosestSmallerPresentDuration)
                    {
                        win32.System.Com.HRESULT __result = this.CheckPresentDurationSupport(DesiredPresentDuration, pClosestSmallerPresentDurationLocal, pClosestLargerPresentDurationLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Queries the graphics driver for a supported frame present duration corresponding to a custom refresh rate.</summary>
            /// <param name = "DesiredPresentDuration">Indicates the frame duration to check. This value is the duration of one frame at the desired refresh rate, specified in hundreds of nanoseconds. For example, set this field to 167777 to check for 60 Hz refresh rate support.</param>
            /// <param name = "pClosestSmallerPresentDuration">A variable that will be set to the closest supported frame present duration that's smaller than the requested value, or zero if the device does not support any lower duration.</param>
            /// <param name = "pClosestLargerPresentDuration">A variable that will be set to the closest supported frame present duration that's larger than the requested value, or zero if the device does not support any higher duration.</param>
            /// <returns>This method returns S_OK on success, or a DXGI error code on failure.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchainmedia-checkpresentdurationsupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckPresentDurationSupport(uint DesiredPresentDuration, uint *pClosestSmallerPresentDuration, uint *pClosestLargerPresentDuration)
            {
                fixed (IDXGISwapChainMedia*pThis = &this)
                    return lpVtbl->CheckPresentDurationSupport_6(pThis, DesiredPresentDuration, pClosestSmallerPresentDuration, pClosestLargerPresentDuration);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGISwapChainMedia*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChainMedia*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChainMedia*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChainMedia*, win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS_MEDIA*, win32.System.Com.HRESULT>GetFrameStatisticsMedia_4;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChainMedia*, uint, win32.System.Com.HRESULT>SetPresentDuration_5;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChainMedia*, uint, uint *, uint *, win32.System.Com.HRESULT>CheckPresentDurationSupport_6;
            }

            private Vtbl*lpVtbl;
        }
    }
}