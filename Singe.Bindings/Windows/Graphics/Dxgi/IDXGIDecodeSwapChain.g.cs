// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("2633066B-4514-4C7A-8FD8-12EA98059D18")]
        internal unsafe struct IDXGIDecodeSwapChain
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Presents a frame on the output adapter.</summary>
            /// <param name = "BufferToPresent">An index indicating which member of the subresource array to present.</param>
            /// <param name = "SyncInterval">
            /// <para>An integer that specifies how to synchronize presentation of a frame with the vertical blank.</para>
            /// <para>For the bit-block transfer (bitblt) model (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_swap_effect">DXGI_SWAP_EFFECT_DISCARD</a>or <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_swap_effect">DXGI_SWAP_EFFECT_SEQUENTIAL</a>), values are:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-presentbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Flags">
            /// <para>An integer value that contains swap-chain presentation options. These options are defined by the <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-present">DXGI_PRESENT</a> constants.</para>
            /// <para>The <b>DXGI_PRESENT_USE_DURATION</b> flag must be set if a custom present duration (custom refresh rate) is being used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-presentbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>This method returns <b>S_OK</b> on success, or it returns one of the following error codes:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-presentbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PresentBuffer(uint BufferToPresent, uint SyncInterval, uint Flags)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->PresentBuffer_4(pThis, BufferToPresent, SyncInterval, Flags);
            }

            /// <inheritdoc cref = "SetSourceRect(win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT SetSourceRect(in win32.UI.DisplayDevices.RECT pRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectLocal = &pRect)
                {
                    win32.System.Com.HRESULT __result = this.SetSourceRect(pRectLocal);
                    return __result;
                }
            }

            /// <summary>Sets the rectangle that defines the source region for the video processing blit operation.</summary>
            /// <param name = "pRect">
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the source region to set for the swap chain.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-setsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method returns S_OK on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-setsourcerect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetSourceRect(win32.UI.DisplayDevices.RECT*pRect)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->SetSourceRect_5(pThis, pRect);
            }

            /// <inheritdoc cref = "SetTargetRect(win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT SetTargetRect(in win32.UI.DisplayDevices.RECT pRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectLocal = &pRect)
                {
                    win32.System.Com.HRESULT __result = this.SetTargetRect(pRectLocal);
                    return __result;
                }
            }

            /// <summary>Sets the rectangle that defines the target region for the video processing blit operation.</summary>
            /// <param name = "pRect">
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the target region to set for the swap chain.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-settargetrect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method returns S_OK on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-settargetrect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetTargetRect(win32.UI.DisplayDevices.RECT*pRect)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->SetTargetRect_6(pThis, pRect);
            }

            /// <summary>Sets the size of the destination surface to use for the video processing blit operation.</summary>
            /// <param name = "Width">The width of the destination size, in pixels.</param>
            /// <param name = "Height">The height of the destination size, in pixels.</param>
            /// <returns>This method returns S_OK on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-setdestsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetDestSize(uint Width, uint Height)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->SetDestSize_7(pThis, Width, Height);
            }

            /// <inheritdoc cref = "GetSourceRect(win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT GetSourceRect(out win32.UI.DisplayDevices.RECT pRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectLocal = &pRect)
                {
                    win32.System.Com.HRESULT __result = this.GetSourceRect(pRectLocal);
                    return __result;
                }
            }

            /// <summary>Gets the source region that is used for the swap chain.</summary>
            /// <param name = "pRect">
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the source region for the swap chain.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-getsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method returns S_OK on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-getsourcerect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSourceRect(win32.UI.DisplayDevices.RECT*pRect)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->GetSourceRect_8(pThis, pRect);
            }

            /// <inheritdoc cref = "GetTargetRect(win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT GetTargetRect(out win32.UI.DisplayDevices.RECT pRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectLocal = &pRect)
                {
                    win32.System.Com.HRESULT __result = this.GetTargetRect(pRectLocal);
                    return __result;
                }
            }

            /// <summary>Gets the rectangle that defines the target region for the video processing blit operation.</summary>
            /// <param name = "pRect">
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the target region for the swap chain.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-gettargetrect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method returns S_OK on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-gettargetrect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTargetRect(win32.UI.DisplayDevices.RECT*pRect)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->GetTargetRect_9(pThis, pRect);
            }

            /// <inheritdoc cref = "GetDestSize(uint *, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetDestSize(out uint pWidth, out uint pHeight)
            {
                fixed (uint *pHeightLocal = &pHeight)
                {
                    fixed (uint *pWidthLocal = &pWidth)
                    {
                        win32.System.Com.HRESULT __result = this.GetDestSize(pWidthLocal, pHeightLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Gets the size of the destination surface to use for the video processing blit operation.</summary>
            /// <param name = "pWidth">A pointer to a variable that receives the width in pixels.</param>
            /// <param name = "pHeight">A pointer to a variable that receives the height in pixels.</param>
            /// <returns>This method returns S_OK on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-getdestsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDestSize(uint *pWidth, uint *pHeight)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->GetDestSize_10(pThis, pWidth, pHeight);
            }

            /// <summary>Sets the color space used by the swap chain.</summary>
            /// <param name = "ColorSpace">A pointer to a combination of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_3/ne-dxgi1_3-dxgi_multiplane_overlay_ycbcr_flags">DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies the color space to set for the swap chain.</param>
            /// <returns>This method returns S_OK on success, or it returns one of the error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-setcolorspace">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetColorSpace(win32.Graphics.Dxgi.DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace)
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->SetColorSpace_11(pThis, ColorSpace);
            }

            /// <summary>Gets the color space used by the swap chain.</summary>
            /// <returns>A combination of <a href = "/windows/desktop/api/dxgi1_3/ne-dxgi1_3-dxgi_multiplane_overlay_ycbcr_flags">DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies the color space for the swap chain.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgidecodeswapchain-getcolorspace">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Dxgi.DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS GetColorSpace()
            {
                fixed (IDXGIDecodeSwapChain*pThis = &this)
                    return lpVtbl->GetColorSpace_12(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint, uint, uint, win32.System.Com.HRESULT>PresentBuffer_4;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>SetSourceRect_5;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>SetTargetRect_6;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint, uint, win32.System.Com.HRESULT>SetDestSize_7;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>GetSourceRect_8;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>GetTargetRect_9;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, uint *, uint *, win32.System.Com.HRESULT>GetDestSize_10;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, win32.Graphics.Dxgi.DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS, win32.System.Com.HRESULT>SetColorSpace_11;
                internal delegate *unmanaged[Stdcall]<IDXGIDecodeSwapChain*, win32.Graphics.Dxgi.DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS>GetColorSpace_12;
            }

            private Vtbl*lpVtbl;
        }
    }
}