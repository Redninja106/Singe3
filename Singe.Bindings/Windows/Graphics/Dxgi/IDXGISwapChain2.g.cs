// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("A8BE2AC4-199F-4946-B331-79599FB98DE7")]
        internal unsafe struct IDXGISwapChain2
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <inheritdoc cref = "GetDevice(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetDevice(in global::System.Guid riid, out void *ppDevice)
            {
                fixed (void **ppDeviceLocal = &ppDevice)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetDevice(riidLocal, ppDeviceLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDevice(global::System.Guid*riid, void **ppDevice)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetDevice_8(pThis, riid, ppDevice);
            }

            internal win32.System.Com.HRESULT Present(uint SyncInterval, uint Flags)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->Present_9(pThis, SyncInterval, Flags);
            }

            /// <inheritdoc cref = "GetBuffer(uint, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetBuffer(uint Buffer, in global::System.Guid riid, out void *ppSurface)
            {
                fixed (void **ppSurfaceLocal = &ppSurface)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetBuffer(Buffer, riidLocal, ppSurfaceLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetBuffer(uint Buffer, global::System.Guid*riid, void **ppSurface)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetBuffer_10(pThis, Buffer, riid, ppSurface);
            }

            internal unsafe win32.System.Com.HRESULT SetFullscreenState(win32.System.SystemServices.BOOL Fullscreen, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pTarget)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetFullscreenState_11(pThis, Fullscreen, pTarget);
            }

            internal unsafe win32.System.Com.HRESULT GetFullscreenState([Optional] win32.System.SystemServices.BOOL*pFullscreen, [Optional] win32.Graphics.Dxgi.IDXGIOutput**ppTarget)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetFullscreenState_12(pThis, pFullscreen, ppTarget);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDesc)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetDesc_13(pThis, pDesc);
            }

            internal win32.System.Com.HRESULT ResizeBuffers(uint BufferCount, uint Width, uint Height, win32.Graphics.Dxgi.DXGI_FORMAT NewFormat, uint SwapChainFlags)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->ResizeBuffers_14(pThis, BufferCount, Width, Height, NewFormat, SwapChainFlags);
            }

            /// <inheritdoc cref = "ResizeTarget(win32.Graphics.Dxgi.DXGI_MODE_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT ResizeTarget(in win32.Graphics.Dxgi.DXGI_MODE_DESC pNewTargetParameters)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_DESC*pNewTargetParametersLocal = &pNewTargetParameters)
                {
                    win32.System.Com.HRESULT __result = this.ResizeTarget(pNewTargetParametersLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT ResizeTarget(win32.Graphics.Dxgi.DXGI_MODE_DESC*pNewTargetParameters)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->ResizeTarget_15(pThis, pNewTargetParameters);
            }

            internal unsafe win32.System.Com.HRESULT GetContainingOutput(win32.Graphics.Dxgi.IDXGIOutput**ppOutput)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetContainingOutput_16(pThis, ppOutput);
            }

            /// <inheritdoc cref = "GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(out win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS pStats)
            {
                fixed (win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStatsLocal = &pStats)
                {
                    win32.System.Com.HRESULT __result = this.GetFrameStatistics(pStatsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFrameStatistics(win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*pStats)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetFrameStatistics_17(pThis, pStats);
            }

            /// <inheritdoc cref = "GetLastPresentCount(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetLastPresentCount(out uint pLastPresentCount)
            {
                fixed (uint *pLastPresentCountLocal = &pLastPresentCount)
                {
                    win32.System.Com.HRESULT __result = this.GetLastPresentCount(pLastPresentCountLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetLastPresentCount(uint *pLastPresentCount)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetLastPresentCount_18(pThis, pLastPresentCount);
            }

            /// <inheritdoc cref = "GetDesc1(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc1(out win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc1(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDesc1(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetDesc1_19(pThis, pDesc);
            }

            /// <inheritdoc cref = "GetFullscreenDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetFullscreenDesc(out win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetFullscreenDesc(pDescLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFullscreenDesc(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*pDesc)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetFullscreenDesc_20(pThis, pDesc);
            }

            /// <inheritdoc cref = "GetHwnd(win32.UI.WindowsAndMessaging.HWND*)"/>
            internal unsafe win32.System.Com.HRESULT GetHwnd(out win32.UI.WindowsAndMessaging.HWND pHwnd)
            {
                fixed (win32.UI.WindowsAndMessaging.HWND*pHwndLocal = &pHwnd)
                {
                    win32.System.Com.HRESULT __result = this.GetHwnd(pHwndLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetHwnd(win32.UI.WindowsAndMessaging.HWND*pHwnd)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetHwnd_21(pThis, pHwnd);
            }

            /// <inheritdoc cref = "GetCoreWindow(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetCoreWindow(in global::System.Guid refiid, out void *ppUnk)
            {
                fixed (void **ppUnkLocal = &ppUnk)
                {
                    fixed (global::System.Guid*refiidLocal = &refiid)
                    {
                        win32.System.Com.HRESULT __result = this.GetCoreWindow(refiidLocal, ppUnkLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetCoreWindow(global::System.Guid*refiid, void **ppUnk)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetCoreWindow_22(pThis, refiid, ppUnk);
            }

            /// <inheritdoc cref = "Present1(uint, uint, win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*)"/>
            internal unsafe win32.System.Com.HRESULT Present1(uint SyncInterval, uint PresentFlags, in win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS pPresentParameters)
            {
                fixed (win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*pPresentParametersLocal = &pPresentParameters)
                {
                    win32.System.Com.HRESULT __result = this.Present1(SyncInterval, PresentFlags, pPresentParametersLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT Present1(uint SyncInterval, uint PresentFlags, win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*pPresentParameters)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->Present1_23(pThis, SyncInterval, PresentFlags, pPresentParameters);
            }

            internal win32.System.SystemServices.BOOL IsTemporaryMonoSupported()
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->IsTemporaryMonoSupported_24(pThis);
            }

            internal unsafe win32.System.Com.HRESULT GetRestrictToOutput(win32.Graphics.Dxgi.IDXGIOutput**ppRestrictToOutput)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetRestrictToOutput_25(pThis, ppRestrictToOutput);
            }

            /// <inheritdoc cref = "SetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*)"/>
            internal unsafe win32.System.Com.HRESULT SetBackgroundColor(in win32.Graphics.Dxgi.DXGI_RGBA pColor)
            {
                fixed (win32.Graphics.Dxgi.DXGI_RGBA*pColorLocal = &pColor)
                {
                    win32.System.Com.HRESULT __result = this.SetBackgroundColor(pColorLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*pColor)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetBackgroundColor_26(pThis, pColor);
            }

            /// <inheritdoc cref = "GetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*)"/>
            internal unsafe win32.System.Com.HRESULT GetBackgroundColor(out win32.Graphics.Dxgi.DXGI_RGBA pColor)
            {
                fixed (win32.Graphics.Dxgi.DXGI_RGBA*pColorLocal = &pColor)
                {
                    win32.System.Com.HRESULT __result = this.GetBackgroundColor(pColorLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetBackgroundColor(win32.Graphics.Dxgi.DXGI_RGBA*pColor)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetBackgroundColor_27(pThis, pColor);
            }

            internal win32.System.Com.HRESULT SetRotation(win32.Graphics.Dxgi.DXGI_MODE_ROTATION Rotation)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetRotation_28(pThis, Rotation);
            }

            /// <inheritdoc cref = "GetRotation(win32.Graphics.Dxgi.DXGI_MODE_ROTATION*)"/>
            internal unsafe win32.System.Com.HRESULT GetRotation(out win32.Graphics.Dxgi.DXGI_MODE_ROTATION pRotation)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MODE_ROTATION*pRotationLocal = &pRotation)
                {
                    win32.System.Com.HRESULT __result = this.GetRotation(pRotationLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetRotation(win32.Graphics.Dxgi.DXGI_MODE_ROTATION*pRotation)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetRotation_29(pThis, pRotation);
            }

            /// <summary>Sets the source region to be used for the swap chain.</summary>
            /// <param name = "Width">Source width to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall width of the swap chain.</param>
            /// <param name = "Height">Source height to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall height of the swap chain.</param>
            /// <returns>
            /// <para>This method can return:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-setsourcesize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetSourceSize(uint Width, uint Height)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetSourceSize_30(pThis, Width, Height);
            }

            /// <inheritdoc cref = "GetSourceSize(uint *, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSourceSize(out uint pWidth, out uint pHeight)
            {
                fixed (uint *pHeightLocal = &pHeight)
                {
                    fixed (uint *pWidthLocal = &pWidth)
                    {
                        win32.System.Com.HRESULT __result = this.GetSourceSize(pWidthLocal, pHeightLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Gets the source region used for the swap chain.</summary>
            /// <param name = "pWidth">The current width of the source region of the swap chain. This value can range from 1 to the overall width of the swap chain.</param>
            /// <param name = "pHeight">The current height of the source region of the swap chain. This value can range from 1 to the overall height of the swap chain.</param>
            /// <returns>This method can return error codes that are described in the <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> topic.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-getsourcesize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSourceSize(uint *pWidth, uint *pHeight)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetSourceSize_31(pThis, pWidth, pHeight);
            }

            /// <summary>Sets the number of frames that the swap chain is allowed to queue for rendering.</summary>
            /// <param name = "MaxLatency">The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default.</param>
            /// <returns>Returns S_OK if successful; otherwise, DXGI_ERROR_DEVICE_REMOVED if the device was removed.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-setmaximumframelatency">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetMaximumFrameLatency(uint MaxLatency)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetMaximumFrameLatency_32(pThis, MaxLatency);
            }

            /// <inheritdoc cref = "GetMaximumFrameLatency(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(out uint pMaxLatency)
            {
                fixed (uint *pMaxLatencyLocal = &pMaxLatency)
                {
                    win32.System.Com.HRESULT __result = this.GetMaximumFrameLatency(pMaxLatencyLocal);
                    return __result;
                }
            }

            /// <summary>Gets the number of frames that the swap chain is allowed to queue for rendering.</summary>
            /// <param name = "pMaxLatency">The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default, but should be set to 2 if the scene takes longer than it takes for one vertical refresh (typically about 16ms) to draw.</param>
            /// <returns>
            /// <para>Returns S_OK if successful; otherwise, returns one of the following members of the <a href = "/windows/desktop/direct3d9/d3derr">D3DERR</a> enumerated type:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-getmaximumframelatency">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(uint *pMaxLatency)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetMaximumFrameLatency_33(pThis, pMaxLatency);
            }

            /// <inheritdoc cref = "GetFrameLatencyWaitableObject()"/>
            internal unsafe Microsoft.Win32.SafeHandles.SafeFileHandle GetFrameLatencyWaitableObject_SafeHandle()
            {
                win32.System.SystemServices.HANDLE __result = this.GetFrameLatencyWaitableObject();
                return new Microsoft.Win32.SafeHandles.SafeFileHandle(__result, ownsHandle: true);
            }

            /// <summary>Returns a waitable handle that signals when the DXGI adapter has finished presenting a new frame.</summary>
            /// <returns>A handle to the waitable object, or NULL if the swap chain was not created with <a href = "/windows/desktop/api/dxgi/ne-dxgi-dxgi_swap_chain_flag">DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-getframelatencywaitableobject">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.HANDLE GetFrameLatencyWaitableObject()
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetFrameLatencyWaitableObject_34(pThis);
            }

            /// <inheritdoc cref = "SetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*)"/>
            internal unsafe win32.System.Com.HRESULT SetMatrixTransform(in win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F pMatrix)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrixLocal = &pMatrix)
                {
                    win32.System.Com.HRESULT __result = this.SetMatrixTransform(pMatrixLocal);
                    return __result;
                }
            }

            /// <summary>Sets the transform matrix that will be applied to a composition swap chain upon the next present.</summary>
            /// <param name = "pMatrix">The transform matrix to use for swap chain scaling and translation. This function can only be used with composition swap chains created by <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition">IDXGIFactory2::CreateSwapChainForComposition</a>. Only scale and translation components are allowed in the matrix.</param>
            /// <returns>
            /// <para><b>SetMatrixTransform</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-setmatrixtransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrix)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->SetMatrixTransform_35(pThis, pMatrix);
            }

            /// <inheritdoc cref = "GetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetMatrixTransform(out win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F pMatrix)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrixLocal = &pMatrix)
                {
                    win32.System.Com.HRESULT __result = this.GetMatrixTransform(pMatrixLocal);
                    return __result;
                }
            }

            /// <summary>Gets the transform matrix that will be applied to a composition swap chain upon the next present.</summary>
            /// <param name = "pMatrix">
            /// <para>[out]</para>
            /// <para>The transform matrix currently used for swap chain scaling and translation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-getmatrixtransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para><b>GetMatrixTransform</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_3/nf-dxgi1_3-idxgiswapchain2-getmatrixtransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMatrixTransform(win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*pMatrix)
            {
                fixed (IDXGISwapChain2*pThis = &this)
                    return lpVtbl->GetMatrixTransform_36(pThis, pMatrix);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetDevice_8;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, win32.System.Com.HRESULT>Present_9;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint, global::System.Guid*, void **, win32.System.Com.HRESULT>GetBuffer_10;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.System.SystemServices.BOOL, win32.Graphics.Dxgi.IDXGIOutput*, win32.System.Com.HRESULT>SetFullscreenState_11;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.System.SystemServices.BOOL*, win32.Graphics.Dxgi.IDXGIOutput**, win32.System.Com.HRESULT>GetFullscreenState_12;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.System.Com.HRESULT>GetDesc_13;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, uint, win32.Graphics.Dxgi.DXGI_FORMAT, uint, win32.System.Com.HRESULT>ResizeBuffers_14;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_MODE_DESC*, win32.System.Com.HRESULT>ResizeTarget_15;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.IDXGIOutput**, win32.System.Com.HRESULT>GetContainingOutput_16;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS*, win32.System.Com.HRESULT>GetFrameStatistics_17;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint *, win32.System.Com.HRESULT>GetLastPresentCount_18;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.System.Com.HRESULT>GetDesc1_19;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*, win32.System.Com.HRESULT>GetFullscreenDesc_20;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.UI.WindowsAndMessaging.HWND*, win32.System.Com.HRESULT>GetHwnd_21;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetCoreWindow_22;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS*, win32.System.Com.HRESULT>Present1_23;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.System.SystemServices.BOOL>IsTemporaryMonoSupported_24;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.IDXGIOutput**, win32.System.Com.HRESULT>GetRestrictToOutput_25;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_RGBA*, win32.System.Com.HRESULT>SetBackgroundColor_26;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_RGBA*, win32.System.Com.HRESULT>GetBackgroundColor_27;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_MODE_ROTATION, win32.System.Com.HRESULT>SetRotation_28;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_MODE_ROTATION*, win32.System.Com.HRESULT>GetRotation_29;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint, uint, win32.System.Com.HRESULT>SetSourceSize_30;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint *, uint *, win32.System.Com.HRESULT>GetSourceSize_31;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint, win32.System.Com.HRESULT>SetMaximumFrameLatency_32;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, uint *, win32.System.Com.HRESULT>GetMaximumFrameLatency_33;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.System.SystemServices.HANDLE>GetFrameLatencyWaitableObject_34;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*, win32.System.Com.HRESULT>SetMatrixTransform_35;
                internal delegate *unmanaged[Stdcall]<IDXGISwapChain2*, win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F*, win32.System.Com.HRESULT>GetMatrixTransform_36;
            }

            private Vtbl*lpVtbl;
        }
    }
}