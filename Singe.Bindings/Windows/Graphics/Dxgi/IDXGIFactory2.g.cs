// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("50C83A1C-E072-4C48-87B0-3630FA36A6D0")]
        internal unsafe struct IDXGIFactory2
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            internal unsafe win32.System.Com.HRESULT EnumAdapters(uint Adapter, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->EnumAdapters_8(pThis, Adapter, ppAdapter);
            }

            internal win32.System.Com.HRESULT MakeWindowAssociation(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint Flags)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->MakeWindowAssociation_9(pThis, WindowHandle, Flags);
            }

            /// <inheritdoc cref = "GetWindowAssociation(win32.UI.WindowsAndMessaging.HWND*)"/>
            internal unsafe win32.System.Com.HRESULT GetWindowAssociation(out win32.UI.WindowsAndMessaging.HWND pWindowHandle)
            {
                fixed (win32.UI.WindowsAndMessaging.HWND*pWindowHandleLocal = &pWindowHandle)
                {
                    win32.System.Com.HRESULT __result = this.GetWindowAssociation(pWindowHandleLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetWindowAssociation(win32.UI.WindowsAndMessaging.HWND*pWindowHandle)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->GetWindowAssociation_10(pThis, pWindowHandle);
            }

            /// <inheritdoc cref = "CreateSwapChain(win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.Graphics.Dxgi.IDXGISwapChain**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChain(win32.System.Com.IUnknown*pDevice, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC pDesc, win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSwapChain(pDevice, pDescLocal, ppSwapChain);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSwapChain(win32.System.Com.IUnknown*pDevice, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDesc, win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->CreateSwapChain_11(pThis, pDevice, pDesc, ppSwapChain);
            }

            /// <inheritdoc cref = "CreateSoftwareAdapter(win32.System.SystemServices.HINSTANCE, win32.Graphics.Dxgi.IDXGIAdapter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSoftwareAdapter(SafeHandle Module, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                bool ModuleAddRef = false;
                try
                {
                    win32.System.SystemServices.HINSTANCE ModuleLocal;
                    if (Module is object)
                    {
                        Module.DangerousAddRef(ref ModuleAddRef);
                        ModuleLocal = (win32.System.SystemServices.HINSTANCE)Module.DangerousGetHandle();
                    }
                    else
                        ModuleLocal = default(win32.System.SystemServices.HINSTANCE);
                    win32.System.Com.HRESULT __result = this.CreateSoftwareAdapter(ModuleLocal, ppAdapter);
                    return __result;
                }
                finally
                {
                    if (ModuleAddRef)
                        Module.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSoftwareAdapter(win32.System.SystemServices.HINSTANCE Module, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->CreateSoftwareAdapter_12(pThis, Module, ppAdapter);
            }

            internal unsafe win32.System.Com.HRESULT EnumAdapters1(uint Adapter, win32.Graphics.Dxgi.IDXGIAdapter1**ppAdapter)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->EnumAdapters1_13(pThis, Adapter, ppAdapter);
            }

            internal win32.System.SystemServices.BOOL IsCurrent()
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->IsCurrent_14(pThis);
            }

            /// <summary>Determines whether to use stereo mode.</summary>
            /// <returns>
            /// <para>Indicates whether to use stereo mode. <b>TRUE</b> indicates that you can use stereo mode; otherwise, <b>FALSE</b>.</para>
            /// <para><b>Platform Update for Windows 7:  </b>On Windows 7 or Windows Server 2008 R2 with the <a href = "https://support.microsoft.com/help/2670838">Platform Update for Windows 7</a> installed, <b>IsWindowedStereoEnabled</b> always returns FALSE because stereoscopic 3D display behavior isn’t available with the Platform Update for Windows 7. For more info about the Platform Update for Windows 7, see <a href = "/windows/desktop/direct3darticles/platform-update-for-windows-7">Platform Update for Windows 7</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-iswindowedstereoenabled">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsWindowedStereoEnabled()
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->IsWindowedStereoEnabled_15(pThis);
            }

            /// <inheritdoc cref = "CreateSwapChainForHwnd(win32.System.Com.IUnknown*, win32.UI.WindowsAndMessaging.HWND, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForHwnd(win32.System.Com.IUnknown*pDevice, win32.UI.WindowsAndMessaging.HWND hWnd, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC? pFullscreenDesc, win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC pFullscreenDescLocal = pFullscreenDesc.HasValue ? pFullscreenDesc.Value : default(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC);
                    win32.System.Com.HRESULT __result = this.CreateSwapChainForHwnd(pDevice, hWnd, pDescLocal, pFullscreenDesc.HasValue ? &pFullscreenDescLocal : null, pRestrictToOutput, ppSwapChain);
                    return __result;
                }
            }

            /// <summary>Creates a swap chain that is associated with an HWND handle to the output window for the swap chain.</summary>
            /// <param name = "pDevice">For Direct3D 11, and earlier versions of Direct3D, this is a pointer to the Direct3D device for the swap chain. For Direct3D 12 this is a pointer to a direct command queue (refer to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandqueue">ID3D12CommandQueue</a>). This parameter cannot be <b>NULL</b>.</param>
            /// <param name = "hWnd">The <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a> handle that is associated with the swap chain that <b>CreateSwapChainForHwnd</b> creates. This parameter cannot be <b>NULL</b>.</param>
            /// <param name = "pDesc">A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_desc1">DXGI_SWAP_CHAIN_DESC1</a> structure for the swap-chain description. This parameter cannot be <b>NULL</b>.</param>
            /// <param name = "pFullscreenDesc">A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_fullscreen_desc">DXGI_SWAP_CHAIN_FULLSCREEN_DESC</a> structure for the description of a full-screen swap chain. You can optionally set this parameter to create a full-screen swap chain. Set it to <b>NULL</b> to create a windowed swap chain.</param>
            /// <param name = "pRestrictToOutput">
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgioutput">IDXGIOutput</a> interface for the output to restrict content to. You must also pass the <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-present">DXGI_PRESENT_RESTRICT_TO_OUTPUT</a> flag in a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgiswapchain1-present1">IDXGISwapChain1::Present1</a> call to force the content to appear blacked out on any other output. If you want to restrict the content to a different output, you must create a new swap chain. However, you can conditionally restrict content based on the <b>DXGI_PRESENT_RESTRICT_TO_OUTPUT</b> flag.</para>
            /// <para>Set this parameter to <b>NULL</b> if you don't want to restrict content to an output target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforhwnd#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSwapChain">A pointer to a variable that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nn-dxgi1_2-idxgiswapchain1">IDXGISwapChain1</a> interface for the swap chain that <b>CreateSwapChainForHwnd</b> creates.</param>
            /// <returns>
            /// <para><b>CreateSwapChainForHwnd</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforhwnd">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForHwnd(win32.System.Com.IUnknown*pDevice, win32.UI.WindowsAndMessaging.HWND hWnd, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc, [Optional] win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*pFullscreenDesc, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->CreateSwapChainForHwnd_16(pThis, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
            }

            /// <inheritdoc cref = "CreateSwapChainForCoreWindow(win32.System.Com.IUnknown*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForCoreWindow(win32.System.Com.IUnknown*pDevice, win32.System.Com.IUnknown*pWindow, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc, win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSwapChainForCoreWindow(pDevice, pWindow, pDescLocal, pRestrictToOutput, ppSwapChain);
                    return __result;
                }
            }

            /// <summary>Creates a swap chain that is associated with the CoreWindow object for the output window for the swap chain.</summary>
            /// <param name = "pDevice">For Direct3D 11, and earlier versions of Direct3D, this is a pointer to the Direct3D device for the swap chain. For Direct3D 12 this is a pointer to a direct command queue (refer to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandqueue">ID3D12CommandQueue</a>). This parameter cannot be <b>NULL</b>.</param>
            /// <param name = "pWindow">A pointer to the <a href = "https://docs.microsoft.com/uwp/api/Windows.UI.Core.CoreWindow">CoreWindow</a> object that is associated with the swap chain that <b>CreateSwapChainForCoreWindow</b> creates.</param>
            /// <param name = "pDesc">A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_desc1">DXGI_SWAP_CHAIN_DESC1</a> structure for the swap-chain description. This parameter cannot be <b>NULL</b>.</param>
            /// <param name = "pRestrictToOutput">A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgioutput">IDXGIOutput</a> interface that the swap chain is restricted to. If the swap chain is moved to a different output, the content is black. You can optionally set this parameter to an output target that uses <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-present">DXGI_PRESENT_RESTRICT_TO_OUTPUT</a> to restrict the content on this output. If you do not set this parameter to restrict content on an output target, you can set it to <b>NULL</b>.</param>
            /// <param name = "ppSwapChain">A pointer to a variable that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nn-dxgi1_2-idxgiswapchain1">IDXGISwapChain1</a> interface for the swap chain that <b>CreateSwapChainForCoreWindow</b> creates.</param>
            /// <returns>
            /// <para><b>CreateSwapChainForCoreWindow</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcorewindow">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForCoreWindow(win32.System.Com.IUnknown*pDevice, win32.System.Com.IUnknown*pWindow, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->CreateSwapChainForCoreWindow_17(pThis, pDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
            }

            /// <inheritdoc cref = "GetSharedResourceAdapterLuid(win32.System.SystemServices.HANDLE, win32.System.SystemServices.LUID*)"/>
            internal unsafe win32.System.Com.HRESULT GetSharedResourceAdapterLuid(SafeHandle hResource, out win32.System.SystemServices.LUID pLuid)
            {
                bool hResourceAddRef = false;
                try
                {
                    fixed (win32.System.SystemServices.LUID*pLuidLocal = &pLuid)
                    {
                        win32.System.SystemServices.HANDLE hResourceLocal;
                        if (hResource is object)
                        {
                            hResource.DangerousAddRef(ref hResourceAddRef);
                            hResourceLocal = (win32.System.SystemServices.HANDLE)hResource.DangerousGetHandle();
                        }
                        else
                            hResourceLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.GetSharedResourceAdapterLuid(hResourceLocal, pLuidLocal);
                        return __result;
                    }
                }
                finally
                {
                    if (hResourceAddRef)
                        hResource.DangerousRelease();
                }
            }

            /// <summary>Identifies the adapter on which a shared resource object was created.</summary>
            /// <param name = "hResource">A handle to a shared resource object. The <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgiresource1-createsharedhandle">IDXGIResource1::CreateSharedHandle</a> method returns this handle.</param>
            /// <param name = "pLuid">A pointer to a variable that receives a locally unique identifier (<a href = "https://docs.microsoft.com/previous-versions/windows/hardware/drivers/ff549708(v=vs.85)">LUID</a>) value that identifies the adapter. <b>LUID</b> is defined in Dxgi.h. An <b>LUID</b> is a 64-bit value that is guaranteed to be unique only on the operating system on which it was generated. The uniqueness of an <b>LUID</b> is guaranteed only until the operating system is restarted.</param>
            /// <returns>
            /// <para><b>GetSharedResourceAdapterLuid</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-getsharedresourceadapterluid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSharedResourceAdapterLuid(win32.System.SystemServices.HANDLE hResource, win32.System.SystemServices.LUID*pLuid)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->GetSharedResourceAdapterLuid_18(pThis, hResource, pLuid);
            }

            /// <inheritdoc cref = "RegisterStereoStatusWindow(win32.UI.WindowsAndMessaging.HWND, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, out uint pdwCookie)
            {
                fixed (uint *pdwCookieLocal = &pdwCookie)
                {
                    win32.System.Com.HRESULT __result = this.RegisterStereoStatusWindow(WindowHandle, wMsg, pdwCookieLocal);
                    return __result;
                }
            }

            /// <summary>Registers an application window to receive notification messages of changes of stereo status.</summary>
            /// <param name = "WindowHandle">The handle of the window to send a notification message to when stereo status change occurs.</param>
            /// <param name = "wMsg">Identifies the notification message to send.</param>
            /// <param name = "pdwCookie">A pointer to a key value that an application can pass to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-unregisterstereostatus">IDXGIFactory2::UnregisterStereoStatus</a> method  to unregister the notification message that <i>wMsg</i> specifies.</param>
            /// <returns>
            /// <para><b>RegisterStereoStatusWindow</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-registerstereostatuswindow">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, uint *pdwCookie)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->RegisterStereoStatusWindow_19(pThis, WindowHandle, wMsg, pdwCookie);
            }

            /// <inheritdoc cref = "RegisterStereoStatusEvent(win32.System.SystemServices.HANDLE, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusEvent(SafeHandle hEvent, out uint pdwCookie)
            {
                bool hEventAddRef = false;
                try
                {
                    fixed (uint *pdwCookieLocal = &pdwCookie)
                    {
                        win32.System.SystemServices.HANDLE hEventLocal;
                        if (hEvent is object)
                        {
                            hEvent.DangerousAddRef(ref hEventAddRef);
                            hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                        }
                        else
                            hEventLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.RegisterStereoStatusEvent(hEventLocal, pdwCookieLocal);
                        return __result;
                    }
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            /// <summary>Registers to receive notification of changes in stereo status by using event signaling.</summary>
            /// <param name = "hEvent">A handle to the event object that the operating system sets when notification of stereo status change occurs. The <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-createeventa">CreateEvent</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-openeventa">OpenEvent</a> function returns this handle.</param>
            /// <param name = "pdwCookie">A pointer to a key value that an application can pass to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-unregisterstereostatus">IDXGIFactory2::UnregisterStereoStatus</a> method  to unregister the notification event that <i>hEvent</i> specifies.</param>
            /// <returns>
            /// <para><b>RegisterStereoStatusEvent</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-registerstereostatusevent">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusEvent(win32.System.SystemServices.HANDLE hEvent, uint *pdwCookie)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->RegisterStereoStatusEvent_20(pThis, hEvent, pdwCookie);
            }

            /// <summary>Unregisters a window or an event to stop it from receiving notification when stereo status changes.</summary>
            /// <param name = "dwCookie">A key value for the window or event to unregister. The  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-registerstereostatuswindow">IDXGIFactory2::RegisterStereoStatusWindow</a> or  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-registerstereostatusevent">IDXGIFactory2::RegisterStereoStatusEvent</a> method returns this value.</param>
            /// <remarks>
            /// <para><b>Platform Update for Windows 7:  </b>On Windows 7 or Windows Server 2008 R2 with the <a href = "https://support.microsoft.com/help/2670838">Platform Update for Windows 7</a> installed, <b>UnregisterStereoStatus</b> has no effect. For more info about the Platform Update for Windows 7, see <a href = "https://docs.microsoft.com/windows/desktop/direct3darticles/platform-update-for-windows-7">Platform Update for Windows 7</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-unregisterstereostatus#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void UnregisterStereoStatus(uint dwCookie)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    lpVtbl->UnregisterStereoStatus_21(pThis, dwCookie);
            }

            /// <inheritdoc cref = "RegisterOcclusionStatusWindow(win32.UI.WindowsAndMessaging.HWND, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, out uint pdwCookie)
            {
                fixed (uint *pdwCookieLocal = &pdwCookie)
                {
                    win32.System.Com.HRESULT __result = this.RegisterOcclusionStatusWindow(WindowHandle, wMsg, pdwCookieLocal);
                    return __result;
                }
            }

            /// <summary>Registers an application window to receive notification messages of changes of occlusion status.</summary>
            /// <param name = "WindowHandle">The handle of the window to send a notification message to when occlusion status change occurs.</param>
            /// <param name = "wMsg">Identifies the notification message to send.</param>
            /// <param name = "pdwCookie">A pointer to a key value that an application can pass to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-unregisterocclusionstatus">IDXGIFactory2::UnregisterOcclusionStatus</a> method  to unregister the notification message that <i>wMsg</i> specifies.</param>
            /// <returns>
            /// <para><b>RegisterOcclusionStatusWindow</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-registerocclusionstatuswindow">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, uint *pdwCookie)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->RegisterOcclusionStatusWindow_22(pThis, WindowHandle, wMsg, pdwCookie);
            }

            /// <inheritdoc cref = "RegisterOcclusionStatusEvent(win32.System.SystemServices.HANDLE, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusEvent(SafeHandle hEvent, out uint pdwCookie)
            {
                bool hEventAddRef = false;
                try
                {
                    fixed (uint *pdwCookieLocal = &pdwCookie)
                    {
                        win32.System.SystemServices.HANDLE hEventLocal;
                        if (hEvent is object)
                        {
                            hEvent.DangerousAddRef(ref hEventAddRef);
                            hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                        }
                        else
                            hEventLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.RegisterOcclusionStatusEvent(hEventLocal, pdwCookieLocal);
                        return __result;
                    }
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            /// <summary>Registers to receive notification of changes in occlusion status by using event signaling.</summary>
            /// <param name = "hEvent">A handle to the event object that the operating system sets when notification of occlusion status change occurs. The <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-createeventa">CreateEvent</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-openeventa">OpenEvent</a> function returns this handle.</param>
            /// <param name = "pdwCookie">A pointer to a key value that an application can pass to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-unregisterocclusionstatus">IDXGIFactory2::UnregisterOcclusionStatus</a> method  to unregister the notification event that <i>hEvent</i> specifies.</param>
            /// <returns>
            /// <para><b>RegisterOcclusionStatusEvent</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-registerocclusionstatusevent">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusEvent(win32.System.SystemServices.HANDLE hEvent, uint *pdwCookie)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->RegisterOcclusionStatusEvent_23(pThis, hEvent, pdwCookie);
            }

            /// <summary>Unregisters a window or an event to stop it from receiving notification when occlusion status changes.</summary>
            /// <param name = "dwCookie">A key value for the window or event to unregister. The  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-registerocclusionstatuswindow">IDXGIFactory2::RegisterOcclusionStatusWindow</a> or  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-registerocclusionstatusevent">IDXGIFactory2::RegisterOcclusionStatusEvent</a> method returns this value.</param>
            /// <remarks>
            /// <para><b>Platform Update for Windows 7:  </b>On Windows 7 or Windows Server 2008 R2 with the <a href = "https://support.microsoft.com/help/2670838">Platform Update for Windows 7</a> installed, <b>UnregisterOcclusionStatus</b> has no effect. For more info about the Platform Update for Windows 7, see <a href = "https://docs.microsoft.com/windows/desktop/direct3darticles/platform-update-for-windows-7">Platform Update for Windows 7</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-unregisterocclusionstatus#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void UnregisterOcclusionStatus(uint dwCookie)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    lpVtbl->UnregisterOcclusionStatus_24(pThis, dwCookie);
            }

            /// <inheritdoc cref = "CreateSwapChainForComposition(win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForComposition(win32.System.Com.IUnknown*pDevice, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc, win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSwapChainForComposition(pDevice, pDescLocal, pRestrictToOutput, ppSwapChain);
                    return __result;
                }
            }

            /// <summary>Creates a swap chain that you can use to send Direct3D content into the DirectComposition API or the Windows.UI.Xaml framework to compose in a window.</summary>
            /// <param name = "pDevice">For Direct3D 11, and earlier versions of Direct3D, this is a pointer to the Direct3D device for the swap chain. For Direct3D 12 this is a pointer to a direct command queue (refer to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandqueue">ID3D12CommandQueue</a>). This parameter cannot be <b>NULL</b>. Software drivers, like <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE_REFERENCE</a>, are not supported for composition swap chains.</param>
            /// <param name = "pDesc">
            /// <para>A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_desc1">DXGI_SWAP_CHAIN_DESC1</a> structure for the swap-chain description. This parameter cannot be <b>NULL</b>.</para>
            /// <para>You must specify the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_swap_effect">DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</a> value in the <b>SwapEffect</b> member of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_desc1">DXGI_SWAP_CHAIN_DESC1</a> because <b>CreateSwapChainForComposition</b> supports only <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-flip-model">flip presentation model</a>.</para>
            /// <para>You must also specify the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ne-dxgi1_2-dxgi_scaling">DXGI_SCALING_STRETCH</a> value in the <b>Scaling</b> member of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_swap_chain_desc1">DXGI_SWAP_CHAIN_DESC1</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRestrictToOutput">
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgioutput">IDXGIOutput</a> interface for the output to restrict content to. You must also pass the <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-present">DXGI_PRESENT_RESTRICT_TO_OUTPUT</a> flag in a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgiswapchain1-present1">IDXGISwapChain1::Present1</a> call to force the content to appear blacked out on any other output. If you want to restrict the content to a different output, you must create a new swap chain. However, you can conditionally restrict content based on the <b>DXGI_PRESENT_RESTRICT_TO_OUTPUT</b> flag.</para>
            /// <para>Set this parameter to <b>NULL</b> if you don't want to restrict content to an output target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSwapChain">A pointer to a variable that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nn-dxgi1_2-idxgiswapchain1">IDXGISwapChain1</a> interface for the swap chain that <b>CreateSwapChainForComposition</b> creates.</param>
            /// <returns>
            /// <para><b>CreateSwapChainForComposition</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForComposition(win32.System.Com.IUnknown*pDevice, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (IDXGIFactory2*pThis = &this)
                    return lpVtbl->CreateSwapChainForComposition_25(pThis, pDevice, pDesc, pRestrictToOutput, ppSwapChain);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, uint, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>EnumAdapters_8;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.UI.WindowsAndMessaging.HWND, uint, win32.System.Com.HRESULT>MakeWindowAssociation_9;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.UI.WindowsAndMessaging.HWND*, win32.System.Com.HRESULT>GetWindowAssociation_10;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.Graphics.Dxgi.IDXGISwapChain**, win32.System.Com.HRESULT>CreateSwapChain_11;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.SystemServices.HINSTANCE, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>CreateSoftwareAdapter_12;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, uint, win32.Graphics.Dxgi.IDXGIAdapter1**, win32.System.Com.HRESULT>EnumAdapters1_13;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.SystemServices.BOOL>IsCurrent_14;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.SystemServices.BOOL>IsWindowedStereoEnabled_15;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.Com.IUnknown*, win32.UI.WindowsAndMessaging.HWND, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**, win32.System.Com.HRESULT>CreateSwapChainForHwnd_16;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.Com.IUnknown*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**, win32.System.Com.HRESULT>CreateSwapChainForCoreWindow_17;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.SystemServices.HANDLE, win32.System.SystemServices.LUID*, win32.System.Com.HRESULT>GetSharedResourceAdapterLuid_18;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.UI.WindowsAndMessaging.HWND, uint, uint *, win32.System.Com.HRESULT>RegisterStereoStatusWindow_19;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.SystemServices.HANDLE, uint *, win32.System.Com.HRESULT>RegisterStereoStatusEvent_20;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, uint, void>UnregisterStereoStatus_21;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.UI.WindowsAndMessaging.HWND, uint, uint *, win32.System.Com.HRESULT>RegisterOcclusionStatusWindow_22;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.SystemServices.HANDLE, uint *, win32.System.Com.HRESULT>RegisterOcclusionStatusEvent_23;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, uint, void>UnregisterOcclusionStatus_24;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory2*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**, win32.System.Com.HRESULT>CreateSwapChainForComposition_25;
            }

            private Vtbl*lpVtbl;
        }
    }
}