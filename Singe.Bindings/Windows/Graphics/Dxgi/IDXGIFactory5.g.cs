// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("7632E1F5-EE65-4DCA-87FD-84CD75F8838D")]
        internal unsafe struct IDXGIFactory5
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            internal unsafe win32.System.Com.HRESULT EnumAdapters(uint Adapter, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->EnumAdapters_8(pThis, Adapter, ppAdapter);
            }

            internal win32.System.Com.HRESULT MakeWindowAssociation(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint Flags)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->MakeWindowAssociation_9(pThis, WindowHandle, Flags);
            }

            /// <inheritdoc cref = "GetWindowAssociation(win32.UI.WindowsAndMessaging.HWND*)"/>
            internal unsafe win32.System.Com.HRESULT GetWindowAssociation(out win32.UI.WindowsAndMessaging.HWND pWindowHandle)
            {
                fixed (win32.UI.WindowsAndMessaging.HWND*pWindowHandleLocal = &pWindowHandle)
                {
                    win32.System.Com.HRESULT __result = this.GetWindowAssociation(pWindowHandleLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetWindowAssociation(win32.UI.WindowsAndMessaging.HWND*pWindowHandle)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->GetWindowAssociation_10(pThis, pWindowHandle);
            }

            /// <inheritdoc cref = "CreateSwapChain(win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.Graphics.Dxgi.IDXGISwapChain**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChain(win32.System.Com.IUnknown*pDevice, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC pDesc, win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSwapChain(pDevice, pDescLocal, ppSwapChain);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSwapChain(win32.System.Com.IUnknown*pDevice, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pDesc, win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->CreateSwapChain_11(pThis, pDevice, pDesc, ppSwapChain);
            }

            /// <inheritdoc cref = "CreateSoftwareAdapter(win32.System.SystemServices.HINSTANCE, win32.Graphics.Dxgi.IDXGIAdapter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSoftwareAdapter(SafeHandle Module, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                bool ModuleAddRef = false;
                try
                {
                    win32.System.SystemServices.HINSTANCE ModuleLocal;
                    if (Module is object)
                    {
                        Module.DangerousAddRef(ref ModuleAddRef);
                        ModuleLocal = (win32.System.SystemServices.HINSTANCE)Module.DangerousGetHandle();
                    }
                    else
                        ModuleLocal = default(win32.System.SystemServices.HINSTANCE);
                    win32.System.Com.HRESULT __result = this.CreateSoftwareAdapter(ModuleLocal, ppAdapter);
                    return __result;
                }
                finally
                {
                    if (ModuleAddRef)
                        Module.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSoftwareAdapter(win32.System.SystemServices.HINSTANCE Module, win32.Graphics.Dxgi.IDXGIAdapter**ppAdapter)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->CreateSoftwareAdapter_12(pThis, Module, ppAdapter);
            }

            internal unsafe win32.System.Com.HRESULT EnumAdapters1(uint Adapter, win32.Graphics.Dxgi.IDXGIAdapter1**ppAdapter)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->EnumAdapters1_13(pThis, Adapter, ppAdapter);
            }

            internal win32.System.SystemServices.BOOL IsCurrent()
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->IsCurrent_14(pThis);
            }

            internal win32.System.SystemServices.BOOL IsWindowedStereoEnabled()
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->IsWindowedStereoEnabled_15(pThis);
            }

            /// <inheritdoc cref = "CreateSwapChainForHwnd(win32.System.Com.IUnknown*, win32.UI.WindowsAndMessaging.HWND, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForHwnd(win32.System.Com.IUnknown*pDevice, win32.UI.WindowsAndMessaging.HWND hWnd, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC? pFullscreenDesc, win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC pFullscreenDescLocal = pFullscreenDesc.HasValue ? pFullscreenDesc.Value : default(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC);
                    win32.System.Com.HRESULT __result = this.CreateSwapChainForHwnd(pDevice, hWnd, pDescLocal, pFullscreenDesc.HasValue ? &pFullscreenDescLocal : null, pRestrictToOutput, ppSwapChain);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSwapChainForHwnd(win32.System.Com.IUnknown*pDevice, win32.UI.WindowsAndMessaging.HWND hWnd, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc, [Optional] win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*pFullscreenDesc, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->CreateSwapChainForHwnd_16(pThis, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
            }

            /// <inheritdoc cref = "CreateSwapChainForCoreWindow(win32.System.Com.IUnknown*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForCoreWindow(win32.System.Com.IUnknown*pDevice, win32.System.Com.IUnknown*pWindow, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc, win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSwapChainForCoreWindow(pDevice, pWindow, pDescLocal, pRestrictToOutput, ppSwapChain);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSwapChainForCoreWindow(win32.System.Com.IUnknown*pDevice, win32.System.Com.IUnknown*pWindow, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->CreateSwapChainForCoreWindow_17(pThis, pDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
            }

            /// <inheritdoc cref = "GetSharedResourceAdapterLuid(win32.System.SystemServices.HANDLE, win32.System.SystemServices.LUID*)"/>
            internal unsafe win32.System.Com.HRESULT GetSharedResourceAdapterLuid(SafeHandle hResource, out win32.System.SystemServices.LUID pLuid)
            {
                bool hResourceAddRef = false;
                try
                {
                    fixed (win32.System.SystemServices.LUID*pLuidLocal = &pLuid)
                    {
                        win32.System.SystemServices.HANDLE hResourceLocal;
                        if (hResource is object)
                        {
                            hResource.DangerousAddRef(ref hResourceAddRef);
                            hResourceLocal = (win32.System.SystemServices.HANDLE)hResource.DangerousGetHandle();
                        }
                        else
                            hResourceLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.GetSharedResourceAdapterLuid(hResourceLocal, pLuidLocal);
                        return __result;
                    }
                }
                finally
                {
                    if (hResourceAddRef)
                        hResource.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT GetSharedResourceAdapterLuid(win32.System.SystemServices.HANDLE hResource, win32.System.SystemServices.LUID*pLuid)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->GetSharedResourceAdapterLuid_18(pThis, hResource, pLuid);
            }

            /// <inheritdoc cref = "RegisterStereoStatusWindow(win32.UI.WindowsAndMessaging.HWND, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, out uint pdwCookie)
            {
                fixed (uint *pdwCookieLocal = &pdwCookie)
                {
                    win32.System.Com.HRESULT __result = this.RegisterStereoStatusWindow(WindowHandle, wMsg, pdwCookieLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, uint *pdwCookie)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->RegisterStereoStatusWindow_19(pThis, WindowHandle, wMsg, pdwCookie);
            }

            /// <inheritdoc cref = "RegisterStereoStatusEvent(win32.System.SystemServices.HANDLE, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusEvent(SafeHandle hEvent, out uint pdwCookie)
            {
                bool hEventAddRef = false;
                try
                {
                    fixed (uint *pdwCookieLocal = &pdwCookie)
                    {
                        win32.System.SystemServices.HANDLE hEventLocal;
                        if (hEvent is object)
                        {
                            hEvent.DangerousAddRef(ref hEventAddRef);
                            hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                        }
                        else
                            hEventLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.RegisterStereoStatusEvent(hEventLocal, pdwCookieLocal);
                        return __result;
                    }
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT RegisterStereoStatusEvent(win32.System.SystemServices.HANDLE hEvent, uint *pdwCookie)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->RegisterStereoStatusEvent_20(pThis, hEvent, pdwCookie);
            }

            internal void UnregisterStereoStatus(uint dwCookie)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    lpVtbl->UnregisterStereoStatus_21(pThis, dwCookie);
            }

            /// <inheritdoc cref = "RegisterOcclusionStatusWindow(win32.UI.WindowsAndMessaging.HWND, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, out uint pdwCookie)
            {
                fixed (uint *pdwCookieLocal = &pdwCookie)
                {
                    win32.System.Com.HRESULT __result = this.RegisterOcclusionStatusWindow(WindowHandle, wMsg, pdwCookieLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusWindow(win32.UI.WindowsAndMessaging.HWND WindowHandle, uint wMsg, uint *pdwCookie)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->RegisterOcclusionStatusWindow_22(pThis, WindowHandle, wMsg, pdwCookie);
            }

            /// <inheritdoc cref = "RegisterOcclusionStatusEvent(win32.System.SystemServices.HANDLE, uint *)"/>
            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusEvent(SafeHandle hEvent, out uint pdwCookie)
            {
                bool hEventAddRef = false;
                try
                {
                    fixed (uint *pdwCookieLocal = &pdwCookie)
                    {
                        win32.System.SystemServices.HANDLE hEventLocal;
                        if (hEvent is object)
                        {
                            hEvent.DangerousAddRef(ref hEventAddRef);
                            hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                        }
                        else
                            hEventLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.RegisterOcclusionStatusEvent(hEventLocal, pdwCookieLocal);
                        return __result;
                    }
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT RegisterOcclusionStatusEvent(win32.System.SystemServices.HANDLE hEvent, uint *pdwCookie)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->RegisterOcclusionStatusEvent_23(pThis, hEvent, pdwCookie);
            }

            internal void UnregisterOcclusionStatus(uint dwCookie)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    lpVtbl->UnregisterOcclusionStatus_24(pThis, dwCookie);
            }

            /// <inheritdoc cref = "CreateSwapChainForComposition(win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSwapChainForComposition(win32.System.Com.IUnknown*pDevice, in win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 pDesc, win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSwapChainForComposition(pDevice, pDescLocal, pRestrictToOutput, ppSwapChain);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSwapChainForComposition(win32.System.Com.IUnknown*pDevice, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*pDesc, [Optional] win32.Graphics.Dxgi.IDXGIOutput*pRestrictToOutput, win32.Graphics.Dxgi.IDXGISwapChain1**ppSwapChain)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->CreateSwapChainForComposition_25(pThis, pDevice, pDesc, pRestrictToOutput, ppSwapChain);
            }

            internal uint GetCreationFlags()
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->GetCreationFlags_26(pThis);
            }

            /// <inheritdoc cref = "EnumAdapterByLuid(win32.System.SystemServices.LUID, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT EnumAdapterByLuid(win32.System.SystemServices.LUID AdapterLuid, in global::System.Guid riid, out void *ppvAdapter)
            {
                fixed (void **ppvAdapterLocal = &ppvAdapter)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.EnumAdapterByLuid(AdapterLuid, riidLocal, ppvAdapterLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT EnumAdapterByLuid(win32.System.SystemServices.LUID AdapterLuid, global::System.Guid*riid, void **ppvAdapter)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->EnumAdapterByLuid_27(pThis, AdapterLuid, riid, ppvAdapter);
            }

            /// <inheritdoc cref = "EnumWarpAdapter(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT EnumWarpAdapter(in global::System.Guid riid, out void *ppvAdapter)
            {
                fixed (void **ppvAdapterLocal = &ppvAdapter)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.EnumWarpAdapter(riidLocal, ppvAdapterLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT EnumWarpAdapter(global::System.Guid*riid, void **ppvAdapter)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->EnumWarpAdapter_28(pThis, riid, ppvAdapter);
            }

            /// <summary>Used to check for hardware feature support.</summary>
            /// <param name = "Feature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_5/ne-dxgi1_5-dxgi_feature">DXGI_FEATURE</a></b></para>
            /// <para>Specifies one member of  <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_5/ne-dxgi1_5-dxgi_feature">DXGI_FEATURE</a> to query support for.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_5/nf-dxgi1_5-idxgifactory5-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFeatureSupportData">
            /// <para>Type: <b>void*</b></para>
            /// <para>Specifies a pointer to a buffer that will be filled with data that describes the feature support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_5/nf-dxgi1_5-idxgifactory5-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "FeatureSupportDataSize">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The size, in bytes, of <i>pFeatureSupportData</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_5/nf-dxgi1_5-idxgifactory5-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_5/nf-dxgi1_5-idxgifactory5-checkfeaturesupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckFeatureSupport(win32.Graphics.Dxgi.DXGI_FEATURE Feature, void *pFeatureSupportData, uint FeatureSupportDataSize)
            {
                fixed (IDXGIFactory5*pThis = &this)
                    return lpVtbl->CheckFeatureSupport_29(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, uint, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>EnumAdapters_8;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.UI.WindowsAndMessaging.HWND, uint, win32.System.Com.HRESULT>MakeWindowAssociation_9;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.UI.WindowsAndMessaging.HWND*, win32.System.Com.HRESULT>GetWindowAssociation_10;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.Graphics.Dxgi.IDXGISwapChain**, win32.System.Com.HRESULT>CreateSwapChain_11;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.SystemServices.HINSTANCE, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>CreateSoftwareAdapter_12;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, uint, win32.Graphics.Dxgi.IDXGIAdapter1**, win32.System.Com.HRESULT>EnumAdapters1_13;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.SystemServices.BOOL>IsCurrent_14;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.SystemServices.BOOL>IsWindowedStereoEnabled_15;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.Com.IUnknown*, win32.UI.WindowsAndMessaging.HWND, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**, win32.System.Com.HRESULT>CreateSwapChainForHwnd_16;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.Com.IUnknown*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**, win32.System.Com.HRESULT>CreateSwapChainForCoreWindow_17;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.SystemServices.HANDLE, win32.System.SystemServices.LUID*, win32.System.Com.HRESULT>GetSharedResourceAdapterLuid_18;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.UI.WindowsAndMessaging.HWND, uint, uint *, win32.System.Com.HRESULT>RegisterStereoStatusWindow_19;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.SystemServices.HANDLE, uint *, win32.System.Com.HRESULT>RegisterStereoStatusEvent_20;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, uint, void>UnregisterStereoStatus_21;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.UI.WindowsAndMessaging.HWND, uint, uint *, win32.System.Com.HRESULT>RegisterOcclusionStatusWindow_22;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.SystemServices.HANDLE, uint *, win32.System.Com.HRESULT>RegisterOcclusionStatusEvent_23;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, uint, void>UnregisterOcclusionStatus_24;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.Com.IUnknown*, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1*, win32.Graphics.Dxgi.IDXGIOutput*, win32.Graphics.Dxgi.IDXGISwapChain1**, win32.System.Com.HRESULT>CreateSwapChainForComposition_25;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, uint>GetCreationFlags_26;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.System.SystemServices.LUID, global::System.Guid*, void **, win32.System.Com.HRESULT>EnumAdapterByLuid_27;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, global::System.Guid*, void **, win32.System.Com.HRESULT>EnumWarpAdapter_28;
                internal delegate *unmanaged[Stdcall]<IDXGIFactory5*, win32.Graphics.Dxgi.DXGI_FEATURE, void *, uint, win32.System.Com.HRESULT>CheckFeatureSupport_29;
            }

            private Vtbl*lpVtbl;
        }
    }
}