// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("191CFAC3-A341-470D-B26E-A864F428319C")]
        internal unsafe struct IDXGIOutputDuplication
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Dxgi.DXGI_OUTDUPL_DESC*)"/>
            internal unsafe void GetDesc(out win32.Graphics.Dxgi.DXGI_OUTDUPL_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_OUTDUPL_DESC*pDescLocal = &pDesc)
                {
                    this.GetDesc(pDescLocal);
                }
            }

            /// <summary>Retrieves a description of a duplicated output. This description specifies the dimensions of the surface that contains the desktop image.</summary>
            /// <param name = "pDesc">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_outdupl_desc">DXGI_OUTDUPL_DESC</a> structure that describes the duplicated output. This parameter must not be <b>NULL</b>.</param>
            /// <remarks>
            /// <para>After an application creates an <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nn-dxgi1_2-idxgioutputduplication">IDXGIOutputDuplication</a> interface, it calls <b>GetDesc</b> to retrieve the dimensions of the surface that contains the desktop image. The format of the desktop image is always <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_B8G8R8A8_UNORM</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getdesc#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDesc(win32.Graphics.Dxgi.DXGI_OUTDUPL_DESC*pDesc)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    lpVtbl->GetDesc_8(pThis, pDesc);
            }

            /// <inheritdoc cref = "AcquireNextFrame(uint, win32.Graphics.Dxgi.DXGI_OUTDUPL_FRAME_INFO*, win32.Graphics.Dxgi.IDXGIResource**)"/>
            internal unsafe win32.System.Com.HRESULT AcquireNextFrame(uint TimeoutInMilliseconds, out win32.Graphics.Dxgi.DXGI_OUTDUPL_FRAME_INFO pFrameInfo, win32.Graphics.Dxgi.IDXGIResource**ppDesktopResource)
            {
                fixed (win32.Graphics.Dxgi.DXGI_OUTDUPL_FRAME_INFO*pFrameInfoLocal = &pFrameInfo)
                {
                    win32.System.Com.HRESULT __result = this.AcquireNextFrame(TimeoutInMilliseconds, pFrameInfoLocal, ppDesktopResource);
                    return __result;
                }
            }

            /// <summary>Indicates that the application is ready to process the next desktop image.</summary>
            /// <param name = "TimeoutInMilliseconds">
            /// <para>The time-out interval, in milliseconds. This interval specifies the amount of time that this method waits for a new frame before it returns to the caller.  This method returns if the interval elapses, and a new desktop image is not available.</para>
            /// <para>For more information about the time-out interval, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-acquirenextframe#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFrameInfo">A pointer to a memory location that receives the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_outdupl_frame_info">DXGI_OUTDUPL_FRAME_INFO</a> structure that describes timing and presentation statistics for a frame.</param>
            /// <param name = "ppDesktopResource">A pointer to a variable that receives the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiresource">IDXGIResource</a> interface of the surface that contains the desktop bitmap.</param>
            /// <returns>
            /// <para><b>AcquireNextFrame</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-acquirenextframe">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AcquireNextFrame(uint TimeoutInMilliseconds, win32.Graphics.Dxgi.DXGI_OUTDUPL_FRAME_INFO*pFrameInfo, win32.Graphics.Dxgi.IDXGIResource**ppDesktopResource)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->AcquireNextFrame_9(pThis, TimeoutInMilliseconds, pFrameInfo, ppDesktopResource);
            }

            /// <inheritdoc cref = "GetFrameDirtyRects(uint, win32.UI.DisplayDevices.RECT*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameDirtyRects(uint DirtyRectsBufferSize, out win32.UI.DisplayDevices.RECT pDirtyRectsBuffer, out uint pDirtyRectsBufferSizeRequired)
            {
                fixed (uint *pDirtyRectsBufferSizeRequiredLocal = &pDirtyRectsBufferSizeRequired)
                {
                    fixed (win32.UI.DisplayDevices.RECT*pDirtyRectsBufferLocal = &pDirtyRectsBuffer)
                    {
                        win32.System.Com.HRESULT __result = this.GetFrameDirtyRects(DirtyRectsBufferSize, pDirtyRectsBufferLocal, pDirtyRectsBufferSizeRequiredLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Gets information about dirty rectangles for the current desktop frame.</summary>
            /// <param name = "DirtyRectsBufferSize">
            /// <para>The size in bytes of the buffer that the caller passed to the  <i>pDirtyRectsBuffer</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframedirtyrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDirtyRectsBuffer">
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structures that identifies the dirty rectangle regions for the desktop frame.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframedirtyrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDirtyRectsBufferSizeRequired">
            /// <para>Pointer to a variable that receives the number of bytes that <b>GetFrameDirtyRects</b> needs to store information about dirty regions in the buffer at <i>pDirtyRectsBuffer</i>.</para>
            /// <para>For more information about returning the required buffer size, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframedirtyrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para><b>GetFrameDirtyRects</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframedirtyrects">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFrameDirtyRects(uint DirtyRectsBufferSize, win32.UI.DisplayDevices.RECT*pDirtyRectsBuffer, uint *pDirtyRectsBufferSizeRequired)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->GetFrameDirtyRects_10(pThis, DirtyRectsBufferSize, pDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
            }

            /// <inheritdoc cref = "GetFrameMoveRects(uint, win32.Graphics.Dxgi.DXGI_OUTDUPL_MOVE_RECT*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameMoveRects(uint MoveRectsBufferSize, out win32.Graphics.Dxgi.DXGI_OUTDUPL_MOVE_RECT pMoveRectBuffer, out uint pMoveRectsBufferSizeRequired)
            {
                fixed (uint *pMoveRectsBufferSizeRequiredLocal = &pMoveRectsBufferSizeRequired)
                {
                    fixed (win32.Graphics.Dxgi.DXGI_OUTDUPL_MOVE_RECT*pMoveRectBufferLocal = &pMoveRectBuffer)
                    {
                        win32.System.Com.HRESULT __result = this.GetFrameMoveRects(MoveRectsBufferSize, pMoveRectBufferLocal, pMoveRectsBufferSizeRequiredLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Gets information about the moved rectangles for the current desktop frame.</summary>
            /// <param name = "MoveRectsBufferSize">The size in bytes of the buffer that the caller passed to the  <i>pMoveRectBuffer</i> parameter.</param>
            /// <param name = "pMoveRectBuffer">
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_outdupl_move_rect">DXGI_OUTDUPL_MOVE_RECT</a> structures that identifies the moved rectangle regions for the desktop frame.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframemoverects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pMoveRectsBufferSizeRequired">
            /// <para>Pointer to a variable that receives the number of bytes that <b>GetFrameMoveRects</b> needs to store information about moved regions in the buffer at <i>pMoveRectBuffer</i>.</para>
            /// <para>For more information about returning the required buffer size, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframemoverects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para><b>GetFrameMoveRects</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframemoverects">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFrameMoveRects(uint MoveRectsBufferSize, win32.Graphics.Dxgi.DXGI_OUTDUPL_MOVE_RECT*pMoveRectBuffer, uint *pMoveRectsBufferSizeRequired)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->GetFrameMoveRects_11(pThis, MoveRectsBufferSize, pMoveRectBuffer, pMoveRectsBufferSizeRequired);
            }

            /// <inheritdoc cref = "GetFramePointerShape(uint, void *, uint *, win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_SHAPE_INFO*)"/>
            internal unsafe win32.System.Com.HRESULT GetFramePointerShape(uint PointerShapeBufferSize, void *pPointerShapeBuffer, out uint pPointerShapeBufferSizeRequired, out win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_SHAPE_INFO pPointerShapeInfo)
            {
                fixed (win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_SHAPE_INFO*pPointerShapeInfoLocal = &pPointerShapeInfo)
                {
                    fixed (uint *pPointerShapeBufferSizeRequiredLocal = &pPointerShapeBufferSizeRequired)
                    {
                        win32.System.Com.HRESULT __result = this.GetFramePointerShape(PointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequiredLocal, pPointerShapeInfoLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Gets information about the new pointer shape for the current desktop frame.</summary>
            /// <param name = "PointerShapeBufferSize">The size in bytes of the buffer that the caller passed to the  <i>pPointerShapeBuffer</i> parameter.</param>
            /// <param name = "pPointerShapeBuffer">A pointer to a buffer to which <b>GetFramePointerShape</b> copies and returns pixel data for the new pointer shape.</param>
            /// <param name = "pPointerShapeBufferSizeRequired">
            /// <para>Pointer to a variable that receives the number of bytes that <b>GetFramePointerShape</b> needs to store the new pointer shape pixel data in the buffer at <i>pPointerShapeBuffer</i>.</para>
            /// <para>For more information about returning the required buffer size, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframepointershape#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pPointerShapeInfo">Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ns-dxgi1_2-dxgi_outdupl_pointer_shape_info">DXGI_OUTDUPL_POINTER_SHAPE_INFO</a> structure that receives the pointer shape information.</param>
            /// <returns>
            /// <para><b>GetFramePointerShape</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-getframepointershape">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFramePointerShape(uint PointerShapeBufferSize, void *pPointerShapeBuffer, uint *pPointerShapeBufferSizeRequired, win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_SHAPE_INFO*pPointerShapeInfo)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->GetFramePointerShape_12(pThis, PointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
            }

            /// <inheritdoc cref = "MapDesktopSurface(win32.Graphics.Dxgi.DXGI_MAPPED_RECT*)"/>
            internal unsafe win32.System.Com.HRESULT MapDesktopSurface(out win32.Graphics.Dxgi.DXGI_MAPPED_RECT pLockedRect)
            {
                fixed (win32.Graphics.Dxgi.DXGI_MAPPED_RECT*pLockedRectLocal = &pLockedRect)
                {
                    win32.System.Com.HRESULT __result = this.MapDesktopSurface(pLockedRectLocal);
                    return __result;
                }
            }

            /// <summary>Provides the CPU with efficient access to a desktop image if that desktop image is already in system memory.</summary>
            /// <param name = "pLockedRect">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_mapped_rect">DXGI_MAPPED_RECT</a> structure that receives the surface data that the CPU needs to directly access the surface data.</param>
            /// <returns>
            /// <para><b>MapDesktopSurface</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-mapdesktopsurface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT MapDesktopSurface(win32.Graphics.Dxgi.DXGI_MAPPED_RECT*pLockedRect)
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->MapDesktopSurface_13(pThis, pLockedRect);
            }

            /// <summary>Invalidates the pointer to the desktop image that was retrieved by using IDXGIOutputDuplication::MapDesktopSurface.</summary>
            /// <returns>
            /// <para><b>UnMapDesktopSurface</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-unmapdesktopsurface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT UnMapDesktopSurface()
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->UnMapDesktopSurface_14(pThis);
            }

            /// <summary>Indicates that the application finished processing the frame.</summary>
            /// <returns>
            /// <para><b>ReleaseFrame</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgioutputduplication-releaseframe">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT ReleaseFrame()
            {
                fixed (IDXGIOutputDuplication*pThis = &this)
                    return lpVtbl->ReleaseFrame_15(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, win32.Graphics.Dxgi.DXGI_OUTDUPL_DESC*, void>GetDesc_8;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, win32.Graphics.Dxgi.DXGI_OUTDUPL_FRAME_INFO*, win32.Graphics.Dxgi.IDXGIResource**, win32.System.Com.HRESULT>AcquireNextFrame_9;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, win32.UI.DisplayDevices.RECT*, uint *, win32.System.Com.HRESULT>GetFrameDirtyRects_10;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, win32.Graphics.Dxgi.DXGI_OUTDUPL_MOVE_RECT*, uint *, win32.System.Com.HRESULT>GetFrameMoveRects_11;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, uint, void *, uint *, win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_SHAPE_INFO*, win32.System.Com.HRESULT>GetFramePointerShape_12;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, win32.Graphics.Dxgi.DXGI_MAPPED_RECT*, win32.System.Com.HRESULT>MapDesktopSurface_13;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, win32.System.Com.HRESULT>UnMapDesktopSurface_14;
                internal delegate *unmanaged[Stdcall]<IDXGIOutputDuplication*, win32.System.Com.HRESULT>ReleaseFrame_15;
            }

            private Vtbl*lpVtbl;
        }
    }
}