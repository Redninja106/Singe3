// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("2411E7E1-12AC-4CCF-BD14-9798E8534DC0")]
        internal unsafe struct IDXGIAdapter
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <summary>Enumerate adapter (video card) outputs.</summary>
            /// <param name = "Output">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The index of the output.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-enumoutputs#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppOutput">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgioutput">IDXGIOutput</a>**</b></para>
            /// <para>The address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgioutput">IDXGIOutput</a> interface at the position specified by the <i>Output</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-enumoutputs#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>A code that indicates success or failure (see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>). DXGI_ERROR_NOT_FOUND is returned if the index is greater than the number of outputs.</para>
            /// <para>If the adapter came from a device created using D3D_DRIVER_TYPE_WARP, then the adapter has no outputs, so DXGI_ERROR_NOT_FOUND is returned.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-enumoutputs">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT EnumOutputs(uint Output, win32.Graphics.Dxgi.IDXGIOutput**ppOutput)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->EnumOutputs_8(pThis, Output, ppOutput);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Dxgi.DXGI_ADAPTER_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Dxgi.DXGI_ADAPTER_DESC pDesc)
            {
                fixed (win32.Graphics.Dxgi.DXGI_ADAPTER_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets a DXGI 1.0 description of an adapter (or video card).</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_adapter_desc">DXGI_ADAPTER_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_adapter_desc">DXGI_ADAPTER_DESC</a> structure that describes the adapter. This parameter must not be <b>NULL</b>. On <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <b>GetDesc</b> returns zeros for the PCI ID in the <b>VendorId</b>, <b>DeviceId</b>, <b>SubSysId</b>, and <b>Revision</b> members of <b>DXGI_ADAPTER_DESC</b> and “Software Adapter” for the description string in the <b>Description</b> member.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise returns E_INVALIDARG if the <i>pDesc</i> parameter is <b>NULL</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Dxgi.DXGI_ADAPTER_DESC*pDesc)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->GetDesc_9(pThis, pDesc);
            }

            /// <inheritdoc cref = "CheckInterfaceSupport(global::System.Guid*, long *)"/>
            internal unsafe win32.System.Com.HRESULT CheckInterfaceSupport(in global::System.Guid InterfaceName, out long pUMDVersion)
            {
                fixed (long *pUMDVersionLocal = &pUMDVersion)
                {
                    fixed (global::System.Guid*InterfaceNameLocal = &InterfaceName)
                    {
                        win32.System.Com.HRESULT __result = this.CheckInterfaceSupport(InterfaceNameLocal, pUMDVersionLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Checks whether the system supports a device interface for a graphics component.</summary>
            /// <param name = "InterfaceName">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
            /// <para>The GUID of the interface of the device version for which support is being checked. This should usually be __uuidof(IDXGIDevice), which returns the version number of the Direct3D 9 UMD (user mode driver) binary. Since WDDM 2.3, all driver components within a driver package (D3D9, D3D11, and D3D12) have been required to share a single version number, so this is a good way to query the driver version regardless of which API is being used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-checkinterfacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pUMDVersion">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-large_integer-r1">LARGE_INTEGER</a>*</b></para>
            /// <para>The user mode driver version of <i>InterfaceName</i>. This is  returned only if the interface is supported, otherwise this parameter will be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-checkinterfacesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>S_OK indicates that the interface is supported, otherwise DXGI_ERROR_UNSUPPORTED is returned (For more information, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi/nf-dxgi-idxgiadapter-checkinterfacesupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckInterfaceSupport(global::System.Guid*InterfaceName, long *pUMDVersion)
            {
                fixed (IDXGIAdapter*pThis = &this)
                    return lpVtbl->CheckInterfaceSupport_10(pThis, InterfaceName, pUMDVersion);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, uint, win32.Graphics.Dxgi.IDXGIOutput**, win32.System.Com.HRESULT>EnumOutputs_8;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, win32.Graphics.Dxgi.DXGI_ADAPTER_DESC*, win32.System.Com.HRESULT>GetDesc_9;
                internal delegate *unmanaged[Stdcall]<IDXGIAdapter*, global::System.Guid*, long *, win32.System.Com.HRESULT>CheckInterfaceSupport_10;
            }

            private Vtbl*lpVtbl;
        }
    }
}