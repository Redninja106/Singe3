// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("30961379-4609-4A41-998E-54FE567EE0C1")]
        internal unsafe struct IDXGIResource1
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            /// <inheritdoc cref = "GetDevice(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetDevice(in global::System.Guid riid, out void *ppDevice)
            {
                fixed (void **ppDeviceLocal = &ppDevice)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetDevice(riidLocal, ppDeviceLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDevice(global::System.Guid*riid, void **ppDevice)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->GetDevice_8(pThis, riid, ppDevice);
            }

            /// <inheritdoc cref = "GetSharedHandle(win32.System.SystemServices.HANDLE*)"/>
            internal unsafe win32.System.Com.HRESULT GetSharedHandle(out Microsoft.Win32.SafeHandles.SafeFileHandle pSharedHandle)
            {
                win32.System.SystemServices.HANDLE pSharedHandleLocal;
                win32.System.Com.HRESULT __result = this.GetSharedHandle(&pSharedHandleLocal);
                pSharedHandle = new Microsoft.Win32.SafeHandles.SafeFileHandle(pSharedHandleLocal, ownsHandle: true);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT GetSharedHandle(win32.System.SystemServices.HANDLE*pSharedHandle)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->GetSharedHandle_9(pThis, pSharedHandle);
            }

            /// <inheritdoc cref = "GetUsage(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetUsage(out uint pUsage)
            {
                fixed (uint *pUsageLocal = &pUsage)
                {
                    win32.System.Com.HRESULT __result = this.GetUsage(pUsageLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetUsage(uint *pUsage)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->GetUsage_10(pThis, pUsage);
            }

            internal win32.System.Com.HRESULT SetEvictionPriority(win32.Graphics.Dxgi.DXGI_RESOURCE_PRIORITY EvictionPriority)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->SetEvictionPriority_11(pThis, EvictionPriority);
            }

            /// <inheritdoc cref = "GetEvictionPriority(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetEvictionPriority(out uint pEvictionPriority)
            {
                fixed (uint *pEvictionPriorityLocal = &pEvictionPriority)
                {
                    win32.System.Com.HRESULT __result = this.GetEvictionPriority(pEvictionPriorityLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetEvictionPriority(uint *pEvictionPriority)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->GetEvictionPriority_12(pThis, pEvictionPriority);
            }

            /// <summary>Creates a subresource surface object.</summary>
            /// <param name = "index">The index of the subresource surface object to enumerate.</param>
            /// <param name = "ppSurface">The address of a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nn-dxgi1_2-idxgisurface2">IDXGISurface2</a> interface that represents the created subresource surface object at the position specified by the <i>index</i> parameter.</param>
            /// <returns>
            /// <para>Returns S_OK if successful; otherwise, returns one of the following values:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgiresource1-createsubresourcesurface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSubresourceSurface(uint index, win32.Graphics.Dxgi.IDXGISurface2**ppSurface)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->CreateSubresourceSurface_13(pThis, index, ppSurface);
            }

            /// <inheritdoc cref = "CreateSharedHandle(win32.System.SystemServices.SECURITY_ATTRIBUTES*, uint, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.HANDLE*)"/>
            internal unsafe win32.System.Com.HRESULT CreateSharedHandle(win32.System.SystemServices.SECURITY_ATTRIBUTES? pAttributes, uint dwAccess, string lpName, out Microsoft.Win32.SafeHandles.SafeFileHandle pHandle)
            {
                fixed (char *lpNameLocal = lpName)
                {
                    win32.System.SystemServices.SECURITY_ATTRIBUTES pAttributesLocal = pAttributes.HasValue ? pAttributes.Value : default(win32.System.SystemServices.SECURITY_ATTRIBUTES);
                    win32.System.SystemServices.HANDLE pHandleLocal;
                    win32.System.Com.HRESULT __result = this.CreateSharedHandle(pAttributes.HasValue ? &pAttributesLocal : null, dwAccess, lpNameLocal, &pHandleLocal);
                    pHandle = new Microsoft.Win32.SafeHandles.SafeFileHandle(pHandleLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Creates a handle to a shared resource. You can then use the returned handle with multiple Direct3D devices.</summary>
            /// <param name = "pAttributes">
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether child processes can inherit the returned handle.</para>
            /// <para>Set this parameter to <b>NULL</b> if you want child processes that the application might create to not  inherit  the handle returned by <b>CreateSharedHandle</b>, and if you want the resource that is associated with the returned handle to get a default security descriptor.</para>
            /// <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a <a href = "https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> for the resource. Set this member to <b>NULL</b> if you want the runtime to assign a default security descriptor to the resource that is associated with the returned handle. The ACLs in the default security descriptor for the resource come from the primary or impersonation token of the creator. For more info, see <a href = "https://docs.microsoft.com/windows/desktop/Sync/synchronization-object-security-and-access-rights">Synchronization Object Security and Access Rights</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgiresource1-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dwAccess">
            /// <para>The requested access rights to the resource.  In addition to the <a href = "https://docs.microsoft.com/windows/desktop/SecAuthZ/generic-access-rights">generic access rights</a>, DXGI defines the following values:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgiresource1-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "lpName">
            /// <para>The name of the resource to share. The name is limited to MAX_PATH characters. Name comparison is case sensitive.</para>
            /// <para>You will need the resource name if you call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11device1-opensharedresourcebyname">ID3D11Device1::OpenSharedResourceByName</a> method to access the shared resource by name. If you instead call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11device1-opensharedresource1">ID3D11Device1::OpenSharedResource1</a> method to access the shared resource by handle, set this parameter to <b>NULL</b>.</para>
            /// <para>If <i>lpName</i> matches the name of an existing resource, <b>CreateSharedHandle</b> fails with <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NAME_ALREADY_EXISTS</a>. This occurs because these objects share the same namespace.</para>
            /// <para>The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\\). For more information, see <a href = "https://docs.microsoft.com/windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>. Fast user switching is implemented using Terminal Services sessions. Kernel object names must follow the guidelines outlined for Terminal Services so that applications can support multiple users.</para>
            /// <para>The object can be created in a private namespace. For more information, see <a href = "https://docs.microsoft.com/windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgiresource1-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pHandle">A pointer to a variable that receives the NT HANDLE value to the resource to share.  You can  use this handle in calls to access the resource.</param>
            /// <returns>
            /// <para>Returns S_OK if successful; otherwise, returns one of the following values:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgiresource1-createsharedhandle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSharedHandle([Optional] win32.System.SystemServices.SECURITY_ATTRIBUTES*pAttributes, uint dwAccess, win32.System.SystemServices.PCWSTR lpName, win32.System.SystemServices.HANDLE*pHandle)
            {
                fixed (IDXGIResource1*pThis = &this)
                    return lpVtbl->CreateSharedHandle_14(pThis, pAttributes, dwAccess, lpName, pHandle);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetDevice_8;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, win32.System.SystemServices.HANDLE*, win32.System.Com.HRESULT>GetSharedHandle_9;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, uint *, win32.System.Com.HRESULT>GetUsage_10;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, win32.Graphics.Dxgi.DXGI_RESOURCE_PRIORITY, win32.System.Com.HRESULT>SetEvictionPriority_11;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, uint *, win32.System.Com.HRESULT>GetEvictionPriority_12;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, uint, win32.Graphics.Dxgi.IDXGISurface2**, win32.System.Com.HRESULT>CreateSubresourceSurface_13;
                internal delegate *unmanaged[Stdcall]<IDXGIResource1*, win32.System.SystemServices.SECURITY_ATTRIBUTES*, uint, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.HANDLE*, win32.System.Com.HRESULT>CreateSharedHandle_14;
            }

            private Vtbl*lpVtbl;
        }
    }
}