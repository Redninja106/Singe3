// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("D67441C7-672A-476F-9E82-CD55B44949CE")]
        internal unsafe struct IDXGIInfoQueue
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Sets the maximum number of messages that can be added to the message queue.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that sets the limit on the number of messages.</param>
            /// <param name = "MessageCountLimit">The maximum number of messages that can be added to the queue. –1 means no limit.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-setmessagecountlimit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetMessageCountLimit(global::System.Guid Producer, ulong MessageCountLimit)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->SetMessageCountLimit_4(pThis, Producer, MessageCountLimit);
            }

            /// <summary>Clears all messages from the message queue.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that clears the messages.</param>
            /// <remarks>
            /// <para><div class = "alert"><b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-clearstoredmessages#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearStoredMessages(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    lpVtbl->ClearStoredMessages_5(pThis, Producer);
            }

            /// <inheritdoc cref = "GetMessage(global::System.Guid, ulong, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE*, nuint*)"/>
            internal unsafe win32.System.Com.HRESULT GetMessage(global::System.Guid Producer, ulong MessageIndex, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE*pMessage, ref nuint pMessageByteLength)
            {
                fixed (nuint*pMessageByteLengthLocal = &pMessageByteLength)
                {
                    win32.System.Com.HRESULT __result = this.GetMessage(Producer, MessageIndex, pMessage, pMessageByteLengthLocal);
                    return __result;
                }
            }

            /// <summary>Gets a message from the message queue.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the message.</param>
            /// <param name = "MessageIndex">An index into the message queue after an optional retrieval filter has been applied. This can be between 0 and the number of messages in the message queue that pass through the retrieval filter. Call <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/nf-dxgidebug-idxgiinfoqueue-getnumstoredmessagesallowedbyretrievalfilters">IDXGIInfoQueue::GetNumStoredMessagesAllowedByRetrievalFilters</a> to obtain this number. 0 is the message at the beginning of the message queue.</param>
            /// <param name = "pMessage">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_message">DXGI_INFO_QUEUE_MESSAGE</a> structure that describes the message.</param>
            /// <param name = "pMessageByteLength">A pointer to a variable that receives the size, in bytes, of the message description that <i>pMessage</i> points to. This size includes the size of the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_message">DXGI_INFO_QUEUE_MESSAGE</a> structure in bytes.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMessage(global::System.Guid Producer, ulong MessageIndex, [Optional] win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE*pMessage, nuint*pMessageByteLength)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetMessage_6(pThis, Producer, MessageIndex, pMessage, pMessageByteLength);
            }

            /// <summary>Gets the number of messages that can pass through a retrieval filter.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the number.</param>
            /// <returns>Returns the number of messages that can pass through a retrieval filter.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getnumstoredmessagesallowedbyretrievalfilters">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumStoredMessagesAllowedByRetrievalFilters(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetNumStoredMessagesAllowedByRetrievalFilters_7(pThis, Producer);
            }

            /// <summary>Gets the number of messages currently stored in the message queue.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the number.</param>
            /// <returns>Returns the number of messages currently stored in the message queue.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getnumstoredmessages">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumStoredMessages(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetNumStoredMessages_8(pThis, Producer);
            }

            /// <summary>Gets the number of messages that were discarded due to the message count limit.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the number.</param>
            /// <returns>Returns the number of messages that were discarded.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getnummessagesdiscardedbymessagecountlimit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumMessagesDiscardedByMessageCountLimit(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetNumMessagesDiscardedByMessageCountLimit_9(pThis, Producer);
            }

            /// <summary>Gets the maximum number of messages that can be added to the message queue.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the number.</param>
            /// <returns>Returns the maximum number of messages that can be added to the queue. –1 means no limit.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getmessagecountlimit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetMessageCountLimit(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetMessageCountLimit_10(pThis, Producer);
            }

            /// <summary>Gets the number of messages that a storage filter allowed to pass through.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the number.</param>
            /// <returns>Returns the number of messages allowed by a storage filter.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getnummessagesallowedbystoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumMessagesAllowedByStorageFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetNumMessagesAllowedByStorageFilter_11(pThis, Producer);
            }

            /// <summary>Gets the number of messages that were denied passage through a storage filter.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the number.</param>
            /// <returns>Returns the number of messages denied by a storage filter.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getnummessagesdeniedbystoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumMessagesDeniedByStorageFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetNumMessagesDeniedByStorageFilter_12(pThis, Producer);
            }

            /// <inheritdoc cref = "AddStorageFilterEntries(global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT AddStorageFilterEntries(global::System.Guid Producer, in win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.AddStorageFilterEntries(Producer, pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Adds storage filters to the top of the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that produced the filters.</param>
            /// <param name = "pFilter">An array of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_filter">DXGI_INFO_QUEUE_FILTER</a> structures that describe the filters.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-addstoragefilterentries">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AddStorageFilterEntries(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->AddStorageFilterEntries_13(pThis, Producer, pFilter);
            }

            /// <inheritdoc cref = "GetStorageFilter(global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, nuint*)"/>
            internal unsafe win32.System.Com.HRESULT GetStorageFilter(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter, ref nuint pFilterByteLength)
            {
                fixed (nuint*pFilterByteLengthLocal = &pFilterByteLength)
                {
                    win32.System.Com.HRESULT __result = this.GetStorageFilter(Producer, pFilter, pFilterByteLengthLocal);
                    return __result;
                }
            }

            /// <summary>Gets the storage filter at the top of the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the filter.</param>
            /// <param name = "pFilter">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_filter">DXGI_INFO_QUEUE_FILTER</a> structure that describes the filter.</param>
            /// <param name = "pFilterByteLength">A pointer to a variable that receives the size, in bytes, of the filter description to which <i>pFilter</i> points. If <i>pFilter</i> is <b>NULL</b>, <b>GetStorageFilter</b> outputs the size of the storage filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetStorageFilter(global::System.Guid Producer, [Optional] win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter, nuint*pFilterByteLength)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetStorageFilter_14(pThis, Producer, pFilter, pFilterByteLength);
            }

            /// <summary>Removes a storage filter from the top of the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that removes the filter.</param>
            /// <remarks>
            /// <para><div class = "alert"><b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-clearstoragefilter#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearStorageFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    lpVtbl->ClearStorageFilter_15(pThis, Producer);
            }

            /// <summary>Pushes an empty storage filter onto the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the empty storage filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushemptystoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushEmptyStorageFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushEmptyStorageFilter_16(pThis, Producer);
            }

            /// <summary>Pushes a deny-all storage filter onto the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushdenyallstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushDenyAllStorageFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushDenyAllStorageFilter_17(pThis, Producer);
            }

            /// <summary>Pushes a copy of the storage filter that is currently on the top of the storage-filter stack onto the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the copy of the storage filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushcopyofstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushCopyOfStorageFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushCopyOfStorageFilter_18(pThis, Producer);
            }

            /// <inheritdoc cref = "PushStorageFilter(global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT PushStorageFilter(global::System.Guid Producer, in win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.PushStorageFilter(Producer, pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Pushes a storage filter onto the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the filter.</param>
            /// <param name = "pFilter">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_filter">DXGI_INFO_QUEUE_FILTER</a> structure that describes the filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PushStorageFilter(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushStorageFilter_19(pThis, Producer, pFilter);
            }

            /// <summary>Pops a storage filter from the top of the storage-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pops the filter.</param>
            /// <remarks>
            /// <para><div class = "alert"><b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-popstoragefilter#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void PopStorageFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    lpVtbl->PopStorageFilter_20(pThis, Producer);
            }

            /// <summary>Gets the size of the storage-filter stack in bytes.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the size.</param>
            /// <returns>Returns the size of the storage-filter stack in bytes.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getstoragefilterstacksize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetStorageFilterStackSize(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetStorageFilterStackSize_21(pThis, Producer);
            }

            /// <inheritdoc cref = "AddRetrievalFilterEntries(global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT AddRetrievalFilterEntries(global::System.Guid Producer, in win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.AddRetrievalFilterEntries(Producer, pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Adds retrieval filters to the top of the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that produced the filters.</param>
            /// <param name = "pFilter">An array of <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_filter">DXGI_INFO_QUEUE_FILTER</a> structures that describe the filters.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-addretrievalfilterentries">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AddRetrievalFilterEntries(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->AddRetrievalFilterEntries_22(pThis, Producer, pFilter);
            }

            /// <inheritdoc cref = "GetRetrievalFilter(global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, nuint*)"/>
            internal unsafe win32.System.Com.HRESULT GetRetrievalFilter(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter, ref nuint pFilterByteLength)
            {
                fixed (nuint*pFilterByteLengthLocal = &pFilterByteLength)
                {
                    win32.System.Com.HRESULT __result = this.GetRetrievalFilter(Producer, pFilter, pFilterByteLengthLocal);
                    return __result;
                }
            }

            /// <summary>Gets the retrieval filter at the top of the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the filter.</param>
            /// <param name = "pFilter">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_filter">DXGI_INFO_QUEUE_FILTER</a> structure that describes the filter.</param>
            /// <param name = "pFilterByteLength">A pointer to a variable that receives the size, in bytes, of the filter description to which <i>pFilter</i> points. If <i>pFilter</i> is <b>NULL</b>, <b>GetRetrievalFilter</b> outputs the size of the retrieval filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetRetrievalFilter(global::System.Guid Producer, [Optional] win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter, nuint*pFilterByteLength)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetRetrievalFilter_23(pThis, Producer, pFilter, pFilterByteLength);
            }

            /// <summary>Removes a retrieval filter from the top of the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that removes the filter.</param>
            /// <remarks>
            /// <para><div class = "alert"><b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-clearretrievalfilter#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearRetrievalFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    lpVtbl->ClearRetrievalFilter_24(pThis, Producer);
            }

            /// <summary>Pushes an empty retrieval filter onto the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the empty retrieval filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushemptyretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushEmptyRetrievalFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushEmptyRetrievalFilter_25(pThis, Producer);
            }

            /// <summary>Pushes a deny-all retrieval filter onto the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the deny-all retrieval filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushdenyallretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushDenyAllRetrievalFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushDenyAllRetrievalFilter_26(pThis, Producer);
            }

            /// <summary>Pushes a copy of the retrieval filter that is currently on the top of the retrieval-filter stack onto the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the copy of the retrieval filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushcopyofretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushCopyOfRetrievalFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushCopyOfRetrievalFilter_27(pThis, Producer);
            }

            /// <inheritdoc cref = "PushRetrievalFilter(global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT PushRetrievalFilter(global::System.Guid Producer, in win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.PushRetrievalFilter(Producer, pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Pushes a retrieval filter onto the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pushes the filter.</param>
            /// <param name = "pFilter">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ns-dxgidebug-dxgi_info_queue_filter">DXGI_INFO_QUEUE_FILTER</a> structure that describes the filter.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-pushretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PushRetrievalFilter(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->PushRetrievalFilter_28(pThis, Producer, pFilter);
            }

            /// <summary>Pops a retrieval filter from the top of the retrieval-filter stack.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that pops the filter.</param>
            /// <remarks>
            /// <para><div class = "alert"><b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-popretrievalfilter#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void PopRetrievalFilter(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    lpVtbl->PopRetrievalFilter_29(pThis, Producer);
            }

            /// <summary>Gets the size of the retrieval-filter stack in bytes.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the size.</param>
            /// <returns>Returns the size of the retrieval-filter stack in bytes.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getretrievalfilterstacksize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetRetrievalFilterStackSize(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetRetrievalFilterStackSize_30(pThis, Producer);
            }

            /// <summary>Adds a debug message to the message queue and sends that message to the debug output.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that produced the message.</param>
            /// <param name = "Category">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ne-dxgidebug-dxgi_info_queue_message_category">DXGI_INFO_QUEUE_MESSAGE_CATEGORY</a>-typed value that specifies the category of the message.</param>
            /// <param name = "Severity">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ne-dxgidebug-dxgi_info_queue_message_severity">DXGI_INFO_QUEUE_MESSAGE_SEVERITY</a>-typed value that specifies the severity of the message.</param>
            /// <param name = "ID">An integer that uniquely identifies the message.</param>
            /// <param name = "pDescription">The message string.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-addmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT AddMessage(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, int ID, win32.System.SystemServices.PCSTR pDescription)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->AddMessage_31(pThis, Producer, Category, Severity, ID, pDescription);
            }

            /// <summary>Adds a user-defined message to the message queue and sends that message to the debug output.</summary>
            /// <param name = "Severity">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ne-dxgidebug-dxgi_info_queue_message_severity">DXGI_INFO_QUEUE_MESSAGE_SEVERITY</a>-typed value that specifies the severity of the message.</param>
            /// <param name = "pDescription">The message string.</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-addapplicationmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT AddApplicationMessage(win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, win32.System.SystemServices.PCSTR pDescription)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->AddApplicationMessage_32(pThis, Severity, pDescription);
            }

            /// <summary>Sets a message category to break on when a message with that category passes through the storage filter.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that sets the breaking condition.</param>
            /// <param name = "Category">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ne-dxgidebug-dxgi_info_queue_message_category">DXGI_INFO_QUEUE_MESSAGE_CATEGORY</a>-typed value that specifies the category of the message.</param>
            /// <param name = "bEnable">A Boolean value that specifies whether <b>SetBreakOnCategory</b> turns on or off this breaking condition (<b>TRUE</b> for on, <b>FALSE</b> for off).</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-setbreakoncategory">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetBreakOnCategory(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category, win32.System.SystemServices.BOOL bEnable)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->SetBreakOnCategory_33(pThis, Producer, Category, bEnable);
            }

            /// <summary>Sets a message severity level to break on when a message with that severity level passes through the storage filter.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that sets the breaking condition.</param>
            /// <param name = "Severity">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ne-dxgidebug-dxgi_info_queue_message_severity">DXGI_INFO_QUEUE_MESSAGE_SEVERITY</a>-typed value that specifies the severity of the message.</param>
            /// <param name = "bEnable">A Boolean value that specifies whether <b>SetBreakOnSeverity</b> turns on or off this breaking condition (<b>TRUE</b> for on, <b>FALSE</b> for off).</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-setbreakonseverity">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetBreakOnSeverity(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, win32.System.SystemServices.BOOL bEnable)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->SetBreakOnSeverity_34(pThis, Producer, Severity, bEnable);
            }

            /// <summary>Sets a message identifier to break on when a message with that identifier passes through the storage filter.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that sets the breaking condition.</param>
            /// <param name = "ID">An integer value that specifies the identifier of the message.</param>
            /// <param name = "bEnable">A Boolean value that specifies whether <b>SetBreakOnID</b> turns on or off this breaking condition (<b>TRUE</b> for on, <b>FALSE</b> for off).</param>
            /// <returns>Returns S_OK if successful; an error code otherwise. For a list of error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-setbreakonid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetBreakOnID(global::System.Guid Producer, int ID, win32.System.SystemServices.BOOL bEnable)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->SetBreakOnID_35(pThis, Producer, ID, bEnable);
            }

            /// <summary>Determines whether the break on a message category is turned on or off.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the breaking status.</param>
            /// <param name = "Category">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ne-dxgidebug-dxgi_info_queue_message_category">DXGI_INFO_QUEUE_MESSAGE_CATEGORY</a>-typed value that specifies the category of the message.</param>
            /// <returns>Returns a Boolean value that specifies whether this category of breaking condition is turned on or off (<b>TRUE</b> for on, <b>FALSE</b> for off).</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getbreakoncategory">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetBreakOnCategory(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetBreakOnCategory_36(pThis, Producer, Category);
            }

            /// <summary>Determines whether the break on a message severity level is turned on or off.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the breaking status.</param>
            /// <param name = "Severity">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgidebug/ne-dxgidebug-dxgi_info_queue_message_severity">DXGI_INFO_QUEUE_MESSAGE_SEVERITY</a>-typed value that specifies the severity of the message.</param>
            /// <returns>Returns a Boolean value that specifies whether this severity of breaking condition is turned on or off (<b>TRUE</b> for on, <b>FALSE</b> for off).</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getbreakonseverity">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetBreakOnSeverity(global::System.Guid Producer, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetBreakOnSeverity_37(pThis, Producer, Severity);
            }

            /// <summary>Determines whether the break on a message identifier is turned on or off.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the breaking status.</param>
            /// <param name = "ID">An integer value that specifies the identifier of the message.</param>
            /// <returns>Returns a Boolean value that specifies whether this break on a message identifier is turned on or off (<b>TRUE</b> for on, <b>FALSE</b> for off).</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getbreakonid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetBreakOnID(global::System.Guid Producer, int ID)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetBreakOnID_38(pThis, Producer, ID);
            }

            /// <summary>Turns the debug output on or off.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the mute status.</param>
            /// <param name = "bMute">A Boolean value that specifies whether to turn the debug output on or off (<b>TRUE</b> for on, <b>FALSE</b> for off).</param>
            /// <remarks>
            /// <para><div class = "alert"><b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-setmutedebugoutput#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetMuteDebugOutput(global::System.Guid Producer, win32.System.SystemServices.BOOL bMute)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    lpVtbl->SetMuteDebugOutput_39(pThis, Producer, bMute);
            }

            /// <summary>Determines whether the debug output is turned on or off.</summary>
            /// <param name = "Producer">A <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-debug-id">DXGI_DEBUG_ID</a> value that identifies the entity that gets the mute status.</param>
            /// <returns>Returns a Boolean value that specifies whether the debug output is turned on or off (<b>TRUE</b> for on, <b>FALSE</b> for off).</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgidebug/nf-dxgidebug-idxgiinfoqueue-getmutedebugoutput">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetMuteDebugOutput(global::System.Guid Producer)
            {
                fixed (IDXGIInfoQueue*pThis = &this)
                    return lpVtbl->GetMuteDebugOutput_40(pThis, Producer);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong, win32.System.Com.HRESULT>SetMessageCountLimit_4;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, void>ClearStoredMessages_5;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE*, nuint*, win32.System.Com.HRESULT>GetMessage_6;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong>GetNumStoredMessagesAllowedByRetrievalFilters_7;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong>GetNumStoredMessages_8;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong>GetNumMessagesDiscardedByMessageCountLimit_9;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong>GetMessageCountLimit_10;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong>GetNumMessagesAllowedByStorageFilter_11;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, ulong>GetNumMessagesDeniedByStorageFilter_12;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>AddStorageFilterEntries_13;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, nuint*, win32.System.Com.HRESULT>GetStorageFilter_14;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, void>ClearStorageFilter_15;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.Com.HRESULT>PushEmptyStorageFilter_16;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.Com.HRESULT>PushDenyAllStorageFilter_17;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.Com.HRESULT>PushCopyOfStorageFilter_18;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>PushStorageFilter_19;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, void>PopStorageFilter_20;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, uint>GetStorageFilterStackSize_21;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>AddRetrievalFilterEntries_22;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, nuint*, win32.System.Com.HRESULT>GetRetrievalFilter_23;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, void>ClearRetrievalFilter_24;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.Com.HRESULT>PushEmptyRetrievalFilter_25;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.Com.HRESULT>PushDenyAllRetrievalFilter_26;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.Com.HRESULT>PushCopyOfRetrievalFilter_27;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>PushRetrievalFilter_28;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, void>PopRetrievalFilter_29;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, uint>GetRetrievalFilterStackSize_30;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_CATEGORY, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY, int, win32.System.SystemServices.PCSTR, win32.System.Com.HRESULT>AddMessage_31;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY, win32.System.SystemServices.PCSTR, win32.System.Com.HRESULT>AddApplicationMessage_32;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_CATEGORY, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetBreakOnCategory_33;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetBreakOnSeverity_34;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, int, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetBreakOnID_35;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_CATEGORY, win32.System.SystemServices.BOOL>GetBreakOnCategory_36;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY, win32.System.SystemServices.BOOL>GetBreakOnSeverity_37;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, int, win32.System.SystemServices.BOOL>GetBreakOnID_38;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.SystemServices.BOOL, void>SetMuteDebugOutput_39;
                internal delegate *unmanaged[Stdcall]<IDXGIInfoQueue*, global::System.Guid, win32.System.SystemServices.BOOL>GetMuteDebugOutput_40;
            }

            private Vtbl*lpVtbl;
        }
    }
}