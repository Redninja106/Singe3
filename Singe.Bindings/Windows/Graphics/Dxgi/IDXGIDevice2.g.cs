// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Dxgi
    {
        [Guid("05008617-FBFD-4051-A790-144884B4F6A9")]
        internal unsafe struct IDXGIDevice2
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid Name, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(NameLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*Name, uint DataSize, void *pData)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->SetPrivateData_4(pThis, Name, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid Name, win32.System.Com.IUnknown*pUnknown)
            {
                fixed (global::System.Guid*NameLocal = &Name)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(NameLocal, pUnknown);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*Name, [Optional] win32.System.Com.IUnknown*pUnknown)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_5(pThis, Name, pUnknown);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid Name, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*NameLocal = &Name)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(NameLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*Name, uint *pDataSize, void *pData)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->GetPrivateData_6(pThis, Name, pDataSize, pData);
            }

            /// <inheritdoc cref = "GetParent(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetParent(in global::System.Guid riid, out void *ppParent)
            {
                fixed (void **ppParentLocal = &ppParent)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.GetParent(riidLocal, ppParentLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetParent(global::System.Guid*riid, void **ppParent)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->GetParent_7(pThis, riid, ppParent);
            }

            internal unsafe win32.System.Com.HRESULT GetAdapter(win32.Graphics.Dxgi.IDXGIAdapter**pAdapter)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->GetAdapter_8(pThis, pAdapter);
            }

            /// <inheritdoc cref = "CreateSurface(win32.Graphics.Dxgi.DXGI_SURFACE_DESC*, uint, uint, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*, win32.Graphics.Dxgi.IDXGISurface**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSurface(in win32.Graphics.Dxgi.DXGI_SURFACE_DESC pDesc, uint NumSurfaces, uint Usage, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE? pSharedResource, win32.Graphics.Dxgi.IDXGISurface**ppSurface)
            {
                fixed (win32.Graphics.Dxgi.DXGI_SURFACE_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE pSharedResourceLocal = pSharedResource.HasValue ? pSharedResource.Value : default(win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE);
                    win32.System.Com.HRESULT __result = this.CreateSurface(pDescLocal, NumSurfaces, Usage, pSharedResource.HasValue ? &pSharedResourceLocal : null, ppSurface);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSurface(win32.Graphics.Dxgi.DXGI_SURFACE_DESC*pDesc, uint NumSurfaces, uint Usage, [Optional] win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*pSharedResource, win32.Graphics.Dxgi.IDXGISurface**ppSurface)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->CreateSurface_9(pThis, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
            }

            /// <inheritdoc cref = "QueryResourceResidency(win32.System.Com.IUnknown**, win32.Graphics.Dxgi.DXGI_RESIDENCY*, uint)"/>
            internal unsafe win32.System.Com.HRESULT QueryResourceResidency(win32.System.Com.IUnknown**ppResources, Span<win32.Graphics.Dxgi.DXGI_RESIDENCY> pResidencyStatus)
            {
                fixed (win32.Graphics.Dxgi.DXGI_RESIDENCY*pResidencyStatusLocal = pResidencyStatus)
                {
                    win32.System.Com.HRESULT __result = this.QueryResourceResidency(ppResources, pResidencyStatusLocal, (uint)pResidencyStatus.Length);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryResourceResidency(win32.System.Com.IUnknown**ppResources, win32.Graphics.Dxgi.DXGI_RESIDENCY*pResidencyStatus, uint NumResources)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->QueryResourceResidency_10(pThis, ppResources, pResidencyStatus, NumResources);
            }

            internal win32.System.Com.HRESULT SetGPUThreadPriority(int Priority)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->SetGPUThreadPriority_11(pThis, Priority);
            }

            /// <inheritdoc cref = "GetGPUThreadPriority(int *)"/>
            internal unsafe win32.System.Com.HRESULT GetGPUThreadPriority(out int pPriority)
            {
                fixed (int *pPriorityLocal = &pPriority)
                {
                    win32.System.Com.HRESULT __result = this.GetGPUThreadPriority(pPriorityLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetGPUThreadPriority(int *pPriority)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->GetGPUThreadPriority_12(pThis, pPriority);
            }

            internal win32.System.Com.HRESULT SetMaximumFrameLatency(uint MaxLatency)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->SetMaximumFrameLatency_13(pThis, MaxLatency);
            }

            /// <inheritdoc cref = "GetMaximumFrameLatency(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(out uint pMaxLatency)
            {
                fixed (uint *pMaxLatencyLocal = &pMaxLatency)
                {
                    win32.System.Com.HRESULT __result = this.GetMaximumFrameLatency(pMaxLatencyLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetMaximumFrameLatency(uint *pMaxLatency)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->GetMaximumFrameLatency_14(pThis, pMaxLatency);
            }

            /// <summary>Allows the operating system to free the video memory of resources by discarding their content.</summary>
            /// <param name = "NumResources">The number of resources in the <i>ppResources</i> argument array.</param>
            /// <param name = "ppResources">An array of pointers to <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiresource">IDXGIResource</a> interfaces for the resources to offer.</param>
            /// <param name = "Priority">A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/ne-dxgi1_2-dxgi_offer_resource_priority">DXGI_OFFER_RESOURCE_PRIORITY</a>-typed value that indicates how valuable data is.</param>
            /// <returns>
            /// <para><b>OfferResources</b> returns:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgidevice2-offerresources">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT OfferResources(uint NumResources, win32.Graphics.Dxgi.IDXGIResource**ppResources, win32.Graphics.Dxgi.DXGI_OFFER_RESOURCE_PRIORITY Priority)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->OfferResources_15(pThis, NumResources, ppResources, Priority);
            }

            /// <summary>Restores access to resources that were previously offered by calling IDXGIDevice2::OfferResources.</summary>
            /// <param name = "NumResources">The number of resources in the <i>ppResources</i> argument and <i>pDiscarded</i> argument arrays.</param>
            /// <param name = "ppResources">An array of pointers to <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiresource">IDXGIResource</a> interfaces for the resources to reclaim.</param>
            /// <param name = "pDiscarded">A pointer to an array that receives Boolean values. Each value in the array corresponds to a resource at the same index that the <i>ppResources</i> parameter specifies.  The runtime sets each Boolean value to TRUE if the corresponding resource’s content was discarded and is now undefined, or to FALSE if the corresponding resource’s old content is still intact.  The caller can pass in <b>NULL</b>, if the caller intends to fill the resources with new content regardless of whether the old content was discarded.</param>
            /// <returns>
            /// <para><b>ReclaimResources</b> returns:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgidevice2-reclaimresources">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT ReclaimResources(uint NumResources, win32.Graphics.Dxgi.IDXGIResource**ppResources, [Optional] win32.System.SystemServices.BOOL*pDiscarded)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->ReclaimResources_16(pThis, NumResources, ppResources, pDiscarded);
            }

            /// <inheritdoc cref = "EnqueueSetEvent(win32.System.SystemServices.HANDLE)"/>
            internal unsafe win32.System.Com.HRESULT EnqueueSetEvent(SafeHandle hEvent)
            {
                bool hEventAddRef = false;
                try
                {
                    win32.System.SystemServices.HANDLE hEventLocal;
                    if (hEvent is object)
                    {
                        hEvent.DangerousAddRef(ref hEventAddRef);
                        hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                    }
                    else
                        hEventLocal = default(win32.System.SystemServices.HANDLE);
                    win32.System.Com.HRESULT __result = this.EnqueueSetEvent(hEventLocal);
                    return __result;
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            /// <summary>Flushes any outstanding rendering commands and sets the specified event object to the signaled state after all previously submitted rendering commands complete.</summary>
            /// <param name = "hEvent">
            /// <para>A handle to the event object. The <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-createeventa">CreateEvent</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-openeventa">OpenEvent</a> function returns this handle. All types of event objects (manual-reset, auto-reset, and so on) are supported.</para>
            /// <para>The handle must have the EVENT_MODIFY_STATE access right. For more information about access rights, see <a href = "https://docs.microsoft.com/windows/desktop/Sync/synchronization-object-security-and-access-rights">Synchronization Object Security and Access Rights</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgidevice2-enqueuesetevent#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the following values:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dxgi1_2/nf-dxgi1_2-idxgidevice2-enqueuesetevent">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT EnqueueSetEvent(win32.System.SystemServices.HANDLE hEvent)
            {
                fixed (IDXGIDevice2*pThis = &this)
                    return lpVtbl->EnqueueSetEvent_17(pThis, hEvent);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_5;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetParent_7;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, win32.Graphics.Dxgi.IDXGIAdapter**, win32.System.Com.HRESULT>GetAdapter_8;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, win32.Graphics.Dxgi.DXGI_SURFACE_DESC*, uint, uint, win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE*, win32.Graphics.Dxgi.IDXGISurface**, win32.System.Com.HRESULT>CreateSurface_9;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, win32.System.Com.IUnknown**, win32.Graphics.Dxgi.DXGI_RESIDENCY*, uint, win32.System.Com.HRESULT>QueryResourceResidency_10;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, int, win32.System.Com.HRESULT>SetGPUThreadPriority_11;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, int *, win32.System.Com.HRESULT>GetGPUThreadPriority_12;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, uint, win32.System.Com.HRESULT>SetMaximumFrameLatency_13;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, uint *, win32.System.Com.HRESULT>GetMaximumFrameLatency_14;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, uint, win32.Graphics.Dxgi.IDXGIResource**, win32.Graphics.Dxgi.DXGI_OFFER_RESOURCE_PRIORITY, win32.System.Com.HRESULT>OfferResources_15;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, uint, win32.Graphics.Dxgi.IDXGIResource**, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>ReclaimResources_16;
                internal delegate *unmanaged[Stdcall]<IDXGIDevice2*, win32.System.SystemServices.HANDLE, win32.System.Com.HRESULT>EnqueueSetEvent_17;
            }

            private Vtbl*lpVtbl;
        }
    }
}