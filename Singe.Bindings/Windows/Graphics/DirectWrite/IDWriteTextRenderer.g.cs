// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("EF8A8135-5CC6-45FE-8825-C5A0724EB819")]
        internal unsafe struct IDWriteTextRenderer
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "IsPixelSnappingDisabled(void *, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT IsPixelSnappingDisabled(void *clientDrawingContext, out win32.System.SystemServices.BOOL isDisabled)
            {
                fixed (win32.System.SystemServices.BOOL*isDisabledLocal = &isDisabled)
                {
                    win32.System.Com.HRESULT __result = this.IsPixelSnappingDisabled(clientDrawingContext, isDisabledLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT IsPixelSnappingDisabled([Optional] void *clientDrawingContext, win32.System.SystemServices.BOOL*isDisabled)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->IsPixelSnappingDisabled_4(pThis, clientDrawingContext, isDisabled);
            }

            /// <inheritdoc cref = "GetCurrentTransform(void *, win32.Graphics.DirectWrite.DWRITE_MATRIX*)"/>
            internal unsafe win32.System.Com.HRESULT GetCurrentTransform(void *clientDrawingContext, out win32.Graphics.DirectWrite.DWRITE_MATRIX transform)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_MATRIX*transformLocal = &transform)
                {
                    win32.System.Com.HRESULT __result = this.GetCurrentTransform(clientDrawingContext, transformLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetCurrentTransform([Optional] void *clientDrawingContext, win32.Graphics.DirectWrite.DWRITE_MATRIX*transform)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->GetCurrentTransform_5(pThis, clientDrawingContext, transform);
            }

            /// <inheritdoc cref = "GetPixelsPerDip(void *, float *)"/>
            internal unsafe win32.System.Com.HRESULT GetPixelsPerDip(void *clientDrawingContext, out float pixelsPerDip)
            {
                fixed (float *pixelsPerDipLocal = &pixelsPerDip)
                {
                    win32.System.Com.HRESULT __result = this.GetPixelsPerDip(clientDrawingContext, pixelsPerDipLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPixelsPerDip([Optional] void *clientDrawingContext, float *pixelsPerDip)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->GetPixelsPerDip_6(pThis, clientDrawingContext, pixelsPerDip);
            }

            /// <inheritdoc cref = "DrawGlyphRun(void *, float, float, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT DrawGlyphRun(void *clientDrawingContext, float baselineOriginX, float baselineOriginY, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription, win32.System.Com.IUnknown*clientDrawingEffect)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*glyphRunDescriptionLocal = &glyphRunDescription)
                {
                    fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                    {
                        win32.System.Com.HRESULT __result = this.DrawGlyphRun(clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRunLocal, glyphRunDescriptionLocal, clientDrawingEffect);
                        return __result;
                    }
                }
            }

            /// <summary>IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs.</summary>
            /// <param name = "clientDrawingContext">
            /// <para>Type: <b>void*</b></para>
            /// <para>The application-defined drawing context passed to <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritetextlayout-draw">IDWriteTextLayout::Draw</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baselineOriginX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location (X-coordinate) at the baseline origin of the glyph run.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baselineOriginY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location (Y-coordinate) at the baseline origin of the glyph run.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "measuringMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b></para>
            /// <para>The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRun">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b></para>
            /// <para>Pointer to the glyph run instance to render.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRunDescription">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_run_description">DWRITE_GLYPH_RUN_DESCRIPTION</a>*</b></para>
            /// <para>A pointer to the glyph run description instance which contains properties of the characters associated with this run.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "clientDrawingEffect">
            /// <para>Type: <b>IUnknown*</b></para>
            /// <para>Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawglyphrun">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawGlyphRun([Optional] void *clientDrawingContext, float baselineOriginX, float baselineOriginY, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*glyphRunDescription, [Optional] win32.System.Com.IUnknown*clientDrawingEffect)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->DrawGlyphRun_7(pThis, clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, glyphRun, glyphRunDescription, clientDrawingEffect);
            }

            /// <inheritdoc cref = "DrawUnderline(void *, float, float, win32.Graphics.DirectWrite.DWRITE_UNDERLINE*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT DrawUnderline(void *clientDrawingContext, float baselineOriginX, float baselineOriginY, in win32.Graphics.DirectWrite.DWRITE_UNDERLINE underline, win32.System.Com.IUnknown*clientDrawingEffect)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_UNDERLINE*underlineLocal = &underline)
                {
                    win32.System.Com.HRESULT __result = this.DrawUnderline(clientDrawingContext, baselineOriginX, baselineOriginY, underlineLocal, clientDrawingEffect);
                    return __result;
                }
            }

            /// <summary>IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline.</summary>
            /// <param name = "clientDrawingContext">
            /// <para>Type: <b>void*</b></para>
            /// <para>The application-defined drawing context passed to IDWriteTextLayout::<a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwriteinlineobject-draw">Draw</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baselineOriginX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baselineOriginY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "underline">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_underline">DWRITE_UNDERLINE</a>*</b></para>
            /// <para>Pointer to  a structure containing underline logical information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "clientDrawingEffect">
            /// <para>Type: <b>IUnknown*</b></para>
            /// <para>Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawunderline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawUnderline([Optional] void *clientDrawingContext, float baselineOriginX, float baselineOriginY, win32.Graphics.DirectWrite.DWRITE_UNDERLINE*underline, [Optional] win32.System.Com.IUnknown*clientDrawingEffect)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->DrawUnderline_8(pThis, clientDrawingContext, baselineOriginX, baselineOriginY, underline, clientDrawingEffect);
            }

            /// <inheritdoc cref = "DrawStrikethrough(void *, float, float, win32.Graphics.DirectWrite.DWRITE_STRIKETHROUGH*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT DrawStrikethrough(void *clientDrawingContext, float baselineOriginX, float baselineOriginY, in win32.Graphics.DirectWrite.DWRITE_STRIKETHROUGH strikethrough, win32.System.Com.IUnknown*clientDrawingEffect)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_STRIKETHROUGH*strikethroughLocal = &strikethrough)
                {
                    win32.System.Com.HRESULT __result = this.DrawStrikethrough(clientDrawingContext, baselineOriginX, baselineOriginY, strikethroughLocal, clientDrawingEffect);
                    return __result;
                }
            }

            /// <summary>IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough.</summary>
            /// <param name = "clientDrawingContext">
            /// <para>Type: <b>void*</b></para>
            /// <para>The application-defined drawing context passed to IDWriteTextLayout::<a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwriteinlineobject-draw">Draw</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baselineOriginX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baselineOriginY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strikethrough">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_strikethrough">DWRITE_STRIKETHROUGH</a>*</b></para>
            /// <para>Pointer to  a structure containing strikethrough logical information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "clientDrawingEffect">
            /// <para>Type: <b>IUnknown*</b></para>
            /// <para>Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawstrikethrough">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawStrikethrough([Optional] void *clientDrawingContext, float baselineOriginX, float baselineOriginY, win32.Graphics.DirectWrite.DWRITE_STRIKETHROUGH*strikethrough, [Optional] win32.System.Com.IUnknown*clientDrawingEffect)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->DrawStrikethrough_9(pThis, clientDrawingContext, baselineOriginX, baselineOriginY, strikethrough, clientDrawingEffect);
            }

            /// <summary>IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object.</summary>
            /// <param name = "clientDrawingContext">
            /// <para>Type: <b>void*</b></para>
            /// <para>The application-defined drawing context passed to IDWriteTextLayout::<a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwriteinlineobject-draw">Draw</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "originX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>X-coordinate at the top-left corner of the inline object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "originY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>Y-coordinate at the top-left corner of the inline object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inlineObject">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriteinlineobject">IDWriteInlineObject</a>*</b></para>
            /// <para>The application-defined inline object set using <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritetextformat">IDWriteTextFormat</a>::<a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritetextlayout-setinlineobject">SetInlineObject</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isSideways">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isRightToLeft">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "clientDrawingEffect">
            /// <para>Type: <b>IUnknown*</b></para>
            /// <para>Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextrenderer-drawinlineobject">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawInlineObject([Optional] void *clientDrawingContext, float originX, float originY, win32.Graphics.DirectWrite.IDWriteInlineObject*inlineObject, win32.System.SystemServices.BOOL isSideways, win32.System.SystemServices.BOOL isRightToLeft, [Optional] win32.System.Com.IUnknown*clientDrawingEffect)
            {
                fixed (IDWriteTextRenderer*pThis = &this)
                    return lpVtbl->DrawInlineObject_10(pThis, clientDrawingContext, originX, originY, inlineObject, isSideways, isRightToLeft, clientDrawingEffect);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, void *, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>IsPixelSnappingDisabled_4;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, void *, win32.Graphics.DirectWrite.DWRITE_MATRIX*, win32.System.Com.HRESULT>GetCurrentTransform_5;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, void *, float *, win32.System.Com.HRESULT>GetPixelsPerDip_6;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, void *, float, float, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>DrawGlyphRun_7;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, void *, float, float, win32.Graphics.DirectWrite.DWRITE_UNDERLINE*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>DrawUnderline_8;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, void *, float, float, win32.Graphics.DirectWrite.DWRITE_STRIKETHROUGH*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>DrawStrikethrough_9;
                internal delegate *unmanaged[Stdcall]<IDWriteTextRenderer*, void *, float, float, win32.Graphics.DirectWrite.IDWriteInlineObject*, win32.System.SystemServices.BOOL, win32.System.SystemServices.BOOL, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>DrawInlineObject_10;
            }

            private Vtbl*lpVtbl;
        }
    }
}