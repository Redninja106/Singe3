// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("53737037-6D14-410B-9BFE-0B182BB70961")]
        internal unsafe struct IDWriteTextLayout
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal win32.System.Com.HRESULT SetTextAlignment(win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT textAlignment)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetTextAlignment_4(pThis, textAlignment);
            }

            internal win32.System.Com.HRESULT SetParagraphAlignment(win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetParagraphAlignment_5(pThis, paragraphAlignment);
            }

            internal win32.System.Com.HRESULT SetWordWrapping(win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING wordWrapping)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetWordWrapping_6(pThis, wordWrapping);
            }

            internal win32.System.Com.HRESULT SetReadingDirection(win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION readingDirection)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetReadingDirection_7(pThis, readingDirection);
            }

            internal win32.System.Com.HRESULT SetFlowDirection(win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION flowDirection)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetFlowDirection_8(pThis, flowDirection);
            }

            internal win32.System.Com.HRESULT SetIncrementalTabStop(float incrementalTabStop)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetIncrementalTabStop_9(pThis, incrementalTabStop);
            }

            /// <inheritdoc cref = "SetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject*)"/>
            internal unsafe win32.System.Com.HRESULT SetTrimming(in win32.Graphics.DirectWrite.DWRITE_TRIMMING trimmingOptions, win32.Graphics.DirectWrite.IDWriteInlineObject*trimmingSign)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptionsLocal = &trimmingOptions)
                {
                    win32.System.Com.HRESULT __result = this.SetTrimming(trimmingOptionsLocal, trimmingSign);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptions, [Optional] win32.Graphics.DirectWrite.IDWriteInlineObject*trimmingSign)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetTrimming_10(pThis, trimmingOptions, trimmingSign);
            }

            internal win32.System.Com.HRESULT SetLineSpacing(win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetLineSpacing_11(pThis, lineSpacingMethod, lineSpacing, baseline);
            }

            internal win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT GetTextAlignment()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetTextAlignment_12(pThis);
            }

            internal win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetParagraphAlignment_13(pThis);
            }

            internal win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING GetWordWrapping()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetWordWrapping_14(pThis);
            }

            internal win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION GetReadingDirection()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetReadingDirection_15(pThis);
            }

            internal win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION GetFlowDirection()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFlowDirection_16(pThis);
            }

            internal float GetIncrementalTabStop()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetIncrementalTabStop_17(pThis);
            }

            /// <inheritdoc cref = "GetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject**)"/>
            internal unsafe win32.System.Com.HRESULT GetTrimming(out win32.Graphics.DirectWrite.DWRITE_TRIMMING trimmingOptions, win32.Graphics.DirectWrite.IDWriteInlineObject**trimmingSign)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptionsLocal = &trimmingOptions)
                {
                    win32.System.Com.HRESULT __result = this.GetTrimming(trimmingOptionsLocal, trimmingSign);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptions, win32.Graphics.DirectWrite.IDWriteInlineObject**trimmingSign)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetTrimming_18(pThis, trimmingOptions, trimmingSign);
            }

            /// <inheritdoc cref = "GetLineSpacing(win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*, float *, float *)"/>
            internal unsafe win32.System.Com.HRESULT GetLineSpacing(out win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD lineSpacingMethod, out float lineSpacing, out float baseline)
            {
                fixed (float *baselineLocal = &baseline)
                {
                    fixed (float *lineSpacingLocal = &lineSpacing)
                    {
                        fixed (win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*lineSpacingMethodLocal = &lineSpacingMethod)
                        {
                            win32.System.Com.HRESULT __result = this.GetLineSpacing(lineSpacingMethodLocal, lineSpacingLocal, baselineLocal);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetLineSpacing(win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*lineSpacingMethod, float *lineSpacing, float *baseline)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetLineSpacing_19(pThis, lineSpacingMethod, lineSpacing, baseline);
            }

            /// <summary>Gets the font collection associated with the text at the specified position.</summary>
            /// <param name = "fontCollection">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontcollection">IDWriteFontCollection</a>**</b></para>
            /// <para>Contains an address of a  pointer to the current font collection.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontCollection(win32.Graphics.DirectWrite.IDWriteFontCollection**fontCollection)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontCollection_20(pThis, fontCollection);
            }

            /// <summary>Get the length of the font family name at the current position.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilynamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetFontFamilyNameLength()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontFamilyNameLength_21(pThis);
            }

            /// <summary>Copies the font family name of the text at the specified position.</summary>
            /// <param name = "fontFamilyName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>When this method returns, contains an array of characters that receives the current font family name. You must allocate storage for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the character array in character count including the terminated <b>NULL</b> character.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetFontFamilyName(win32.System.SystemServices.PWSTR fontFamilyName, uint nameSize)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontFamilyName_22(pThis, fontFamilyName, nameSize);
            }

            /// <summary>Gets the font weight of the text at the specified position.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontweight">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT GetFontWeight()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontWeight_23(pThis);
            }

            /// <summary>Gets the font style (also known as slope) of the text at the specified position.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstyle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_STYLE GetFontStyle()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontStyle_24(pThis);
            }

            /// <summary>Gets the font stretch of the text at the specified position.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstretch">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH GetFontStretch()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontStretch_25(pThis);
            }

            /// <summary>Gets the font em height of the text at the specified position.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetFontSize()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontSize_26(pThis);
            }

            /// <summary>Gets the length of the locale name of the text at the specified position.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalenamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetLocaleNameLength()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetLocaleNameLength_27(pThis);
            }

            /// <summary>Gets the locale name of the text at the specified position.</summary>
            /// <param name = "localeName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>When this method returns, contains the character array receiving the current locale name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Size of the character array, in character count, including the terminated <b>NULL</b> character.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetLocaleName(win32.System.SystemServices.PWSTR localeName, uint nameSize)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetLocaleName_28(pThis, localeName, nameSize);
            }

            /// <summary>Sets the layout maximum width.</summary>
            /// <param name = "maxWidth">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>A value that indicates the maximum width of the layout box.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setmaxwidth#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setmaxwidth">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetMaxWidth(float maxWidth)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetMaxWidth_29(pThis, maxWidth);
            }

            /// <summary>Sets the layout maximum height.</summary>
            /// <param name = "maxHeight">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>A value that indicates the maximum height of the layout box.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setmaxheight#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setmaxheight">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetMaxHeight(float maxHeight)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetMaxHeight_30(pThis, maxHeight);
            }

            /// <summary>Sets the font collection.</summary>
            /// <param name = "fontCollection">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontcollection">IDWriteFontCollection</a>*</b></para>
            /// <para>The font collection to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetFontCollection(win32.Graphics.DirectWrite.IDWriteFontCollection*fontCollection, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetFontCollection_31(pThis, fontCollection, textRange);
            }

            /// <inheritdoc cref = "SetFontFamilyName(win32.System.SystemServices.PCWSTR, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE)"/>
            internal unsafe win32.System.Com.HRESULT SetFontFamilyName(string fontFamilyName, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (char *fontFamilyNameLocal = fontFamilyName)
                {
                    win32.System.Com.HRESULT __result = this.SetFontFamilyName(fontFamilyNameLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Sets null-terminated font family name for text within a specified text range.</summary>
            /// <param name = "fontFamilyName">
            /// <para>Type: <b>const WCHAR*</b></para>
            /// <para>The font family name that applies to the entire text string within the range specified by <i>textRange</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontfamilyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetFontFamilyName(win32.System.SystemServices.PCWSTR fontFamilyName, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetFontFamilyName_32(pThis, fontFamilyName, textRange);
            }

            /// <summary>Sets the font weight for text within a text range specified by a DWRITE_TEXT_RANGE structure.</summary>
            /// <param name = "fontWeight">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_font_weight">DWRITE_FONT_WEIGHT</a></b></para>
            /// <para>The font weight to be set for text within the range specified by <i>textRange</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontweight#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontweight#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontweight">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetFontWeight(win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT fontWeight, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetFontWeight_33(pThis, fontWeight, textRange);
            }

            /// <summary>Sets the font style for text within a text range specified by a DWRITE_TEXT_RANGE structure.</summary>
            /// <param name = "fontStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_font_style">DWRITE_FONT_STYLE</a></b></para>
            /// <para>The  font style to be set   for text within a range specified by <i>textRange</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontstyle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>The text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontstyle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontstyle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetFontStyle(win32.Graphics.DirectWrite.DWRITE_FONT_STYLE fontStyle, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetFontStyle_34(pThis, fontStyle, textRange);
            }

            /// <summary>Sets the font stretch for text within a specified text range.</summary>
            /// <param name = "fontStretch">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_font_stretch">DWRITE_FONT_STRETCH</a></b></para>
            /// <para>A value which indicates the type of font stretch for text within the range specified by <i>textRange</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontstretch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontstretch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontstretch">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetFontStretch(win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH fontStretch, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetFontStretch_35(pThis, fontStretch, textRange);
            }

            /// <summary>Sets the font size in DIP units for text within a specified text range.</summary>
            /// <param name = "fontSize">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The  font size in DIP units to be set for   text in the range specified by <i>textRange</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setfontsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetFontSize(float fontSize, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetFontSize_36(pThis, fontSize, textRange);
            }

            /// <summary>Sets underlining for text within a specified text range.</summary>
            /// <param name = "hasUnderline">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>A Boolean flag that indicates whether underline takes place within a specified text range.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setunderline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetUnderline(win32.System.SystemServices.BOOL hasUnderline, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetUnderline_37(pThis, hasUnderline, textRange);
            }

            /// <summary>Sets strikethrough for text within a specified text range.</summary>
            /// <param name = "hasStrikethrough">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>A Boolean flag that indicates whether strikethrough takes place in the range specified by <i>textRange</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setstrikethrough">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetStrikethrough(win32.System.SystemServices.BOOL hasStrikethrough, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetStrikethrough_38(pThis, hasStrikethrough, textRange);
            }

            /// <summary>Sets the application-defined drawing effect.</summary>
            /// <param name = "drawingEffect">
            /// <para>Type: <b>IUnknown*</b></para>
            /// <para>Application-defined drawing effects that apply to the range. This data object will be passed back to the application's drawing callbacks for final rendering.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setdrawingeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>The text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setdrawingeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setdrawingeffect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetDrawingEffect(win32.System.Com.IUnknown*drawingEffect, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetDrawingEffect_39(pThis, drawingEffect, textRange);
            }

            /// <summary>Sets the inline object.</summary>
            /// <param name = "inlineObject">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriteinlineobject">IDWriteInlineObject</a>*</b></para>
            /// <para>An application-defined inline object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setinlineobject">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetInlineObject(win32.Graphics.DirectWrite.IDWriteInlineObject*inlineObject, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetInlineObject_40(pThis, inlineObject, textRange);
            }

            /// <summary>Sets font typography features for text within a specified text range.</summary>
            /// <param name = "typography">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritetypography">IDWriteTypography</a>*</b></para>
            /// <para>Pointer to font typography settings.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-settypography#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-settypography#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-settypography">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetTypography(win32.Graphics.DirectWrite.IDWriteTypography*typography, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetTypography_41(pThis, typography, textRange);
            }

            /// <inheritdoc cref = "SetLocaleName(win32.System.SystemServices.PCWSTR, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE)"/>
            internal unsafe win32.System.Com.HRESULT SetLocaleName(string localeName, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (char *localeNameLocal = localeName)
                {
                    win32.System.Com.HRESULT __result = this.SetLocaleName(localeNameLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Sets the locale name for text within a specified text range.</summary>
            /// <param name = "localeName">
            /// <para>Type: <b>const WCHAR*</b></para>
            /// <para>A null-terminated locale name string.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a></b></para>
            /// <para>Text range to which this change applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-setlocalename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetLocaleName(win32.System.SystemServices.PCWSTR localeName, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->SetLocaleName_42(pThis, localeName, textRange);
            }

            /// <summary>Gets the layout maximum width.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>Returns the layout maximum width.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getmaxwidth">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetMaxWidth()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetMaxWidth_43(pThis);
            }

            /// <summary>Gets the layout maximum height.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The layout maximum height.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getmaxheight">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetMaxHeight()
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetMaxHeight_44(pThis);
            }

            /// <summary>Gets the font collection associated with the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontCollection">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontcollection">IDWriteFontCollection</a>**</b></para>
            /// <para>Contains an address of a  pointer to the current font collection.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the underline.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontCollection(uint currentPosition, win32.Graphics.DirectWrite.IDWriteFontCollection**fontCollection, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontCollection_45(pThis, currentPosition, fontCollection, textRange);
            }

            /// <inheritdoc cref = "GetFontFamilyNameLength(uint, uint *, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetFontFamilyNameLength(uint currentPosition, out uint nameLength, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (uint *nameLengthLocal = &nameLength)
                {
                    win32.System.Com.HRESULT __result = this.GetFontFamilyNameLength(currentPosition, nameLengthLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Get the length of the font family name at the current position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The current text position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilynamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameLength">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>When this method returns, contains the size of the character array containing the font family name, in character count, not including the terminated <b>NULL</b> character.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilynamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the font family.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilynamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilynamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontFamilyNameLength(uint currentPosition, uint *nameLength, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontFamilyNameLength_46(pThis, currentPosition, nameLength, textRange);
            }

            /// <summary>Copies the font family name of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to examine.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontFamilyName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>When this method returns, contains an array of characters that receives the current font family name. You must allocate storage for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the character array in character count including the terminated <b>NULL</b> character.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the font family name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontfamilyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontFamilyName(uint currentPosition, win32.System.SystemServices.PWSTR fontFamilyName, uint nameSize, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontFamilyName_47(pThis, currentPosition, fontFamilyName, nameSize, textRange);
            }

            /// <inheritdoc cref = "GetFontWeight(uint, win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetFontWeight(uint currentPosition, out win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT fontWeight, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT*fontWeightLocal = &fontWeight)
                {
                    win32.System.Com.HRESULT __result = this.GetFontWeight(currentPosition, fontWeightLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Gets the font weight of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontweight#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontWeight">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_font_weight">DWRITE_FONT_WEIGHT</a>*</b></para>
            /// <para>When this method returns, contains a value which indicates the type of font weight being applied at the specified position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontweight#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the font weight.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontweight#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontweight">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontWeight(uint currentPosition, win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT*fontWeight, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontWeight_48(pThis, currentPosition, fontWeight, textRange);
            }

            /// <inheritdoc cref = "GetFontStyle(uint, win32.Graphics.DirectWrite.DWRITE_FONT_STYLE*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetFontStyle(uint currentPosition, out win32.Graphics.DirectWrite.DWRITE_FONT_STYLE fontStyle, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_FONT_STYLE*fontStyleLocal = &fontStyle)
                {
                    win32.System.Com.HRESULT __result = this.GetFontStyle(currentPosition, fontStyleLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Gets the font style (also known as slope) of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstyle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_font_style">DWRITE_FONT_STYLE</a>*</b></para>
            /// <para>When this method returns, contains a value which indicates the type of font style (also known as slope or incline) being applied at the specified position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstyle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the font style.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstyle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstyle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontStyle(uint currentPosition, win32.Graphics.DirectWrite.DWRITE_FONT_STYLE*fontStyle, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontStyle_49(pThis, currentPosition, fontStyle, textRange);
            }

            /// <inheritdoc cref = "GetFontStretch(uint, win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetFontStretch(uint currentPosition, out win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH fontStretch, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH*fontStretchLocal = &fontStretch)
                {
                    win32.System.Com.HRESULT __result = this.GetFontStretch(currentPosition, fontStretchLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Gets the font stretch of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstretch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontStretch">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_font_stretch">DWRITE_FONT_STRETCH</a>*</b></para>
            /// <para>When this method returns, contains a value which indicates the type of font stretch (also known as width) being applied at the specified position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstretch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the font stretch.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstretch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontstretch">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontStretch(uint currentPosition, win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH*fontStretch, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontStretch_50(pThis, currentPosition, fontStretch, textRange);
            }

            /// <inheritdoc cref = "GetFontSize(uint, float *, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetFontSize(uint currentPosition, out float fontSize, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (float *fontSizeLocal = &fontSize)
                {
                    win32.System.Com.HRESULT __result = this.GetFontSize(currentPosition, fontSizeLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Gets the font em height of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontSize">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the size of the font in ems  of the text at the specified position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the font size.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getfontsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontSize(uint currentPosition, float *fontSize, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetFontSize_51(pThis, currentPosition, fontSize, textRange);
            }

            /// <inheritdoc cref = "GetUnderline(uint, win32.System.SystemServices.BOOL*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetUnderline(uint currentPosition, out win32.System.SystemServices.BOOL hasUnderline, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (win32.System.SystemServices.BOOL*hasUnderlineLocal = &hasUnderline)
                {
                    win32.System.Com.HRESULT __result = this.GetUnderline(currentPosition, hasUnderlineLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Gets the underline presence of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The current text position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "hasUnderline">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>A Boolean  flag that indicates whether underline is present at the position indicated by <i>currentPosition</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the underline.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getunderline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getunderline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetUnderline(uint currentPosition, win32.System.SystemServices.BOOL*hasUnderline, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetUnderline_52(pThis, currentPosition, hasUnderline, textRange);
            }

            /// <inheritdoc cref = "GetStrikethrough(uint, win32.System.SystemServices.BOOL*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetStrikethrough(uint currentPosition, out win32.System.SystemServices.BOOL hasStrikethrough, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (win32.System.SystemServices.BOOL*hasStrikethroughLocal = &hasStrikethrough)
                {
                    win32.System.Com.HRESULT __result = this.GetStrikethrough(currentPosition, hasStrikethroughLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Get the strikethrough presence of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "hasStrikethrough">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>A Boolean  flag that indicates whether strikethrough is present at the position indicated by <i>currentPosition</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>Contains the range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to strikethrough.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getstrikethrough#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getstrikethrough">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetStrikethrough(uint currentPosition, win32.System.SystemServices.BOOL*hasStrikethrough, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetStrikethrough_53(pThis, currentPosition, hasStrikethrough, textRange);
            }

            /// <summary>Gets the application-defined drawing effect at the specified text position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text whose drawing effect is to be retrieved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getdrawingeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "drawingEffect">
            /// <para>Type: <b>IUnknown**</b></para>
            /// <para>When this method returns, contains an address of a pointer to  the current application-defined drawing effect. Usually this effect is a foreground brush that  is used in glyph drawing.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getdrawingeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>Contains the range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the drawing effect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getdrawingeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getdrawingeffect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDrawingEffect(uint currentPosition, win32.System.Com.IUnknown**drawingEffect, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetDrawingEffect_54(pThis, currentPosition, drawingEffect, textRange);
            }

            /// <summary>Gets the inline object at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The specified text position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inlineObject">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriteinlineobject">IDWriteInlineObject</a>**</b></para>
            /// <para>Contains the application-defined inline object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the inline object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getinlineobject#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getinlineobject">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetInlineObject(uint currentPosition, win32.Graphics.DirectWrite.IDWriteInlineObject**inlineObject, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetInlineObject_55(pThis, currentPosition, inlineObject, textRange);
            }

            /// <summary>Gets the typography setting of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-gettypography#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "typography">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritetypography">IDWriteTypography</a>**</b></para>
            /// <para>When this method returns, contains an address of a  pointer to the current typography setting.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-gettypography#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the typography.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-gettypography#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-gettypography">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTypography(uint currentPosition, win32.Graphics.DirectWrite.IDWriteTypography**typography, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetTypography_56(pThis, currentPosition, typography, textRange);
            }

            /// <inheritdoc cref = "GetLocaleNameLength(uint, uint *, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetLocaleNameLength(uint currentPosition, out uint nameLength, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (uint *nameLengthLocal = &nameLength)
                {
                    win32.System.Com.HRESULT __result = this.GetLocaleNameLength(currentPosition, nameLengthLocal, textRange);
                    return __result;
                }
            }

            /// <summary>Gets the length of the locale name of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameLength">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>Size of the character array, in character count, not including the terminated <b>NULL</b> character.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the locale name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalenamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLocaleNameLength(uint currentPosition, uint *nameLength, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetLocaleNameLength_57(pThis, currentPosition, nameLength, textRange);
            }

            /// <summary>Gets the locale name of the text at the specified position.</summary>
            /// <param name = "currentPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The position of the text to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "localeName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>When this method returns, contains the character array receiving the current locale name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Size of the character array, in character count, including the terminated <b>NULL</b> character.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textRange">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_range">DWRITE_TEXT_RANGE</a>*</b></para>
            /// <para>The range of text that has the same  formatting as the text at the position specified by <i>currentPosition</i>.  This means the run has the exact  formatting as the position specified, including but not limited to the locale name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlocalename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLocaleName(uint currentPosition, win32.System.SystemServices.PWSTR localeName, uint nameSize, [Optional] win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*textRange)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetLocaleName_58(pThis, currentPosition, localeName, nameSize, textRange);
            }

            /// <summary>Draws text using the specified client drawing context.</summary>
            /// <param name = "clientDrawingContext">
            /// <para>Type: <b>void*</b></para>
            /// <para>An application-defined drawing context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "renderer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritetextrenderer">IDWriteTextRenderer</a>*</b></para>
            /// <para>Pointer to the set of callback functions used to draw parts of a text string.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "originX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The x-coordinate of the layout's left side.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "originY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The y-coordinate of the layout's top side.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-draw">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Draw([Optional] void *clientDrawingContext, win32.Graphics.DirectWrite.IDWriteTextRenderer*renderer, float originX, float originY)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->Draw_59(pThis, clientDrawingContext, renderer, originX, originY);
            }

            /// <inheritdoc cref = "GetLineMetrics(win32.Graphics.DirectWrite.DWRITE_LINE_METRICS*, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetLineMetrics(Span<win32.Graphics.DirectWrite.DWRITE_LINE_METRICS> lineMetrics, out uint actualLineCount)
            {
                fixed (uint *actualLineCountLocal = &actualLineCount)
                {
                    fixed (win32.Graphics.DirectWrite.DWRITE_LINE_METRICS*lineMetricsLocal = lineMetrics)
                    {
                        win32.System.Com.HRESULT __result = this.GetLineMetrics(lineMetricsLocal, (uint)lineMetrics.Length, actualLineCountLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Retrieves the information about each individual text line of the text string.</summary>
            /// <param name = "lineMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_line_metrics">DWRITE_LINE_METRICS</a>*</b></para>
            /// <para>When this method returns, contains a pointer to an array of structures containing various calculated length values of individual text lines.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlinemetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "maxLineCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The maximum size of the <i>lineMetrics</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlinemetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "actualLineCount">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>When this method returns, contains the actual size of the <i>lineMetrics</i>array that is needed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlinemetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getlinemetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLineMetrics([Optional] win32.Graphics.DirectWrite.DWRITE_LINE_METRICS*lineMetrics, uint maxLineCount, uint *actualLineCount)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetLineMetrics_60(pThis, lineMetrics, maxLineCount, actualLineCount);
            }

            /// <inheritdoc cref = "GetMetrics(win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetMetrics(out win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS textMetrics)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS*textMetricsLocal = &textMetrics)
                {
                    win32.System.Com.HRESULT __result = this.GetMetrics(textMetricsLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves overall metrics for the formatted string.</summary>
            /// <param name = "textMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_text_metrics">DWRITE_TEXT_METRICS</a>*</b></para>
            /// <para>When this method returns, contains the measured distances of text and associated content after being formatted.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMetrics(win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS*textMetrics)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetMetrics_61(pThis, textMetrics);
            }

            /// <inheritdoc cref = "GetOverhangMetrics(win32.Graphics.DirectWrite.DWRITE_OVERHANG_METRICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetOverhangMetrics(out win32.Graphics.DirectWrite.DWRITE_OVERHANG_METRICS overhangs)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_OVERHANG_METRICS*overhangsLocal = &overhangs)
                {
                    win32.System.Com.HRESULT __result = this.GetOverhangMetrics(overhangsLocal);
                    return __result;
                }
            }

            /// <summary>Returns the overhangs (in DIPs) of the layout and all objects contained in it, including text glyphs and inline objects.</summary>
            /// <param name = "overhangs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_overhang_metrics">DWRITE_OVERHANG_METRICS</a>*</b></para>
            /// <para>Overshoots of visible extents (in DIPs) outside the layout.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getoverhangmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getoverhangmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetOverhangMetrics(win32.Graphics.DirectWrite.DWRITE_OVERHANG_METRICS*overhangs)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetOverhangMetrics_62(pThis, overhangs);
            }

            /// <inheritdoc cref = "GetClusterMetrics(win32.Graphics.DirectWrite.DWRITE_CLUSTER_METRICS*, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetClusterMetrics(Span<win32.Graphics.DirectWrite.DWRITE_CLUSTER_METRICS> clusterMetrics, out uint actualClusterCount)
            {
                fixed (uint *actualClusterCountLocal = &actualClusterCount)
                {
                    fixed (win32.Graphics.DirectWrite.DWRITE_CLUSTER_METRICS*clusterMetricsLocal = clusterMetrics)
                    {
                        win32.System.Com.HRESULT __result = this.GetClusterMetrics(clusterMetricsLocal, (uint)clusterMetrics.Length, actualClusterCountLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Retrieves logical properties and measurements of each glyph cluster.</summary>
            /// <param name = "clusterMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_cluster_metrics">DWRITE_CLUSTER_METRICS</a>*</b></para>
            /// <para>When this method returns, contains metrics, such as line-break or total advance width, for a glyph cluster.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getclustermetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "maxClusterCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The maximum size of the <i>clusterMetrics</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getclustermetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "actualClusterCount">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>When this method returns, contains the actual size of the <i>clusterMetrics</i> array that is needed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getclustermetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-getclustermetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetClusterMetrics([Optional] win32.Graphics.DirectWrite.DWRITE_CLUSTER_METRICS*clusterMetrics, uint maxClusterCount, uint *actualClusterCount)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->GetClusterMetrics_63(pThis, clusterMetrics, maxClusterCount, actualClusterCount);
            }

            /// <inheritdoc cref = "DetermineMinWidth(float *)"/>
            internal unsafe win32.System.Com.HRESULT DetermineMinWidth(out float minWidth)
            {
                fixed (float *minWidthLocal = &minWidth)
                {
                    win32.System.Com.HRESULT __result = this.DetermineMinWidth(minWidthLocal);
                    return __result;
                }
            }

            /// <summary>Determines the minimum possible width the layout can be set to without emergency breaking between the characters of whole words occurring.</summary>
            /// <param name = "minWidth">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>Minimum width.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-determineminwidth#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-determineminwidth">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DetermineMinWidth(float *minWidth)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->DetermineMinWidth_64(pThis, minWidth);
            }

            /// <inheritdoc cref = "HitTestPoint(float, float, win32.System.SystemServices.BOOL*, win32.System.SystemServices.BOOL*, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*)"/>
            internal unsafe win32.System.Com.HRESULT HitTestPoint(float pointX, float pointY, out win32.System.SystemServices.BOOL isTrailingHit, out win32.System.SystemServices.BOOL isInside, out win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS hitTestMetrics)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*hitTestMetricsLocal = &hitTestMetrics)
                {
                    fixed (win32.System.SystemServices.BOOL*isInsideLocal = &isInside)
                    {
                        fixed (win32.System.SystemServices.BOOL*isTrailingHitLocal = &isTrailingHit)
                        {
                            win32.System.Com.HRESULT __result = this.HitTestPoint(pointX, pointY, isTrailingHitLocal, isInsideLocal, hitTestMetricsLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>The application calls this function passing in a specific pixel location relative to the top-left location of the layout box and obtains the information about the correspondent hit-test metrics of the text string where the hit-test has occurred.</summary>
            /// <param name = "pointX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location X to hit-test, relative to the top-left location of the layout box.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittestpoint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The pixel location Y to hit-test, relative to the top-left location of the layout box.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittestpoint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isTrailingHit">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>An output flag that indicates whether the hit-test location is at the leading or the trailing side of the character. When the output <i>*isInside</i> value is set to <b>FALSE</b>, this value is set according to the output <i>hitTestMetrics-&gt;textPosition</i> value to represent the edge closest to the hit-test location.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittestpoint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isInside">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>An output flag that indicates whether the hit-test location is inside the text string. When <b>FALSE</b>, the position nearest the text's edge is returned.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittestpoint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "hitTestMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_hit_test_metrics">DWRITE_HIT_TEST_METRICS</a>*</b></para>
            /// <para>The output geometry fully enclosing the hit-test location. When the output <i>*isInside</i> value is set to <b>FALSE</b>, this structure represents the geometry enclosing the edge closest to the hit-test location.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittestpoint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittestpoint">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT HitTestPoint(float pointX, float pointY, win32.System.SystemServices.BOOL*isTrailingHit, win32.System.SystemServices.BOOL*isInside, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*hitTestMetrics)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->HitTestPoint_65(pThis, pointX, pointY, isTrailingHit, isInside, hitTestMetrics);
            }

            /// <inheritdoc cref = "HitTestTextPosition(uint, win32.System.SystemServices.BOOL, float *, float *, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*)"/>
            internal unsafe win32.System.Com.HRESULT HitTestTextPosition(uint textPosition, win32.System.SystemServices.BOOL isTrailingHit, out float pointX, out float pointY, out win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS hitTestMetrics)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*hitTestMetricsLocal = &hitTestMetrics)
                {
                    fixed (float *pointYLocal = &pointY)
                    {
                        fixed (float *pointXLocal = &pointX)
                        {
                            win32.System.Com.HRESULT __result = this.HitTestTextPosition(textPosition, isTrailingHit, pointXLocal, pointYLocal, hitTestMetricsLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>The application calls this function to get the pixel location relative to the top-left of the layout box given the text position and the logical side of the position.</summary>
            /// <param name = "textPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The text position used to get the pixel location.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextposition#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isTrailingHit">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>A Boolean flag that indicates whether the pixel location is of the leading or the trailing side of the specified text position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextposition#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointX">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the output pixel location X, relative to the top-left location of the layout box.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextposition#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointY">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the output pixel location Y, relative to the top-left location of the layout box.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextposition#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "hitTestMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_hit_test_metrics">DWRITE_HIT_TEST_METRICS</a>*</b></para>
            /// <para>When this method returns, contains the output geometry fully enclosing the specified text position.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextposition#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextposition">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT HitTestTextPosition(uint textPosition, win32.System.SystemServices.BOOL isTrailingHit, float *pointX, float *pointY, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*hitTestMetrics)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->HitTestTextPosition_66(pThis, textPosition, isTrailingHit, pointX, pointY, hitTestMetrics);
            }

            /// <inheritdoc cref = "HitTestTextRange(uint, uint, float, float, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, Span<win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS> hitTestMetrics, out uint actualHitTestMetricsCount)
            {
                fixed (uint *actualHitTestMetricsCountLocal = &actualHitTestMetricsCount)
                {
                    fixed (win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*hitTestMetricsLocal = hitTestMetrics)
                    {
                        win32.System.Com.HRESULT __result = this.HitTestTextRange(textPosition, textLength, originX, originY, hitTestMetricsLocal, (uint)hitTestMetrics.Length, actualHitTestMetricsCountLocal);
                        return __result;
                    }
                }
            }

            /// <summary>The application calls this function to get a set of hit-test metrics corresponding to a range of text positions. One of the main usages is to implement highlight selection of the text string.</summary>
            /// <param name = "textPosition">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The first text position of the specified range.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textLength">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of positions of the specified range.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "originX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The origin pixel location X at the left of the layout box. This offset is added to the hit-test metrics returned.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "originY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The origin pixel location Y at the top of the layout box. This offset is added to the hit-test metrics returned.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "hitTestMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_hit_test_metrics">DWRITE_HIT_TEST_METRICS</a>*</b></para>
            /// <para>When this method returns, contains a pointer to a buffer of the output geometry fully enclosing the specified position range.  The buffer must be at least as large as <i>maxHitTestMetricsCount</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "maxHitTestMetricsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Maximum number of boxes <i>hitTestMetrics</i> could hold in its buffer memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "actualHitTestMetricsCount">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>Actual number of geometries <i>hitTestMetrics</i> holds in its buffer memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextlayout-hittesttextrange">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, [Optional] win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*hitTestMetrics, uint maxHitTestMetricsCount, uint *actualHitTestMetricsCount)
            {
                fixed (IDWriteTextLayout*pThis = &this)
                    return lpVtbl->HitTestTextRange_67(pThis, textPosition, textLength, originX, originY, hitTestMetrics, maxHitTestMetricsCount, actualHitTestMetricsCount);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT, win32.System.Com.HRESULT>SetTextAlignment_4;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT, win32.System.Com.HRESULT>SetParagraphAlignment_5;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING, win32.System.Com.HRESULT>SetWordWrapping_6;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION, win32.System.Com.HRESULT>SetReadingDirection_7;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION, win32.System.Com.HRESULT>SetFlowDirection_8;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float, win32.System.Com.HRESULT>SetIncrementalTabStop_9;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject*, win32.System.Com.HRESULT>SetTrimming_10;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD, float, float, win32.System.Com.HRESULT>SetLineSpacing_11;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT>GetTextAlignment_12;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT>GetParagraphAlignment_13;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING>GetWordWrapping_14;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION>GetReadingDirection_15;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION>GetFlowDirection_16;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float>GetIncrementalTabStop_17;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject**, win32.System.Com.HRESULT>GetTrimming_18;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*, float *, float *, win32.System.Com.HRESULT>GetLineSpacing_19;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.IDWriteFontCollection**, win32.System.Com.HRESULT>GetFontCollection_20;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint>GetFontFamilyNameLength_21;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetFontFamilyName_22;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT>GetFontWeight_23;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FONT_STYLE>GetFontStyle_24;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH>GetFontStretch_25;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float>GetFontSize_26;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint>GetLocaleNameLength_27;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetLocaleName_28;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float, win32.System.Com.HRESULT>SetMaxWidth_29;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float, win32.System.Com.HRESULT>SetMaxHeight_30;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.IDWriteFontCollection*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetFontCollection_31;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.System.SystemServices.PCWSTR, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetFontFamilyName_32;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetFontWeight_33;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FONT_STYLE, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetFontStyle_34;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetFontStretch_35;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetFontSize_36;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.System.SystemServices.BOOL, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetUnderline_37;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.System.SystemServices.BOOL, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetStrikethrough_38;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.System.Com.IUnknown*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetDrawingEffect_39;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.IDWriteInlineObject*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetInlineObject_40;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.IDWriteTypography*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetTypography_41;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.System.SystemServices.PCWSTR, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE, win32.System.Com.HRESULT>SetLocaleName_42;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float>GetMaxWidth_43;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float>GetMaxHeight_44;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.Graphics.DirectWrite.IDWriteFontCollection**, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetFontCollection_45;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, uint *, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetFontFamilyNameLength_46;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.System.SystemServices.PWSTR, uint, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetFontFamilyName_47;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetFontWeight_48;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.Graphics.DirectWrite.DWRITE_FONT_STYLE*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetFontStyle_49;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetFontStretch_50;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, float *, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetFontSize_51;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.System.SystemServices.BOOL*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetUnderline_52;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.System.SystemServices.BOOL*, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetStrikethrough_53;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.System.Com.IUnknown**, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetDrawingEffect_54;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.Graphics.DirectWrite.IDWriteInlineObject**, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetInlineObject_55;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.Graphics.DirectWrite.IDWriteTypography**, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetTypography_56;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, uint *, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetLocaleNameLength_57;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.System.SystemServices.PWSTR, uint, win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE*, win32.System.Com.HRESULT>GetLocaleName_58;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, void *, win32.Graphics.DirectWrite.IDWriteTextRenderer*, float, float, win32.System.Com.HRESULT>Draw_59;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_LINE_METRICS*, uint, uint *, win32.System.Com.HRESULT>GetLineMetrics_60;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS*, win32.System.Com.HRESULT>GetMetrics_61;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_OVERHANG_METRICS*, win32.System.Com.HRESULT>GetOverhangMetrics_62;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, win32.Graphics.DirectWrite.DWRITE_CLUSTER_METRICS*, uint, uint *, win32.System.Com.HRESULT>GetClusterMetrics_63;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float *, win32.System.Com.HRESULT>DetermineMinWidth_64;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, float, float, win32.System.SystemServices.BOOL*, win32.System.SystemServices.BOOL*, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*, win32.System.Com.HRESULT>HitTestPoint_65;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, win32.System.SystemServices.BOOL, float *, float *, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*, win32.System.Com.HRESULT>HitTestTextPosition_66;
                internal delegate *unmanaged[Stdcall]<IDWriteTextLayout*, uint, uint, float, float, win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS*, uint, uint *, win32.System.Com.HRESULT>HitTestTextRange_67;
            }

            private Vtbl*lpVtbl;
        }
    }
}