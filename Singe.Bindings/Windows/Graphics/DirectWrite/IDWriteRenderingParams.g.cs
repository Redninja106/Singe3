// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("2F0DA53A-2ADD-47CD-82EE-D9EC34688E75")]
        internal unsafe struct IDWriteRenderingParams
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Gets the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>Returns the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwriterenderingparams-getgamma">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetGamma()
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->GetGamma_4(pThis);
            }

            /// <summary>Gets the enhanced contrast property of the rendering parameters object. Valid values are greater than or equal to zero.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>Returns the amount of contrast enhancement. Valid values are greater than or equal to zero.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwriterenderingparams-getenhancedcontrast">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetEnhancedContrast()
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->GetEnhancedContrast_5(pThis);
            }

            /// <summary>Gets the ClearType level of the rendering parameters object.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The ClearType level of the rendering parameters object.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwriterenderingparams-getcleartypelevel">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetClearTypeLevel()
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->GetClearTypeLevel_6(pThis);
            }

            /// <summary>Gets the pixel geometry of the rendering parameters object.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_pixel_geometry">DWRITE_PIXEL_GEOMETRY</a></b></para>
            /// <para>A value that indicates the type of  pixel geometry used in the rendering parameters object.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwriterenderingparams-getpixelgeometry">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_PIXEL_GEOMETRY GetPixelGeometry()
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->GetPixelGeometry_7(pThis);
            }

            /// <summary>Gets the rendering mode of the rendering parameters object.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_rendering_mode">DWRITE_RENDERING_MODE</a></b></para>
            /// <para>A value that indicates the rendering mode of the rendering parameters object.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwriterenderingparams-getrenderingmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_RENDERING_MODE GetRenderingMode()
            {
                fixed (IDWriteRenderingParams*pThis = &this)
                    return lpVtbl->GetRenderingMode_8(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, float>GetGamma_4;
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, float>GetEnhancedContrast_5;
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, float>GetClearTypeLevel_6;
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, win32.Graphics.DirectWrite.DWRITE_PIXEL_GEOMETRY>GetPixelGeometry_7;
                internal delegate *unmanaged[Stdcall]<IDWriteRenderingParams*, win32.Graphics.DirectWrite.DWRITE_RENDERING_MODE>GetRenderingMode_8;
            }

            private Vtbl*lpVtbl;
        }
    }
}