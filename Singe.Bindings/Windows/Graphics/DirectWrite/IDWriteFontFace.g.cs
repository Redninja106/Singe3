// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("5F49804D-7024-4D43-BFA9-D25984F53849")]
        internal unsafe struct IDWriteFontFace
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Obtains the file format type of a font face.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_face_type">DWRITE_FONT_FACE_TYPE</a></b></para>
            /// <para>A value that indicates the type of format for the font face (such as Type 1, TrueType, vector, or bitmap).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-gettype">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal new win32.Graphics.DirectWrite.DWRITE_FONT_FACE_TYPE GetType()
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetType_4(pThis);
            }

            /// <inheritdoc cref = "GetFiles(uint *, win32.Graphics.DirectWrite.IDWriteFontFile**)"/>
            internal unsafe win32.System.Com.HRESULT GetFiles(ref uint numberOfFiles, win32.Graphics.DirectWrite.IDWriteFontFile**fontFiles)
            {
                fixed (uint *numberOfFilesLocal = &numberOfFiles)
                {
                    win32.System.Com.HRESULT __result = this.GetFiles(numberOfFilesLocal, fontFiles);
                    return __result;
                }
            }

            /// <summary>Obtains the font files representing a font face.</summary>
            /// <param name = "numberOfFiles">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>If <i>fontFiles</i> is <b>NULL</b>, receives the number of files representing the font face.  Otherwise, the number of font files being requested should be passed.  See the Remarks section below for more information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getfiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontFiles">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontfile">IDWriteFontFile</a>**</b></para>
            /// <para>When this method returns, contains a pointer to a user-provided array that stores pointers to font files representing the font face. This parameter can be <b>NULL</b> if the user wants only the number of files representing the font face. This API increments reference count of the font file pointers returned according to COM conventions, and the client should release them when finished.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getfiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getfiles">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFiles(uint *numberOfFiles, [Optional] win32.Graphics.DirectWrite.IDWriteFontFile**fontFiles)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetFiles_5(pThis, numberOfFiles, fontFiles);
            }

            /// <summary>Obtains the index of a font face in the context of its font files.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The zero-based index of a font face in cases when the font files contain a collection of font faces. If the font files contain a single face, this value is zero.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getindex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetIndex()
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetIndex_6(pThis);
            }

            /// <summary>Obtains the algorithmic style simulation flags of a font face.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_simulations">DWRITE_FONT_SIMULATIONS</a></b></para>
            /// <para>Font face simulation flags for algorithmic means of making text bold or italic.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getsimulations">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_SIMULATIONS GetSimulations()
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetSimulations_7(pThis);
            }

            /// <summary>Determines whether the font is a symbol font.</summary>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns <b>TRUE</b> if the font is a symbol font, otherwise <b>FALSE</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-issymbolfont">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsSymbolFont()
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->IsSymbolFont_8(pThis);
            }

            /// <inheritdoc cref = "GetMetrics(win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*)"/>
            internal unsafe void GetMetrics(out win32.Graphics.DirectWrite.DWRITE_FONT_METRICS fontFaceMetrics)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*fontFaceMetricsLocal = &fontFaceMetrics)
                {
                    this.GetMetrics(fontFaceMetricsLocal);
                }
            }

            /// <summary>Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations.</summary>
            /// <param name = "fontFaceMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_font_metrics">DWRITE_FONT_METRICS</a>*</b></para>
            /// <para>When this method returns, a <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_font_metrics">DWRITE_FONT_METRICS</a> structure that holds metrics (such as ascent, descent, or cap height) for the current font face element. The metrics returned by this function are in font design units.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetMetrics(win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*fontFaceMetrics)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    lpVtbl->GetMetrics_9(pThis, fontFaceMetrics);
            }

            /// <summary>Obtains the number of glyphs in the font face.</summary>
            /// <returns>
            /// <para>Type: <b>UINT16</b></para>
            /// <para>The number of glyphs in the font face.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphcount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ushort GetGlyphCount()
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetGlyphCount_10(pThis);
            }

            /// <inheritdoc cref = "GetDesignGlyphMetrics(ushort *, uint, win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*, win32.System.SystemServices.BOOL)"/>
            internal unsafe win32.System.Com.HRESULT GetDesignGlyphMetrics(ReadOnlySpan<ushort> glyphIndices, Span<win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS> glyphMetrics, win32.System.SystemServices.BOOL isSideways)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*glyphMetricsLocal = glyphMetrics)
                {
                    fixed (ushort *glyphIndicesLocal = glyphIndices)
                    {
                        if (glyphIndices.Length != glyphMetrics.Length)
                            throw new ArgumentException();
                        win32.System.Com.HRESULT __result = this.GetDesignGlyphMetrics(glyphIndicesLocal, (uint)glyphMetrics.Length, glyphMetricsLocal, isSideways);
                        return __result;
                    }
                }
            }

            /// <summary>Obtains ideal (resolution-independent) glyph metrics in font design units.</summary>
            /// <param name = "glyphIndices">
            /// <para>Type: <b>const UINT16*</b></para>
            /// <para>An array of glyph indices for which to compute  metrics. The array must contain at least as many elements as specified by <i>glyphCount</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getdesignglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of elements in the <i>glyphIndices</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getdesignglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_metrics">DWRITE_GLYPH_METRICS</a>*</b></para>
            /// <para>When this method returns, contains an array of DWRITE_GLYPH_METRICS structures.  <i>glyphMetrics</i> must be initialized with an empty buffer that contains at least as many elements as <i>glyphCount</i>. The metrics returned by this function are in font design units.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getdesignglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isSideways">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Indicates whether the font is being used in a sideways run. This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getdesignglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getdesignglyphmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDesignGlyphMetrics(ushort *glyphIndices, uint glyphCount, win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*glyphMetrics, win32.System.SystemServices.BOOL isSideways)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetDesignGlyphMetrics_11(pThis, glyphIndices, glyphCount, glyphMetrics, isSideways);
            }

            /// <inheritdoc cref = "GetGlyphIndices(uint *, uint, ushort *)"/>
            internal unsafe win32.System.Com.HRESULT GetGlyphIndices(ReadOnlySpan<uint> codePoints, Span<ushort> glyphIndices)
            {
                fixed (ushort *glyphIndicesLocal = glyphIndices)
                {
                    fixed (uint *codePointsLocal = codePoints)
                    {
                        if (codePoints.Length != glyphIndices.Length)
                            throw new ArgumentException();
                        win32.System.Com.HRESULT __result = this.GetGlyphIndices(codePointsLocal, (uint)glyphIndices.Length, glyphIndicesLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table.</summary>
            /// <param name = "codePoints">
            /// <para>Type: <b>const UINT32*</b></para>
            /// <para>An array of USC4 code points from which to obtain nominal glyph indices. The array must be allocated and be able to contain the number of elements specified by <i>codePointCount</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphindices#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "codePointCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of elements in the <i>codePoints</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphindices#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphIndices">
            /// <para>Type: <b>UINT16*</b></para>
            /// <para>When this method returns, contains a pointer to an array of nominal glyph indices filled by this function.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphindices#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphindices">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGlyphIndices(uint *codePoints, uint codePointCount, ushort *glyphIndices)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetGlyphIndices_12(pThis, codePoints, codePointCount, glyphIndices);
            }

            /// <inheritdoc cref = "TryGetFontTable(uint, void **, uint *, void **, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT TryGetFontTable(uint openTypeTableTag, out void *tableData, out uint tableSize, out void *tableContext, out win32.System.SystemServices.BOOL exists)
            {
                fixed (win32.System.SystemServices.BOOL*existsLocal = &exists)
                {
                    fixed (void **tableContextLocal = &tableContext)
                    {
                        fixed (uint *tableSizeLocal = &tableSize)
                        {
                            fixed (void **tableDataLocal = &tableData)
                            {
                                win32.System.Com.HRESULT __result = this.TryGetFontTable(openTypeTableTag, tableDataLocal, tableSizeLocal, tableContextLocal, existsLocal);
                                return __result;
                            }
                        }
                    }
                }
            }

            /// <summary>Finds the specified OpenType font table if it exists and returns a pointer to it. The function accesses the underlying font data through the IDWriteFontFileStream interface implemented by the font file loader.</summary>
            /// <param name = "openTypeTableTag">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The four-character tag of a OpenType font table to find. Use the <b>DWRITE_MAKE_OPENTYPE_TAG</b> macro to create it as an <b>UINT32</b>. Unlike GDI, it does not support the special TTCF and null tags to access the whole font.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-trygetfonttable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tableData">
            /// <para>Type: <b>const void**</b></para>
            /// <para>When this method returns, contains the address of  a pointer to the base of the table in memory. The pointer is valid only as long as the font face used to get the font table still exists; (not any other font face, even if it actually refers to the same physical font). This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-trygetfonttable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tableSize">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>When this method returns, contains a pointer to the size, in bytes, of the font table.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-trygetfonttable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tableContext">
            /// <para>Type: <b>void**</b></para>
            /// <para>When this method returns, the address of a pointer to  the opaque context, which must be freed by calling <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritefontface-releasefonttable">ReleaseFontTable</a>. The context actually comes from the lower-level <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontfilestream">IDWriteFontFileStream</a>, which may be implemented by the application or DWrite itself. It is possible for a <b>NULL</b> <i>tableContext</i> to be returned, especially if the implementation performs direct memory mapping on the whole file. Nevertheless, always release it later, and do not use it as a test for function success. The same table can be queried multiple times, but because each returned context can be different, you must release each context separately.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-trygetfonttable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "exists">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>When this method returns, <b>TRUE</b> if the font table exists; otherwise, <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-trygetfonttable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-trygetfonttable">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT TryGetFontTable(uint openTypeTableTag, void **tableData, uint *tableSize, void **tableContext, win32.System.SystemServices.BOOL*exists)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->TryGetFontTable_13(pThis, openTypeTableTag, tableData, tableSize, tableContext, exists);
            }

            /// <summary>Releases the table obtained earlier from TryGetFontTable.</summary>
            /// <param name = "tableContext">
            /// <para>Type: <b>void*</b></para>
            /// <para>A pointer to the opaque context from <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritefontface-trygetfonttable">TryGetFontTable</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-releasefonttable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-releasefonttable">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ReleaseFontTable(void *tableContext)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    lpVtbl->ReleaseFontTable_14(pThis, tableContext);
            }

            /// <inheritdoc cref = "GetGlyphRunOutline(float, ushort *, float *, win32.Graphics.DirectWrite.DWRITE_GLYPH_OFFSET*, uint, win32.System.SystemServices.BOOL, win32.System.SystemServices.BOOL, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*)"/>
            internal unsafe win32.System.Com.HRESULT GetGlyphRunOutline(float emSize, ReadOnlySpan<ushort> glyphIndices, ReadOnlySpan<float> glyphAdvances, ReadOnlySpan<win32.Graphics.DirectWrite.DWRITE_GLYPH_OFFSET> glyphOffsets, win32.System.SystemServices.BOOL isSideways, win32.System.SystemServices.BOOL isRightToLeft, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_OFFSET*glyphOffsetsLocal = glyphOffsets)
                {
                    fixed (float *glyphAdvancesLocal = glyphAdvances)
                    {
                        fixed (ushort *glyphIndicesLocal = glyphIndices)
                        {
                            if (glyphIndices.Length != glyphAdvances.Length)
                                throw new ArgumentException();
                            if (glyphIndices.Length != glyphOffsets.Length)
                                throw new ArgumentException();
                            win32.System.Com.HRESULT __result = this.GetGlyphRunOutline(emSize, glyphIndicesLocal, glyphAdvancesLocal, glyphOffsetsLocal, (uint)glyphOffsets.Length, isSideways, isRightToLeft, geometrySink);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Computes the outline of a run of glyphs by calling back to the outline sink interface.</summary>
            /// <param name = "emSize">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphIndices">
            /// <para>Type: <b>const UINT16*</b></para>
            /// <para>An array of glyph indices. The glyphs are in logical order and the advance direction depends on the <i>isRightToLeft</i> parameter. The array must be allocated and be able to contain the number of elements specified by <i>glyphCount</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphAdvances">
            /// <para>Type: <b>const FLOAT*</b></para>
            /// <para>An optional array of glyph advances in DIPs. The advance of a glyph is the amount to advance the position (in the direction of the baseline) after drawing the glyph. <i>glyphAdvances</i> contains the number of elements specified by <i>glyphCount</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphOffsets">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_offset">DWRITE_GLYPH_OFFSET</a>*</b></para>
            /// <para>An optional array of glyph offsets, each of which specifies the offset along the baseline and offset perpendicular to the baseline of a glyph relative to the current pen position.   <i>glyphOffsets</i> contains the number of elements specified by <i>glyphCount</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of glyphs in the run.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isSideways">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>If <b>TRUE</b>, the ascender of the glyph runs alongside the baseline. If <b>FALSE</b>, the glyph ascender runs perpendicular to the baseline. For example, an English alphabet on a vertical baseline would have <i>isSideways</i> set to <b>FALSE</b>.</para>
            /// <para>A client can render a vertical run by setting <i>isSideways</i> to <b>TRUE</b> and rotating the resulting geometry 90 degrees to the right using a transform. The <i>isSideways</i> and <i>isRightToLeft</i> parameters cannot both be true.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isRightToLeft">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>The visual order of the glyphs. If this parameter is <b>FALSE</b>, then glyph advances are from left to right. If <b>TRUE</b>, the advance direction is right to left. By default, the advance direction is left to right.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "geometrySink">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/DirectWrite/idwritegeometrysink">IDWriteGeometrySink</a>*</b></para>
            /// <para>A pointer to the interface that is called back to perform outline drawing operations.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getglyphrunoutline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGlyphRunOutline(float emSize, ushort *glyphIndices, [Optional] float *glyphAdvances, [Optional] win32.Graphics.DirectWrite.DWRITE_GLYPH_OFFSET*glyphOffsets, uint glyphCount, win32.System.SystemServices.BOOL isSideways, win32.System.SystemServices.BOOL isRightToLeft, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetGlyphRunOutline_15(pThis, emSize, glyphIndices, glyphAdvances, glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink);
            }

            /// <inheritdoc cref = "GetRecommendedRenderingMode(float, float, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.DirectWrite.IDWriteRenderingParams*, win32.Graphics.DirectWrite.DWRITE_RENDERING_MODE*)"/>
            internal unsafe win32.System.Com.HRESULT GetRecommendedRenderingMode(float emSize, float pixelsPerDip, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, win32.Graphics.DirectWrite.IDWriteRenderingParams*renderingParams, out win32.Graphics.DirectWrite.DWRITE_RENDERING_MODE renderingMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_RENDERING_MODE*renderingModeLocal = &renderingMode)
                {
                    win32.System.Com.HRESULT __result = this.GetRecommendedRenderingMode(emSize, pixelsPerDip, measuringMode, renderingParams, renderingModeLocal);
                    return __result;
                }
            }

            /// <summary>Determines the recommended rendering mode for the font, using the specified size and rendering parameters.</summary>
            /// <param name = "emSize">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getrecommendedrenderingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pixelsPerDip">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The number of physical pixels per DIP. For example, if the DPI of the rendering surface is 96, this value is 1.0f. If the DPI is 120, this value is 120.0f/96.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getrecommendedrenderingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "measuringMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b> The measuring method that will be used for glyphs in the font. Renderer implementations may choose different rendering modes for different measuring methods, for example:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getrecommendedrenderingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "renderingParams">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>*</b></para>
            /// <para>A pointer to an object that contains rendering settings such as gamma level, enhanced contrast, and ClearType level. This parameter is necessary in case the rendering parameters object overrides the rendering mode.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getrecommendedrenderingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "renderingMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_rendering_mode">DWRITE_RENDERING_MODE</a>*</b></para>
            /// <para>When this method returns, contains a value that indicates the recommended rendering mode to use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getrecommendedrenderingmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getrecommendedrenderingmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetRecommendedRenderingMode(float emSize, float pixelsPerDip, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, win32.Graphics.DirectWrite.IDWriteRenderingParams*renderingParams, win32.Graphics.DirectWrite.DWRITE_RENDERING_MODE*renderingMode)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetRecommendedRenderingMode_16(pThis, emSize, pixelsPerDip, measuringMode, renderingParams, renderingMode);
            }

            /// <inheritdoc cref = "GetGdiCompatibleMetrics(float, float, win32.Graphics.DirectWrite.DWRITE_MATRIX*, win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*)"/>
            internal unsafe win32.System.Com.HRESULT GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, win32.Graphics.DirectWrite.DWRITE_MATRIX? transform, out win32.Graphics.DirectWrite.DWRITE_FONT_METRICS fontFaceMetrics)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*fontFaceMetricsLocal = &fontFaceMetrics)
                {
                    win32.Graphics.DirectWrite.DWRITE_MATRIX transformLocal = transform.HasValue ? transform.Value : default(win32.Graphics.DirectWrite.DWRITE_MATRIX);
                    win32.System.Com.HRESULT __result = this.GetGdiCompatibleMetrics(emSize, pixelsPerDip, transform.HasValue ? &transformLocal : null, fontFaceMetricsLocal);
                    return __result;
                }
            }

            /// <summary>Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a fontface and are used by applications for layout calculations.</summary>
            /// <param name = "emSize">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The logical size of the font in DIP units.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatiblemetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pixelsPerDip">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The number of physical pixels per DIP.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatiblemetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transform">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_matrix">DWRITE_MATRIX</a>*</b></para>
            /// <para>An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and <i>pixelsPerDip</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatiblemetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontFaceMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_font_metrics">DWRITE_FONT_METRICS</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_font_metrics">DWRITE_FONT_METRIC</a>S structure to fill in. The metrics returned by this function are in font design units.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatiblemetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>Standard HRESULT error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatiblemetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, [Optional] win32.Graphics.DirectWrite.DWRITE_MATRIX*transform, win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*fontFaceMetrics)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetGdiCompatibleMetrics_17(pThis, emSize, pixelsPerDip, transform, fontFaceMetrics);
            }

            /// <inheritdoc cref = "GetGdiCompatibleGlyphMetrics(float, float, win32.Graphics.DirectWrite.DWRITE_MATRIX*, win32.System.SystemServices.BOOL, ushort *, uint, win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*, win32.System.SystemServices.BOOL)"/>
            internal unsafe win32.System.Com.HRESULT GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, win32.Graphics.DirectWrite.DWRITE_MATRIX? transform, win32.System.SystemServices.BOOL useGdiNatural, ReadOnlySpan<ushort> glyphIndices, Span<win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS> glyphMetrics, win32.System.SystemServices.BOOL isSideways)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*glyphMetricsLocal = glyphMetrics)
                {
                    fixed (ushort *glyphIndicesLocal = glyphIndices)
                    {
                        win32.Graphics.DirectWrite.DWRITE_MATRIX transformLocal = transform.HasValue ? transform.Value : default(win32.Graphics.DirectWrite.DWRITE_MATRIX);
                        if (glyphIndices.Length != glyphMetrics.Length)
                            throw new ArgumentException();
                        win32.System.Com.HRESULT __result = this.GetGdiCompatibleGlyphMetrics(emSize, pixelsPerDip, transform.HasValue ? &transformLocal : null, useGdiNatural, glyphIndicesLocal, (uint)glyphMetrics.Length, glyphMetricsLocal, isSideways);
                        return __result;
                    }
                }
            }

            /// <summary>Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.</summary>
            /// <param name = "emSize">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The ogical size of the font in DIP units.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pixelsPerDip">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The number of physical pixels per DIP.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transform">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_matrix">DWRITE_MATRIX</a>*</b></para>
            /// <para>An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and <i>pixelsPerDip</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "useGdiNatural">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>When set to <b>FALSE</b>, the metrics are the same as the metrics of GDI aliased text.  When set to <b>TRUE</b>, the metrics are the same as the metrics of text measured by GDI using a font created with <b>CLEARTYPE_NATURAL_QUALITY</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphIndices">
            /// <para>Type: <b>const UINT16*</b></para>
            /// <para>An array of glyph indices for which to compute the metrics.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of elements in the <i>glyphIndices</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_metrics">DWRITE_GLYPH_METRICS</a>*</b></para>
            /// <para>An array of <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_metrics">DWRITE_GLYPH_METRICS</a> structures filled by this function. The metrics are in font design units.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "isSideways">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>A BOOL value that indicates whether the font is being used in a sideways run.  This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>Standard <b>HRESULT</b> error code. If any of the input glyph indices are outside of the valid glyph index range for the current font face, <b>E_INVALIDARG</b> will be returned.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontface-getgdicompatibleglyphmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, [Optional] win32.Graphics.DirectWrite.DWRITE_MATRIX*transform, win32.System.SystemServices.BOOL useGdiNatural, ushort *glyphIndices, uint glyphCount, win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*glyphMetrics, win32.System.SystemServices.BOOL isSideways)
            {
                fixed (IDWriteFontFace*pThis = &this)
                    return lpVtbl->GetGdiCompatibleGlyphMetrics_18(pThis, emSize, pixelsPerDip, transform, useGdiNatural, glyphIndices, glyphCount, glyphMetrics, isSideways);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, win32.Graphics.DirectWrite.DWRITE_FONT_FACE_TYPE>GetType_4;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, uint *, win32.Graphics.DirectWrite.IDWriteFontFile**, win32.System.Com.HRESULT>GetFiles_5;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, uint>GetIndex_6;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, win32.Graphics.DirectWrite.DWRITE_FONT_SIMULATIONS>GetSimulations_7;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, win32.System.SystemServices.BOOL>IsSymbolFont_8;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*, void>GetMetrics_9;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, ushort>GetGlyphCount_10;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, ushort *, uint, win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>GetDesignGlyphMetrics_11;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, uint *, uint, ushort *, win32.System.Com.HRESULT>GetGlyphIndices_12;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, uint, void **, uint *, void **, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>TryGetFontTable_13;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, void *, void>ReleaseFontTable_14;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, float, ushort *, float *, win32.Graphics.DirectWrite.DWRITE_GLYPH_OFFSET*, uint, win32.System.SystemServices.BOOL, win32.System.SystemServices.BOOL, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*, win32.System.Com.HRESULT>GetGlyphRunOutline_15;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, float, float, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.DirectWrite.IDWriteRenderingParams*, win32.Graphics.DirectWrite.DWRITE_RENDERING_MODE*, win32.System.Com.HRESULT>GetRecommendedRenderingMode_16;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, float, float, win32.Graphics.DirectWrite.DWRITE_MATRIX*, win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*, win32.System.Com.HRESULT>GetGdiCompatibleMetrics_17;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFace*, float, float, win32.Graphics.DirectWrite.DWRITE_MATRIX*, win32.System.SystemServices.BOOL, ushort *, uint, win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS*, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>GetGdiCompatibleGlyphMetrics_18;
            }

            private Vtbl*lpVtbl;
        }
    }
}