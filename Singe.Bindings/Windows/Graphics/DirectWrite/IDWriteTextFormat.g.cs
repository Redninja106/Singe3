// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("9C906818-31D7-4FD3-A151-7C5E225DB55A")]
        internal unsafe struct IDWriteTextFormat
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Sets the alignment of text in a paragraph, relative to the leading and trailing edge of a layout box for a IDWriteTextFormat interface.</summary>
            /// <param name = "textAlignment">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_text_alignment">DWRITE_TEXT_ALIGNMENT</a></b></para>
            /// <para>The text alignment option being set for the paragraph of type DWRITE_TEXT_ALIGNMENT.  For more information, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-settextalignment#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>This method can return one of these values.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-settextalignment">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetTextAlignment(win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT textAlignment)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetTextAlignment_4(pThis, textAlignment);
            }

            /// <summary>Sets the alignment option of a paragraph relative to the layout box's top and bottom edge.</summary>
            /// <param name = "paragraphAlignment">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_paragraph_alignment">DWRITE_PARAGRAPH_ALIGNMENT</a></b></para>
            /// <para>The paragraph alignment option being set for a paragraph; see <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_paragraph_alignment">DWRITE_PARAGRAPH_ALIGNMENT</a> for more information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setparagraphalignment#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setparagraphalignment">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetParagraphAlignment(win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetParagraphAlignment_5(pThis, paragraphAlignment);
            }

            /// <summary>Sets the word wrapping option.</summary>
            /// <param name = "wordWrapping">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_word_wrapping">DWRITE_WORD_WRAPPING</a></b></para>
            /// <para>The word wrapping option being set for a paragraph; see <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_word_wrapping">DWRITE_WORD_WRAPPING</a> for more information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setwordwrapping#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setwordwrapping">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetWordWrapping(win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING wordWrapping)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetWordWrapping_6(pThis, wordWrapping);
            }

            /// <summary>Sets the paragraph reading direction.</summary>
            /// <param name = "readingDirection">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_reading_direction">DWRITE_READING_DIRECTION</a></b></para>
            /// <para>The text reading direction (for example, <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_reading_direction">DWRITE_READING_DIRECTION_RIGHT_TO_LEFT</a> for languages, such as Arabic, that read from right to left) for a paragraph.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setreadingdirection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setreadingdirection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetReadingDirection(win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION readingDirection)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetReadingDirection_7(pThis, readingDirection);
            }

            /// <summary>Sets the paragraph flow direction.</summary>
            /// <param name = "flowDirection">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_flow_direction">DWRITE_FLOW_DIRECTION</a></b></para>
            /// <para>The paragraph flow direction; see <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_flow_direction">DWRITE_FLOW_DIRECTION</a> for more information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setflowdirection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setflowdirection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetFlowDirection(win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION flowDirection)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetFlowDirection_8(pThis, flowDirection);
            }

            /// <summary>Sets a fixed distance between two adjacent tab stops.</summary>
            /// <param name = "incrementalTabStop">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The fixed distance between two adjacent tab stops.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setincrementaltabstop#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setincrementaltabstop">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetIncrementalTabStop(float incrementalTabStop)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetIncrementalTabStop_9(pThis, incrementalTabStop);
            }

            /// <inheritdoc cref = "SetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject*)"/>
            internal unsafe win32.System.Com.HRESULT SetTrimming(in win32.Graphics.DirectWrite.DWRITE_TRIMMING trimmingOptions, win32.Graphics.DirectWrite.IDWriteInlineObject*trimmingSign)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptionsLocal = &trimmingOptions)
                {
                    win32.System.Com.HRESULT __result = this.SetTrimming(trimmingOptionsLocal, trimmingSign);
                    return __result;
                }
            }

            /// <summary>Sets trimming options for text overflowing the layout width.</summary>
            /// <param name = "trimmingOptions">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_trimming">DWRITE_TRIMMING</a>*</b></para>
            /// <para>Text trimming options.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-settrimming#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "trimmingSign">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriteinlineobject">IDWriteInlineObject</a>*</b></para>
            /// <para>Application-defined omission sign. This parameter may be <b>NULL</b>. See <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriteinlineobject">IDWriteInlineObject</a> for more information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-settrimming#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-settrimming">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptions, [Optional] win32.Graphics.DirectWrite.IDWriteInlineObject*trimmingSign)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetTrimming_10(pThis, trimmingOptions, trimmingSign);
            }

            /// <summary>Sets the line spacing.</summary>
            /// <param name = "lineSpacingMethod">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_line_spacing_method">DWRITE_LINE_SPACING_METHOD</a></b></para>
            /// <para>Specifies how line height is being determined; see <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_line_spacing_method">DWRITE_LINE_SPACING_METHOD</a> for more information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setlinespacing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "lineSpacing">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The line height, or distance between one baseline to another.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setlinespacing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baseline">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The distance from top of line to baseline. A reasonable ratio to <i>lineSpacing</i> is 80 percent.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setlinespacing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-setlinespacing">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetLineSpacing(win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->SetLineSpacing_11(pThis, lineSpacingMethod, lineSpacing, baseline);
            }

            /// <summary>Gets the alignment option of text relative to the layout box's leading and trailing edge.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_text_alignment">DWRITE_TEXT_ALIGNMENT</a></b></para>
            /// <para>Returns the text alignment option of the current paragraph.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-gettextalignment">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT GetTextAlignment()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetTextAlignment_12(pThis);
            }

            /// <summary>Gets the alignment option of a paragraph which is relative to the top and bottom edges of a layout box.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_paragraph_alignment">DWRITE_PARAGRAPH_ALIGNMENT</a></b></para>
            /// <para>A value that indicates the current paragraph alignment option.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getparagraphalignment">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetParagraphAlignment_13(pThis);
            }

            /// <summary>Gets the word wrapping option.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_word_wrapping">DWRITE_WORD_WRAPPING</a></b></para>
            /// <para>Returns the word wrapping option; see <a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_word_wrapping">DWRITE_WORD_WRAPPING</a> for more information.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getwordwrapping">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING GetWordWrapping()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetWordWrapping_14(pThis);
            }

            /// <summary>Gets the current reading direction for text in a paragraph.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_reading_direction">DWRITE_READING_DIRECTION</a></b></para>
            /// <para>A value that indicates the current reading direction for text in a  paragraph.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getreadingdirection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION GetReadingDirection()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetReadingDirection_15(pThis);
            }

            /// <summary>Gets the direction that text lines flow.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_flow_direction">DWRITE_FLOW_DIRECTION</a></b></para>
            /// <para>The direction that text lines flow within their parent container.  For example, <a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_flow_direction">DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM</a> indicates that text lines are placed from top to bottom.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getflowdirection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION GetFlowDirection()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFlowDirection_16(pThis);
            }

            /// <summary>Gets the incremental tab stop position.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The incremental tab stop value.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getincrementaltabstop">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetIncrementalTabStop()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetIncrementalTabStop_17(pThis);
            }

            /// <inheritdoc cref = "GetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject**)"/>
            internal unsafe win32.System.Com.HRESULT GetTrimming(out win32.Graphics.DirectWrite.DWRITE_TRIMMING trimmingOptions, win32.Graphics.DirectWrite.IDWriteInlineObject**trimmingSign)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptionsLocal = &trimmingOptions)
                {
                    win32.System.Com.HRESULT __result = this.GetTrimming(trimmingOptionsLocal, trimmingSign);
                    return __result;
                }
            }

            /// <summary>Gets the trimming options for text that overflows the layout box.</summary>
            /// <param name = "trimmingOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_trimming">DWRITE_TRIMMING</a>*</b></para>
            /// <para>When this method returns, it contains a pointer to a <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_trimming">DWRITE_TRIMMING</a> structure that holds the text trimming options for the overflowing text.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-gettrimming#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "trimmingSign">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriteinlineobject">IDWriteInlineObject</a>**</b></para>
            /// <para>When this method returns, contains an address of a pointer to a trimming omission sign. This parameter may be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-gettrimming#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-gettrimming">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTrimming(win32.Graphics.DirectWrite.DWRITE_TRIMMING*trimmingOptions, win32.Graphics.DirectWrite.IDWriteInlineObject**trimmingSign)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetTrimming_18(pThis, trimmingOptions, trimmingSign);
            }

            /// <inheritdoc cref = "GetLineSpacing(win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*, float *, float *)"/>
            internal unsafe win32.System.Com.HRESULT GetLineSpacing(out win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD lineSpacingMethod, out float lineSpacing, out float baseline)
            {
                fixed (float *baselineLocal = &baseline)
                {
                    fixed (float *lineSpacingLocal = &lineSpacing)
                    {
                        fixed (win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*lineSpacingMethodLocal = &lineSpacingMethod)
                        {
                            win32.System.Com.HRESULT __result = this.GetLineSpacing(lineSpacingMethodLocal, lineSpacingLocal, baselineLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Gets the line spacing adjustment set for a multiline text paragraph.</summary>
            /// <param name = "lineSpacingMethod">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_line_spacing_method">DWRITE_LINE_SPACING_METHOD</a>*</b></para>
            /// <para>A value that indicates how line height is determined.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlinespacing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "lineSpacing">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the line height, or  distance between one baseline to another.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlinespacing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "baseline">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the distance from top of line to baseline. A reasonable ratio to <i>lineSpacing</i> is 80 percent.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlinespacing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlinespacing">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLineSpacing(win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*lineSpacingMethod, float *lineSpacing, float *baseline)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetLineSpacing_19(pThis, lineSpacingMethod, lineSpacing, baseline);
            }

            /// <summary>Gets the current font collection.</summary>
            /// <param name = "fontCollection">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontcollection">IDWriteFontCollection</a>**</b></para>
            /// <para>When this method returns, contains an address of a pointer to the font collection being used for the current text.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontCollection(win32.Graphics.DirectWrite.IDWriteFontCollection**fontCollection)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFontCollection_20(pThis, fontCollection);
            }

            /// <summary>Gets the length of the font family name.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the character array, in character count, not including the terminated <b>NULL</b> character.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontfamilynamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetFontFamilyNameLength()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFontFamilyNameLength_21(pThis);
            }

            /// <summary>Gets a copy of the font family name.</summary>
            /// <param name = "fontFamilyName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>When this method returns, contains a pointer to a character array, which is null-terminated, that receives the current font family name. The buffer allocated for this array should be at least the size, in elements, of <i>nameSize</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the <i>fontFamilyName</i> character array, in character count, including the terminated <b>NULL</b> character.  To find the size of <i>fontFamilyName</i>, use <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritetextformat-getfontfamilynamelength">GetFontFamilyNameLength</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontfamilyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetFontFamilyName(win32.System.SystemServices.PWSTR fontFamilyName, uint nameSize)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFontFamilyName_22(pThis, fontFamilyName, nameSize);
            }

            /// <summary>Gets the font weight of the text.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_weight">DWRITE_FONT_WEIGHT</a></b></para>
            /// <para>A value that indicates the type of weight (such as normal, bold, or black).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontweight">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT GetFontWeight()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFontWeight_23(pThis);
            }

            /// <summary>Gets the font style of the text.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_style">DWRITE_FONT_STYLE</a></b></para>
            /// <para>A value which indicates the type of font style (such as  slope or incline).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontstyle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_STYLE GetFontStyle()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFontStyle_24(pThis);
            }

            /// <summary>Gets the font stretch of the text.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_stretch">DWRITE_FONT_STRETCH</a></b></para>
            /// <para>A value which indicates the type of font stretch (such as  normal or condensed).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontstretch">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH GetFontStretch()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFontStretch_25(pThis);
            }

            /// <summary>Gets the font size in DIP unites.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The current font size in DIP units.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getfontsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetFontSize()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetFontSize_26(pThis);
            }

            /// <summary>Gets the length of the locale name.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the character array in character count, not including the terminated <b>NULL</b> character.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlocalenamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetLocaleNameLength()
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetLocaleNameLength_27(pThis);
            }

            /// <summary>Gets a copy of the locale name.</summary>
            /// <param name = "localeName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>Contains a character array that receives the current locale name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the character array, in character count, including the terminated <b>NULL</b> character. Use <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritetextformat-getlocalenamelength">GetLocaleNameLength</a> to get the size of the locale name character array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritetextformat-getlocalename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetLocaleName(win32.System.SystemServices.PWSTR localeName, uint nameSize)
            {
                fixed (IDWriteTextFormat*pThis = &this)
                    return lpVtbl->GetLocaleName_28(pThis, localeName, nameSize);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT, win32.System.Com.HRESULT>SetTextAlignment_4;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT, win32.System.Com.HRESULT>SetParagraphAlignment_5;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING, win32.System.Com.HRESULT>SetWordWrapping_6;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION, win32.System.Com.HRESULT>SetReadingDirection_7;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION, win32.System.Com.HRESULT>SetFlowDirection_8;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, float, win32.System.Com.HRESULT>SetIncrementalTabStop_9;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject*, win32.System.Com.HRESULT>SetTrimming_10;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD, float, float, win32.System.Com.HRESULT>SetLineSpacing_11;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_TEXT_ALIGNMENT>GetTextAlignment_12;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_PARAGRAPH_ALIGNMENT>GetParagraphAlignment_13;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_WORD_WRAPPING>GetWordWrapping_14;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION>GetReadingDirection_15;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION>GetFlowDirection_16;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, float>GetIncrementalTabStop_17;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_TRIMMING*, win32.Graphics.DirectWrite.IDWriteInlineObject**, win32.System.Com.HRESULT>GetTrimming_18;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD*, float *, float *, win32.System.Com.HRESULT>GetLineSpacing_19;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.IDWriteFontCollection**, win32.System.Com.HRESULT>GetFontCollection_20;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, uint>GetFontFamilyNameLength_21;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetFontFamilyName_22;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT>GetFontWeight_23;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_FONT_STYLE>GetFontStyle_24;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH>GetFontStretch_25;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, float>GetFontSize_26;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, uint>GetLocaleNameLength_27;
                internal delegate *unmanaged[Stdcall]<IDWriteTextFormat*, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetLocaleName_28;
            }

            private Vtbl*lpVtbl;
        }
    }
}