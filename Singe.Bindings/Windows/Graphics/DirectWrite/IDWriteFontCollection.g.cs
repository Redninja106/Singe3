// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("A84CEE02-3EEA-4EEE-A827-87C1A02A0FCC")]
        internal unsafe struct IDWriteFontCollection
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteFontCollection*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteFontCollection*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteFontCollection*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Gets the number of font families in the collection.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of font families in the collection.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-getfontfamilycount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetFontFamilyCount()
            {
                fixed (IDWriteFontCollection*pThis = &this)
                    return lpVtbl->GetFontFamilyCount_4(pThis);
            }

            /// <summary>Creates a font family object given a zero-based font family index.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Zero-based index of the font family.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-getfontfamily#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fontFamily">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontfamily">IDWriteFontFamily</a>**</b></para>
            /// <para>When this method returns, contains the address of   a pointer to the newly created font family object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-getfontfamily#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-getfontfamily">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontFamily(uint index, win32.Graphics.DirectWrite.IDWriteFontFamily**fontFamily)
            {
                fixed (IDWriteFontCollection*pThis = &this)
                    return lpVtbl->GetFontFamily_5(pThis, index, fontFamily);
            }

            /// <inheritdoc cref = "FindFamilyName(win32.System.SystemServices.PCWSTR, uint *, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT FindFamilyName(string familyName, out uint index, out win32.System.SystemServices.BOOL exists)
            {
                fixed (win32.System.SystemServices.BOOL*existsLocal = &exists)
                {
                    fixed (uint *indexLocal = &index)
                    {
                        fixed (char *familyNameLocal = familyName)
                        {
                            win32.System.Com.HRESULT __result = this.FindFamilyName(familyNameLocal, indexLocal, existsLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Finds the font family with the specified family name.</summary>
            /// <param name = "familyName">
            /// <para>Type: <b>const WCHAR*</b></para>
            /// <para>An array of characters, which is null-terminated, containing the name of the font family. The name is not case-sensitive but must otherwise exactly match a family name in the collection.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-findfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "index">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>When this method returns, contains the zero-based index of the matching font family if the family name was found; otherwise, <b>UINT_MAX</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-findfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "exists">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>When this method returns, <b>TRUE</b> if the family name exists; otherwise, <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-findfamilyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-findfamilyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindFamilyName(win32.System.SystemServices.PCWSTR familyName, uint *index, win32.System.SystemServices.BOOL*exists)
            {
                fixed (IDWriteFontCollection*pThis = &this)
                    return lpVtbl->FindFamilyName_6(pThis, familyName, index, exists);
            }

            /// <summary>Gets the font object that corresponds to the same physical font as the specified font face object. The specified physical font must belong to the font collection.</summary>
            /// <param name = "fontFace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontface">IDWriteFontFace</a>*</b></para>
            /// <para>A font face object that specifies the physical font.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-getfontfromfontface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "font">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefont">IDWriteFont</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the newly created font object if successful; otherwise, <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-getfontfromfontface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontcollection-getfontfromfontface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontFromFontFace(win32.Graphics.DirectWrite.IDWriteFontFace*fontFace, win32.Graphics.DirectWrite.IDWriteFont**font)
            {
                fixed (IDWriteFontCollection*pThis = &this)
                    return lpVtbl->GetFontFromFontFace_7(pThis, fontFace, font);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteFontCollection*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteFontCollection*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteFontCollection*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteFontCollection*, uint>GetFontFamilyCount_4;
                internal delegate *unmanaged[Stdcall]<IDWriteFontCollection*, uint, win32.Graphics.DirectWrite.IDWriteFontFamily**, win32.System.Com.HRESULT>GetFontFamily_5;
                internal delegate *unmanaged[Stdcall]<IDWriteFontCollection*, win32.System.SystemServices.PCWSTR, uint *, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>FindFamilyName_6;
                internal delegate *unmanaged[Stdcall]<IDWriteFontCollection*, win32.Graphics.DirectWrite.IDWriteFontFace*, win32.Graphics.DirectWrite.IDWriteFont**, win32.System.Com.HRESULT>GetFontFromFontFace_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}