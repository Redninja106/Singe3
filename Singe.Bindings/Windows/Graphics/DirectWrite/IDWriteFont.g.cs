// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("ACD16696-8C14-4F5D-877E-FE3FC1D32737")]
        internal unsafe struct IDWriteFont
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Gets the font family to which the specified font belongs.</summary>
            /// <param name = "fontFamily">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontfamily">IDWriteFontFamily</a>**</b></para>
            /// <para>When this method returns, contains an address of a pointer to the font family object to which the specified font belongs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getfontfamily#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getfontfamily">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFontFamily(win32.Graphics.DirectWrite.IDWriteFontFamily**fontFamily)
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->GetFontFamily_4(pThis, fontFamily);
            }

            /// <summary>Gets the weight, or stroke thickness, of the specified font.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_weight">DWRITE_FONT_WEIGHT</a></b></para>
            /// <para>A value that indicates the weight for the specified font.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getweight">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT GetWeight()
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->GetWeight_5(pThis);
            }

            /// <summary>Gets the stretch, or width, of the specified font.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_stretch">DWRITE_FONT_STRETCH</a></b></para>
            /// <para>A value that indicates the type of stretch, or width, applied to the specified font.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getstretch">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH GetStretch()
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->GetStretch_6(pThis);
            }

            /// <summary>Gets the style, or slope, of the specified font.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_style">DWRITE_FONT_STYLE</a></b></para>
            /// <para>A value that indicates the type of style, or slope, of the specified font.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getstyle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_STYLE GetStyle()
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->GetStyle_7(pThis);
            }

            /// <summary>Determines whether the font is a symbol font.</summary>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para><b>TRUE</b> if the font is a symbol font; otherwise, <b>FALSE</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-issymbolfont">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsSymbolFont()
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->IsSymbolFont_8(pThis);
            }

            /// <summary>Gets a localized strings collection containing the face names for the font (such as Regular or Bold), indexed by locale name.</summary>
            /// <param name = "names">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritelocalizedstrings">IDWriteLocalizedStrings</a>**</b></para>
            /// <para>When this method returns, contains an address to a  pointer to the newly created localized strings object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getfacenames#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getfacenames">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFaceNames(win32.Graphics.DirectWrite.IDWriteLocalizedStrings**names)
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->GetFaceNames_9(pThis, names);
            }

            /// <inheritdoc cref = "GetInformationalStrings(win32.Graphics.DirectWrite.DWRITE_INFORMATIONAL_STRING_ID, win32.Graphics.DirectWrite.IDWriteLocalizedStrings**, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT GetInformationalStrings(win32.Graphics.DirectWrite.DWRITE_INFORMATIONAL_STRING_ID informationalStringID, win32.Graphics.DirectWrite.IDWriteLocalizedStrings**informationalStrings, out win32.System.SystemServices.BOOL exists)
            {
                fixed (win32.System.SystemServices.BOOL*existsLocal = &exists)
                {
                    win32.System.Com.HRESULT __result = this.GetInformationalStrings(informationalStringID, informationalStrings, existsLocal);
                    return __result;
                }
            }

            /// <summary>Gets a localized strings collection containing the specified informational strings, indexed by locale name.</summary>
            /// <param name = "informationalStringID">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_informational_string_id">DWRITE_INFORMATIONAL_STRING_ID</a></b></para>
            /// <para>A value that identifies the  informational string to get. For example, <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ne-dwrite-dwrite_informational_string_id">DWRITE_INFORMATIONAL_STRING_DESCRIPTION</a> specifies a string that contains a description of the font.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getinformationalstrings#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "informationalStrings">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritelocalizedstrings">IDWriteLocalizedStrings</a>**</b></para>
            /// <para>When this method returns, contains an address of a pointer to the newly created localized strings object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getinformationalstrings#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "exists">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>When this method returns, <b>TRUE</b> if the font contains the specified string ID; otherwise, <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getinformationalstrings#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getinformationalstrings">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetInformationalStrings(win32.Graphics.DirectWrite.DWRITE_INFORMATIONAL_STRING_ID informationalStringID, [Optional] win32.Graphics.DirectWrite.IDWriteLocalizedStrings**informationalStrings, win32.System.SystemServices.BOOL*exists)
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->GetInformationalStrings_10(pThis, informationalStringID, informationalStrings, exists);
            }

            /// <summary>Gets a value that indicates what simulations are applied to the specified font.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dwrite/ne-dwrite-dwrite_font_simulations">DWRITE_FONT_SIMULATIONS</a></b></para>
            /// <para>A value that indicates one or more of the  types of simulations (none, bold, or oblique)  applied to the specified font.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getsimulations">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.DirectWrite.DWRITE_FONT_SIMULATIONS GetSimulations()
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->GetSimulations_11(pThis);
            }

            /// <inheritdoc cref = "GetMetrics(win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*)"/>
            internal unsafe void GetMetrics(out win32.Graphics.DirectWrite.DWRITE_FONT_METRICS fontMetrics)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*fontMetricsLocal = &fontMetrics)
                {
                    this.GetMetrics(fontMetricsLocal);
                }
            }

            /// <summary>Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations.</summary>
            /// <param name = "fontMetrics">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_font_metrics">DWRITE_FONT_METRICS</a>*</b></para>
            /// <para>When this method returns, contains a structure that has font metrics for the current font face. The metrics returned by this function are in font design units.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getmetrics#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-getmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetMetrics(win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*fontMetrics)
            {
                fixed (IDWriteFont*pThis = &this)
                    lpVtbl->GetMetrics_12(pThis, fontMetrics);
            }

            /// <inheritdoc cref = "HasCharacter(uint, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT HasCharacter(uint unicodeValue, out win32.System.SystemServices.BOOL exists)
            {
                fixed (win32.System.SystemServices.BOOL*existsLocal = &exists)
                {
                    win32.System.Com.HRESULT __result = this.HasCharacter(unicodeValue, existsLocal);
                    return __result;
                }
            }

            /// <summary>Determines whether the font supports a specified character.</summary>
            /// <param name = "unicodeValue">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>A Unicode (UCS-4) character value for the method to inspect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-hascharacter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "exists">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>When this method returns, <b>TRUE</b> if the font supports the specified character; otherwise, <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-hascharacter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-hascharacter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT HasCharacter(uint unicodeValue, win32.System.SystemServices.BOOL*exists)
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->HasCharacter_13(pThis, unicodeValue, exists);
            }

            /// <summary>Creates a font face object for the font.</summary>
            /// <param name = "fontFace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritefontface">IDWriteFontFace</a>**</b></para>
            /// <para>When this method returns, contains an address of a pointer to the newly created font face object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-createfontface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefont-createfontface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateFontFace(win32.Graphics.DirectWrite.IDWriteFontFace**fontFace)
            {
                fixed (IDWriteFont*pThis = &this)
                    return lpVtbl->CreateFontFace_14(pThis, fontFace);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.IDWriteFontFamily**, win32.System.Com.HRESULT>GetFontFamily_4;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.DWRITE_FONT_WEIGHT>GetWeight_5;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.DWRITE_FONT_STRETCH>GetStretch_6;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.DWRITE_FONT_STYLE>GetStyle_7;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.System.SystemServices.BOOL>IsSymbolFont_8;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.IDWriteLocalizedStrings**, win32.System.Com.HRESULT>GetFaceNames_9;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.DWRITE_INFORMATIONAL_STRING_ID, win32.Graphics.DirectWrite.IDWriteLocalizedStrings**, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>GetInformationalStrings_10;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.DWRITE_FONT_SIMULATIONS>GetSimulations_11;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.DWRITE_FONT_METRICS*, void>GetMetrics_12;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, uint, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>HasCharacter_13;
                internal delegate *unmanaged[Stdcall]<IDWriteFont*, win32.Graphics.DirectWrite.IDWriteFontFace**, win32.System.Com.HRESULT>CreateFontFace_14;
            }

            private Vtbl*lpVtbl;
        }
    }
}