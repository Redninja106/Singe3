// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("08256209-099A-4B34-B86D-C22B110E7771")]
        internal unsafe struct IDWriteLocalizedStrings
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Gets the number of language/string pairs.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of language/string pairs.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getcount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetCount()
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->GetCount_4(pThis);
            }

            /// <inheritdoc cref = "FindLocaleName(win32.System.SystemServices.PCWSTR, uint *, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT FindLocaleName(string localeName, out uint index, out win32.System.SystemServices.BOOL exists)
            {
                fixed (win32.System.SystemServices.BOOL*existsLocal = &exists)
                {
                    fixed (uint *indexLocal = &index)
                    {
                        fixed (char *localeNameLocal = localeName)
                        {
                            win32.System.Com.HRESULT __result = this.FindLocaleName(localeNameLocal, indexLocal, existsLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Gets the zero-based index of the locale name/string pair with the specified locale name.</summary>
            /// <param name = "localeName">
            /// <para>Type: <b>const WCHAR*</b></para>
            /// <para>A null-terminated array of characters containing the locale name to look for.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-findlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "index">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>The zero-based index of the locale name/string pair. This method initializes <i>index</i> to <b>UINT_MAX</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-findlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "exists">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>When this method returns, contains <b>TRUE</b> if the locale name exists; otherwise, <b>FALSE</b>. This method initializes <i>exists</i> to <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-findlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the specified locale name does not exist, the return value is <b>S_OK</b>, but <i>index</i> is <b>UINT_MAX</b> and <i>exists</i> is <b>FALSE</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-findlocalename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindLocaleName(win32.System.SystemServices.PCWSTR localeName, uint *index, win32.System.SystemServices.BOOL*exists)
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->FindLocaleName_5(pThis, localeName, index, exists);
            }

            /// <inheritdoc cref = "GetLocaleNameLength(uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetLocaleNameLength(uint index, out uint length)
            {
                fixed (uint *lengthLocal = &length)
                {
                    win32.System.Com.HRESULT __result = this.GetLocaleNameLength(index, lengthLocal);
                    return __result;
                }
            }

            /// <summary>Gets the length in characters (not including the null terminator) of the locale name with the specified index.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Zero-based index of the locale name to be retrieved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getlocalenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "length">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>When this method returns, contains the length in characters of the locale name, not including the null terminator.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getlocalenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getlocalenamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLocaleNameLength(uint index, uint *length)
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->GetLocaleNameLength_6(pThis, index, length);
            }

            /// <summary>Copies the locale name with the specified index to the specified array.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Zero-based index of the locale name to be retrieved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "localeName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>When this method returns, contains a character array, which is null-terminated, that receives the locale name from the language/string pair.  The buffer allocated for this array must be at least the size of <i>size</i>, in element count.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "size">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the array in characters. The size must include space for the terminating null character.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getlocalename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getlocalename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetLocaleName(uint index, win32.System.SystemServices.PWSTR localeName, uint size)
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->GetLocaleName_7(pThis, index, localeName, size);
            }

            /// <inheritdoc cref = "GetStringLength(uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetStringLength(uint index, out uint length)
            {
                fixed (uint *lengthLocal = &length)
                {
                    win32.System.Com.HRESULT __result = this.GetStringLength(index, lengthLocal);
                    return __result;
                }
            }

            /// <summary>Gets the length in characters (not including the null terminator) of the string with the specified index.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>A zero-based index of the language/string pair.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getstringlength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "length">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>The length in characters of the string, not including the null terminator, from the language/string pair.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getstringlength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getstringlength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetStringLength(uint index, uint *length)
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->GetStringLength_8(pThis, index, length);
            }

            /// <summary>Copies the string with the specified index to the specified array.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The zero-based index of the language/string pair to be examined.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getstring#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "stringBuffer">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>The null terminated array of characters that receives the string from the language/string pair.  The buffer allocated for this array should be at least the size of <i>size</i>. <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritelocalizedstrings-getstringlength">GetStringLength</a> can be used to get the size of the array before using this method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getstring#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "size">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the array in characters. The size must include space for the terminating null character. <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritelocalizedstrings-getstringlength">GetStringLength</a> can be used to get the size of the array before using this method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getstring#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritelocalizedstrings-getstring">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetString(uint index, win32.System.SystemServices.PWSTR stringBuffer, uint size)
            {
                fixed (IDWriteLocalizedStrings*pThis = &this)
                    return lpVtbl->GetString_9(pThis, index, stringBuffer, size);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint>GetCount_4;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, win32.System.SystemServices.PCWSTR, uint *, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>FindLocaleName_5;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, uint *, win32.System.Com.HRESULT>GetLocaleNameLength_6;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetLocaleName_7;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, uint *, win32.System.Com.HRESULT>GetStringLength_8;
                internal delegate *unmanaged[Stdcall]<IDWriteLocalizedStrings*, uint, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetString_9;
            }

            private Vtbl*lpVtbl;
        }
    }
}