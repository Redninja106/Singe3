// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.DirectWrite
    {
        [Guid("6D4865FE-0AB8-4D91-8F62-5DD6BE34A3E0")]
        internal unsafe struct IDWriteFontFileStream
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IDWriteFontFileStream*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IDWriteFontFileStream*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IDWriteFontFileStream*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "ReadFileFragment(void **, ulong, ulong, void **)"/>
            internal unsafe win32.System.Com.HRESULT ReadFileFragment(out void *fragmentStart, ulong fileOffset, ulong fragmentSize, out void *fragmentContext)
            {
                fixed (void **fragmentContextLocal = &fragmentContext)
                {
                    fixed (void **fragmentStartLocal = &fragmentStart)
                    {
                        win32.System.Com.HRESULT __result = this.ReadFileFragment(fragmentStartLocal, fileOffset, fragmentSize, fragmentContextLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Reads a fragment from a font file.</summary>
            /// <param name = "fragmentStart">
            /// <para>Type: <b>const void**</b></para>
            /// <para>When this method returns, contains an address of a  pointer to the start of the font file fragment.  This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-readfilefragment#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fileOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>The offset of the fragment, in bytes, from the beginning of the font file.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-readfilefragment#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fragmentSize">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>The size of the file fragment, in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-readfilefragment#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "fragmentContext">
            /// <para>Type: <b>void**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a pointer to the client-defined context to be passed to <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritefontfilestream-releasefilefragment">ReleaseFileFragment</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-readfilefragment#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-readfilefragment">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT ReadFileFragment(void **fragmentStart, ulong fileOffset, ulong fragmentSize, void **fragmentContext)
            {
                fixed (IDWriteFontFileStream*pThis = &this)
                    return lpVtbl->ReadFileFragment_4(pThis, fragmentStart, fileOffset, fragmentSize, fragmentContext);
            }

            /// <summary>Releases a fragment from a file.</summary>
            /// <param name = "fragmentContext">
            /// <para>Type: <b>void*</b></para>
            /// <para>A pointer to the client-defined context of a font fragment returned from <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritefontfilestream-readfilefragment">ReadFileFragment</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-releasefilefragment#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-releasefilefragment">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ReleaseFileFragment(void *fragmentContext)
            {
                fixed (IDWriteFontFileStream*pThis = &this)
                    lpVtbl->ReleaseFileFragment_5(pThis, fragmentContext);
            }

            /// <inheritdoc cref = "GetFileSize(ulong *)"/>
            internal unsafe win32.System.Com.HRESULT GetFileSize(out ulong fileSize)
            {
                fixed (ulong *fileSizeLocal = &fileSize)
                {
                    win32.System.Com.HRESULT __result = this.GetFileSize(fileSizeLocal);
                    return __result;
                }
            }

            /// <summary>Obtains the total size of a file.</summary>
            /// <param name = "fileSize">
            /// <para>Type: <b>UINT64*</b></para>
            /// <para>When this method returns, contains the total size of the file.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-getfilesize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-getfilesize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFileSize(ulong *fileSize)
            {
                fixed (IDWriteFontFileStream*pThis = &this)
                    return lpVtbl->GetFileSize_6(pThis, fileSize);
            }

            /// <inheritdoc cref = "GetLastWriteTime(ulong *)"/>
            internal unsafe win32.System.Com.HRESULT GetLastWriteTime(out ulong lastWriteTime)
            {
                fixed (ulong *lastWriteTimeLocal = &lastWriteTime)
                {
                    win32.System.Com.HRESULT __result = this.GetLastWriteTime(lastWriteTimeLocal);
                    return __result;
                }
            }

            /// <summary>Obtains the last modified time of the file.</summary>
            /// <param name = "lastWriteTime">
            /// <para>Type: <b>UINT64*</b></para>
            /// <para>When this method returns, contains  the last modified time of the file in the format that represents the number of 100-nanosecond intervals since January 1, 1601 (UTC).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-getlastwritetime#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//dwrite/nf-dwrite-idwritefontfilestream-getlastwritetime">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLastWriteTime(ulong *lastWriteTime)
            {
                fixed (IDWriteFontFileStream*pThis = &this)
                    return lpVtbl->GetLastWriteTime_7(pThis, lastWriteTime);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IDWriteFontFileStream*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFileStream*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFileStream*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFileStream*, void **, ulong, ulong, void **, win32.System.Com.HRESULT>ReadFileFragment_4;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFileStream*, void *, void>ReleaseFileFragment_5;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFileStream*, ulong *, win32.System.Com.HRESULT>GetFileSize_6;
                internal delegate *unmanaged[Stdcall]<IDWriteFontFileStream*, ulong *, win32.System.Com.HRESULT>GetLastWriteTime_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}