// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        /// <summary>A state subobject that identifies the GPU nodes to which the state object applies.</summary>
        /// <remarks>
        /// <para>This subobject is optional. In its absence, the state object applies to all available nodes.  If a node mask subobject has been associated with any part of a state object, a node mask association must be made to all exports in a state object (including imported collections) and all node mask subobjects that are referenced must have matching content.</para>
        /// <para>> [!IMPORTANT] > On some versions of the DirectX Runtime, specifying a node via **D3D12_NODE_MASK** in a [**D3D12_STATE_SUBOBJECT**](/windows/win32/api/d3d12/ns-d3d12-d3d12_state_subobject) with type [**D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK**](/windows/win32/api/d3d12/ne-d3d12-d3d12_state_subobject_type), the runtime will incorrectly handle a node mask value of `0`, which should use node #1, which will lead to errors when attempting to use the state object later. Specify an explicit node value of 1, or omit the **D3D12_NODE_MASK** subobject to avoid this issue.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_node_mask#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct D3D12_NODE_MASK
        {
            /// <summary>The node mask.</summary>
            internal uint NodeMask;
        }
    }
}