// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        /// <summary>Describes a function.</summary>
        /// <remarks>
        /// <para>This structure is returned by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12shader/nf-d3d12shader-id3d12functionreflection-getdesc">ID3D12FunctionReflection::GetDesc</a>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_function_desc#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct D3D12_FUNCTION_DESC
        {
            /// <summary>
            /// <para>The shader version. See also <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12shader/ne-d3d12shader-d3d12_shader_version_type">D3D12_SHADER_VERSION_TYPE</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_function_desc#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint Version;
            /// <summary>The name of the originator of the function.</summary>
            internal win32.System.SystemServices.PCSTR Creator;
            /// <summary>A combination of <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3dcompile-constants">D3DCOMPILE Constants</a> that are combined by using a bitwise OR operation. The resulting value specifies shader compilation and parsing.</summary>
            internal uint Flags;
            /// <summary>The number of constant buffers for the function.</summary>
            internal uint ConstantBuffers;
            /// <summary>The number of bound resources for the function.</summary>
            internal uint BoundResources;
            /// <summary>The number of emitted instructions for the function.</summary>
            internal uint InstructionCount;
            /// <summary>The number of temporary registers used by the function.</summary>
            internal uint TempRegisterCount;
            /// <summary>The number of temporary arrays used by the function.</summary>
            internal uint TempArrayCount;
            /// <summary>The number of constant defines for the function.</summary>
            internal uint DefCount;
            /// <summary>The number of declarations (input + output) for the function.</summary>
            internal uint DclCount;
            /// <summary>The number of non-categorized texture instructions for the function.</summary>
            internal uint TextureNormalInstructions;
            /// <summary>The number of texture load instructions for the function.</summary>
            internal uint TextureLoadInstructions;
            /// <summary>The number of texture comparison instructions for the function.</summary>
            internal uint TextureCompInstructions;
            /// <summary>The number of texture bias instructions for the function.</summary>
            internal uint TextureBiasInstructions;
            /// <summary>The number of texture gradient instructions for the function.</summary>
            internal uint TextureGradientInstructions;
            /// <summary>The number of floating point arithmetic instructions used by the function.</summary>
            internal uint FloatInstructionCount;
            /// <summary>The number of signed integer arithmetic instructions used by the function.</summary>
            internal uint IntInstructionCount;
            /// <summary>The number of unsigned integer arithmetic instructions used by the function.</summary>
            internal uint UintInstructionCount;
            /// <summary>The number of static flow control instructions used by the function.</summary>
            internal uint StaticFlowControlCount;
            /// <summary>The number of dynamic flow control instructions used by the function.</summary>
            internal uint DynamicFlowControlCount;
            /// <summary>The number of macro instructions used by the function.</summary>
            internal uint MacroInstructionCount;
            /// <summary>The number of array instructions used by the function.</summary>
            internal uint ArrayInstructionCount;
            /// <summary>The number of mov instructions used by the function.</summary>
            internal uint MovInstructionCount;
            /// <summary>The number of movc instructions used by the function.</summary>
            internal uint MovcInstructionCount;
            /// <summary>The number of type conversion instructions used by the function.</summary>
            internal uint ConversionInstructionCount;
            /// <summary>The number of bitwise arithmetic instructions used by the function.</summary>
            internal uint BitwiseInstructionCount;
            /// <summary>A <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>-typed value that specifies the minimum Direct3D feature level target of the function byte code.</summary>
            internal win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL MinFeatureLevel;
            /// <summary>A value that contains a combination of one or more shader requirements flags; each flag specifies a requirement of the shader. A default value of 0 means there are no requirements. For a list of values, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12shader/nf-d3d12shader-id3d12shaderreflection-getrequiresflags">ID3D12ShaderReflection::GetRequiresFlags</a>.</summary>
            internal ulong RequiredFeatureFlags;
            /// <summary>The name of the function.</summary>
            internal win32.System.SystemServices.PCSTR Name;
            /// <summary>The number of logical parameters in the function signature, not including the return value.</summary>
            internal int FunctionParameterCount;
            /// <summary>Indicates whether the function returns a value. <b>TRUE</b> indicates it returns a value; otherwise, <b>FALSE</b> (it is a subroutine).</summary>
            internal win32.System.SystemServices.BOOL HasReturn;
            /// <summary>Indicates whether there is a Direct3D 10Level9 vertex shader blob. <b>TRUE</b> indicates there is a 10Level9 vertex shader blob; otherwise, <b>FALSE</b>.</summary>
            internal win32.System.SystemServices.BOOL Has10Level9VertexShader;
            /// <summary>Indicates whether there is a Direct3D 10Level9 pixel shader blob. <b>TRUE</b> indicates there is a 10Level9 pixel shader blob; otherwise, <b>FALSE</b>.</summary>
            internal win32.System.SystemServices.BOOL Has10Level9PixelShader;
        }
    }
}