// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("5A58797D-A72C-478D-8BA2-EFC6B0EFE88E")]
        internal unsafe struct ID3D12ShaderReflection
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetDesc(win32.Graphics.Direct3D12.D3D12_SHADER_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetDesc(out win32.Graphics.Direct3D12.D3D12_SHADER_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SHADER_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetDesc(pDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets a shader description.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_shader_desc">D3D12_SHADER_DESC</a>*</b></para>
            /// <para>A shader description, as a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_shader_desc">D3D12_SHADER_DESC</a> structure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the following <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDesc(win32.Graphics.Direct3D12.D3D12_SHADER_DESC*pDesc)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetDesc_4(pThis, pDesc);
            }

            /// <summary>Gets a constant buffer by index.</summary>
            /// <param name = "Index">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Zero-based index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconstantbufferbyindex#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectionconstantbuffer">ID3D12ShaderReflectionConstantBuffer</a>*</b></para>
            /// <para>A pointer to a constant buffer (see <a href = "/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectionconstantbuffer">ID3D12ShaderReflectionConstantBuffer Interface</a>).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconstantbufferbyindex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer*GetConstantBufferByIndex(uint Index)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetConstantBufferByIndex_5(pThis, Index);
            }

            /// <summary>Gets a constant buffer by name.</summary>
            /// <param name = "Name">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The constant-buffer name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconstantbufferbyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectionconstantbuffer">ID3D12ShaderReflectionConstantBuffer</a>*</b></para>
            /// <para>A pointer to a constant buffer (see <a href = "/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectionconstantbuffer">ID3D12ShaderReflectionConstantBuffer Interface</a>).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconstantbufferbyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer*GetConstantBufferByName(win32.System.SystemServices.PCSTR Name)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetConstantBufferByName_6(pThis, Name);
            }

            /// <inheritdoc cref = "GetResourceBindingDesc(uint, win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetResourceBindingDesc(uint ResourceIndex, out win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetResourceBindingDesc(ResourceIndex, pDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets a description of how a resource is bound to a shader.</summary>
            /// <param name = "ResourceIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based resource index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a>*</b></para>
            /// <para>A pointer to an input-binding description. See <a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetResourceBindingDesc(uint ResourceIndex, win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*pDesc)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetResourceBindingDesc_7(pThis, ResourceIndex, pDesc);
            }

            /// <inheritdoc cref = "GetInputParameterDesc(uint, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetInputParameterDesc(uint ParameterIndex, out win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetInputParameterDesc(ParameterIndex, pDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets an input-parameter description for a shader.</summary>
            /// <param name = "ParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based parameter index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getinputparameterdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a>*</b></para>
            /// <para>A pointer to a shader-input-signature description. See <a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getinputparameterdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getinputparameterdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetInputParameterDesc(uint ParameterIndex, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*pDesc)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetInputParameterDesc_8(pThis, ParameterIndex, pDesc);
            }

            /// <inheritdoc cref = "GetOutputParameterDesc(uint, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetOutputParameterDesc(uint ParameterIndex, out win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetOutputParameterDesc(ParameterIndex, pDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets an output-parameter description for a shader.</summary>
            /// <param name = "ParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based parameter index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getoutputparameterdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a>*</b></para>
            /// <para>A shader-output-parameter description, as a pointer to a <a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a> structure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getoutputparameterdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getoutputparameterdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetOutputParameterDesc(uint ParameterIndex, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*pDesc)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetOutputParameterDesc_9(pThis, ParameterIndex, pDesc);
            }

            /// <inheritdoc cref = "GetPatchConstantParameterDesc(uint, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetPatchConstantParameterDesc(uint ParameterIndex, out win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetPatchConstantParameterDesc(ParameterIndex, pDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets a patch-constant parameter description for a shader.</summary>
            /// <param name = "ParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based parameter index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getpatchconstantparameterdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a>*</b></para>
            /// <para>A pointer to a shader-input-signature description. See <a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getpatchconstantparameterdesc#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getpatchconstantparameterdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPatchConstantParameterDesc(uint ParameterIndex, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*pDesc)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetPatchConstantParameterDesc_10(pThis, ParameterIndex, pDesc);
            }

            /// <summary>Gets a variable by name.</summary>
            /// <param name = "Name">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>A pointer to a string containing the variable name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getvariablebyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectionvariable">ID3D12ShaderReflectionVariable</a>*</b></para>
            /// <para>Returns a <a href = "/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectionvariable">ID3D12ShaderReflectionVariable Interface</a> interface.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getvariablebyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D12.ID3D12ShaderReflectionVariable*GetVariableByName(win32.System.SystemServices.PCSTR Name)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetVariableByName_11(pThis, Name);
            }

            /// <inheritdoc cref = "GetResourceBindingDescByName(win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetResourceBindingDescByName(win32.System.SystemServices.PCSTR Name, out win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*pDescLocal = &pDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetResourceBindingDescByName(Name, pDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets a description of how a resource is bound to a shader.</summary>
            /// <param name = "Name">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The constant-buffer name of the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdescbyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a>*</b></para>
            /// <para>A pointer to an input-binding description. See <a href = "https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdescbyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdescbyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetResourceBindingDescByName(win32.System.SystemServices.PCSTR Name, win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*pDesc)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetResourceBindingDescByName_12(pThis, Name, pDesc);
            }

            /// <summary>Gets the number of Mov instructions.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Returns the number of Mov instructions.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getmovinstructioncount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetMovInstructionCount()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetMovInstructionCount_13(pThis);
            }

            /// <summary>Gets the number of Movc instructions.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Returns the number of Movc instructions.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getmovcinstructioncount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetMovcInstructionCount()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetMovcInstructionCount_14(pThis);
            }

            /// <summary>Gets the number of conversion instructions.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Returns the number of conversion instructions.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconversioninstructioncount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetConversionInstructionCount()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetConversionInstructionCount_15(pThis);
            }

            /// <summary>Gets the number of bitwise instructions.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of bitwise instructions.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getbitwiseinstructioncount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetBitwiseInstructionCount()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetBitwiseInstructionCount_16(pThis);
            }

            /// <summary>Gets the geometry-shader input-primitive description.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_primitive">D3D_PRIMITIVE</a></b></para>
            /// <para>The input-primitive description.  See <a href = "/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_primitive_topology">D3D_PRIMITIVE_TOPOLOGY</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getgsinputprimitive">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct3D11.D3D_PRIMITIVE GetGSInputPrimitive()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetGSInputPrimitive_17(pThis);
            }

            /// <summary>Indicates whether a shader is a sample frequency shader.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para>Returns true if the shader is a sample frequency shader; otherwise returns false.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-issamplefrequencyshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsSampleFrequencyShader()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->IsSampleFrequencyShader_18(pThis);
            }

            /// <summary>Gets the number of interface slots in a shader.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of interface slots in the shader.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getnuminterfaceslots">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetNumInterfaceSlots()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetNumInterfaceSlots_19(pThis);
            }

            /// <inheritdoc cref = "GetMinFeatureLevel(win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*)"/>
            internal unsafe win32.System.Com.HRESULT GetMinFeatureLevel(out win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL pLevel)
            {
                fixed (win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pLevelLocal = &pLevel)
                {
                    win32.System.Com.HRESULT __result = this.GetMinFeatureLevel(pLevelLocal);
                    return __result;
                }
            }

            /// <summary>Gets the minimum feature level.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getminfeaturelevel">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMinFeatureLevel(win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pLevel)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetMinFeatureLevel_20(pThis, pLevel);
            }

            /// <summary>Retrieves the sizes, in units of threads, of the X, Y, and Z dimensions of the shader's thread-group grid.</summary>
            /// <param name = "pSizeX">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A pointer to the size, in threads, of the x-dimension of the thread-group grid. The maximum size is 1024.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getthreadgroupsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSizeY">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A pointer to the size, in threads, of the y-dimension of the thread-group grid. The maximum size is 1024.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getthreadgroupsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSizeZ">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A pointer to the size, in threads, of the z-dimension of the thread-group grid. The maximum size is 64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getthreadgroupsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b> Returns the total size, in threads, of the thread-group grid by calculating the product of the size of each dimension.</para>
            /// <para><pre class = "syntax"xml: space = "preserve"><code>*pSizeX * *pSizeY * *pSizeZ;</code></pre></para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getthreadgroupsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe uint GetThreadGroupSize([Optional] uint *pSizeX, [Optional] uint *pSizeY, [Optional] uint *pSizeZ)
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetThreadGroupSize_21(pThis, pSizeX, pSizeY, pSizeZ);
            }

            /// <summary>Gets a group of flags that indicates the requirements of a shader.</summary>
            /// <returns>
            /// <para>Type: <b>UINT64</b> A value that contains a combination of one or more shader requirements #define flags; each flag specifies a requirement of the shader. A default value of 0 means there are no requirements.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getrequiresflags">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetRequiresFlags()
            {
                fixed (ID3D12ShaderReflection*pThis = &this)
                    return lpVtbl->GetRequiresFlags_22(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, win32.Graphics.Direct3D12.D3D12_SHADER_DESC*, win32.System.Com.HRESULT>GetDesc_4;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, win32.Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer*>GetConstantBufferByIndex_5;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D12.ID3D12ShaderReflectionConstantBuffer*>GetConstantBufferByName_6;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*, win32.System.Com.HRESULT>GetResourceBindingDesc_7;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*, win32.System.Com.HRESULT>GetInputParameterDesc_8;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*, win32.System.Com.HRESULT>GetOutputParameterDesc_9;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC*, win32.System.Com.HRESULT>GetPatchConstantParameterDesc_10;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D12.ID3D12ShaderReflectionVariable*>GetVariableByName_11;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, win32.System.SystemServices.PCSTR, win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC*, win32.System.Com.HRESULT>GetResourceBindingDescByName_12;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>GetMovInstructionCount_13;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>GetMovcInstructionCount_14;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>GetConversionInstructionCount_15;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>GetBitwiseInstructionCount_16;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, win32.Graphics.Direct3D11.D3D_PRIMITIVE>GetGSInputPrimitive_17;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, win32.System.SystemServices.BOOL>IsSampleFrequencyShader_18;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>GetNumInterfaceSlots_19;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, win32.System.Com.HRESULT>GetMinFeatureLevel_20;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, uint *, uint *, uint *, uint>GetThreadGroupSize_21;
                internal delegate *unmanaged[Stdcall]<ID3D12ShaderReflection*, ulong>GetRequiresFlags_22;
            }

            private Vtbl*lpVtbl;
        }
    }
}