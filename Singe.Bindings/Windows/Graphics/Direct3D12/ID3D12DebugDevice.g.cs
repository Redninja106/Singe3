// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("3FEBD6DD-4973-4787-8194-E45F9E28923E")]
        internal unsafe struct ID3D12DebugDevice
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12DebugDevice*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12DebugDevice*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12DebugDevice*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Set a bit field of flags that will turn debug features on and off.</summary>
            /// <param name = "Mask">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_feature">D3D12_DEBUG_FEATURE</a></b></para>
            /// <para>Feature-mask flags, as a bitwise-OR'd combination of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_feature">D3D12_DEBUG_FEATURE</a> enumeration constants. If a flag is present, that feature will be set to on; otherwise, the feature will be set to off.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-setfeaturemask#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>. <a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-setfeaturemask">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetFeatureMask(win32.Graphics.Direct3D12.D3D12_DEBUG_FEATURE Mask)
            {
                fixed (ID3D12DebugDevice*pThis = &this)
                    return lpVtbl->SetFeatureMask_4(pThis, Mask);
            }

            /// <summary>Gets a bit field of flags that indicates which debug features are on or off.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_feature">D3D12_DEBUG_FEATURE</a></b></para>
            /// <para>Mask of feature-mask flags, as a bitwise OR'ed combination of <a href = "/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_feature">D3D12_DEBUG_FEATURE</a> enumeration constants. If a flag is present, then that feature will be set to on, otherwise the feature will be set to off.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-getfeaturemask">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct3D12.D3D12_DEBUG_FEATURE GetFeatureMask()
            {
                fixed (ID3D12DebugDevice*pThis = &this)
                    return lpVtbl->GetFeatureMask_5(pThis);
            }

            /// <summary>Reports information about a device object's lifetime.</summary>
            /// <param name = "Flags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_rldo_flags">D3D12_RLDO_FLAGS</a></b></para>
            /// <para>A value from the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_rldo_flags">D3D12_RLDO_FLAGS</a> enumeration. This method uses the value in <i>Flags</i> to determine the amount of information to report about a device object's lifetime.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-reportlivedeviceobjects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>. <a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-reportlivedeviceobjects">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT ReportLiveDeviceObjects(win32.Graphics.Direct3D12.D3D12_RLDO_FLAGS Flags)
            {
                fixed (ID3D12DebugDevice*pThis = &this)
                    return lpVtbl->ReportLiveDeviceObjects_6(pThis, Flags);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12DebugDevice*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12DebugDevice*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12DebugDevice*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12DebugDevice*, win32.Graphics.Direct3D12.D3D12_DEBUG_FEATURE, win32.System.Com.HRESULT>SetFeatureMask_4;
                internal delegate *unmanaged[Stdcall]<ID3D12DebugDevice*, win32.Graphics.Direct3D12.D3D12_DEBUG_FEATURE>GetFeatureMask_5;
                internal delegate *unmanaged[Stdcall]<ID3D12DebugDevice*, win32.Graphics.Direct3D12.D3D12_RLDO_FLAGS, win32.System.Com.HRESULT>ReportLiveDeviceObjects_6;
            }

            private Vtbl*lpVtbl;
        }
    }
}