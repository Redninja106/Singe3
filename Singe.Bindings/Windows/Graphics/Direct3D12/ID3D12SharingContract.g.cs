// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("0ADF7D52-929C-4E61-ADDB-FFED30DE66EF")]
        internal unsafe struct ID3D12SharingContract
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12SharingContract*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12SharingContract*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12SharingContract*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Shares a resource (or subresource) between the D3D layers and diagnostics tools.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>A pointer to the resource that contains the final frame contents. This resource is treated as the *back buffer* of the **Present**.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-present#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Subresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>An unsigned 32bit subresource id.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-present#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "window">If provided, indicates which window the tools should use for displaying additional diagnostic information.</param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-present">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void Present(win32.Graphics.Direct3D12.ID3D12Resource*pResource, uint Subresource, win32.UI.WindowsAndMessaging.HWND window)
            {
                fixed (ID3D12SharingContract*pThis = &this)
                    lpVtbl->Present_4(pThis, pResource, Subresource, window);
            }

            /// <summary>Signals a shared fence between the D3D layers and diagnostics tools.</summary>
            /// <param name = "pFence">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a>*</b></para>
            /// <para>A pointer to the shared fence to signal.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-sharedfencesignal#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "FenceValue">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT64</a></b></para>
            /// <para>An unsigned 64bit value to signal the shared fence with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-sharedfencesignal#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-sharedfencesignal">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SharedFenceSignal(win32.Graphics.Direct3D12.ID3D12Fence*pFence, ulong FenceValue)
            {
                fixed (ID3D12SharingContract*pThis = &this)
                    lpVtbl->SharedFenceSignal_5(pThis, pFence, FenceValue);
            }

            /// <inheritdoc cref = "BeginCapturableWork(global::System.Guid*)"/>
            internal unsafe void BeginCapturableWork(in global::System.Guid guid)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    this.BeginCapturableWork(guidLocal);
                }
            }

            internal unsafe void BeginCapturableWork(global::System.Guid*guid)
            {
                fixed (ID3D12SharingContract*pThis = &this)
                    lpVtbl->BeginCapturableWork_6(pThis, guid);
            }

            /// <inheritdoc cref = "EndCapturableWork(global::System.Guid*)"/>
            internal unsafe void EndCapturableWork(in global::System.Guid guid)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    this.EndCapturableWork(guidLocal);
                }
            }

            internal unsafe void EndCapturableWork(global::System.Guid*guid)
            {
                fixed (ID3D12SharingContract*pThis = &this)
                    lpVtbl->EndCapturableWork_7(pThis, guid);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12SharingContract*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12SharingContract*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12SharingContract*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12SharingContract*, win32.Graphics.Direct3D12.ID3D12Resource*, uint, win32.UI.WindowsAndMessaging.HWND, void>Present_4;
                internal delegate *unmanaged[Stdcall]<ID3D12SharingContract*, win32.Graphics.Direct3D12.ID3D12Fence*, ulong, void>SharedFenceSignal_5;
                internal delegate *unmanaged[Stdcall]<ID3D12SharingContract*, global::System.Guid*, void>BeginCapturableWork_6;
                internal delegate *unmanaged[Stdcall]<ID3D12SharingContract*, global::System.Guid*, void>EndCapturableWork_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}