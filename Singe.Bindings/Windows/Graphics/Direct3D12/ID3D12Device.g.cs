// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("189819F1-1DB6-4B57-BE54-1821339B85F7")]
        internal unsafe struct ID3D12Device
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->GetPrivateData_4(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->SetPrivateData_5(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_6(pThis, guid, pData);
            }

            /// <inheritdoc cref = "SetName(win32.System.SystemServices.PCWSTR)"/>
            internal unsafe win32.System.Com.HRESULT SetName(string Name)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.Com.HRESULT __result = this.SetName(NameLocal);
                    return __result;
                }
            }

            internal win32.System.Com.HRESULT SetName(win32.System.SystemServices.PCWSTR Name)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->SetName_7(pThis, Name);
            }

            /// <summary>Reports the number of physical adapters (nodes) that are associated with this device.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of physical adapters (nodes) that this device has.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getnodecount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetNodeCount()
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->GetNodeCount_8(pThis);
            }

            /// <inheritdoc cref = "CreateCommandQueue(win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandQueue(in win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC pDesc, in global::System.Guid riid, out void *ppCommandQueue)
            {
                fixed (void **ppCommandQueueLocal = &ppCommandQueue)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateCommandQueue(pDescLocal, riidLocal, ppCommandQueueLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Creates a command queue.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_command_queue_desc">D3D12_COMMAND_QUEUE_DESC</a>*</b></para>
            /// <para>Specifies a D3D12_COMMAND_QUEUE_DESC that describes the command queue.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandqueue#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b><b>REFIID</b></b></para>
            /// <para>The globally unique identifier (GUID) for the command queue interface. See remarks.  An input parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandqueue#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppCommandQueue">
            /// <para>Type: <b><b>void</b>**</b></para>
            /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandqueue">ID3D12CommandQueue</a> interface for the command queue.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandqueue#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the command queue. See <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandqueue">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCommandQueue(win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*pDesc, global::System.Guid*riid, void **ppCommandQueue)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateCommandQueue_9(pThis, pDesc, riid, ppCommandQueue);
            }

            /// <inheritdoc cref = "CreateCommandAllocator(win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandAllocator(win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, in global::System.Guid riid, out void *ppCommandAllocator)
            {
                fixed (void **ppCommandAllocatorLocal = &ppCommandAllocator)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateCommandAllocator(type, riidLocal, ppCommandAllocatorLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a command allocator object.</summary>
            /// <param name = "type">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_command_list_type">D3D12_COMMAND_LIST_TYPE</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_command_list_type">D3D12_COMMAND_LIST_TYPE</a>-typed value that specifies the type of command allocator to create. The type of command allocator can be the type that records either direct command lists or bundles.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandallocator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the command allocator interface (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandallocator">ID3D12CommandAllocator</a>). The <b>REFIID</b>, or <b>GUID</b>, of the interface to the command allocator can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D12CommandAllocator) will get the <b>GUID</b> of the interface to a command allocator.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandallocator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppCommandAllocator">
            /// <para>Type: <b>void**</b></para>
            /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandallocator">ID3D12CommandAllocator</a> interface for the command allocator.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandallocator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the command allocator. See <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandallocator">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCommandAllocator(win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, global::System.Guid*riid, void **ppCommandAllocator)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateCommandAllocator_10(pThis, type, riid, ppCommandAllocator);
            }

            /// <inheritdoc cref = "CreateGraphicsPipelineState(win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateGraphicsPipelineState(in win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC pDesc, in global::System.Guid riid, out void *ppPipelineState)
            {
                fixed (void **ppPipelineStateLocal = &ppPipelineState)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateGraphicsPipelineState(pDescLocal, riidLocal, ppPipelineStateLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Creates a graphics pipeline state object.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc">D3D12_GRAPHICS_PIPELINE_STATE_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc">D3D12_GRAPHICS_PIPELINE_STATE_DESC</a> structure that describes graphics pipeline state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-creategraphicspipelinestate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the pipeline state interface (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a>). The <b>REFIID</b>, or <b>GUID</b>, of the interface to the pipeline state can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D12PipelineState) will get the <b>GUID</b> of the interface to a pipeline state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-creategraphicspipelinestate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPipelineState">
            /// <para>Type: <b>void**</b></para>
            /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> interface for the pipeline state object. The pipeline state object is an immutable state object.  It contains no methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-creategraphicspipelinestate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the pipeline state object. See <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-creategraphicspipelinestate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGraphicsPipelineState(win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*pDesc, global::System.Guid*riid, void **ppPipelineState)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateGraphicsPipelineState_11(pThis, pDesc, riid, ppPipelineState);
            }

            /// <inheritdoc cref = "CreateComputePipelineState(win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateComputePipelineState(in win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC pDesc, in global::System.Guid riid, out void *ppPipelineState)
            {
                fixed (void **ppPipelineStateLocal = &ppPipelineState)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateComputePipelineState(pDescLocal, riidLocal, ppPipelineStateLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Creates a compute pipeline state object.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc">D3D12_COMPUTE_PIPELINE_STATE_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc">D3D12_COMPUTE_PIPELINE_STATE_DESC</a> structure that describes compute pipeline state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcomputepipelinestate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the pipeline state interface (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a>). The <b>REFIID</b>, or <b>GUID</b>, of the interface to the pipeline state can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D12PipelineState) will get the <b>GUID</b> of the interface to a pipeline state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcomputepipelinestate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPipelineState">
            /// <para>Type: <b>void**</b></para>
            /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> interface for the pipeline state object. The pipeline state object is an immutable state object.  It contains no methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcomputepipelinestate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the pipeline state object. See <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcomputepipelinestate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateComputePipelineState(win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*pDesc, global::System.Guid*riid, void **ppPipelineState)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateComputePipelineState_12(pThis, pDesc, riid, ppPipelineState);
            }

            /// <inheritdoc cref = "CreateCommandList(uint, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, win32.Graphics.Direct3D12.ID3D12CommandAllocator*, win32.Graphics.Direct3D12.ID3D12PipelineState*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandList(uint nodeMask, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, win32.Graphics.Direct3D12.ID3D12CommandAllocator*pCommandAllocator, win32.Graphics.Direct3D12.ID3D12PipelineState*pInitialState, in global::System.Guid riid, out void *ppCommandList)
            {
                fixed (void **ppCommandListLocal = &ppCommandList)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateCommandList(nodeMask, type, pCommandAllocator, pInitialState, riidLocal, ppCommandListLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a command list.</summary>
            /// <param name = "nodeMask">
            /// <para>Type: **[UINT](/windows/win32/WinProg/windows-data-types)**</para>
            /// <para>For single-GPU operation, set this to zero. If there are multiple GPU nodes, then set a bit to identify the node (the device's physical adapter) for which to create the command list. Each bit in the mask corresponds to a single node. Only one bit must be set. Also see [Multi-adapter systems](/windows/win32/direct3d12/multi-engine).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "type">
            /// <para>Type: **[D3D12_COMMAND_LIST_TYPE](./ne-d3d12-d3d12_command_list_type.md)**</para>
            /// <para>Specifies the type of command list to create.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pCommandAllocator">
            /// <para>Type: **[ID3D12CommandAllocator](./nn-d3d12-id3d12commandallocator.md)\***</para>
            /// <para>A pointer to the command allocator object from which the device creates command lists.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialState">
            /// <para>Type: **[ID3D12PipelineState](./nn-d3d12-id3d12pipelinestate.md)\***</para>
            /// <para>An optional pointer to the pipeline state object that contains the initial pipeline state for the command list. If it is `nulltpr`, then the runtime sets a dummy initial pipeline state, so that drivers don't have to deal with undefined state. The overhead for this is low, particularly for a command list, for which the overall cost of recording the command list likely dwarfs the cost of a single initial state setting. So there's little cost in not setting the initial pipeline state parameter, if doing so is inconvenient.</para>
            /// <para>For bundles, on the other hand, it might make more sense to try to set the initial state parameter (since bundles are likely smaller overall, and can be reused frequently).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: **REFIID**</para>
            /// <para>A reference to the globally unique identifier (**GUID**) of the command list interface to return in *ppCommandList*.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppCommandList">
            /// <para>Type: **void\*\***</para>
            /// <para>A pointer to a memory block that receives a pointer to the [ID3D12CommandList](./nn-d3d12-id3d12commandlist.md) or [ID3D12GraphicsCommandList](./nn-d3d12-id3d12graphicscommandlist.md) interface for the command list.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: **[HRESULT](/windows/win32/com/structure-of-com-error-codes)**</para>
            /// <para>If the function succeeds, it returns **S_OK**. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) [error code](/windows/win32/com/com-error-codes-10).</para>
            /// <para>|Return value|Description| |-|-| |E_OUTOFMEMORY|There is insufficient memory to create the command list.|</para>
            /// <para>See [Direct3D 12 return codes](/windows/win32/direct3d12/d3d12-graphics-reference-returnvalues) for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCommandList(uint nodeMask, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, win32.Graphics.Direct3D12.ID3D12CommandAllocator*pCommandAllocator, [Optional] win32.Graphics.Direct3D12.ID3D12PipelineState*pInitialState, global::System.Guid*riid, void **ppCommandList)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateCommandList_13(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }

            /// <summary>Gets information about the features that are supported by the current graphics driver.</summary>
            /// <param name = "Feature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_feature">D3D12_FEATURE</a></b></para>
            /// <para>A constant from the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_feature">D3D12_FEATURE</a> enumeration describing the feature(s) that you want to query for support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFeatureSupportData">
            /// <para>Type: <b>void*</b></para>
            /// <para>A pointer to a data structure that corresponds to the value of the <i>Feature</i> parameter. To determine the corresponding data structure for each constant, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_feature">D3D12_FEATURE</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "FeatureSupportDataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The size of the structure pointed to by the <i>pFeatureSupportData</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns <b>S_OK</b> if successful. Returns <b>E_INVALIDARG</b> if an unsupported data type is passed to the <i>pFeatureSupportData</i> parameter or if a size mismatch is detected for the <i>FeatureSupportDataSize</i> parameter.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-checkfeaturesupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckFeatureSupport(win32.Graphics.Direct3D12.D3D12_FEATURE Feature, void *pFeatureSupportData, uint FeatureSupportDataSize)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CheckFeatureSupport_14(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }

            /// <inheritdoc cref = "CreateDescriptorHeap(win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateDescriptorHeap(in win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC pDescriptorHeapDesc, in global::System.Guid riid, out void *ppvHeap)
            {
                fixed (void **ppvHeapLocal = &ppvHeap)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*pDescriptorHeapDescLocal = &pDescriptorHeapDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateDescriptorHeap(pDescriptorHeapDescLocal, riidLocal, ppvHeapLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Creates a descriptor heap object.</summary>
            /// <param name = "pDescriptorHeapDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_descriptor_heap_desc">D3D12_DESCRIPTOR_HEAP_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_descriptor_heap_desc">D3D12_DESCRIPTOR_HEAP_DESC</a> structure that describes the heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdescriptorheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b><b>REFIID</b></b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the descriptor heap interface. See Remarks. An input parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdescriptorheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvHeap">
            /// <para>Type: <b><b>void</b>**</b></para>
            /// <para>A pointer to a memory block that receives a pointer to the descriptor heap. <i>ppvHeap</i> can be NULL, to enable capability testing. When <i>ppvHeap</i> is NULL, no object will be created and S_FALSE will be returned when <i>pDescriptorHeapDesc</i> is valid.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdescriptorheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the descriptor heap object. See <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdescriptorheap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDescriptorHeap(win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*pDescriptorHeapDesc, global::System.Guid*riid, void **ppvHeap)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateDescriptorHeap_15(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }

            /// <summary>Gets the size of the handle increment for the given type of descriptor heap. This value is typically used to increment a handle into a descriptor array by the correct amount.</summary>
            /// <param name = "DescriptorHeapType">The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>-typed value that specifies the type of descriptor heap to get the size of the handle increment for.</param>
            /// <returns>Returns the size of the handle increment for the given type of descriptor heap, including any necessary padding.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getdescriptorhandleincrementsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetDescriptorHandleIncrementSize(win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->GetDescriptorHandleIncrementSize_16(pThis, DescriptorHeapType);
            }

            /// <inheritdoc cref = "CreateRootSignature(uint, void *, nuint, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateRootSignature(uint nodeMask, void *pBlobWithRootSignature, nuint blobLengthInBytes, in global::System.Guid riid, out void *ppvRootSignature)
            {
                fixed (void **ppvRootSignatureLocal = &ppvRootSignature)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateRootSignature(nodeMask, pBlobWithRootSignature, blobLengthInBytes, riidLocal, ppvRootSignatureLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a root signature layout.</summary>
            /// <param name = "nodeMask">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>For single GPU operation, set this to zero. If there are multiple GPU nodes, set bits to identify the nodes (the  device's physical adapters) to which the root signature is to apply. Each bit in the mask corresponds to a single node. Refer to <a href = "https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pBlobWithRootSignature">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">void</a>*</b></para>
            /// <para>A pointer to the source data for the serialized signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "blobLengthInBytes">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>The size, in bytes, of the block of memory that <i>pBlobWithRootSignature</i> points to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b><b>REFIID</b></b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the root signature interface. See Remarks. An input parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvRootSignature">
            /// <para>Type: <b><b>void</b>**</b></para>
            /// <para>A pointer to a memory block that receives a pointer to the root signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href = "/windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// <para>This method returns <b>E_INVALIDARG</b> if the blob that <i>pBlobWithRootSignature</i> points to is invalid.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrootsignature">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateRootSignature(uint nodeMask, void *pBlobWithRootSignature, nuint blobLengthInBytes, global::System.Guid*riid, void **ppvRootSignature)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateRootSignature_17(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }

            /// <inheritdoc cref = "CreateConstantBufferView(win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateConstantBufferView(win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC);
                this.CreateConstantBufferView(pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            /// <summary>Creates a constant-buffer view for accessing resource data.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_constant_buffer_view_desc">D3D12_CONSTANT_BUFFER_VIEW_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_constant_buffer_view_desc">D3D12_CONSTANT_BUFFER_VIEW_DESC</a> structure that describes the constant-buffer view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createconstantbufferview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Describes the CPU descriptor handle that represents the start of the heap that holds the constant-buffer view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createconstantbufferview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createconstantbufferview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CreateConstantBufferView([Optional] win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CreateConstantBufferView_18(pThis, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateShaderResourceView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateShaderResourceView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC);
                this.CreateShaderResourceView(pResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            /// <summary>Creates a shader-resource view for accessing data in a resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the shader resource.</para>
            /// <para>At least one of <i>pResource</i> or <i>pDesc</i>  must be provided. A null <i>pResource</i> is used to initialize a null descriptor, which guarantees D3D11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_shader_resource_view_desc">D3D12_SHADER_RESOURCE_VIEW_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_shader_resource_view_desc">D3D12_SHADER_RESOURCE_VIEW_DESC</a> structure that describes the shader-resource view.</para>
            /// <para>A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and for buffers SRVs target a full buffer and are typed (not raw or structured), and for textures SRVs target a full texture, all mips and all array slices. Not all resources support null descriptor initialization.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Describes the CPU descriptor handle that represents the shader-resource view. This handle can be created in a shader-visible or non-shader-visible descriptor heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><h3><a id = "Processing_YUV_4_2_0_video_formats"></a><a id = "processing_yuv_4_2_0_video_formats"></a><a id = "PROCESSING_YUV_4_2_0_VIDEO_FORMATS"></a>Processing YUV 4:2:0 video formats</h3> An app must map the luma (Y) plane separately from the chroma (UV) planes. Developers do this by calling <b>CreateShaderResourceView</b> twice for the same texture and passing in 1-channel and 2-channel formats. Passing in a 1-channel format compatible with the Y plane maps only the Y plane. Passing in a 2-channel format compatible with the UV planes (together) maps only the U and V planes as a single resource view.</para>
            /// <para>YUV 4:2:0 formats are listed in <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createshaderresourceview#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CreateShaderResourceView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CreateShaderResourceView_19(pThis, pResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateUnorderedAccessView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateUnorderedAccessView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.ID3D12Resource*pCounterResource, win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC);
                this.CreateUnorderedAccessView(pResource, pCounterResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            /// <summary>Creates a view for unordered accessing.</summary>
            /// <param name = "pResource">
            /// <para>Type: [in, optional] <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b> A pointer to the <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the unordered access. At least one of <i>pResource</i> or <i>pDesc</i> must be provided. A null <i>pResource</i> is used to initialize a null descriptor, which guarantees Direct3D 11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pCounterResource">
            /// <para>Type: [in, optional] <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> for the counter (if any) associated with the UAV.</para>
            /// <para>If <i>pCounterResource</i> is not specified, then the <b>CounterOffsetInBytes</b> member of the <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_buffer_uav">D3D12_BUFFER_UAV</a> structure must be 0.</para>
            /// <para>If <i>pCounterResource</i> is specified, then there is a counter associated with the UAV, and the runtime performs validation of the following requirements:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: [in, optional] <b>const <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_unordered_access_view_desc">D3D12_UNORDERED_ACCESS_VIEW_DESC</a>*</b> A pointer to a <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_unordered_access_view_desc">D3D12_UNORDERED_ACCESS_VIEW_DESC</a> structure that describes the unordered-access view. A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and for buffers UAVs target a full buffer and are typed, and for textures UAVs target the first mip and all array slices. Not all resources support null descriptor initialization.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Describes the CPU descriptor handle that represents the start of the heap that holds the unordered-access view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createunorderedaccessview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CreateUnorderedAccessView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.ID3D12Resource*pCounterResource, [Optional] win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CreateUnorderedAccessView_20(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateRenderTargetView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateRenderTargetView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC);
                this.CreateRenderTargetView(pResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            /// <summary>Creates a render-target view for accessing resource data.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b> A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the render target.</para>
            /// <para>At least one of <i>pResource</i> or <i>pDesc</i>  must be provided. A null <i>pResource</i> is used to initialize a null descriptor, which guarantees D3D11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_target_view_desc">D3D12_RENDER_TARGET_VIEW_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_target_view_desc">D3D12_RENDER_TARGET_VIEW_DESC</a> structure that describes the render-target view.</para>
            /// <para>A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and RTVs target the first mip and all array slices. Not all resources support null descriptor initialization.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Describes the CPU descriptor handle that represents the destination where the newly-created render target view will reside.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrendertargetview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CreateRenderTargetView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CreateRenderTargetView_21(pThis, pResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateDepthStencilView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateDepthStencilView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC);
                this.CreateDepthStencilView(pResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            /// <summary>Creates a depth-stencil view for accessing resource data.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b> A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the depth stencil.</para>
            /// <para>At least one of <i>pResource</i> or <i>pDesc</i>  must be provided. A null <i>pResource</i> is used to initialize a null descriptor, which guarantees D3D11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencil_view_desc">D3D12_DEPTH_STENCIL_VIEW_DESC</a>*</b> A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencil_view_desc">D3D12_DEPTH_STENCIL_VIEW_DESC</a> structure that describes the depth-stencil view.</para>
            /// <para>A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and DSVs target the  first mip and all array slices. Not all resources support null descriptor initialization.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Describes the CPU descriptor handle that represents the start of the heap that holds the depth-stencil view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdepthstencilview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CreateDepthStencilView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CreateDepthStencilView_22(pThis, pResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateSampler(win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateSampler(in win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*pDescLocal = &pDesc)
                {
                    this.CreateSampler(pDescLocal, DestDescriptor);
                }
            }

            /// <summary>Create a sampler object that encapsulates sampling information for a texture.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_sampler_desc">D3D12_SAMPLER_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_sampler_desc">D3D12_SAMPLER_DESC</a> structure that describes the sampler.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsampler#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Describes the CPU descriptor handle that represents the start of the heap that holds the sampler.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsampler#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsampler">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CreateSampler(win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CreateSampler_23(pThis, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CopyDescriptors(uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE)"/>
            internal unsafe void CopyDescriptors(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE> pDestDescriptorRangeStarts, ReadOnlySpan<uint> pDestDescriptorRangeSizes, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE> pSrcDescriptorRangeStarts, ReadOnlySpan<uint> pSrcDescriptorRangeSizes, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
            {
                fixed (uint *pSrcDescriptorRangeSizesLocal = pSrcDescriptorRangeSizes)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pSrcDescriptorRangeStartsLocal = pSrcDescriptorRangeStarts)
                    {
                        fixed (uint *pDestDescriptorRangeSizesLocal = pDestDescriptorRangeSizes)
                        {
                            fixed (win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pDestDescriptorRangeStartsLocal = pDestDescriptorRangeStarts)
                            {
                                if (pDestDescriptorRangeStarts.Length != pDestDescriptorRangeSizes.Length)
                                    throw new ArgumentException();
                                if (pSrcDescriptorRangeStarts.Length != pSrcDescriptorRangeSizes.Length)
                                    throw new ArgumentException();
                                this.CopyDescriptors((uint)pDestDescriptorRangeSizes.Length, pDestDescriptorRangeStartsLocal, pDestDescriptorRangeSizesLocal, (uint)pSrcDescriptorRangeSizes.Length, pSrcDescriptorRangeStartsLocal, pSrcDescriptorRangeSizesLocal, DescriptorHeapsType);
                            }
                        }
                    }
                }
            }

            /// <summary>Copies descriptors from a source to a destination.</summary>
            /// <param name = "NumDestDescriptorRanges">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of destination descriptor ranges to copy to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDestDescriptorRangeStarts">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a>*</b></para>
            /// <para>An array of <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> objects to copy to.</para>
            /// <para>All the destination and source descriptors must be in heaps of the same [D3D12_DESCRIPTOR_HEAP_TYPE](/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDestDescriptorRangeSizes">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>An array of destination descriptor range sizes to copy to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSrcDescriptorRanges">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of source descriptor ranges to copy from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcDescriptorRangeStarts">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a>*</b></para>
            /// <para>An array of <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> objects to copy from.</para>
            /// <para>> [!IMPORTANT] > All elements in the *pSrcDescriptorRangeStarts* parameter must be in a non shader-visible descriptor heap. This is because shader-visible descriptor heaps may be created in **WRITE_COMBINE** memory or GPU local memory, which is prohibitively slow to read from. If your application manages descriptor heaps via copying the descriptors required for a given pass or frame from local "storage" descriptor heaps to the GPU-bound descriptor heap, use shader-opaque heaps for the storage heaps and copy into the GPU-visible heap as required.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcDescriptorRangeSizes">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>An array of source descriptor range sizes to copy from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DescriptorHeapsType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>-typed value that specifies the type of descriptor heap to copy with. This is required as different descriptor types may have different sizes.</para>
            /// <para>Both the source and destination descriptor heaps must have the same type, else the debug layer will emit an error.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Where applicable, prefer [**ID3D12Device::CopyDescriptorsSimple**](/windows/win32/api/d3d12/nf-d3d12-id3d12device-copydescriptorssimple) to this method. It can have a better CPU cache miss rate due to the linear nature of the copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyDescriptors(uint NumDestDescriptorRanges, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pDestDescriptorRangeStarts, [Optional] uint *pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pSrcDescriptorRangeStarts, [Optional] uint *pSrcDescriptorRangeSizes, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CopyDescriptors_24(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }

            /// <summary>Copies descriptors from a source to a destination.</summary>
            /// <param name = "NumDescriptors">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of descriptors to copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptorssimple#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestDescriptorRangeStart">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>A <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> that describes the destination descriptors to start to copy to.</para>
            /// <para>The destination and source descriptors must be in heaps of the same [D3D12_DESCRIPTOR_HEAP_TYPE](/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptorssimple#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcDescriptorRangeStart">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>A <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> that describes the source descriptors to start to copy from.</para>
            /// <para>> [!IMPORTANT] > The *SrcDescriptorRangeStart* parameter must be in a non shader-visible descriptor heap. This is because shader-visible descriptor heaps may be created in **WRITE_COMBINE** memory or GPU local memory, which is prohibitively slow to read from. If your application manages descriptor heaps via copying the descriptors required for a given pass or frame from local "storage" descriptor heaps to the GPU-bound descriptor heap, then use shader-opaque heaps for the storage heaps and copy into the GPU-visible heap as required.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptorssimple#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DescriptorHeapsType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>-typed value that specifies the type of descriptor heap to copy with. This is required as different descriptor types may have different sizes.</para>
            /// <para>Both the source and destination descriptor heaps must have the same type, else the debug layer will emit an error.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptorssimple#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Where applicable, prefer this method to [**ID3D12Device::CopyDescriptors**](/windows/win32/api/d3d12/nf-d3d12-id3d12device-copydescriptors). It can have a better CPU cache miss rate due to the linear nature of the copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptorssimple#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void CopyDescriptorsSimple(uint NumDescriptors, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->CopyDescriptorsSimple_25(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }

            /// <inheritdoc cref = "GetResourceAllocationInfo(uint, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*)"/>
            internal unsafe win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(uint visibleMask, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC> pResourceDescs)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescsLocal = pResourceDescs)
                {
                    win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO __result = this.GetResourceAllocationInfo(visibleMask, (uint)pResourceDescs.Length, pResourceDescsLocal);
                    return __result;
                }
            }

            /// <summary>Gets the size and alignment of memory required for a collection of resources on this adapter.</summary>
            /// <param name = "visibleMask">
            /// <para>Type: **[UINT](/windows/win32/WinProg/windows-data-types)**</para>
            /// <para>For single-GPU operation, set this to zero. If there are multiple GPU nodes, then set bits to identify the nodes (the device's physical adapters). Each bit in the mask corresponds to a single node. Also see [Multi-adapter systems](/windows/win32/direct3d12/multi-engine).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourceallocationinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "numResourceDescs">
            /// <para>Type: **[UINT](/windows/win32/WinProg/windows-data-types)**</para>
            /// <para>The number of resource descriptors in the *pResourceDescs* array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourceallocationinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pResourceDescs">
            /// <para>Type: **const [D3D12_RESOURCE_DESC](./ns-d3d12-d3d12_resource_desc.md)\***</para>
            /// <para>An array of **D3D12_RESOURCE_DESC** structures that described the resources to get info about.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourceallocationinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: **[D3D12_RESOURCE_ALLOCATION_INFO](./ns-d3d12-d3d12_resource_allocation_info.md)**</para>
            /// <para>A [D3D12_RESOURCE_ALLOCATION_INFO](./ns-d3d12-d3d12_resource_allocation_info.md) structure that provides info about video memory allocated for the specified array of resources.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourceallocationinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescs)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->GetResourceAllocationInfo_26(pThis, visibleMask, numResourceDescs, pResourceDescs);
            }

            /// <summary>Divulges the equivalent custom heap properties that are used for non-custom heap types, based on the adapter's architectural properties.</summary>
            /// <param name = "nodeMask">
            /// <para>Type: <b>UINT</b></para>
            /// <para>For single-GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the  device's physical adapter). Each bit in the mask corresponds to a single node. Only 1 bit must be set. See <a href = "https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcustomheapproperties#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "heapType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_heap_type">D3D12_HEAP_TYPE</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_heap_type">D3D12_HEAP_TYPE</a>-typed value that specifies the heap to get properties for. D3D12_HEAP_TYPE_CUSTOM is not supported as a parameter value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcustomheapproperties#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d3d12/ns-d3d12-d3d12_heap_properties">D3D12_HEAP_PROPERTIES</a></b> Returns a <a href = "/windows/win32/api/d3d12/ns-d3d12-d3d12_heap_properties">D3D12_HEAP_PROPERTIES</a> structure that provides properties for the specified heap. The <b>Type</b> member of the returned D3D12_HEAP_PROPERTIES is always D3D12_HEAP_TYPE_CUSTOM.</para>
            /// <para>When <a href = "/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_architecture">D3D12_FEATURE_DATA_ARCHITECTURE</a>::UMA is FALSE, the returned D3D12_HEAP_PROPERTIES members convert as follows:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcustomheapproperties">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES GetCustomHeapProperties(uint nodeMask, win32.Graphics.Direct3D12.D3D12_HEAP_TYPE heapType)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->GetCustomHeapProperties_27(pThis, nodeMask, heapType);
            }

            /// <inheritdoc cref = "CreateCommittedResource(win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommittedResource(in win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES pHeapProperties, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS HeapFlags, in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialResourceState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, in global::System.Guid riidResource, void **ppvResource)
            {
                fixed (global::System.Guid*riidResourceLocal = &riidResource)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*pHeapPropertiesLocal = &pHeapProperties)
                        {
                            win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                            win32.System.Com.HRESULT __result = this.CreateCommittedResource(pHeapPropertiesLocal, HeapFlags, pDescLocal, InitialResourceState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, riidResourceLocal, ppvResource);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Creates both a resource and an implicit heap, such that the heap is big enough to contain the entire resource, and the resource is mapped to the heap.</summary>
            /// <param name = "pHeapProperties">
            /// <para>Type: **const [D3D12_HEAP_PROPERTIES](./ns-d3d12-d3d12_heap_properties.md)\***</para>
            /// <para>A pointer to a **D3D12_HEAP_PROPERTIES** structure that provides properties for the resource's heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "HeapFlags">
            /// <para>Type: **[D3D12_HEAP_FLAGS](./ne-d3d12-d3d12_heap_flags.md)**</para>
            /// <para>Heap options, as a bitwise-OR'd combination of **D3D12_HEAP_FLAGS** enumeration constants.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: **const [D3D12_RESOURCE_DESC](./ns-d3d12-d3d12_resource_desc.md)\***</para>
            /// <para>A pointer to a **D3D12_RESOURCE_DESC** structure that describes the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InitialResourceState">
            /// <para>Type: **[D3D12_RESOURCE_STATES](./ne-d3d12-d3d12_resource_states.md)**</para>
            /// <para>The initial state of the resource, as a bitwise-OR'd combination of **D3D12_RESOURCE_STATES** enumeration constants.</para>
            /// <para>When you create a resource together with a [D3D12_HEAP_TYPE_UPLOAD](./ne-d3d12-d3d12_heap_type.md) heap, you must set *InitialResourceState* to [D3D12_RESOURCE_STATE_GENERIC_READ](./ne-d3d12-d3d12_resource_states.md).</para>
            /// <para>When you create a resource together with a [D3D12_HEAP_TYPE_READBACK](./ne-d3d12-d3d12_heap_type.md) heap, you must set *InitialResourceState* to [D3D12_RESOURCE_STATE_COPY_DEST](./ne-d3d12-d3d12_resource_states.md).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOptimizedClearValue">
            /// <para>Type: **const [D3D12_CLEAR_VALUE](./ns-d3d12-d3d12_clear_value.md)\***</para>
            /// <para>Specifies a **D3D12_CLEAR_VALUE** structure that describes the default value for a clear color.</para>
            /// <para>*pOptimizedClearValue* specifies a value for which clear operations are most optimal. When the created resource is a texture with either the [D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET](./ne-d3d12-d3d12_resource_flags.md) or **D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL** flags, you should choose the value with which the clear operation will most commonly be called. You can call the clear operation with other values, but those operations won't be as efficient as when the value matches the one passed in to resource creation.</para>
            /// <para>When you use [D3D12_RESOURCE_DIMENSION_BUFFER](./ne-d3d12-d3d12_resource_dimension.md), you must set *pOptimizedClearValue* to `nullptr`.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riidResource">
            /// <para>Type: **REFIID**</para>
            /// <para>A reference to the globally unique identifier (**GUID**) of the resource interface to return in *ppvResource*.</para>
            /// <para>While *riidResource* is most commonly the **GUID** of [ID3D12Resource](./nn-d3d12-id3d12resource.md), it may be the **GUID** of any interface. If the resource object doesn't support the interface for this **GUID**, then creation fails with **E_NOINTERFACE**.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvResource">
            /// <para>Type: **void\*\***</para>
            /// <para>An optional pointer to a memory block that receives the requested interface pointer to the created resource object.</para>
            /// <para>*ppvResource* can be `nullptr`, to enable capability testing. When *ppvResource* is `nullptr`, no object is created, and **S_FALSE** is returned when *pDesc* is valid.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: **[HRESULT](/windows/win32/com/structure-of-com-error-codes)**</para>
            /// <para>If the function succeeds, it returns **S_OK**. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) [error code](/windows/win32/com/com-error-codes-10).</para>
            /// <para>|Return value|Description| |-|-| |E_OUTOFMEMORY|There is insufficient memory to create the resource.|</para>
            /// <para>See [Direct3D 12 return codes](/windows/win32/direct3d12/d3d12-graphics-reference-returnvalues) for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCommittedResource(win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*pHeapProperties, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS HeapFlags, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialResourceState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, global::System.Guid*riidResource, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateCommittedResource_28(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }

            /// <inheritdoc cref = "CreateHeap(win32.Graphics.Direct3D12.D3D12_HEAP_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateHeap(in win32.Graphics.Direct3D12.D3D12_HEAP_DESC pDesc, in global::System.Guid riid, void **ppvHeap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_HEAP_DESC*pDescLocal = &pDesc)
                    {
                        win32.System.Com.HRESULT __result = this.CreateHeap(pDescLocal, riidLocal, ppvHeap);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a heap that can be used with placed resources and reserved resources.</summary>
            /// <param name = "pDesc">
            /// <para>Type: **const [D3D12_HEAP_DESC](./ns-d3d12-d3d12_heap_desc.md)\***</para>
            /// <para>A pointer to a constant **D3D12_HEAP_DESC** structure that describes the heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: **REFIID**</para>
            /// <para>A reference to the globally unique identifier (**GUID**) of the heap interface to return in *ppvHeap*.</para>
            /// <para>While *riidResource* is most commonly the **GUID** of [ID3D12Heap](./nn-d3d12-id3d12heap.md), it may be the **GUID** of any interface. If the resource object doesn't support the interface for this **GUID**, then creation fails with **E_NOINTERFACE**.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvHeap">
            /// <para>Type: **void\*\***</para>
            /// <para>An optional pointer to a memory block that receives the requested interface pointer to the created heap object.</para>
            /// <para>*ppvHeap* can be `nullptr`, to enable capability testing. When *ppvHeap* is `nullptr`, no object is created, and **S_FALSE** is returned when *pDesc* is valid.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: **[HRESULT](/windows/win32/com/structure-of-com-error-codes)**</para>
            /// <para>If the function succeeds, it returns **S_OK**. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) [error code](/windows/win32/com/com-error-codes-10).</para>
            /// <para>|Return value|Description| |-|-| |E_OUTOFMEMORY|There is insufficient memory to create the heap.|</para>
            /// <para>See [Direct3D 12 return codes](/windows/win32/direct3d12/d3d12-graphics-reference-returnvalues) for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createheap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateHeap(win32.Graphics.Direct3D12.D3D12_HEAP_DESC*pDesc, global::System.Guid*riid, [Optional] void **ppvHeap)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateHeap_29(pThis, pDesc, riid, ppvHeap);
            }

            /// <inheritdoc cref = "CreatePlacedResource(win32.Graphics.Direct3D12.ID3D12Heap*, ulong, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreatePlacedResource(win32.Graphics.Direct3D12.ID3D12Heap*pHeap, ulong HeapOffset, in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, in global::System.Guid riid, void **ppvResource)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                        win32.System.Com.HRESULT __result = this.CreatePlacedResource(pHeap, HeapOffset, pDescLocal, InitialState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, riidLocal, ppvResource);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a resource that is placed in a specific heap. Placed resources are the lightest weight resource objects available, and are the fastest to create and destroy.</summary>
            /// <param name = "pHeap">
            /// <para>Type: [in] **<a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12heap">ID3D12Heap</a>***</para>
            /// <para>A pointer to the **ID3D12Heap** interface that represents the heap in which the resource is placed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "HeapOffset">
            /// <para>Type: **<a href = "https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">UINT64</a>**</para>
            /// <para>The offset, in bytes, to the resource. The *HeapOffset* must be a multiple of the resource's alignment, and *HeapOffset* plus the resource size must be smaller than or equal to the heap size. <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-getresourceallocationinfo">**GetResourceAllocationInfo**</a> must be used to understand the sizes of texture resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: [in] **const <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_resource_desc">D3D12_RESOURCE_DESC</a>***</para>
            /// <para>A pointer to a **D3D12_RESOURCE_DESC** structure that describes the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InitialState">
            /// <para>Type: **<a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a>**</para>
            /// <para>The initial state of the resource, as a bitwise-OR'd combination of **D3D12_RESOURCE_STATES** enumeration constants.</para>
            /// <para>When a resource is created together with a **D3D12_HEAP_TYPE_UPLOAD** heap, *InitialState* must be **D3D12_RESOURCE_STATE_GENERIC_READ**. When a resource is created together with a **D3D12_HEAP_TYPE_READBACK** heap, *InitialState* must be **D3D12_RESOURCE_STATE_COPY_DEST**.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOptimizedClearValue">
            /// <para>Type: [in, optional] **const <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_clear_value">D3D12_CLEAR_VALUE</a>***</para>
            /// <para>Specifies a **D3D12_CLEAR_VALUE** that describes the default value for a clear color.</para>
            /// <para>*pOptimizedClearValue* specifies a value for which clear operations are most optimal. When the created resource is a texture with either the **D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET** or **D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL** flags, your application should choose the value that the clear operation will most commonly be called with.</para>
            /// <para>Clear operations can be called with other values, but those operations will not be as efficient as when the value matches the one passed into resource creation.</para>
            /// <para>*pOptimizedClearValue* must be NULL when used with **D3D12_RESOURCE_DIMENSION_BUFFER**.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: **REFIID**</para>
            /// <para>The globally unique identifier (**GUID**) for the resource interface. This is an input parameter.</para>
            /// <para>The **REFIID**, or **GUID**, of the interface to the resource can be obtained by using the `__uuidof` macro. For example, `__uuidof(ID3D12Resource)` gets the **GUID** of the interface to a resource. Although **riid** is, most commonly, the GUID for <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">**ID3D12Resource**</a>, it may be any **GUID** for any interface. If the resource object doesn't support the interface for this **GUID**, then creation fails with **E_NOINTERFACE**.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvResource">
            /// <para>Type: [out, optional] **void****</para>
            /// <para>A pointer to a memory block that receives a pointer to the resource. *ppvResource* can be NULL, to enable capability testing. When *ppvResource* is NULL, no object will be created and S_FALSE will be returned when *pResourceDesc* and other parameters are valid.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: **<a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a>**</para>
            /// <para>This method returns **E_OUTOFMEMORY** if there is insufficient memory to create the resource. See <a href = "/windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePlacedResource(win32.Graphics.Direct3D12.ID3D12Heap*pHeap, ulong HeapOffset, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, global::System.Guid*riid, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreatePlacedResource_30(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }

            /// <inheritdoc cref = "CreateReservedResource(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateReservedResource(in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, in global::System.Guid riid, void **ppvResource)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                        win32.System.Com.HRESULT __result = this.CreateReservedResource(pDescLocal, InitialState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, riidLocal, ppvResource);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a resource that is reserved, and not yet mapped to any pages in a heap.</summary>
            /// <param name = "pDesc">
            /// <para>Type: **const [D3D12_RESOURCE_DESC](./ns-d3d12-d3d12_resource_desc.md)\***</para>
            /// <para>A pointer to a **D3D12_RESOURCE_DESC** structure that describes the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createreservedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InitialState">
            /// <para>Type: **[D3D12_RESOURCE_STATES](./ne-d3d12-d3d12_resource_states.md)**</para>
            /// <para>The initial state of the resource, as a bitwise-OR'd combination of **D3D12_RESOURCE_STATES** enumeration constants.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createreservedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOptimizedClearValue">
            /// <para>Type: **const [D3D12_CLEAR_VALUE](./ns-d3d12-d3d12_clear_value.md)\***</para>
            /// <para>Specifies a **D3D12_CLEAR_VALUE** structure that describes the default value for a clear color.</para>
            /// <para>*pOptimizedClearValue* specifies a value for which clear operations are most optimal. When the created resource is a texture with either the [D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET](./ne-d3d12-d3d12_resource_flags.md) or **D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL** flags, you should choose the value with which the clear operation will most commonly be called. You can call the clear operation with other values, but those operations won't be as efficient as when the value matches the one passed in to resource creation.</para>
            /// <para>When you use [D3D12_RESOURCE_DIMENSION_BUFFER](./ne-d3d12-d3d12_resource_dimension.md), you must set *pOptimizedClearValue* to `nullptr`.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createreservedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: **REFIID**</para>
            /// <para>A reference to the globally unique identifier (**GUID**) of the resource interface to return in *ppvResource*. See **Remarks**.</para>
            /// <para>While *riidResource* is most commonly the **GUID** of [ID3D12Resource](./nn-d3d12-id3d12resource.md), it may be the **GUID** of any interface. If the resource object doesn't support the interface for this **GUID**, then creation fails with **E_NOINTERFACE**.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createreservedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvResource">
            /// <para>Type: **void\*\***</para>
            /// <para>An optional pointer to a memory block that receives the requested interface pointer to the created resource object.</para>
            /// <para>*ppvResource* can be `nullptr`, to enable capability testing. When *ppvResource* is `nullptr`, no object is created, and **S_FALSE** is returned when *pDesc* is valid.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createreservedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: **[HRESULT](/windows/win32/com/structure-of-com-error-codes)**</para>
            /// <para>If the function succeeds, it returns **S_OK**. Otherwise, it returns an [**HRESULT**](/windows/win32/com/structure-of-com-error-codes) [error code](/windows/win32/com/com-error-codes-10).</para>
            /// <para>|Return value|Description| |-|-| |E_OUTOFMEMORY|There is insufficient memory to create the resource.|</para>
            /// <para>See [Direct3D 12 return codes](/windows/win32/direct3d12/d3d12-graphics-reference-returnvalues) for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createreservedresource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateReservedResource(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, global::System.Guid*riid, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateReservedResource_31(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }

            /// <inheritdoc cref = "CreateSharedHandle(win32.Graphics.Direct3D12.ID3D12DeviceChild*, win32.System.SystemServices.SECURITY_ATTRIBUTES*, uint, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.HANDLE*)"/>
            internal unsafe win32.System.Com.HRESULT CreateSharedHandle(win32.Graphics.Direct3D12.ID3D12DeviceChild*pObject, win32.System.SystemServices.SECURITY_ATTRIBUTES? pAttributes, uint Access, string Name, out Microsoft.Win32.SafeHandles.SafeFileHandle pHandle)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.SystemServices.SECURITY_ATTRIBUTES pAttributesLocal = pAttributes.HasValue ? pAttributes.Value : default(win32.System.SystemServices.SECURITY_ATTRIBUTES);
                    win32.System.SystemServices.HANDLE pHandleLocal;
                    win32.System.Com.HRESULT __result = this.CreateSharedHandle(pObject, pAttributes.HasValue ? &pAttributesLocal : null, Access, NameLocal, &pHandleLocal);
                    pHandle = new Microsoft.Win32.SafeHandles.SafeFileHandle(pHandleLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Creates a shared handle to an heap, resource, or fence object.</summary>
            /// <param name = "pObject">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12devicechild">ID3D12DeviceChild</a>*</b> A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12devicechild">ID3D12DeviceChild</a> interface that represents the heap, resource, or fence object to create for sharing. The following interfaces (derived from <b>ID3D12DeviceChild</b>) are supported:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pAttributes">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a>*</b> A pointer to a <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a>structure that contains two separate but related data members: an optional security descriptor, and a <b>Boolean</b>value that determines whether child processes can inherit the returned handle.</para>
            /// <para>Set this parameter to <b>NULL</b> if you want child processes that the application might create to not  inherit  the handle returned by <b>CreateSharedHandle</b>, and if you want the resource that is associated with the returned handle to get a default security descriptor.</para>
            /// <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a <a href = "https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> for the resource. Set this member to <b>NULL</b> if you want the runtime to assign a default security descriptor to the resource that is associated with the returned handle. The ACLs in the default security descriptor for the resource come from the primary or impersonation token of the creator. For more info, see <a href = "https://docs.microsoft.com/windows/desktop/Sync/synchronization-object-security-and-access-rights">Synchronization Object Security and Access Rights</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Access">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
            /// <para>Currently the only value this parameter accepts is GENERIC_ALL.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Name">
            /// <para>Type: <b>LPCWSTR</b> A <b>NULL</b>-terminated <b>UNICODE</b> string that contains the name to associate with the shared heap. The name is limited to MAX_PATH characters. Name comparison is case-sensitive.</para>
            /// <para>If <i>Name</i> matches the name of an existing resource, <b>CreateSharedHandle</b> fails with <a href = "https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NAME_ALREADY_EXISTS</a>. This occurs because these objects share the same namespace.</para>
            /// <para>The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\\). For more information, see <a href = "https://docs.microsoft.com/windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>. Fast user switching is implemented using Terminal Services sessions. Kernel object names must follow the guidelines outlined for Terminal Services so that applications can support multiple users.</para>
            /// <para>The object can be created in a private namespace. For more information, see <a href = "https://docs.microsoft.com/windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pHandle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HANDLE</a>*</b></para>
            /// <para>A pointer to a variable that receives the NT HANDLE value to the resource to share. You can use this handle in calls to access the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the following values:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsharedhandle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSharedHandle(win32.Graphics.Direct3D12.ID3D12DeviceChild*pObject, [Optional] win32.System.SystemServices.SECURITY_ATTRIBUTES*pAttributes, uint Access, win32.System.SystemServices.PCWSTR Name, win32.System.SystemServices.HANDLE*pHandle)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateSharedHandle_32(pThis, pObject, pAttributes, Access, Name, pHandle);
            }

            /// <inheritdoc cref = "OpenSharedHandle(win32.System.SystemServices.HANDLE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT OpenSharedHandle(SafeHandle NTHandle, in global::System.Guid riid, void **ppvObj)
            {
                bool NTHandleAddRef = false;
                try
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.SystemServices.HANDLE NTHandleLocal;
                        if (NTHandle is object)
                        {
                            NTHandle.DangerousAddRef(ref NTHandleAddRef);
                            NTHandleLocal = (win32.System.SystemServices.HANDLE)NTHandle.DangerousGetHandle();
                        }
                        else
                            NTHandleLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.OpenSharedHandle(NTHandleLocal, riidLocal, ppvObj);
                        return __result;
                    }
                }
                finally
                {
                    if (NTHandleAddRef)
                        NTHandle.DangerousRelease();
                }
            }

            /// <summary>Opens a handle for shared resources, shared heaps, and shared fences, by using HANDLE and REFIID.</summary>
            /// <param name = "NTHandle">
            /// <para>Type: <b>HANDLE</b></para>
            /// <para>The handle that was output by the call to <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-createsharedhandle">ID3D12Device::CreateSharedHandle</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b> The globally unique identifier (<b>GUID</b>) for one of the following interfaces:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvObj">
            /// <para>Type: <b>void**</b> A pointer to a memory block that receives a pointer to one of the following interfaces:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT OpenSharedHandle(win32.System.SystemServices.HANDLE NTHandle, global::System.Guid*riid, [Optional] void **ppvObj)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->OpenSharedHandle_33(pThis, NTHandle, riid, ppvObj);
            }

            /// <inheritdoc cref = "OpenSharedHandleByName(win32.System.SystemServices.PCWSTR, uint, win32.System.SystemServices.HANDLE*)"/>
            internal unsafe win32.System.Com.HRESULT OpenSharedHandleByName(string Name, uint Access, out Microsoft.Win32.SafeHandles.SafeFileHandle pNTHandle)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.SystemServices.HANDLE pNTHandleLocal;
                    win32.System.Com.HRESULT __result = this.OpenSharedHandleByName(NameLocal, Access, &pNTHandleLocal);
                    pNTHandle = new Microsoft.Win32.SafeHandles.SafeFileHandle(pNTHandleLocal, ownsHandle: true);
                    return __result;
                }
            }

            /// <summary>Opens a handle for shared resources, shared heaps, and shared fences, by using Name and Access.</summary>
            /// <param name = "Name">
            /// <para>Type: <b>LPCWSTR</b></para>
            /// <para>The name that was optionally passed as the <i>Name</i> parameter in the call to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createsharedhandle">ID3D12Device::CreateSharedHandle</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandlebyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Access">
            /// <para>Type: <b>DWORD</b></para>
            /// <para>The access level that was specified in the <i>Access</i> parameter in the call to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createsharedhandle">ID3D12Device::CreateSharedHandle</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandlebyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNTHandle">
            /// <para>Type: <b>HANDLE*</b></para>
            /// <para>Pointer to the shared handle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandlebyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandlebyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT OpenSharedHandleByName(win32.System.SystemServices.PCWSTR Name, uint Access, win32.System.SystemServices.HANDLE*pNTHandle)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->OpenSharedHandleByName_34(pThis, Name, Access, pNTHandle);
            }

            /// <summary>Makes objects resident for the device.</summary>
            /// <param name = "NumObjects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of objects  in the <i>ppObjects</i> array to make resident for the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-makeresident#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppObjects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a>*</b> A pointer to a memory block that contains an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a> interface pointers for the objects.</para>
            /// <para>Even though most D3D12 objects inherit from <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a>, residency changes are only supported on the following objects: Descriptor Heaps, Heaps, Committed Resources, and Query Heaps</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-makeresident#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-makeresident">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT MakeResident(uint NumObjects, win32.Graphics.Direct3D12.ID3D12Pageable**ppObjects)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->MakeResident_35(pThis, NumObjects, ppObjects);
            }

            /// <summary>Enables the page-out of data, which precludes GPU access of that data.</summary>
            /// <param name = "NumObjects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of objects in the <i>ppObjects</i> array to evict from the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-evict#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppObjects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a>*</b> A pointer to a memory block that contains an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a> interface pointers for the objects.</para>
            /// <para>Even though most D3D12 objects inherit from <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a>, residency changes are only supported on the following objects: Descriptor Heaps, Heaps, Committed Resources, and Query Heaps</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-evict#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-evict">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Evict(uint NumObjects, win32.Graphics.Direct3D12.ID3D12Pageable**ppObjects)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->Evict_36(pThis, NumObjects, ppObjects);
            }

            /// <inheritdoc cref = "CreateFence(ulong, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateFence(ulong InitialValue, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS Flags, in global::System.Guid riid, out void *ppFence)
            {
                fixed (void **ppFenceLocal = &ppFence)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateFence(InitialValue, Flags, riidLocal, ppFenceLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a fence object.</summary>
            /// <param name = "InitialValue">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT64</a></b></para>
            /// <para>The initial value for the fence.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createfence#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Flags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_fence_flags">D3D12_FENCE_FLAGS</a></b></para>
            /// <para>A combination of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_fence_flags">D3D12_FENCE_FLAGS</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for the fence.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createfence#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the fence interface (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a>). The <b>REFIID</b>, or <b>GUID</b>, of the interface to the fence can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D12Fence) will get the <b>GUID</b> of the interface to a fence.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createfence#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppFence">
            /// <para>Type: <b>void**</b></para>
            /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a> interface that is used to access the fence.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createfence#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
            /// <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createfence">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateFence(ulong InitialValue, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS Flags, global::System.Guid*riid, void **ppFence)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateFence_37(pThis, InitialValue, Flags, riid, ppFence);
            }

            /// <summary>Gets the reason that the device was removed.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns the reason that the device was removed.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getdeviceremovedreason">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetDeviceRemovedReason()
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->GetDeviceRemovedReason_38(pThis);
            }

            /// <inheritdoc cref = "GetCopyableFootprints(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, uint, uint, ulong, win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, uint *, ulong *, ulong *)"/>
            internal unsafe void GetCopyableFootprints(in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pResourceDesc, uint FirstSubresource, ulong BaseOffset, Span<win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT> pLayouts, Span<uint> pNumRows, Span<ulong> pRowSizeInBytes, ulong *pTotalBytes)
            {
                fixed (ulong *pRowSizeInBytesLocal = pRowSizeInBytes)
                {
                    fixed (uint *pNumRowsLocal = pNumRows)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*pLayoutsLocal = pLayouts)
                        {
                            fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescLocal = &pResourceDesc)
                            {
                                if (pLayouts.Length != pNumRows.Length)
                                    throw new ArgumentException();
                                if (pLayouts.Length != pRowSizeInBytes.Length)
                                    throw new ArgumentException();
                                this.GetCopyableFootprints(pResourceDescLocal, FirstSubresource, (uint)pRowSizeInBytes.Length, BaseOffset, pLayoutsLocal, pNumRowsLocal, pRowSizeInBytesLocal, pTotalBytes);
                            }
                        }
                    }
                }
            }

            /// <summary>Gets a resource layout that can be copied. Helps the app fill-in D3D12_PLACED_SUBRESOURCE_FOOTPRINT and D3D12_SUBRESOURCE_FOOTPRINT when suballocating space in upload heaps.</summary>
            /// <param name = "pResourceDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_resource_desc">D3D12_RESOURCE_DESC</a>*</b></para>
            /// <para>A description of the resource, as a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_resource_desc">D3D12_RESOURCE_DESC</a> structure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "FirstSubresource">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Index of the first subresource in the resource. The range of valid values is 0 to D3D12_REQ_SUBRESOURCES.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSubresources">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of subresources in the resource.  The range of valid values is 0 to (D3D12_REQ_SUBRESOURCES - <i>FirstSubresource</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>The offset, in bytes, to the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pLayouts">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_placed_subresource_footprint">D3D12_PLACED_SUBRESOURCE_FOOTPRINT</a>*</b></para>
            /// <para>A pointer to an array (of length <i>NumSubresources</i>) of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_placed_subresource_footprint">D3D12_PLACED_SUBRESOURCE_FOOTPRINT</a> structures, to be filled with the description and placement of each subresource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumRows">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer to an array (of length <i>NumSubresources</i>) of integer  variables, to be filled with the number of rows for each subresource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRowSizeInBytes">
            /// <para>Type: <b>UINT64*</b> A pointer to an array (of length <i>NumSubresources</i>) of integer variables, each entry to be filled with the unpadded size in bytes of a row, of each subresource.</para>
            /// <para>For example, if a Texture2D resource has a width of 32 and bytes per pixel of 4, then <i>pRowSizeInBytes</i> returns 128. <i>pRowSizeInBytes</i> should not be confused with <b>row pitch</b>, as examining <i>pLayouts</i> and getting the row pitch from that will give you 256 as it is aligned to D3D12_TEXTURE_DATA_PITCH_ALIGNMENT.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pTotalBytes">
            /// <para>Type: <b>UINT64*</b></para>
            /// <para>A pointer to an integer variable, to be filled with the total size, in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This routine assists the application in filling out <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_placed_subresource_footprint">D3D12_PLACED_SUBRESOURCE_FOOTPRINT</a> and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_subresource_footprint">D3D12_SUBRESOURCE_FOOTPRINT</a> structures, when suballocating space in upload heaps. The resulting structures are GPU adapter-agnostic, meaning that the values will not vary from one GPU adapter to the next. <b>GetCopyableFootprints</b> uses specified details about resource formats, texture layouts, and alignment requirements (from the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_resource_desc">D3D12_RESOURCE_DESC</a> structure)  to fill out the subresource structures. Applications have access to all these details, so this method, or a variation of it, could be  written as part of the app.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetCopyableFootprints(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, [Optional] win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*pLayouts, [Optional] uint *pNumRows, [Optional] ulong *pRowSizeInBytes, [Optional] ulong *pTotalBytes)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->GetCopyableFootprints_39(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }

            /// <inheritdoc cref = "CreateQueryHeap(win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateQueryHeap(in win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC pDesc, in global::System.Guid riid, void **ppvHeap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*pDescLocal = &pDesc)
                    {
                        win32.System.Com.HRESULT __result = this.CreateQueryHeap(pDescLocal, riidLocal, ppvHeap);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a query heap. A query heap contains an array of queries.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_query_heap_desc">D3D12_QUERY_HEAP_DESC</a>*</b></para>
            /// <para>Specifies the query heap in a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_query_heap_desc">D3D12_QUERY_HEAP_DESC</a> structure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createqueryheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>Specifies a REFIID that uniquely identifies the heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createqueryheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvHeap">
            /// <para>Type: <b>void**</b></para>
            /// <para>Specifies a pointer to the heap, that will be returned on successful completion of the method. <i>ppvHeap</i> can be NULL, to enable capability testing. When <i>ppvHeap</i> is NULL, no object will be created and S_FALSE will be returned when <i>pDesc</i> is valid.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createqueryheap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createqueryheap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateQueryHeap(win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*pDesc, global::System.Guid*riid, [Optional] void **ppvHeap)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateQueryHeap_40(pThis, pDesc, riid, ppvHeap);
            }

            /// <summary>A development-time aid for certain types of profiling and experimental prototyping.</summary>
            /// <param name = "Enable">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Specifies a BOOL that turns the stable power state on or off.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-setstablepowerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-setstablepowerstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetStablePowerState(win32.System.SystemServices.BOOL Enable)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->SetStablePowerState_41(pThis, Enable);
            }

            /// <inheritdoc cref = "CreateCommandSignature(win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*, win32.Graphics.Direct3D12.ID3D12RootSignature*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandSignature(in win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC pDesc, win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature, in global::System.Guid riid, void **ppvCommandSignature)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*pDescLocal = &pDesc)
                    {
                        win32.System.Com.HRESULT __result = this.CreateCommandSignature(pDescLocal, pRootSignature, riidLocal, ppvCommandSignature);
                        return __result;
                    }
                }
            }

            /// <summary>This method creates a command signature.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_command_signature_desc">D3D12_COMMAND_SIGNATURE_DESC</a>*</b></para>
            /// <para>Describes the command signature to be created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_command_signature_desc">D3D12_COMMAND_SIGNATURE_DESC</a> structure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRootSignature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a>*</b> Specifies the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> that the command signature applies to.</para>
            /// <para>The root signature is required if any of the commands in the signature will update bindings on the pipeline. If the only command present is a draw or dispatch, the root signature parameter can be set to NULL.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the command signature interface (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandsignature">ID3D12CommandSignature</a>). The <b>REFIID</b>, or <b>GUID</b>, of the interface to the command signature can be obtained by using the __uuidof() macro. For example, __uuidof(<b>ID3D12CommandSignature</b>) will get the <b>GUID</b> of the interface to a command signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppvCommandSignature">
            /// <para>Type: <b>void**</b></para>
            /// <para>Specifies a pointer, that on successful completion of the method will point to the created command signature (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandsignature">ID3D12CommandSignature</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandsignature">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCommandSignature(win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*pDesc, [Optional] win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature, global::System.Guid*riid, [Optional] void **ppvCommandSignature)
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->CreateCommandSignature_42(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }

            /// <summary>Gets info about how a tiled resource is broken into tiles.</summary>
            /// <param name = "pTiledResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>Specifies a tiled <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>  to get info about.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumTilesForEntireResource">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer to a variable that receives the number of tiles needed to store the entire tiled resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pPackedMipDesc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_packed_mip_info">D3D12_PACKED_MIP_INFO</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_packed_mip_info">D3D12_PACKED_MIP_INFO</a> structure that <b>GetResourceTiling</b> fills with info about how the tiled resource's mipmaps are packed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pStandardTileShapeForNonPackedMips">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_shape">D3D12_TILE_SHAPE</a>*</b></para>
            /// <para>Specifies a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_shape">D3D12_TILE_SHAPE</a> structure that <b>GetResourceTiling</b> fills with info about the tile shape. This is info about how pixels fit in the tiles, independent of tiled resource's dimensions, not including packed mipmaps. If the entire tiled resource is packed, this parameter is meaningless because the tiled resource has no defined layout for packed mipmaps. In this situation, <b>GetResourceTiling</b> sets the members of D3D12_TILE_SHAPE to zeros.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumSubresourceTilings">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer to a variable that contains the number of tiles in the subresource. On input, this is the number of subresources to query tilings for; on output, this is the number that was actually retrieved at <i>pSubresourceTilingsForNonPackedMips</i> (clamped to what's available).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "FirstSubresourceTilingToGet">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of the first subresource tile to get. <b>GetResourceTiling</b> ignores this parameter if the number that <i>pNumSubresourceTilings</i> points to is 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSubresourceTilingsForNonPackedMips">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_subresource_tiling">D3D12_SUBRESOURCE_TILING</a>*</b></para>
            /// <para>Specifies a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_subresource_tiling">D3D12_SUBRESOURCE_TILING</a> structure that <b>GetResourceTiling</b> fills with info about subresource tiles. If subresource tiles are part of packed mipmaps, <b>GetResourceTiling</b> sets the members of D3D12_SUBRESOURCE_TILING to zeros, except the <i>StartTileIndexInOverallResource</i> member, which <b>GetResourceTiling</b> sets to D3D12_PACKED_TILE (0xffffffff). The D3D12_PACKED_TILE constant indicates that the whole <b>D3D12_SUBRESOURCE_TILING</b> structure is meaningless for this situation, and the info that the <i>pPackedMipDesc</i> parameter points to applies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To estimate the total resource size of textures needed when calculating heap sizes and calling <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createplacedresource">CreatePlacedResource</a>, use <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-getresourceallocationinfo">GetResourceAllocationInfo</a> instead of <b>GetResourceTiling</b>. <b>GetResourceTiling</b> cannot be used for this.</para>
            /// <para>For more information on tiled resources, refer to <a href = "https://docs.microsoft.com/windows/desktop/direct3d12/volume-tiled-resources">Volume Tiled Resources</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetResourceTiling(win32.Graphics.Direct3D12.ID3D12Resource*pTiledResource, [Optional] uint *pNumTilesForEntireResource, [Optional] win32.Graphics.Direct3D12.D3D12_PACKED_MIP_INFO*pPackedMipDesc, [Optional] win32.Graphics.Direct3D12.D3D12_TILE_SHAPE*pStandardTileShapeForNonPackedMips, [Optional] uint *pNumSubresourceTilings, uint FirstSubresourceTilingToGet, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_TILING*pSubresourceTilingsForNonPackedMips)
            {
                fixed (ID3D12Device*pThis = &this)
                    lpVtbl->GetResourceTiling_43(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }

            /// <summary>Gets a locally unique identifier for the current device (adapter).</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">LUID</a></b></para>
            /// <para>The locally unique identifier for the adapter.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getadapterluid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.LUID GetAdapterLuid()
            {
                fixed (ID3D12Device*pThis = &this)
                    return lpVtbl->GetAdapterLuid_44(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_6;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.System.SystemServices.PCWSTR, win32.System.Com.HRESULT>SetName_7;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint>GetNodeCount_8;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandQueue_9;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandAllocator_10;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateGraphicsPipelineState_11;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateComputePipelineState_12;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, win32.Graphics.Direct3D12.ID3D12CommandAllocator*, win32.Graphics.Direct3D12.ID3D12PipelineState*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandList_13;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_FEATURE, void *, uint, win32.System.Com.HRESULT>CheckFeatureSupport_14;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateDescriptorHeap_15;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE, uint>GetDescriptorHandleIncrementSize_16;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, void *, nuint, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateRootSignature_17;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateConstantBufferView_18;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateShaderResourceView_19;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateUnorderedAccessView_20;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateRenderTargetView_21;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateDepthStencilView_22;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateSampler_23;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE, void>CopyDescriptors_24;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE, void>CopyDescriptorsSimple_25;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO>GetResourceAllocationInfo_26;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, win32.Graphics.Direct3D12.D3D12_HEAP_TYPE, win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES>GetCustomHeapProperties_27;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommittedResource_28;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_HEAP_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateHeap_29;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.ID3D12Heap*, ulong, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreatePlacedResource_30;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateReservedResource_31;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.ID3D12DeviceChild*, win32.System.SystemServices.SECURITY_ATTRIBUTES*, uint, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.HANDLE*, win32.System.Com.HRESULT>CreateSharedHandle_32;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.System.SystemServices.HANDLE, global::System.Guid*, void **, win32.System.Com.HRESULT>OpenSharedHandle_33;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.System.SystemServices.PCWSTR, uint, win32.System.SystemServices.HANDLE*, win32.System.Com.HRESULT>OpenSharedHandleByName_34;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, win32.Graphics.Direct3D12.ID3D12Pageable**, win32.System.Com.HRESULT>MakeResident_35;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, uint, win32.Graphics.Direct3D12.ID3D12Pageable**, win32.System.Com.HRESULT>Evict_36;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, ulong, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateFence_37;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.System.Com.HRESULT>GetDeviceRemovedReason_38;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, uint, uint, ulong, win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, uint *, ulong *, ulong *, void>GetCopyableFootprints_39;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateQueryHeap_40;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetStablePowerState_41;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*, win32.Graphics.Direct3D12.ID3D12RootSignature*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandSignature_42;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.Graphics.Direct3D12.ID3D12Resource*, uint *, win32.Graphics.Direct3D12.D3D12_PACKED_MIP_INFO*, win32.Graphics.Direct3D12.D3D12_TILE_SHAPE*, uint *, uint, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_TILING*, void>GetResourceTiling_43;
                internal delegate *unmanaged[Stdcall]<ID3D12Device*, win32.System.SystemServices.LUID>GetAdapterLuid_44;
            }

            private Vtbl*lpVtbl;
        }
    }
}