// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("C64226A8-9201-46AF-B4CC-53FB9FF7414F")]
        internal unsafe struct ID3D12PipelineLibrary
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->GetPrivateData_4(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->SetPrivateData_5(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_6(pThis, guid, pData);
            }

            /// <inheritdoc cref = "SetName(win32.System.SystemServices.PCWSTR)"/>
            internal unsafe win32.System.Com.HRESULT SetName(string Name)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.Com.HRESULT __result = this.SetName(NameLocal);
                    return __result;
                }
            }

            internal win32.System.Com.HRESULT SetName(win32.System.SystemServices.PCWSTR Name)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->SetName_7(pThis, Name);
            }

            /// <inheritdoc cref = "GetDevice(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetDevice(in global::System.Guid riid, void **ppvDevice)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.System.Com.HRESULT __result = this.GetDevice(riidLocal, ppvDevice);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDevice(global::System.Guid*riid, [Optional] void **ppvDevice)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->GetDevice_8(pThis, riid, ppvDevice);
            }

            /// <inheritdoc cref = "StorePipeline(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct3D12.ID3D12PipelineState*)"/>
            internal unsafe win32.System.Com.HRESULT StorePipeline(string pName, win32.Graphics.Direct3D12.ID3D12PipelineState*pPipeline)
            {
                fixed (char *pNameLocal = pName)
                {
                    win32.System.Com.HRESULT __result = this.StorePipeline(pNameLocal, pPipeline);
                    return __result;
                }
            }

            /// <summary>Adds the input PSO to an internal database with the corresponding name.</summary>
            /// <param name = "pName">
            /// <para>Type: <b>LPCWSTR</b></para>
            /// <para>Specifies a unique name for the library. Overwriting is not supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-storepipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pPipeline">
            /// <para>Type: <b>ID3D12PipelineState*</b></para>
            /// <para>Specifies the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> to add.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-storepipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code, including E_INVALIDARG if the name already exists, E_OUTOFMEMORY if unable to allocate storage in the library.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-storepipeline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT StorePipeline(win32.System.SystemServices.PCWSTR pName, win32.Graphics.Direct3D12.ID3D12PipelineState*pPipeline)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->StorePipeline_9(pThis, pName, pPipeline);
            }

            /// <inheritdoc cref = "LoadGraphicsPipeline(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT LoadGraphicsPipeline(string pName, in win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC pDesc, in global::System.Guid riid, out void *ppPipelineState)
            {
                fixed (void **ppPipelineStateLocal = &ppPipelineState)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*pDescLocal = &pDesc)
                        {
                            fixed (char *pNameLocal = pName)
                            {
                                win32.System.Com.HRESULT __result = this.LoadGraphicsPipeline(pNameLocal, pDescLocal, riidLocal, ppPipelineStateLocal);
                                return __result;
                            }
                        }
                    }
                }
            }

            /// <summary>Retrieves the requested PSO from the library.</summary>
            /// <param name = "pName">
            /// <para>Type: <b>LPCWSTR</b></para>
            /// <para>The unique name of the PSO.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadgraphicspipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc">D3D12_GRAPHICS_PIPELINE_STATE_DESC</a>*</b></para>
            /// <para>Specifies a description of the required PSO in a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc">D3D12_GRAPHICS_PIPELINE_STATE_DESC</a> structure. This input description is matched against the data in the current library database, and stored in order to prevent duplication of PSO contents.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadgraphicspipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>Specifies a REFIID for the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object. Typically set this, and the following parameter, with the macro <c>IID_PPV_ARGS(&amp;PSO1)</c>, where <i>PSO1</i> is the name of the object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadgraphicspipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPipelineState">
            /// <para>Type: <b>void**</b></para>
            /// <para>Specifies a pointer that will reference the returned PSO.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadgraphicspipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code, which can include E_INVALIDARG if the name doesn’t exist, or if the input description doesn’t match the data in the library, and E_OUTOFMEMORY if unable to allocate the return PSO.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadgraphicspipeline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT LoadGraphicsPipeline(win32.System.SystemServices.PCWSTR pName, win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*pDesc, global::System.Guid*riid, void **ppPipelineState)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->LoadGraphicsPipeline_10(pThis, pName, pDesc, riid, ppPipelineState);
            }

            /// <inheritdoc cref = "LoadComputePipeline(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT LoadComputePipeline(string pName, in win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC pDesc, in global::System.Guid riid, out void *ppPipelineState)
            {
                fixed (void **ppPipelineStateLocal = &ppPipelineState)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*pDescLocal = &pDesc)
                        {
                            fixed (char *pNameLocal = pName)
                            {
                                win32.System.Com.HRESULT __result = this.LoadComputePipeline(pNameLocal, pDescLocal, riidLocal, ppPipelineStateLocal);
                                return __result;
                            }
                        }
                    }
                }
            }

            /// <summary>Retrieves the requested PSO from the library. The input desc is matched against the data in the current library database, and remembered in order to prevent duplication of PSO contents.</summary>
            /// <param name = "pName">
            /// <para>Type: <b>LPCWSTR</b></para>
            /// <para>The unique name of the PSO.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadcomputepipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc">D3D12_COMPUTE_PIPELINE_STATE_DESC</a>*</b></para>
            /// <para>Specifies a description of the required PSO in a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc">D3D12_COMPUTE_PIPELINE_STATE_DESC</a> structure. This input description is matched against the data in the current library database, and stored in order to prevent duplication of PSO contents.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadcomputepipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>Specifies a REFIID for the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object. Typically set this, and the following parameter, with the macro <c>IID_PPV_ARGS(&amp;PSO1)</c>, where <i>PSO1</i> is the name of the object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadcomputepipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPipelineState">
            /// <para>Type: <b>void**</b></para>
            /// <para>Specifies a pointer that will reference the returned PSO.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadcomputepipeline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code, which can include E_INVALIDARG if the name doesn’t exist, or if the input description doesn’t match the data in the library, and E_OUTOFMEMORY if unable to allocate the return PSO.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadcomputepipeline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT LoadComputePipeline(win32.System.SystemServices.PCWSTR pName, win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*pDesc, global::System.Guid*riid, void **ppPipelineState)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->LoadComputePipeline_11(pThis, pName, pDesc, riid, ppPipelineState);
            }

            /// <summary>Returns the amount of memory required to serialize the current contents of the database.</summary>
            /// <returns>
            /// <para>Type: <b>SIZE_T</b></para>
            /// <para>This method returns a SIZE_T object, containing the size required in bytes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-getserializedsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal nuint GetSerializedSize()
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->GetSerializedSize_12(pThis);
            }

            /// <summary>Writes the contents of the library to the provided memory, to be provided back to the runtime at a later time.</summary>
            /// <param name = "pData">
            /// <para>Type: <b>void*</b></para>
            /// <para>Specifies a pointer to the data. This memory must be readable and writeable up to the input size. This data can be saved and provided to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device1-createpipelinelibrary">CreatePipelineLibrary</a> at a later time, including future instances of this or other processes. The data becomes invalidated if the runtime or driver is updated, and is not portable to other hardware or devices.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-serialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DataSizeInBytes">
            /// <para>Type: <b>SIZE_T</b></para>
            /// <para>The size provided must be at least the size returned from <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12pipelinelibrary-getserializedsize">GetSerializedSize</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-serialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code, including E_INVALIDARG if the buffer provided isn’t big enough.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-serialize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Serialize(void *pData, nuint DataSizeInBytes)
            {
                fixed (ID3D12PipelineLibrary*pThis = &this)
                    return lpVtbl->Serialize_13(pThis, pData, DataSizeInBytes);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_6;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, win32.System.SystemServices.PCWSTR, win32.System.Com.HRESULT>SetName_7;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetDevice_8;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct3D12.ID3D12PipelineState*, win32.System.Com.HRESULT>StorePipeline_9;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>LoadGraphicsPipeline_10;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>LoadComputePipeline_11;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, nuint>GetSerializedSize_12;
                internal delegate *unmanaged[Stdcall]<ID3D12PipelineLibrary*, void *, nuint, win32.System.Com.HRESULT>Serialize_13;
            }

            private Vtbl*lpVtbl;
        }
    }
}