// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("0742A90B-C387-483F-B946-30A7E4E61458")]
        internal unsafe struct ID3D12InfoQueue
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Set the maximum number of messages that can be added to the message queue.</summary>
            /// <param name = "MessageCountLimit">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Maximum number of messages that can be added to the message queue. -1 means no limit.</para>
            /// <para>When the number of messages in the message queue has reached the maximum limit, new messages coming in will push old messages out.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setmessagecountlimit#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setmessagecountlimit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetMessageCountLimit(ulong MessageCountLimit)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->SetMessageCountLimit_4(pThis, MessageCountLimit);
            }

            /// <summary>Clear all messages from the message queue.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-clearstoredmessages">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearStoredMessages()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    lpVtbl->ClearStoredMessages_5(pThis);
            }

            /// <inheritdoc cref = "GetMessage(ulong, win32.Graphics.Direct3D12.D3D12_MESSAGE*, nuint*)"/>
            internal unsafe win32.System.Com.HRESULT GetMessage(ulong MessageIndex, win32.Graphics.Direct3D12.D3D12_MESSAGE*pMessage, ref nuint pMessageByteLength)
            {
                fixed (nuint*pMessageByteLengthLocal = &pMessageByteLength)
                {
                    win32.System.Com.HRESULT __result = this.GetMessage(MessageIndex, pMessage, pMessageByteLengthLocal);
                    return __result;
                }
            }

            /// <summary>Get a message from the message queue.</summary>
            /// <param name = "MessageIndex">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Index into message queue after an optional retrieval filter has been applied. This can be between 0 and the number of messages in the message queue that pass through the retrieval filter (which can be obtained with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnumstoredmessagesallowedbyretrievalfilter">GetNumStoredMessagesAllowedByRetrievalFilter</a>). 0 is the message at the front of the message queue.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pMessage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_message">D3D12_MESSAGE</a>*</b></para>
            /// <para>Returned message.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pMessageByteLength">
            /// <para>Type: <b>SIZE_T*</b></para>
            /// <para>Size of <i>pMessage</i> in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMessage(ulong MessageIndex, [Optional] win32.Graphics.Direct3D12.D3D12_MESSAGE*pMessage, nuint*pMessageByteLength)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetMessage_6(pThis, MessageIndex, pMessage, pMessageByteLength);
            }

            /// <summary>Get the number of messages that were allowed to pass through a storage filter.</summary>
            /// <returns>
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Number of messages allowed by a storage filter.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnummessagesallowedbystoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumMessagesAllowedByStorageFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetNumMessagesAllowedByStorageFilter_7(pThis);
            }

            /// <summary>Get the number of messages that were denied passage through a storage filter.</summary>
            /// <returns>
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Number of messages denied by a storage filter.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnummessagesdeniedbystoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumMessagesDeniedByStorageFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetNumMessagesDeniedByStorageFilter_8(pThis);
            }

            /// <summary>Get the number of messages currently stored in the message queue.</summary>
            /// <returns>
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Number of messages currently stored in the message queue.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnumstoredmessages">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumStoredMessages()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetNumStoredMessages_9(pThis);
            }

            /// <summary>Get the number of messages that are able to pass through a retrieval filter.</summary>
            /// <returns>
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Number of messages allowed by a retrieval filter.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnumstoredmessagesallowedbyretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumStoredMessagesAllowedByRetrievalFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetNumStoredMessagesAllowedByRetrievalFilter_10(pThis);
            }

            /// <summary>Get the number of messages that were discarded due to the message count limit.</summary>
            /// <returns>
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Number of messages discarded.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnummessagesdiscardedbymessagecountlimit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetNumMessagesDiscardedByMessageCountLimit()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetNumMessagesDiscardedByMessageCountLimit_11(pThis);
            }

            /// <summary>Get the maximum number of messages that can be added to the message queue.</summary>
            /// <returns>
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Maximum number of messages that can be added to the queue. -1 means no limit.</para>
            /// <para>When the number of messages in the message queue has reached the maximum limit, new messages coming in will push old messages out.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmessagecountlimit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal ulong GetMessageCountLimit()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetMessageCountLimit_12(pThis);
            }

            /// <inheritdoc cref = "AddStorageFilterEntries(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT AddStorageFilterEntries(in win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.AddStorageFilterEntries(pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Add storage filters to the top of the storage-filter stack.</summary>
            /// <param name = "pFilter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter">D3D12_INFO_QUEUE_FILTER</a>*</b></para>
            /// <para>Array of storage filters.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addstoragefilterentries#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addstoragefilterentries">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AddStorageFilterEntries(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->AddStorageFilterEntries_13(pThis, pFilter);
            }

            /// <inheritdoc cref = "GetStorageFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, nuint*)"/>
            internal unsafe win32.System.Com.HRESULT GetStorageFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter, ref nuint pFilterByteLength)
            {
                fixed (nuint*pFilterByteLengthLocal = &pFilterByteLength)
                {
                    win32.System.Com.HRESULT __result = this.GetStorageFilter(pFilter, pFilterByteLengthLocal);
                    return __result;
                }
            }

            /// <summary>Get the storage filter at the top of the storage-filter stack.</summary>
            /// <param name = "pFilter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter">D3D12_INFO_QUEUE_FILTER</a>*</b></para>
            /// <para>Storage filter at the top of the storage-filter stack.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getstoragefilter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFilterByteLength">
            /// <para>Type: <b>SIZE_T*</b></para>
            /// <para>Size of the storage filter in bytes. If <i>pFilter</i> is NULL, the size of the storage filter will be output to this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getstoragefilter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetStorageFilter([Optional] win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter, nuint*pFilterByteLength)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetStorageFilter_14(pThis, pFilter, pFilterByteLength);
            }

            /// <summary>Remove a storage filter from the top of the storage-filter stack.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-clearstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearStorageFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    lpVtbl->ClearStorageFilter_15(pThis);
            }

            /// <summary>Push an empty storage filter onto the storage-filter stack.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushemptystoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushEmptyStorageFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->PushEmptyStorageFilter_16(pThis);
            }

            /// <summary>Push a copy of storage filter currently on the top of the storage-filter stack onto the storage-filter stack.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushcopyofstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushCopyOfStorageFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->PushCopyOfStorageFilter_17(pThis);
            }

            /// <inheritdoc cref = "PushStorageFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT PushStorageFilter(in win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.PushStorageFilter(pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Push a storage filter onto the storage-filter stack.</summary>
            /// <param name = "pFilter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter">D3D12_INFO_QUEUE_FILTER</a>*</b></para>
            /// <para>Pointer to a storage filter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushstoragefilter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PushStorageFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->PushStorageFilter_18(pThis, pFilter);
            }

            /// <summary>Pop a storage filter from the top of the storage-filter stack.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-popstoragefilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void PopStorageFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    lpVtbl->PopStorageFilter_19(pThis);
            }

            /// <summary>Get the size of the storage-filter stack in bytes.</summary>
            /// <returns>
            /// <para>Type: <b>UINT</b></para>
            /// <para>Size of the storage-filter stack in bytes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getstoragefilterstacksize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetStorageFilterStackSize()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetStorageFilterStackSize_20(pThis);
            }

            /// <inheritdoc cref = "AddRetrievalFilterEntries(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT AddRetrievalFilterEntries(in win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.AddRetrievalFilterEntries(pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Add storage filters to the top of the retrieval-filter stack.</summary>
            /// <param name = "pFilter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter">D3D12_INFO_QUEUE_FILTER</a>*</b></para>
            /// <para>Array of retrieval filters.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addretrievalfilterentries#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addretrievalfilterentries">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AddRetrievalFilterEntries(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->AddRetrievalFilterEntries_21(pThis, pFilter);
            }

            /// <inheritdoc cref = "GetRetrievalFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, nuint*)"/>
            internal unsafe win32.System.Com.HRESULT GetRetrievalFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter, ref nuint pFilterByteLength)
            {
                fixed (nuint*pFilterByteLengthLocal = &pFilterByteLength)
                {
                    win32.System.Com.HRESULT __result = this.GetRetrievalFilter(pFilter, pFilterByteLengthLocal);
                    return __result;
                }
            }

            /// <summary>Get the retrieval filter at the top of the retrieval-filter stack.</summary>
            /// <param name = "pFilter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter">D3D12_INFO_QUEUE_FILTER</a>*</b></para>
            /// <para>Retrieval filter at the top of the retrieval-filter stack.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getretrievalfilter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFilterByteLength">
            /// <para>Type: <b>SIZE_T*</b></para>
            /// <para>Size of the retrieval filter in bytes. If <i>pFilter</i> is NULL, the size of the retrieval filter will be output to this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getretrievalfilter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetRetrievalFilter([Optional] win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter, nuint*pFilterByteLength)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetRetrievalFilter_22(pThis, pFilter, pFilterByteLength);
            }

            /// <summary>Remove a retrieval filter from the top of the retrieval-filter stack.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-clearretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearRetrievalFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    lpVtbl->ClearRetrievalFilter_23(pThis);
            }

            /// <summary>Push an empty retrieval filter onto the retrieval-filter stack.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushemptyretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushEmptyRetrievalFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->PushEmptyRetrievalFilter_24(pThis);
            }

            /// <summary>Push a copy of retrieval filter currently on the top of the retrieval-filter stack onto the retrieval-filter stack.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushcopyofretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PushCopyOfRetrievalFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->PushCopyOfRetrievalFilter_25(pThis);
            }

            /// <inheritdoc cref = "PushRetrievalFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*)"/>
            internal unsafe win32.System.Com.HRESULT PushRetrievalFilter(in win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER pFilter)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilterLocal = &pFilter)
                {
                    win32.System.Com.HRESULT __result = this.PushRetrievalFilter(pFilterLocal);
                    return __result;
                }
            }

            /// <summary>Push a retrieval filter onto the retrieval-filter stack.</summary>
            /// <param name = "pFilter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter">D3D12_INFO_QUEUE_FILTER</a>*</b></para>
            /// <para>Pointer to a retrieval filter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushretrievalfilter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PushRetrievalFilter(win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*pFilter)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->PushRetrievalFilter_26(pThis, pFilter);
            }

            /// <summary>Pop a retrieval filter from the top of the retrieval-filter stack.</summary>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-popretrievalfilter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void PopRetrievalFilter()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    lpVtbl->PopRetrievalFilter_27(pThis);
            }

            /// <summary>Get the size of the retrieval-filter stack in bytes.</summary>
            /// <returns>
            /// <para>Type: <b>UINT</b></para>
            /// <para>Size of the retrieval-filter stack in bytes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getretrievalfilterstacksize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetRetrievalFilterStackSize()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetRetrievalFilterStackSize_28(pThis);
            }

            /// <summary>Adds a debug message to the message queue and sends that message to debug output.</summary>
            /// <param name = "Category">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_category">D3D12_MESSAGE_CATEGORY</a></b></para>
            /// <para>Category of a message.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Severity">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_severity">D3D12_MESSAGE_SEVERITY</a></b></para>
            /// <para>Severity of a message.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ID">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_id">D3D12_MESSAGE_ID</a></b></para>
            /// <para>Unique identifier of a message.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDescription">
            /// <para>Type: <b>LPCSTR</b></para>
            /// <para>User-defined message.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT AddMessage(win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY Category, win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY Severity, win32.Graphics.Direct3D12.D3D12_MESSAGE_ID ID, win32.System.SystemServices.PCSTR pDescription)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->AddMessage_29(pThis, Category, Severity, ID, pDescription);
            }

            /// <summary>Adds a user-defined message to the message queue and sends that message to debug output.</summary>
            /// <param name = "Severity">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_severity">D3D12_MESSAGE_SEVERITY</a></b></para>
            /// <para>Severity of a message.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addapplicationmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDescription">
            /// <para>Type: <b>LPCSTR</b></para>
            /// <para>Specifies the message string.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addapplicationmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addapplicationmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT AddApplicationMessage(win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY Severity, win32.System.SystemServices.PCSTR pDescription)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->AddApplicationMessage_30(pThis, Severity, pDescription);
            }

            /// <summary>Set a message category to break on when a message with that category passes through the storage filter.</summary>
            /// <param name = "Category">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_category">D3D12_MESSAGE_CATEGORY</a></b></para>
            /// <para>Message category to break on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakoncategory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bEnable">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Turns this breaking condition on or off (true for on, false for off).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakoncategory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakoncategory">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetBreakOnCategory(win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY Category, win32.System.SystemServices.BOOL bEnable)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->SetBreakOnCategory_31(pThis, Category, bEnable);
            }

            /// <summary>Set a message severity level to break on when a message with that severity level passes through the storage filter.</summary>
            /// <param name = "Severity">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_severity">D3D12_MESSAGE_SEVERITY</a></b></para>
            /// <para>A message severity level to break on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonseverity#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bEnable">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Turns this breaking condition on or off (true for on, false for off).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonseverity#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonseverity">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetBreakOnSeverity(win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY Severity, win32.System.SystemServices.BOOL bEnable)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->SetBreakOnSeverity_32(pThis, Severity, bEnable);
            }

            /// <summary>Set a message identifier to break on when a message with that identifier passes through the storage filter.</summary>
            /// <param name = "ID">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_id">D3D12_MESSAGE_ID</a></b></para>
            /// <para>Message identifier to break on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonid#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bEnable">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Turns this breaking condition on or off (true for on, false for off).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonid#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetBreakOnID(win32.Graphics.Direct3D12.D3D12_MESSAGE_ID ID, win32.System.SystemServices.BOOL bEnable)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->SetBreakOnID_33(pThis, ID, bEnable);
            }

            /// <summary>Get a message category to break on when a message with that category passes through the storage filter.</summary>
            /// <param name = "Category">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_category">D3D12_MESSAGE_CATEGORY</a></b></para>
            /// <para>Message category to break on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakoncategory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Whether this breaking condition is turned on or off (true for on, false for off).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakoncategory">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetBreakOnCategory(win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY Category)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetBreakOnCategory_34(pThis, Category);
            }

            /// <summary>Get a message severity level to break on when a message with that severity level passes through the storage filter.</summary>
            /// <param name = "Severity">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_severity">D3D12_MESSAGE_SEVERITY</a></b></para>
            /// <para>Message severity level to break on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakonseverity#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Whether this breaking condition is turned on or off (true for on, false for off).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakonseverity">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetBreakOnSeverity(win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY Severity)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetBreakOnSeverity_35(pThis, Severity);
            }

            /// <summary>Get a message identifier to break on when a message with that identifier passes through the storage filter.</summary>
            /// <param name = "ID">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_id">D3D12_MESSAGE_ID</a></b></para>
            /// <para>Message identifier to break on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakonid#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Whether this breaking condition is turned on or off (true for on, false for off).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakonid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetBreakOnID(win32.Graphics.Direct3D12.D3D12_MESSAGE_ID ID)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetBreakOnID_36(pThis, ID);
            }

            /// <summary>Set a boolean that turns the debug output on or off.</summary>
            /// <param name = "bMute">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Disable/Enable the debug output (true to disable or mute the output, false to enable the output).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setmutedebugoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This will stop messages that pass the storage filter from being printed out in the debug output, however those messages will still be added to the message queue.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setmutedebugoutput#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetMuteDebugOutput(win32.System.SystemServices.BOOL bMute)
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    lpVtbl->SetMuteDebugOutput_37(pThis, bMute);
            }

            /// <summary>Get a boolean that determines if debug output is on or off.</summary>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Whether the debug output is on or off (true for on, false for off).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmutedebugoutput">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetMuteDebugOutput()
            {
                fixed (ID3D12InfoQueue*pThis = &this)
                    return lpVtbl->GetMuteDebugOutput_38(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, win32.System.Com.HRESULT>SetMessageCountLimit_4;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, void>ClearStoredMessages_5;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, win32.Graphics.Direct3D12.D3D12_MESSAGE*, nuint*, win32.System.Com.HRESULT>GetMessage_6;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>GetNumMessagesAllowedByStorageFilter_7;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>GetNumMessagesDeniedByStorageFilter_8;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>GetNumStoredMessages_9;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>GetNumStoredMessagesAllowedByRetrievalFilter_10;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>GetNumMessagesDiscardedByMessageCountLimit_11;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>GetMessageCountLimit_12;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>AddStorageFilterEntries_13;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, nuint*, win32.System.Com.HRESULT>GetStorageFilter_14;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, void>ClearStorageFilter_15;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.System.Com.HRESULT>PushEmptyStorageFilter_16;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.System.Com.HRESULT>PushCopyOfStorageFilter_17;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>PushStorageFilter_18;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, void>PopStorageFilter_19;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, uint>GetStorageFilterStackSize_20;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>AddRetrievalFilterEntries_21;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, nuint*, win32.System.Com.HRESULT>GetRetrievalFilter_22;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, void>ClearRetrievalFilter_23;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.System.Com.HRESULT>PushEmptyRetrievalFilter_24;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.System.Com.HRESULT>PushCopyOfRetrievalFilter_25;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER*, win32.System.Com.HRESULT>PushRetrievalFilter_26;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, void>PopRetrievalFilter_27;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, uint>GetRetrievalFilterStackSize_28;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY, win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY, win32.Graphics.Direct3D12.D3D12_MESSAGE_ID, win32.System.SystemServices.PCSTR, win32.System.Com.HRESULT>AddMessage_29;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY, win32.System.SystemServices.PCSTR, win32.System.Com.HRESULT>AddApplicationMessage_30;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetBreakOnCategory_31;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetBreakOnSeverity_32;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_ID, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetBreakOnID_33;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY, win32.System.SystemServices.BOOL>GetBreakOnCategory_34;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY, win32.System.SystemServices.BOOL>GetBreakOnSeverity_35;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.Graphics.Direct3D12.D3D12_MESSAGE_ID, win32.System.SystemServices.BOOL>GetBreakOnID_36;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.System.SystemServices.BOOL, void>SetMuteDebugOutput_37;
                internal delegate *unmanaged[Stdcall]<ID3D12InfoQueue*, win32.System.SystemServices.BOOL>GetMuteDebugOutput_38;
            }

            private Vtbl*lpVtbl;
        }
    }
}