// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("5B160D0F-AC1B-4185-8BA8-B3AE42A5A455")]
        internal unsafe struct ID3D12GraphicsCommandList
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->GetPrivateData_4(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->SetPrivateData_5(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_6(pThis, guid, pData);
            }

            /// <inheritdoc cref = "SetName(win32.System.SystemServices.PCWSTR)"/>
            internal unsafe win32.System.Com.HRESULT SetName(string Name)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.Com.HRESULT __result = this.SetName(NameLocal);
                    return __result;
                }
            }

            internal win32.System.Com.HRESULT SetName(win32.System.SystemServices.PCWSTR Name)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->SetName_7(pThis, Name);
            }

            /// <inheritdoc cref = "GetDevice(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetDevice(in global::System.Guid riid, void **ppvDevice)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.System.Com.HRESULT __result = this.GetDevice(riidLocal, ppvDevice);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDevice(global::System.Guid*riid, [Optional] void **ppvDevice)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->GetDevice_8(pThis, riid, ppvDevice);
            }

            internal new win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE GetType()
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->GetType_9(pThis);
            }

            /// <summary>Indicates that recording to the command list has finished.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns <b>S_OK</b> if successful; otherwise, returns one of the following values:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-close">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Close()
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->Close_10(pThis);
            }

            /// <summary>Resets a command list back to its initial state as if a new command list was just created.</summary>
            /// <param name = "pAllocator">
            /// <para>Type: <b>ID3D12CommandAllocator*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandallocator">ID3D12CommandAllocator</a> object that the device creates command lists from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-reset#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialState">
            /// <para>Type: <b>ID3D12PipelineState*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object that contains the initial pipeline state for the command list.  This is optional and can be NULL.  If NULL, the runtime sets a dummy initial pipeline state so that drivers don't have to deal with undefined state.  The overhead for this is low, particularly for a command list, for which the overall cost of recording the command list likely dwarfs the cost of one initial state setting.  So there is little cost in  not setting the initial pipeline state parameter if it isn't convenient.</para>
            /// <para>For bundles on the other hand, it might make more sense to try to set the initial state parameter since bundles are likely smaller overall and can be reused frequently.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-reset#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns <b>S_OK</b> if successful; otherwise, returns one of the following values:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-reset">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Reset(win32.Graphics.Direct3D12.ID3D12CommandAllocator*pAllocator, [Optional] win32.Graphics.Direct3D12.ID3D12PipelineState*pInitialState)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    return lpVtbl->Reset_11(pThis, pAllocator, pInitialState);
            }

            /// <summary>Resets the state of a direct command list back to the state it was in when the command list was created.</summary>
            /// <param name = "pPipelineState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object that contains the initial pipeline state for the command list.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>It is invalid to call <b>ClearState</b> on a bundle.  If an app calls <b>ClearState</b> on a bundle, the call to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-close">Close</a> will return <b>E_FAIL</b>.</para>
            /// <para>When <b>ClearState</b> is called, all currently bound resources are unbound.  The primitive topology is set to <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_primitive_topology">D3D_PRIMITIVE_TOPOLOGY_UNDEFINED</a>.  Viewports, scissor rectangles, stencil reference value, and the blend factor are set to empty values (all zeros).  Predication is disabled.</para>
            /// <para>The app-provided pipeline state object becomes bound as the currently set pipeline state object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearState([Optional] win32.Graphics.Direct3D12.ID3D12PipelineState*pPipelineState)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ClearState_12(pThis, pPipelineState);
            }

            /// <summary>Draws non-indexed, instanced primitives.</summary>
            /// <param name = "VertexCountPerInstance">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of vertices to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InstanceCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of instances to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first vertex.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartInstanceLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A value added to each index before reading per-instance data from a vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A draw API submits work to the rendering pipeline.</para>
            /// <para>Instancing might extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors.</para>
            /// <para>The vertex data for an instanced draw call typically comes from a vertex buffer that is bound to the pipeline. But, you could also provide the vertex data from a shader that has instanced data identified with a system-value semantic (SV_InstanceID).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawinstanced#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->DrawInstanced_13(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }

            /// <summary>Draws indexed, instanced primitives.</summary>
            /// <param name = "IndexCountPerInstance">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of indices read from the index buffer for each instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InstanceCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of instances to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartIndexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The location of the first index read by the GPU from the index buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b></para>
            /// <para>A value added to each index before reading a vertex from the vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartInstanceLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A value added to each index before reading per-instance data from a vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A draw API submits work to the rendering pipeline.</para>
            /// <para>Instancing might extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. Instancing requires multiple vertex buffers: at least one for per-vertex data and a second buffer for per-instance data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawindexedinstanced#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->DrawIndexedInstanced_14(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }

            /// <summary>Executes a compute shader on a thread group.</summary>
            /// <param name = "ThreadGroupCountX">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of groups dispatched in the x direction. <i>ThreadGroupCountX</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ThreadGroupCountY">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of groups dispatched in the y direction. <i>ThreadGroupCountY</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ThreadGroupCountZ">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of groups dispatched in the z direction.  <i>ThreadGroupCountZ</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535). In feature level 10 the value for <i>ThreadGroupCountZ</i> must be 1.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>You call the <b>Dispatch</b> method to execute commands in a compute shader. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-dispatch#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->Dispatch_15(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }

            /// <summary>Copies a region of a buffer from one resource to another.</summary>
            /// <param name = "pDstBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>Specifies the destination <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Specifies a UINT64 offset (in bytes) into the destination resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>Specifies the source  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Specifies a UINT64 offset (in bytes) into the source resource, to start the copy from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBytes">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Specifies the number of bytes to copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Consider using the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copyresource">CopyResource</a> method when copying an entire resource, and use this method for copying regions of a resource.</para>
            /// <para><b>CopyBufferRegion</b> may be used to initialize resources which alias the same heap memory. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createplacedresource">CreatePlacedResource</a> for more details.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyBufferRegion(win32.Graphics.Direct3D12.ID3D12Resource*pDstBuffer, ulong DstOffset, win32.Graphics.Direct3D12.ID3D12Resource*pSrcBuffer, ulong SrcOffset, ulong NumBytes)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->CopyBufferRegion_16(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }

            /// <inheritdoc cref = "CopyTextureRegion(win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, uint, uint, uint, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, win32.Graphics.Direct3D12.D3D12_BOX*)"/>
            internal unsafe void CopyTextureRegion(in win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION pDst, uint DstX, uint DstY, uint DstZ, in win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION pSrc, win32.Graphics.Direct3D12.D3D12_BOX? pSrcBox)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pSrcLocal = &pSrc)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pDstLocal = &pDst)
                    {
                        win32.Graphics.Direct3D12.D3D12_BOX pSrcBoxLocal = pSrcBox.HasValue ? pSrcBox.Value : default(win32.Graphics.Direct3D12.D3D12_BOX);
                        this.CopyTextureRegion(pDstLocal, DstX, DstY, DstZ, pSrcLocal, pSrcBox.HasValue ? &pSrcBoxLocal : null);
                    }
                }
            }

            /// <summary>This method uses the GPU to copy texture data between two locations. Both the source and the destination may reference texture data located within either a buffer resource or a texture resource.</summary>
            /// <param name = "pDst">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texture_copy_location">D3D12_TEXTURE_COPY_LOCATION</a>*</b></para>
            /// <para>Specifies the destination <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texture_copy_location">D3D12_TEXTURE_COPY_LOCATION</a>. The subresource referred to must be in the D3D12_RESOURCE_STATE_COPY_DEST state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstX">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The x-coordinate of the upper left corner of the destination region.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstY">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstZ">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texture_copy_location">D3D12_TEXTURE_COPY_LOCATION</a>*</b></para>
            /// <para>Specifies the source <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texture_copy_location">D3D12_TEXTURE_COPY_LOCATION</a>. The subresource referred to must be in the D3D12_RESOURCE_STATE_COPY_SOURCE state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcBox">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_box">D3D12_BOX</a>*</b></para>
            /// <para>Specifies an optional  D3D12_BOX that sets the size of the source texture to copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The source box must be within the size of the source resource. The destination offsets, (x, y, and z), allow the source box to be offset when writing into the destination resource; however, the dimensions of the source box and the offsets must be within the size of the resource. If you try and copy outside the destination resource or specify a source box that is larger than the source resource, the behavior of <b>CopyTextureRegion</b> is undefined. If you created a device that supports the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a>, the debug output reports an error on this invalid <b>CopyTextureRegion</b> call. Invalid parameters to <b>CopyTextureRegion</b> cause undefined behavior and might result in incorrect rendering, clipping, no copy, or even the removal of the rendering device.</para>
            /// <para>If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels. <b>CopyTextureRegion</b> performs the copy on the GPU (similar to a <c>memcpy</c> by the CPU). As a consequence, the source and destination resources:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyTextureRegion(win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pDst, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pSrc, [Optional] win32.Graphics.Direct3D12.D3D12_BOX*pSrcBox)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->CopyTextureRegion_17(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }

            /// <summary>Copies the entire contents of the source resource to the destination resource.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b>ID3D12Resource*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>interface that represents the destination resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: <b>ID3D12Resource*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>interface that represents the source resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>CopyResource</b> operations are performed on the GPU and do not incur a significant CPU workload linearly dependent on the size of the data to copy.</para>
            /// <para><b>CopyResource</b> may be used to initialize resources which alias the same heap memory. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createplacedresource">CreatePlacedResource</a> for more details. <h3><a id = "Debug_layer"></a><a id = "debug_layer"></a><a id = "DEBUG_LAYER"></a>Debug layer</h3> The debug layer will issue an error if the source subresource is not in the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_COPY_SOURCE</a> state.</para>
            /// <para>The debug layer will issue an error if the destination subresource is not in the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_COPY_DEST </a>state.</para>
            /// <para>This method has a few restrictions designed for improving performance. For instance, the source and destination resources: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copyresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyResource(win32.Graphics.Direct3D12.ID3D12Resource*pDstResource, win32.Graphics.Direct3D12.ID3D12Resource*pSrcResource)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->CopyResource_18(pThis, pDstResource, pSrcResource);
            }

            /// <inheritdoc cref = "CopyTiles(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS)"/>
            internal unsafe void CopyTiles(win32.Graphics.Direct3D12.ID3D12Resource*pTiledResource, in win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE pTileRegionStartCoordinate, in win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE pTileRegionSize, win32.Graphics.Direct3D12.ID3D12Resource*pBuffer, ulong BufferStartOffsetInBytes, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS Flags)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*pTileRegionSizeLocal = &pTileRegionSize)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*pTileRegionStartCoordinateLocal = &pTileRegionStartCoordinate)
                    {
                        this.CopyTiles(pTiledResource, pTileRegionStartCoordinateLocal, pTileRegionSizeLocal, pBuffer, BufferStartOffsetInBytes, Flags);
                    }
                }
            }

            /// <summary>Copies tiles from buffer to tiled resource or vice versa.</summary>
            /// <param name = "pTiledResource">
            /// <para>Type: <b>ID3D12Resource*</b></para>
            /// <para>A pointer to a tiled resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pTileRegionStartCoordinate">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tiled_resource_coordinate">D3D12_TILED_RESOURCE_COORDINATE</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tiled_resource_coordinate">D3D12_TILED_RESOURCE_COORDINATE</a> structure that describes the starting coordinates of the tiled resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pTileRegionSize">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_region_size">D3D12_TILE_REGION_SIZE</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_region_size">D3D12_TILE_REGION_SIZE</a> structure that describes the size of the tiled region.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pBuffer">
            /// <para>Type: <b>ID3D12Resource*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> that represents a default, dynamic, or staging buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BufferStartOffsetInBytes">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>The offset in bytes into the buffer at <i>pBuffer</i> to start the operation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Flags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tile_copy_flags">D3D12_TILE_COPY_FLAGS</a></b></para>
            /// <para>A combination of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tile_copy_flags">D3D12_TILE_COPY_FLAGS</a>-typed values that are combined by using a bitwise OR operation and that identifies how to copy tiles.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>CopyTiles</b> drops write operations to unmapped areas and handles read operations from unmapped areas (except on Tier_1 tiled resources, where reading and writing unmapped areas is invalid - refer to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tiled_resources_tier">D3D12_TILED_RESOURCES_TIER</a>).</para>
            /// <para>If a copy operation involves writing to the same memory location multiple times because multiple locations in the destination resource are mapped to the same tile memory, the resulting write operations to multi-mapped tiles are non-deterministic and non-repeatable; that is, accesses to the tile memory happen in whatever order the hardware happens to execute the copy operation. The tiles involved in the copy operation can't include tiles that contain packed mipmaps or results of the copy operation are undefined. To transfer data to and from mipmaps that the hardware packs into one tile, you must use the standard (that is, non-tile specific) copy APIs like <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion">CopyTextureRegion</a>. <b>CopyTiles</b> does copy data in a slightly different pattern than the standard copy methods. The memory layout of the tiles in the non-tiled buffer resource side of the copy operation is linear in memory within 64 KB tiles, which the hardware and driver swizzle and de-swizzle per tile as appropriate when they transfer to and from a tiled resource. For multisample antialiasing (MSAA) surfaces, the hardware and driver traverse each pixel's samples in sample-index order before they move to the next pixel. For tiles that are partially filled on the right side (for a surface that has a width not a multiple of tile width in pixels), the pitch and stride to move down a row is the full size in bytes of the number pixels that would fit across the tile if the tile was full. So, there can be a gap between each row of pixels in memory. Mipmaps that are smaller than a tile are not packed together in the linear layout, which might seem to be a waste of memory space, but as mentioned you can't use <b>CopyTiles</b> to copy to mipmaps that the hardware packs together. You can just use generic copy APIs, like <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion">CopyTextureRegion</a>, to copy small mipmaps individually.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyTiles(win32.Graphics.Direct3D12.ID3D12Resource*pTiledResource, win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*pTileRegionStartCoordinate, win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*pTileRegionSize, win32.Graphics.Direct3D12.ID3D12Resource*pBuffer, ulong BufferStartOffsetInBytes, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS Flags)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->CopyTiles_19(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }

            /// <summary>Copy a multi-sampled resource into a non-multi-sampled resource.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: [in] <b>ID3D12Resource*</b></para>
            /// <para>Destination resource. Must be a created on a <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_heap_type">D3D12_HEAP_TYPE_DEFAULT</a> heap and be single-sampled. See <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstSubresource">
            /// <para>Type: [in] <b>UINT</b></para>
            /// <para>A zero-based index, that identifies the destination subresource. Use <a href = "https://docs.microsoft.com/windows/win32/direct3d12/d3d12calcsubresource">D3D12CalcSubresource</a> to calculate the subresource index if the parent resource is complex.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: [in] <b>ID3D12Resource*</b></para>
            /// <para>Source resource. Must be multisampled.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcSubresource">
            /// <para>Type: [in] <b>UINT</b></para>
            /// <para>The source subresource of the source resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: [in] <b>DXGI_FORMAT</b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><h3><a id = "Debug_layer"></a><a id = "debug_layer"></a><a id = "DEBUG_LAYER"></a>Debug layer</h3> The debug layer will issue an error if the subresources referenced by the source view is not in the  <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_RESOLVE_SOURCE</a> state. The debug layer will issue an error if the destination buffer is not in the  <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_RESOLVE_DEST</a>state. The source and destination resources must be the same resource type and have the same dimensions. In addition, they must have compatible formats. There are three scenarios for this: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ResolveSubresource(win32.Graphics.Direct3D12.ID3D12Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D12.ID3D12Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Dxgi.DXGI_FORMAT Format)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ResolveSubresource_20(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }

            /// <summary>Bind information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
            /// <param name = "PrimitiveTopology">
            /// <para>Type: <b>D3D12_PRIMITIVE_TOPOLOGY</b></para>
            /// <para>The type of primitive and ordering of the primitive data (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_primitive_topology">D3D_PRIMITIVE_TOPOLOGY</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetprimitivetopology#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetprimitivetopology">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void IASetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->IASetPrimitiveTopology_21(pThis, PrimitiveTopology);
            }

            /// <inheritdoc cref = "RSSetViewports(uint, win32.Graphics.Direct3D12.D3D12_VIEWPORT*)"/>
            internal unsafe void RSSetViewports(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_VIEWPORT> pViewports)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_VIEWPORT*pViewportsLocal = pViewports)
                {
                    this.RSSetViewports((uint)pViewports.Length, pViewportsLocal);
                }
            }

            /// <summary>Bind an array of viewports to the rasterizer stage of the pipeline.</summary>
            /// <param name = "NumViewports">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Number of viewports to bind. The range of valid values is (0, D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pViewports">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_viewport">D3D12_VIEWPORT</a>*</b></para>
            /// <para>An array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_viewport">D3D12_VIEWPORT</a> structures to bind to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled.</para>
            /// <para>Which viewport to use is determined by the <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">SV_ViewportArrayIndex</a> semantic output by a geometry shader; if a geometry shader does not specify the semantic, Direct3D will use the first viewport in the array.</para>
            /// <para><div class = "alert"><b>Note</b>  Even though you specify float values to the members of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_viewport">D3D12_VIEWPORT</a> structure for the <i>pViewports</i> array in a call to  <b>RSSetViewports</b> for <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature levels</a> 9_x, <b>RSSetViewports</b> uses DWORDs internally. Because of this behavior, when you use a negative top left corner for the viewport, the call to  <b>RSSetViewports</b> for feature levels 9_x fails. This failure occurs because <b>RSSetViewports</b> for 9_x casts the floating point values into unsigned integers without validation, which results in integer overflow. </div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetviewports#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetViewports(uint NumViewports, win32.Graphics.Direct3D12.D3D12_VIEWPORT*pViewports)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->RSSetViewports_22(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSSetScissorRects(uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSSetScissorRects(ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.RSSetScissorRects((uint)pRects.Length, pRectsLocal);
                }
            }

            /// <summary>Binds an array of scissor rectangles to the rasterizer stage.</summary>
            /// <param name = "NumRects">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of scissor rectangles to bind.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: <b>const D3D12_RECT*</b></para>
            /// <para>An array of scissor rectangles.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>All scissor rectangles must be set atomically as one operation. Any scissor rectangles not defined by the call are disabled.</para>
            /// <para>Which scissor rectangle to use is determined by the <c>SV_ViewportArrayIndex</code> semantic output by a geometry shader (see shader semantic syntax). If a geometry shader does not make use of the <code>SV_ViewportArrayIndex</c> semantic then Direct3D will use the first scissor rectangle in the array.</para>
            /// <para>Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-rssetviewports">RSSetViewports</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetscissorrects#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetScissorRects(uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->RSSetScissorRects_23(pThis, NumRects, pRects);
            }

            /// <inheritdoc cref = "OMSetBlendFactor(float *)"/>
            internal unsafe void OMSetBlendFactor(ReadOnlySpan<float> BlendFactor)
            {
                fixed (float *BlendFactorLocal = BlendFactor)
                {
                    if (BlendFactor.Length < 4)
                        throw new ArgumentException();
                    this.OMSetBlendFactor(BlendFactorLocal);
                }
            }

            /// <summary>Sets the blend factor that modulate values for a pixel shader, render target, or both.</summary>
            /// <param name = "BlendFactor">
            /// <para>Type: <b>const FLOAT[4]</b></para>
            /// <para>Array of blend factors, one for each RGBA component.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetblendfactor#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If you created the blend-state object with [D3D12_BLEND_BLEND_FACTOR](./ne-d3d12-d3d12_blend.md) or **D3D12_BLEND_INV_BLEND_FACTOR**, then the blending stage uses the non-NULL array of blend factors. Otherwise,the blending stage doesn't use the non-NULL array of blend factors; the runtime stores the blend factors.</para>
            /// <para>If you pass NULL, then the runtime uses or stores a blend factor equal to `{ 1, 1, 1, 1 }`.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetblendfactor#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetBlendFactor([Optional] float *BlendFactor)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->OMSetBlendFactor_24(pThis, BlendFactor);
            }

            /// <summary>Sets the reference value for depth stencil tests.</summary>
            /// <param name = "StencilRef">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Reference value to perform against when doing a depth-stencil test.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetstencilref#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetstencilref">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void OMSetStencilRef(uint StencilRef)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->OMSetStencilRef_25(pThis, StencilRef);
            }

            /// <summary>Sets all shaders and programs most of the fixed-function state of the graphics processing unit (GPU) pipeline.</summary>
            /// <param name = "pPipelineState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a>*</b></para>
            /// <para>Pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> containing the pipeline state data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpipelinestate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpipelinestate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetPipelineState(win32.Graphics.Direct3D12.ID3D12PipelineState*pPipelineState)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetPipelineState_26(pThis, pPipelineState);
            }

            /// <inheritdoc cref = "ResourceBarrier(uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*)"/>
            internal unsafe void ResourceBarrier(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER> pBarriers)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*pBarriersLocal = pBarriers)
                {
                    this.ResourceBarrier((uint)pBarriers.Length, pBarriersLocal);
                }
            }

            /// <summary>Notifies the driver that it needs to synchronize multiple accesses to resources.</summary>
            /// <param name = "NumBarriers">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of submitted barrier descriptions.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resourcebarrier#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pBarriers">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_resource_barrier">D3D12_RESOURCE_BARRIER</a>*</b></para>
            /// <para>Pointer to an array of barrier descriptions.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resourcebarrier#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>There are three types of barrier descriptions: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resourcebarrier#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ResourceBarrier(uint NumBarriers, win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*pBarriers)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ResourceBarrier_27(pThis, NumBarriers, pBarriers);
            }

            /// <summary>Executes a bundle.</summary>
            /// <param name = "pCommandList">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12graphicscommandlist">ID3D12GraphicsCommandList</a>*</b></para>
            /// <para>Specifies the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12graphicscommandlist">ID3D12GraphicsCommandList</a> that determines the bundle to be executed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executebundle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Bundles inherit all state from the parent command list on which <b>ExecuteBundle</b> is called, except the pipeline state object and primitive topology. All of the state that is set in a bundle will affect the state of the parent command list. Note that <b>ExecuteBundle</b> is not a predicated operation.</para>
            /// <para><h3><a id = "Runtime_validation"></a><a id = "runtime_validation"></a><a id = "RUNTIME_VALIDATION"></a>Runtime validation</h3> The runtime will validate that the "callee" is a bundle and that the "caller" is a direct command list.  The runtime will also validate that the bundle has been closed.  If the contract is violated, the runtime will silently drop the call. Validation failure will result in <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-close">Close</a> returning E_INVALIDARG.</para>
            /// <para><h3><a id = "Debug_layer"></a><a id = "debug_layer"></a><a id = "DEBUG_LAYER"></a>Debug layer</h3> The debug layer will issue a warning in the same cases where the runtime will fail. The debug layer will issue a warning if a predicate is set when <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12commandqueue-executecommandlists">ExecuteCommandList</a> is called. Also, the debug layer will issue an error if it detects that any resource reference by the command list has been destroyed.</para>
            /// <para>The debug layer will also validate that the command allocator associated with the bundle has not been reset since <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-close">Close</a> was called on the command list.  This validation occurs at <b>ExecuteBundle</b> time, and when the parent command list is executed on a command queue.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executebundle#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ExecuteBundle(win32.Graphics.Direct3D12.ID3D12GraphicsCommandList*pCommandList)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ExecuteBundle_28(pThis, pCommandList);
            }

            /// <summary>Changes the currently bound descriptor heaps that are associated with a command list.</summary>
            /// <param name = "NumDescriptorHeaps">
            /// <para>Type: [in] <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of descriptor heaps to bind.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDescriptorHeaps">
            /// <para>Type: [in] <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12descriptorheap">ID3D12DescriptorHeap</a>*</b></para>
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12descriptorheap">ID3D12DescriptorHeap</a> objects for the heaps to set on the command list.</para>
            /// <para>You can only bind descriptor heaps of type [**D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV**](/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps) and [**D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER**](/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps).</para>
            /// <para>Only one descriptor heap of each type can be set at one time, which means a maximum of 2 heaps (one sampler, one CBV/SRV/UAV) can be set at one time.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>SetDescriptorHeaps</b> can be called on a bundle, but the bundle descriptor heaps must match the calling command list descriptor heap. For more information on bundle restrictions, refer to <a href = "https://docs.microsoft.com/windows/desktop/direct3d12/recording-command-lists-and-bundles">Creating and Recording Command Lists and Bundles</a>.</para>
            /// <para>All previously set heaps are unset by the call. At most one heap of each shader-visible type can be set in the call.</para>
            /// <para>Changing descriptor heaps can incur a pipeline flush on some hardware. Because of this, it is recommended to use a single shader-visible heap of each type, and set it once per frame, rather than regularly changing the bound descriptor heaps. Instead, use [**ID3D12Device::CopyDescriptors**](/windows/win32/api/d3d12/nf-d3d12-id3d12device-copydescriptors) and [**ID3D12Device::CopyDescriptorsSimple**](/windows/win32/api/d3d12/nf-d3d12-id3d12device-copydescriptorssimple) to copy the required descriptors from shader-opaque heaps to the single shader-visible heap as required during rendering.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetDescriptorHeaps(uint NumDescriptorHeaps, win32.Graphics.Direct3D12.ID3D12DescriptorHeap**ppDescriptorHeaps)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetDescriptorHeaps_29(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }

            /// <summary>Sets the layout of the compute root signature.</summary>
            /// <param name = "pRootSignature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootsignature">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetComputeRootSignature([Optional] win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetComputeRootSignature_30(pThis, pRootSignature);
            }

            /// <summary>Sets the layout of the graphics root signature.</summary>
            /// <param name = "pRootSignature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootsignature">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetGraphicsRootSignature([Optional] win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetGraphicsRootSignature_31(pThis, pRootSignature);
            }

            /// <summary>Sets a descriptor table into the compute root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootdescriptortable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_gpu_descriptor_handle">D3D12_GPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>A GPU_descriptor_handle object for the base descriptor to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootdescriptortable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootdescriptortable">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetComputeRootDescriptorTable(uint RootParameterIndex, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetComputeRootDescriptorTable_32(pThis, RootParameterIndex, BaseDescriptor);
            }

            /// <summary>Sets a descriptor table into the graphics root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootdescriptortable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseDescriptor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_gpu_descriptor_handle">D3D12_GPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>A GPU_descriptor_handle object for the base descriptor to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootdescriptortable#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootdescriptortable">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetGraphicsRootDescriptorTable(uint RootParameterIndex, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetGraphicsRootDescriptorTable_33(pThis, RootParameterIndex, BaseDescriptor);
            }

            /// <summary>Sets a constant in the compute root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstant#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcData">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The source data for the constant to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstant#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestOffsetIn32BitValues">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The offset, in 32-bit values, to set the constant in the root signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstant#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstant">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetComputeRoot32BitConstant_34(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }

            /// <summary>Sets a constant in the graphics root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstant#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcData">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The source data for the constant to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstant#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestOffsetIn32BitValues">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The offset, in 32-bit values, to set the constant in the root signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstant#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstant">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetGraphicsRoot32BitConstant_35(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }

            /// <summary>Sets a group of constants in the compute root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Num32BitValuesToSet">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of constants to set in the root signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>The source data for the group of constants to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestOffsetIn32BitValues">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The offset, in 32-bit values, to set the first constant of the group in the root signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstants">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void *pSrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetComputeRoot32BitConstants_36(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }

            /// <summary>Sets a group of constants in the graphics root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Num32BitValuesToSet">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of constants to set in the root signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>The source data for the group of constants to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DestOffsetIn32BitValues">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The offset, in 32-bit values, to set the first constant of the group in the root signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstants#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstants">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void *pSrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetGraphicsRoot32BitConstants_37(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }

            /// <summary>Sets a CPU descriptor handle for the constant buffer in the compute root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootconstantbufferview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BufferLocation">
            /// <para>Type: <b>D3D12_GPU_VIRTUAL_ADDRESS</b></para>
            /// <para>Specifies the D3D12_GPU_VIRTUAL_ADDRESS of the constant buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootconstantbufferview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootconstantbufferview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetComputeRootConstantBufferView_38(pThis, RootParameterIndex, BufferLocation);
            }

            /// <summary>Sets a CPU descriptor handle for the constant buffer in the graphics root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootconstantbufferview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BufferLocation">
            /// <para>Type: <b>D3D12_GPU_VIRTUAL_ADDRESS</b></para>
            /// <para>The GPU virtual address of the constant buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootconstantbufferview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootconstantbufferview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetGraphicsRootConstantBufferView_39(pThis, RootParameterIndex, BufferLocation);
            }

            /// <summary>Sets a CPU descriptor handle for the shader resource in the compute root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BufferLocation">
            /// <para>Type: <b>D3D12_GPU_VIRTUAL_ADDRESS</b></para>
            /// <para>The GPU virtual address of the buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootshaderresourceview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetComputeRootShaderResourceView_40(pThis, RootParameterIndex, BufferLocation);
            }

            /// <summary>Sets a CPU descriptor handle for the shader resource in the graphics root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BufferLocation">
            /// <para>Type: <b>D3D12_GPU_VIRTUAL_ADDRESS</b></para>
            /// <para>The GPU virtual address of the Buffer. Textures are not supported. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootshaderresourceview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetGraphicsRootShaderResourceView_41(pThis, RootParameterIndex, BufferLocation);
            }

            /// <summary>Sets a CPU descriptor handle for the unordered-access-view resource in the compute root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BufferLocation">
            /// <para>Type: <b>D3D12_GPU_VIRTUAL_ADDRESS</b></para>
            /// <para>The GPU virtual address of the buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootunorderedaccessview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetComputeRootUnorderedAccessView_42(pThis, RootParameterIndex, BufferLocation);
            }

            /// <summary>Sets a CPU descriptor handle for the unordered-access-view resource in the graphics root signature.</summary>
            /// <param name = "RootParameterIndex">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The slot number for binding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BufferLocation">
            /// <para>Type: <b>D3D12_GPU_VIRTUAL_ADDRESS</b></para>
            /// <para>The GPU virtual address of the buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootunorderedaccessview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetGraphicsRootUnorderedAccessView_43(pThis, RootParameterIndex, BufferLocation);
            }

            /// <inheritdoc cref = "IASetIndexBuffer(win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW*)"/>
            internal unsafe void IASetIndexBuffer(win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW? pView)
            {
                win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW pViewLocal = pView.HasValue ? pView.Value : default(win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW);
                this.IASetIndexBuffer(pView.HasValue ? &pViewLocal : null);
            }

            /// <summary>Sets the view for the index buffer.</summary>
            /// <param name = "pView">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_index_buffer_view">D3D12_INDEX_BUFFER_VIEW</a>*</b></para>
            /// <para>The view specifies the index buffer's address, size, and <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>, as a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_index_buffer_view">D3D12_INDEX_BUFFER_VIEW</a> structure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Only one index buffer can be bound to the graphics pipeline at any one time.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetindexbuffer#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetIndexBuffer([Optional] win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW*pView)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->IASetIndexBuffer_44(pThis, pView);
            }

            /// <inheritdoc cref = "IASetVertexBuffers(uint, uint, win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*)"/>
            internal unsafe void IASetVertexBuffers(uint StartSlot, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW> pViews)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*pViewsLocal = pViews)
                {
                    this.IASetVertexBuffers(StartSlot, (uint)pViews.Length, pViewsLocal);
                }
            }

            /// <summary>Sets a CPU descriptor handle for the vertex buffers.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Index into the device's zero-based array to begin setting vertex buffers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of views in the <i>pViews</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pViews">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_vertex_buffer_view">D3D12_VERTEX_BUFFER_VIEW</a>*</b></para>
            /// <para>Specifies the vertex buffer views in an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_vertex_buffer_view">D3D12_VERTEX_BUFFER_VIEW</a> structures.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetvertexbuffers">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetVertexBuffers(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*pViews)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->IASetVertexBuffers_45(pThis, StartSlot, NumViews, pViews);
            }

            /// <inheritdoc cref = "SOSetTargets(uint, uint, win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*)"/>
            internal unsafe void SOSetTargets(uint StartSlot, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW> pViews)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*pViewsLocal = pViews)
                {
                    this.SOSetTargets(StartSlot, (uint)pViews.Length, pViewsLocal);
                }
            }

            /// <summary>Sets the stream output buffer views.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Index into the device's zero-based array to begin setting stream output buffers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of entries in the <i>pViews</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pViews">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_stream_output_buffer_view">D3D12_STREAM_OUTPUT_BUFFER_VIEW</a>*</b></para>
            /// <para>Specifies an array of  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_stream_output_buffer_view">D3D12_STREAM_OUTPUT_BUFFER_VIEW</a> structures.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-sosettargets">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SOSetTargets(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*pViews)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SOSetTargets_46(pThis, StartSlot, NumViews, pViews);
            }

            /// <inheritdoc cref = "OMSetRenderTargets(uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, win32.System.SystemServices.BOOL, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*)"/>
            internal unsafe void OMSetRenderTargets(uint NumRenderTargetDescriptors, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE? pRenderTargetDescriptors, win32.System.SystemServices.BOOL RTsSingleHandleToDescriptorRange, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE? pDepthStencilDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE pRenderTargetDescriptorsLocal = pRenderTargetDescriptors.HasValue ? pRenderTargetDescriptors.Value : default(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE);
                win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE pDepthStencilDescriptorLocal = pDepthStencilDescriptor.HasValue ? pDepthStencilDescriptor.Value : default(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE);
                this.OMSetRenderTargets(NumRenderTargetDescriptors, pRenderTargetDescriptors.HasValue ? &pRenderTargetDescriptorsLocal : null, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor.HasValue ? &pDepthStencilDescriptorLocal : null);
            }

            /// <summary>Sets CPU descriptor handles for the render targets and depth stencil.</summary>
            /// <param name = "NumRenderTargetDescriptors">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of entries in the <i>pRenderTargetDescriptors</i> array (ranges between 0 and <b>D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which pRenderTargetDescriptors points must equal the number in this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRenderTargetDescriptors">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a>*</b></para>
            /// <para>Specifies an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a> structures that describe the CPU descriptor handles that represents the start of the heap of render target descriptors. If this parameter is NULL and NumRenderTargetDescriptors is 0, no render targets are bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "RTsSingleHandleToDescriptorRange">
            /// <para>Type: <b>BOOL</b></para>
            /// <para><b>True</b> means the handle passed in is the pointer to a contiguous range of <i>NumRenderTargetDescriptors</i>  descriptors.  This case is useful if the set of descriptors to bind already happens to be contiguous in memory (so all that’s needed is a handle to the first one).  For example, if  <i>NumRenderTargetDescriptors</i> is 3 then the memory layout is taken as follows:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDepthStencilDescriptor">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a> structure that describes the CPU descriptor handle that represents the start of the heap that holds the depth stencil descriptor. If this parameter is NULL, no depth stencil descriptor is bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetrendertargets">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetRenderTargets(uint NumRenderTargetDescriptors, [Optional] win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pRenderTargetDescriptors, win32.System.SystemServices.BOOL RTsSingleHandleToDescriptorRange, [Optional] win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pDepthStencilDescriptor)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->OMSetRenderTargets_47(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }

            /// <inheritdoc cref = "ClearDepthStencilView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS, float, byte, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS ClearFlags, float Depth, byte Stencil, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.ClearDepthStencilView(DepthStencilView, ClearFlags, Depth, Stencil, (uint)pRects.Length, pRectsLocal);
                }
            }

            /// <summary>Clears the depth-stencil resource.</summary>
            /// <param name = "DepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Describes the CPU descriptor handle that represents the start of the heap for the depth stencil to be cleared.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ClearFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_clear_flags">D3D12_CLEAR_FLAGS</a></b></para>
            /// <para>A combination of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_clear_flags">D3D12_CLEAR_FLAGS</a> values that are combined by using a bitwise OR operation. The resulting value identifies the type of data to clear (depth buffer, stencil buffer, or both).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Depth">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>A value to clear the depth buffer with. This value will be clamped between 0 and 1.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Stencil">
            /// <para>Type: <b>UINT8</b></para>
            /// <para>A value to clear the stencil buffer with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of rectangles in the array that the <i>pRects</i> parameter specifies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: <b>const <b>D3D12_RECT</b>*</b></para>
            /// <para>An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearDepthStencilView</b> clears the entire resource view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>ClearDepthStencilView</b> may be used to initialize resources which alias the same heap memory. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createplacedresource">CreatePlacedResource</a> for more details. <h3><a id = "Runtime_validation"></a><a id = "runtime_validation"></a><a id = "RUNTIME_VALIDATION"></a>Runtime validation</h3> For floating-point inputs, the runtime will set denormalized values to 0 (while preserving NANs).</para>
            /// <para>Validation failure will result in the call to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-close">Close</a> returning <b>E_INVALIDARG</b>.</para>
            /// <para><h3><a id = "Debug_layer"></a><a id = "debug_layer"></a><a id = "DEBUG_LAYER"></a>Debug layer</h3> The debug layer will issue errors if the input colors are denormalized.</para>
            /// <para>The debug layer will issue an error if the subresources referenced by the view are not in the appropriate state. For <b>ClearDepthStencilView</b>, the state must be in the state <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_DEPTH_WRITE</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS ClearFlags, float Depth, byte Stencil, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ClearDepthStencilView_48(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }

            /// <inheritdoc cref = "ClearRenderTargetView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, float *, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, in float ColorRGBA, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    fixed (float *ColorRGBALocal = &ColorRGBA)
                    {
                        this.ClearRenderTargetView(RenderTargetView, ColorRGBALocal, (uint)pRects.Length, pRectsLocal);
                    }
                }
            }

            /// <summary>Sets all the elements in a render target to one value.</summary>
            /// <param name = "RenderTargetView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b></para>
            /// <para>Specifies a D3D12_CPU_DESCRIPTOR_HANDLE structure that describes the CPU descriptor handle that represents the start of the heap for the render target to be cleared.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ColorRGBA">
            /// <para>Type: <b>const FLOAT[4]</b></para>
            /// <para>A 4-component array that represents the color to fill the render target with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumRects">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of rectangles in the array that the <i>pRects</i> parameter specifies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: <b>const D3D12_RECT*</b></para>
            /// <para>An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearRenderTargetView</b> clears the entire resource view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>ClearRenderTargetView</b> may be used to initialize resources which alias the same heap memory. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createplacedresource">CreatePlacedResource</a> for more details. <h3><a id = "Runtime_validation"></a><a id = "runtime_validation"></a><a id = "RUNTIME_VALIDATION"></a>Runtime validation</h3> For floating-point inputs, the runtime will set denormalized values to 0 (while preserving NANs). Validation failure will result in the call to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-close">Close</a> returning <b>E_INVALIDARG</b>.</para>
            /// <para><h3><a id = "Debug_layer"></a><a id = "debug_layer"></a><a id = "DEBUG_LAYER"></a>Debug layer</h3> The debug layer will issue errors if the input colors are denormalized. The debug layer will issue an error if the subresources referenced by the view are not in the appropriate state. For <b>ClearRenderTargetView</b>, the state must be <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_RENDER_TARGET</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, float *ColorRGBA, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ClearRenderTargetView_49(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewUint(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, uint *, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, in uint Values, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    fixed (uint *ValuesLocal = &Values)
                    {
                        this.ClearUnorderedAccessViewUint(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, ValuesLocal, (uint)pRects.Length, pRectsLocal);
                    }
                }
            }

            /// <summary>Sets all the elements in a unordered-access view (UAV) to the specified integer values.</summary>
            /// <param name = "ViewGPUHandleInCurrentHeap">
            /// <para>Type: [in] **[D3D12_GPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_gpu_descriptor_handle.md)**</para>
            /// <para>A [D3D12_GPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_gpu_descriptor_handle.md) that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. This descriptor must be in a shader-visible descriptor heap, which must be set on the command list via [SetDescriptorHeaps](nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps.md).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ViewCPUHandle">
            /// <para>Type: [in] **[D3D12_CPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_cpu_descriptor_handle.md)** A [D3D12_CPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_cpu_descriptor_handle.md) in a non-shader visible descriptor heap that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. > [!IMPORTANT] > This descriptor must not be in a shader-visible descriptor heap. This is to allow drivers thath implement the clear as fixed-function hardware (rather than via a dispatch) to efficiently read from the descriptor, as shader-visible heaps may be created in **WRITE_BACK** memory (similar to **D3D12_HEAP_TYPE_UPLOAD** heap types), and CPU reads from this type of memory are prohibitively slow.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pResource">
            /// <para>Type: [in] **[ID3D12Resource](./nn-d3d12-id3d12resource.md)\***</para>
            /// <para>A pointer to the [ID3D12Resource](./nn-d3d12-id3d12resource.md) interface that represents the unordered-access-view (UAV) resource to clear.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Values">
            /// <para>Type: [in] **const UINT[4]**</para>
            /// <para>A 4-component array that containing the values to fill the unordered-access-view resource with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumRects">
            /// <para>Type: [in] **UINT**</para>
            /// <para>The number of rectangles in the array that the *pRects* parameter specifies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: [in] **const [D3D12_RECT](/windows/win32/direct3d12/d3d12-rect)\***</para>
            /// <para>An array of **D3D12_RECT** structures for the rectangles in the resource view to clear. If **NULL**, **ClearUnorderedAccessViewUint** clears the entire resource view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, uint *Values, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewUint_50(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, float *, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, in float Values, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    fixed (float *ValuesLocal = &Values)
                    {
                        this.ClearUnorderedAccessViewFloat(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, ValuesLocal, (uint)pRects.Length, pRectsLocal);
                    }
                }
            }

            /// <summary>Sets all the elements in a unordered access view to the specified float values.</summary>
            /// <param name = "ViewGPUHandleInCurrentHeap">
            /// <para>Type: [in] **[D3D12_GPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_gpu_descriptor_handle.md)**</para>
            /// <para>A [D3D12_GPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_gpu_descriptor_handle.md) that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. This descriptor must be in a shader-visible descriptor heap, which must be set on the command list via [SetDescriptorHeaps](nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps.md).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ViewCPUHandle">
            /// <para>Type: [in] **[D3D12_CPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_cpu_descriptor_handle.md)** A [D3D12_CPU_DESCRIPTOR_HANDLE](./ns-d3d12-d3d12_cpu_descriptor_handle.md) in a non-shader visible descriptor heap that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. > [!IMPORTANT] > This descriptor must not be in a shader-visible descriptor heap. This is to allow drivers thath implement the clear as fixed-function hardware (rather than via a dispatch) to efficiently read from the descriptor, as shader-visible heaps may be created in **WRITE_BACK** memory (similar to **D3D12_HEAP_TYPE_UPLOAD** heap types), and CPU reads from this type of memory are prohibitively slow.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pResource">
            /// <para>Type: [in] **[ID3D12Resource](./nn-d3d12-id3d12resource.md)\***</para>
            /// <para>A pointer to the [ID3D12Resource](./nn-d3d12-id3d12resource.md) interface that represents the unordered-access-view (UAV) resource to clear.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Values">
            /// <para>Type: [in] **const FLOAT[4]**</para>
            /// <para>A 4-component array that containing the values to fill the unordered-access-view resource with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumRects">
            /// <para>Type: [in] **UINT**</para>
            /// <para>The number of rectangles in the array that the *pRects* parameter specifies.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: [in] **const [D3D12_RECT](/windows/win32/direct3d12/d3d12-rect)\***</para>
            /// <para>An array of **D3D12_RECT** structures for the rectangles in the resource view to clear. If **NULL**, **ClearUnorderedAccessViewFloat** clears the entire resource view.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, float *Values, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewFloat_51(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }

            /// <inheritdoc cref = "DiscardResource(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DISCARD_REGION*)"/>
            internal unsafe void DiscardResource(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_DISCARD_REGION? pRegion)
            {
                win32.Graphics.Direct3D12.D3D12_DISCARD_REGION pRegionLocal = pRegion.HasValue ? pRegion.Value : default(win32.Graphics.Direct3D12.D3D12_DISCARD_REGION);
                this.DiscardResource(pResource, pRegion.HasValue ? &pRegionLocal : null);
            }

            /// <summary>Discards a resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: [in] <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> interface for the resource to discard.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-discardresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRegion">
            /// <para>Type: [in, optional] <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_discard_region">D3D12_DISCARD_REGION</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_discard_region">D3D12_DISCARD_REGION</a> structure that describes details for the discard-resource operation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-discardresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The semantics of <b>DiscardResource</b> change based on the command list type.</para>
            /// <para>For <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_command_list_type">D3D12_COMMAND_LIST_TYPE_DIRECT</a>, the following two rules apply:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-discardresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DiscardResource(win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_DISCARD_REGION*pRegion)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->DiscardResource_52(pThis, pResource, pRegion);
            }

            /// <summary>Starts a query running.</summary>
            /// <param name = "pQueryHeap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a>*</b></para>
            /// <para>Specifies the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a> containing the query.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Type">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a></b></para>
            /// <para>Specifies one member of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Index">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Specifies the index of the query within the query heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>See <a href = "https://docs.microsoft.com/windows/desktop/direct3d12/queries">Queries</a> for more information about D3D12 queries.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginquery#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void BeginQuery(win32.Graphics.Direct3D12.ID3D12QueryHeap*pQueryHeap, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE Type, uint Index)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->BeginQuery_53(pThis, pQueryHeap, Type, Index);
            }

            /// <summary>Ends a running query.</summary>
            /// <param name = "pQueryHeap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a>*</b></para>
            /// <para>Specifies the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a> containing the query.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-endquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Type">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a></b></para>
            /// <para>Specifies one member of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-endquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Index">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Specifies the index of the query in the query heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-endquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>See <a href = "https://docs.microsoft.com/windows/desktop/direct3d12/queries">Queries</a> for more information about D3D12 queries.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-endquery#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void EndQuery(win32.Graphics.Direct3D12.ID3D12QueryHeap*pQueryHeap, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE Type, uint Index)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->EndQuery_54(pThis, pQueryHeap, Type, Index);
            }

            /// <summary>Extracts data from a query. ResolveQueryData works with all heap types (default, upload, and readback).  ResolveQueryData works with all heap types (default, upload, and readback). .</summary>
            /// <param name = "pQueryHeap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a>*</b></para>
            /// <para>Specifies the  <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a> containing the queries to resolve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Type">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a></b></para>
            /// <para>Specifies the type of query, one member of <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartIndex">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Specifies an index of the first query to resolve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumQueries">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Specifies the number of queries to resolve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDestinationBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>Specifies an <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> destination buffer, which must be in the state <a href = "https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_COPY_DEST</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "AlignedDestinationBufferOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Specifies an alignment offset into the destination buffer. Must be a multiple of 8 bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>ResolveQueryData</b> performs a batched operation that writes query data into a destination buffer.  Query data is written contiguously to the destination buffer, and the parameter. <b>ResolveQueryData</b> turns application-opaque query data in an application-opaque query heap into adapter-agnostic values usable by your application. Resolving queries within a heap that have not been completed (so have had [**ID3D12GraphicsCommandList::BeginQuery**](/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-beginquery) called for them, but not [**ID3D12GraphicsCommandList::EndQuery**](/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-endquery)), or that have been uninitialized, results in undefined behaviour and might cause device hangs or removal. The debug layer will emit an error if it detects an application has resolved incomplete or uninitialized queries. > [!NOTE] > Resolving incomplete or uninitialized queries is undefined behaviour because the driver might internally store GPUVAs or other data within unresolved queries. And so attempting to resolve these queries on uninitialized data could cause a page fault or device hang. Older versions of the debug layer didn't validate this behavior. Binary occlusion queries write 64-bits per query. The least significant bit is either 0 (the object was entirely occluded) or 1 (at least 1 sample of the object would have been drawn). The rest of the bits are 0. Occlusion queries write 64-bits per query. The value is the number of samples that passed testing. Timestamp queries write 64-bits per query, which is a tick value that must be compared to the respective command queue frequency (see [Timing](/windows/win32/direct3d12/timing)). Pipeline statistics queries write a [**D3D12_QUERY_DATA_PIPELINE_STATISTICS**](/windows/win32/api/d3d12/ns-d3d12-d3d12_query_data_pipeline_statistics) structure per query. All stream-out statistics queries write a [**D3D12_QUERY_DATA_SO_STATISTICS**](/windows/win32/api/d3d12/ns-d3d12-d3d12_query_data_so_statistics) structure per query. The core runtime will validate the following. </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ResolveQueryData(win32.Graphics.Direct3D12.ID3D12QueryHeap*pQueryHeap, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE Type, uint StartIndex, uint NumQueries, win32.Graphics.Direct3D12.ID3D12Resource*pDestinationBuffer, ulong AlignedDestinationBufferOffset)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ResolveQueryData_55(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }

            /// <summary>Sets a rendering predicate.</summary>
            /// <param name = "pBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>The buffer, as an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>, which must be in the [**D3D12_RESOURCE_STATE_PREDICATION**](/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states) or [**D3D21_RESOURCE_STATE_INDIRECT_ARGUMENT**](/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states) state (both values are identical, and provided as aliases for clarity), or **NULL** to disable predication.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "AlignedBufferOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>The aligned buffer offset, as a UINT64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Operation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_predication_op">D3D12_PREDICATION_OP</a></b></para>
            /// <para>Specifies a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_predication_op">D3D12_PREDICATION_OP</a>, such as D3D12_PREDICATION_OP_EQUAL_ZERO or D3D12_PREDICATION_OP_NOT_EQUAL_ZERO.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Use this method to denote that subsequent rendering and resource manipulation commands are not actually performed if the resulting predicate data of the predicate is equal to the operation specified.</para>
            /// <para>Unlike Direct3D 11, in Direct3D 12 predication state is not inherited by direct command lists, and predication is always respected (there are no predication hints). All direct command lists begin with predication disabled. Bundles do inherit predication state. It is legal for the same predicate to be bound multiple times.</para>
            /// <para>Illegal API calls will result in <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-close">Close</a> returning an error, or <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12commandqueue-executecommandlists">ID3D12CommandQueue::ExecuteCommandLists</a> dropping the command list and removing the device.</para>
            /// <para>The debug layer will issue errors whenever the runtime validation fails.</para>
            /// <para>Refer to <a href = "https://docs.microsoft.com/windows/desktop/direct3d12/predication">Predication</a> for more information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpredication#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetPredication([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pBuffer, ulong AlignedBufferOffset, win32.Graphics.Direct3D12.D3D12_PREDICATION_OP Operation)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetPredication_56(pThis, pBuffer, AlignedBufferOffset, Operation);
            }

            /// <summary>Not intended to be called directly.  Use the PIX event runtime to insert events into a command list.</summary>
            /// <param name = "Metadata">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Internal.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setmarker#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>Internal.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setmarker#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Size">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Internal.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setmarker#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This is a support method used internally by the PIX event runtime.  It is not intended to be called directly.</para>
            /// <para>To insert instrumentation markers at the current location within a D3D12 command list, use the <b>PIXSetMarker</b> function.  This is provided by the <a href = "https://devblogs.microsoft.com/pix/winpixeventruntime/">WinPixEventRuntime</a> NuGet package.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setmarker#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetMarker(uint Metadata, [Optional] void *pData, uint Size)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->SetMarker_57(pThis, Metadata, pData, Size);
            }

            /// <summary>Not intended to be called directly.  Use the PIX event runtime to insert events into a command list.</summary>
            /// <param name = "Metadata">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Internal.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginevent#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">void</a>*</b></para>
            /// <para>Internal.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginevent#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Size">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Internal.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginevent#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This is a support method used internally by the PIX event runtime.  It is not intended to be called directly.</para>
            /// <para>To mark the start of an instrumentation region at the current location within a D3D12 command list, use the <b>PIXBeginEvent</b> function or <b>PIXScopedEvent</b> macro.  These are provided by the <a href = "https://devblogs.microsoft.com/pix/winpixeventruntime/">WinPixEventRuntime</a> NuGet package.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginevent#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void BeginEvent(uint Metadata, [Optional] void *pData, uint Size)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->BeginEvent_58(pThis, Metadata, pData, Size);
            }

            /// <summary>Not intended to be called directly.  Use the PIX event runtime to insert events into a command list.</summary>
            /// <remarks>
            /// <para>This is a support method used internally by the PIX event runtime.  It is not intended to be called directly.</para>
            /// <para>To mark the end of an instrumentation region at the current location within a D3D12 command list, use the <b>PIXEndEvent</b> function or <b>PIXScopedEvent</b> macro.  These are provided by the <a href = "https://devblogs.microsoft.com/pix/winpixeventruntime/">WinPixEventRuntime</a> NuGet package.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-endevent#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void EndEvent()
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->EndEvent_59(pThis);
            }

            /// <summary>Apps perform indirect draws/dispatches using the ExecuteIndirect method.</summary>
            /// <param name = "pCommandSignature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandsignature">ID3D12CommandSignature</a>*</b></para>
            /// <para>Specifies a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandsignature">ID3D12CommandSignature</a>. The data referenced by <i>pArgumentBuffer</i> will be interpreted depending on the contents of the command signature. Refer to <a href = "https://docs.microsoft.com/windows/desktop/direct3d12/indirect-drawing">Indirect Drawing</a> for the APIs that are used to create a command signature.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "MaxCommandCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>There are two ways that command counts can be specified:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pArgumentBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>Specifies one or more <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> objects, containing the command arguments.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ArgumentBufferOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Specifies an offset into <i>pArgumentBuffer</i> to identify the first command argument.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pCountBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>*</b></para>
            /// <para>Specifies a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "CountBufferOffset">
            /// <para>Type: <b>UINT64</b></para>
            /// <para>Specifies a UINT64 that is the offset into <i>pCountBuffer</i>, identifying the argument count.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The semantics of this API are defined with the following pseudo-code: Non-NULL pCountBuffer: <pre class = "syntax"xml: space = "preserve"><code>// Read draw count out of count buffer UINT CommandCount = pCountBuffer-&gt;ReadUINT32(CountBufferOffset); CommandCount = min(CommandCount, MaxCommandCount) // Get pointer to first Commanding argument BYTE* Arguments = pArgumentBuffer-&gt;GetBase() + ArgumentBufferOffset; for(UINT CommandIndex = 0; CommandIndex &lt; CommandCount; CommandIndex++) { // Interpret the data contained in *Arguments // according to the command signature pCommandSignature-&gt;Interpret(Arguments); Arguments += pCommandSignature -&gt;GetByteStride(); } </code></pre> NULL pCountBuffer: <pre class = "syntax"xml: space = "preserve"><code>// Get pointer to first Commanding argument BYTE* Arguments = pArgumentBuffer-&gt;GetBase() + ArgumentBufferOffset; for(UINT CommandIndex = 0; CommandIndex &lt; MaxCommandCount; CommandIndex++) { // Interpret the data contained in *Arguments // according to the command signature pCommandSignature-&gt;Interpret(Arguments); Arguments += pCommandSignature -&gt;GetByteStride(); } </code></pre> The debug layer will issue an error if either the count buffer or the argument buffer are not in the D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT state. The core runtime will validate: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ExecuteIndirect(win32.Graphics.Direct3D12.ID3D12CommandSignature*pCommandSignature, uint MaxCommandCount, win32.Graphics.Direct3D12.ID3D12Resource*pArgumentBuffer, ulong ArgumentBufferOffset, [Optional] win32.Graphics.Direct3D12.ID3D12Resource*pCountBuffer, ulong CountBufferOffset)
            {
                fixed (ID3D12GraphicsCommandList*pThis = &this)
                    lpVtbl->ExecuteIndirect_60(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_6;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.System.SystemServices.PCWSTR, win32.System.Com.HRESULT>SetName_7;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetDevice_8;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE>GetType_9;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.System.Com.HRESULT>Close_10;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12CommandAllocator*, win32.Graphics.Direct3D12.ID3D12PipelineState*, win32.System.Com.HRESULT>Reset_11;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12PipelineState*, void>ClearState_12;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, uint, void>DrawInstanced_13;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, int, uint, void>DrawIndexedInstanced_14;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>Dispatch_15;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, ulong, void>CopyBufferRegion_16;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, uint, uint, uint, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, win32.Graphics.Direct3D12.D3D12_BOX*, void>CopyTextureRegion_17;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.ID3D12Resource*, void>CopyResource_18;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS, void>CopyTiles_19;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12Resource*, uint, win32.Graphics.Direct3D12.ID3D12Resource*, uint, win32.Graphics.Dxgi.DXGI_FORMAT, void>ResolveSubresource_20;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY, void>IASetPrimitiveTopology_21;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, win32.Graphics.Direct3D12.D3D12_VIEWPORT*, void>RSSetViewports_22;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, win32.UI.DisplayDevices.RECT*, void>RSSetScissorRects_23;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, float *, void>OMSetBlendFactor_24;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void>OMSetStencilRef_25;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12PipelineState*, void>SetPipelineState_26;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*, void>ResourceBarrier_27;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12GraphicsCommandList*, void>ExecuteBundle_28;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, win32.Graphics.Direct3D12.ID3D12DescriptorHeap**, void>SetDescriptorHeaps_29;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12RootSignature*, void>SetComputeRootSignature_30;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12RootSignature*, void>SetGraphicsRootSignature_31;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, void>SetComputeRootDescriptorTable_32;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, void>SetGraphicsRootDescriptorTable_33;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>SetComputeRoot32BitConstant_34;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>SetGraphicsRoot32BitConstant_35;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void *, uint, void>SetComputeRoot32BitConstants_36;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void *, uint, void>SetGraphicsRoot32BitConstants_37;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>SetComputeRootConstantBufferView_38;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>SetGraphicsRootConstantBufferView_39;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>SetComputeRootShaderResourceView_40;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>SetGraphicsRootShaderResourceView_41;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>SetComputeRootUnorderedAccessView_42;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>SetGraphicsRootUnorderedAccessView_43;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW*, void>IASetIndexBuffer_44;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*, void>IASetVertexBuffers_45;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*, void>SOSetTargets_46;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, win32.System.SystemServices.BOOL, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, void>OMSetRenderTargets_47;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS, float, byte, uint, win32.UI.DisplayDevices.RECT*, void>ClearDepthStencilView_48;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, float *, uint, win32.UI.DisplayDevices.RECT*, void>ClearRenderTargetView_49;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, uint *, uint, win32.UI.DisplayDevices.RECT*, void>ClearUnorderedAccessViewUint_50;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, float *, uint, win32.UI.DisplayDevices.RECT*, void>ClearUnorderedAccessViewFloat_51;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DISCARD_REGION*, void>DiscardResource_52;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12QueryHeap*, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE, uint, void>BeginQuery_53;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12QueryHeap*, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE, uint, void>EndQuery_54;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12QueryHeap*, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE, uint, uint, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, void>ResolveQueryData_55;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.D3D12_PREDICATION_OP, void>SetPredication_56;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void *, uint, void>SetMarker_57;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void *, uint, void>BeginEvent_58;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, void>EndEvent_59;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList*, win32.Graphics.Direct3D12.ID3D12CommandSignature*, uint, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, void>ExecuteIndirect_60;
            }

            private Vtbl*lpVtbl;
        }
    }
}