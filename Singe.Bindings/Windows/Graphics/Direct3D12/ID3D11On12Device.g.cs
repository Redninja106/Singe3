// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("85611E73-70A9-490E-9614-A9E302777904")]
        internal unsafe struct ID3D11On12Device
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11On12Device*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11On12Device*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11On12Device*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "CreateWrappedResource(win32.System.Com.IUnknown*, win32.Graphics.Direct3D12.D3D11_RESOURCE_FLAGS*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateWrappedResource(win32.System.Com.IUnknown*pResource12, in win32.Graphics.Direct3D12.D3D11_RESOURCE_FLAGS pFlags11, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InState, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES OutState, in global::System.Guid riid, void **ppResource11)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D11_RESOURCE_FLAGS*pFlags11Local = &pFlags11)
                    {
                        win32.System.Com.HRESULT __result = this.CreateWrappedResource(pResource12, pFlags11Local, InState, OutState, riidLocal, ppResource11);
                        return __result;
                    }
                }
            }

            /// <summary>This method creates D3D11 resources for use with D3D 11on12.</summary>
            /// <param name = "pResource12">
            /// <para>Type: <b>IUnknown*</b></para>
            /// <para>A pointer to an already-created D3D12 resource or heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFlags11">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11on12/ns-d3d11on12-d3d11_resource_flags">D3D11_RESOURCE_FLAGS</a>*</b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11on12/ns-d3d11on12-d3d11_resource_flags">D3D11_RESOURCE_FLAGS</a> structure that enables an application to override flags that would be inferred by the resource/heap properties. The D3D11_RESOURCE_FLAGS structure contains bind flags, misc flags, and CPU access flags.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a></b></para>
            /// <para>The use of the resource on input, as a bitwise-OR'd combination of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a> enumeration constants.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "OutState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a></b></para>
            /// <para>The use of the resource on output, as a bitwise-OR'd combination of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a> enumeration constants.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (<b>GUID</b>) for the wrapped resource interface. The <b>REFIID</b>, or <b>GUID</b>, of the interface to the wrapped resource can be obtained by using the __uuidof() macro. For example, __uuidof(<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>) will get the <b>GUID</b> of the interface to a wrapped resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppResource11">
            /// <para>Type: <b>void**</b></para>
            /// <para>After the method returns, points to the newly created wrapped D3D11 resource or heap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateWrappedResource(win32.System.Com.IUnknown*pResource12, win32.Graphics.Direct3D12.D3D11_RESOURCE_FLAGS*pFlags11, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InState, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES OutState, global::System.Guid*riid, [Optional] void **ppResource11)
            {
                fixed (ID3D11On12Device*pThis = &this)
                    return lpVtbl->CreateWrappedResource_4(pThis, pResource12, pFlags11, InState, OutState, riid, ppResource11);
            }

            /// <summary>Releases D3D11 resources that were wrapped for D3D 11on12.</summary>
            /// <param name = "ppResources">
            /// <para>Type: <b>ID3D11Resource*</b></para>
            /// <para>Specifies a pointer to a set of D3D11 resources, defined by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-releasewrappedresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumResources">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Count of the number of resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-releasewrappedresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Call this method prior to calling Flush, to insert resource barriers to the appropriate "out" state, and to mark that they should then be expected to be in the "in" state. If no resource list is provided, all wrapped resources are transitioned. These resources will be marked as “not acquired” in hazard tracking until <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11on12/nf-d3d11on12-id3d11on12device-acquirewrappedresources">ID3D11On12Device::AcquireWrappedResources</a> is called.</para>
            /// <para>Keyed mutex resources cannot be provided to this method; use <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgikeyedmutex-releasesync">IDXGIKeyedMutex::ReleaseSync</a> instead.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-releasewrappedresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ReleaseWrappedResources(win32.Graphics.Direct3D11.ID3D11Resource**ppResources, uint NumResources)
            {
                fixed (ID3D11On12Device*pThis = &this)
                    lpVtbl->ReleaseWrappedResources_5(pThis, ppResources, NumResources);
            }

            /// <summary>Acquires D3D11 resources for use with D3D 11on12. Indicates that rendering to the wrapped resources can begin again.</summary>
            /// <param name = "ppResources">
            /// <para>Type: <b>ID3D11Resource*</b></para>
            /// <para>Specifies a pointer to a set of D3D11 resources, defined by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-acquirewrappedresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumResources">
            /// <para>Type: <b>UINT</b></para>
            /// <para>Count of the number of resources.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-acquirewrappedresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method marks the resources as "acquired" in hazard tracking.</para>
            /// <para>Keyed mutex resources cannot be provided to this method; use <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgikeyedmutex-acquiresync">IDXGIKeyedMutex::AcquireSync</a> instead.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-id3d11on12device-acquirewrappedresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void AcquireWrappedResources(win32.Graphics.Direct3D11.ID3D11Resource**ppResources, uint NumResources)
            {
                fixed (ID3D11On12Device*pThis = &this)
                    lpVtbl->AcquireWrappedResources_6(pThis, ppResources, NumResources);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11On12Device*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11On12Device*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11On12Device*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11On12Device*, win32.System.Com.IUnknown*, win32.Graphics.Direct3D12.D3D11_RESOURCE_FLAGS*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateWrappedResource_4;
                internal delegate *unmanaged[Stdcall]<ID3D11On12Device*, win32.Graphics.Direct3D11.ID3D11Resource**, uint, void>ReleaseWrappedResources_5;
                internal delegate *unmanaged[Stdcall]<ID3D11On12Device*, win32.Graphics.Direct3D11.ID3D11Resource**, uint, void>AcquireWrappedResources_6;
            }

            private Vtbl*lpVtbl;
        }
    }
}