// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("7071E1F0-E84B-4B33-974F-12FA49DE65C5")]
        internal unsafe struct ID3D12Tools
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12Tools*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12Tools*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12Tools*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>This method enables tools such as PIX to instrument shaders.</summary>
            /// <param name = "bEnable">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>TRUE to enable shader instrumentation; otherwise, FALSE.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12tools-enableshaderinstrumentation#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Do not use this interface in your application, its not intended or supported for any scenario other than to enable tooling such as PIX.</para>
            /// <para>Developer Mode must be enabled for this interface to respond.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12tools-enableshaderinstrumentation#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void EnableShaderInstrumentation(win32.System.SystemServices.BOOL bEnable)
            {
                fixed (ID3D12Tools*pThis = &this)
                    lpVtbl->EnableShaderInstrumentation_4(pThis, bEnable);
            }

            /// <summary>Determines whether shader instrumentation is enabled.</summary>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns TRUE if shader instrumentation is enabled; otherwise FALSE.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12tools-shaderinstrumentationenabled">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL ShaderInstrumentationEnabled()
            {
                fixed (ID3D12Tools*pThis = &this)
                    return lpVtbl->ShaderInstrumentationEnabled_5(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12Tools*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12Tools*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12Tools*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12Tools*, win32.System.SystemServices.BOOL, void>EnableShaderInstrumentation_4;
                internal delegate *unmanaged[Stdcall]<ID3D12Tools*, win32.System.SystemServices.BOOL>ShaderInstrumentationEnabled_5;
            }

            private Vtbl*lpVtbl;
        }
    }
}