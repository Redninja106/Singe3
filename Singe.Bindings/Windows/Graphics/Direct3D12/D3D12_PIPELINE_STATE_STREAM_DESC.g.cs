// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        /// <summary>Describes a pipeline state stream.</summary>
        /// <remarks>
        /// <para>Use this structure with the **[ID3D12Device1::CreatePipelineState](/windows/win32/api/d3d12/nf-d3d12-id3d12device2-createpipelinestate)** method to create pipeline state objects.</para>
        /// <para>The format of the provided stream should consist of an alternating set of **[D3D12_PIPELINE_STATE_SUBOBJECT_TYPE](/windows/win32/api/d3d12/ne-d3d12-d3d12_pipeline_state_subobject_type)**, and the correspending subobject types for them (for example, **D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER** pairs with **[D3D12_RASTERIZER_DESC](/windows/win32/api/d3d12/ns-d3d12-d3d12_rasterizer_desc)**. In terms of alignment, the D3D12 runtime expects subobjects to be individual struct pairs of enum-struct, rather than a continous set of fields. It also expects them to be aligned to the natural word alignment of the system. This can be achieved either using `alignas(void*)`, or making a `union` of the enum + subobject and a `void*`.</para>
        /// <para>> [!IMPORTANT] > It isn't sufficient to simply union the **D3D12_PIPELINE_STATE_SUBOBJECT_TYPE** with a **void\***, because this will result in certain subobjects being misaligned. > For example, **D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY** is followed by a **[D3D12_PRIMITIVE_TOPOLOGY_TYPE](/windows/win32/api/d3d12/ne-d3d12-d3d12_primitive_topology_type)** enum. If the subobject type is unioned with a **void\***, then there will be additional padding between these 2 members, resulting in corruption of the stream. > Because of this, you should union the entire subobject struct with a **void\***, when `alignas` is not available</para>
        /// <para>An example of a suitable subobject for use with **[D3D12_RASTERIZER_DESC](/windows/win32/api/d3d12/ns-d3d12-d3d12_rasterizer_desc)** is shown here:</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_pipeline_state_stream_desc#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct D3D12_PIPELINE_STATE_STREAM_DESC
        {
            /// <summary>
            /// <para><a href = "https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_In_</c></para>
            /// <para>Specifies the size of the opaque data structure pointed to by the pPipelineStateSubobjectStream member, in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_pipeline_state_stream_desc#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal nuint SizeInBytes;
            /// <summary>
            /// <para><a href = "https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_In_reads_(_Inexpressible_("Dependentonsizeofsubobjects"))</c></para>
            /// <para>Specifies the address of a data structure that describes as a bytestream an arbitrary pipeline state subobject.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_pipeline_state_stream_desc#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal unsafe void *pPipelineStateSubobjectStream;
        }
    }
}