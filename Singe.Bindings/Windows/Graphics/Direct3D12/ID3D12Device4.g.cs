// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("E865DF17-A9EE-46F9-A463-3098315AA2E5")]
        internal unsafe struct ID3D12Device4
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetPrivateData_4(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->SetPrivateData_5(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_6(pThis, guid, pData);
            }

            /// <inheritdoc cref = "SetName(win32.System.SystemServices.PCWSTR)"/>
            internal unsafe win32.System.Com.HRESULT SetName(string Name)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.Com.HRESULT __result = this.SetName(NameLocal);
                    return __result;
                }
            }

            internal win32.System.Com.HRESULT SetName(win32.System.SystemServices.PCWSTR Name)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->SetName_7(pThis, Name);
            }

            internal uint GetNodeCount()
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetNodeCount_8(pThis);
            }

            /// <inheritdoc cref = "CreateCommandQueue(win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandQueue(in win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC pDesc, in global::System.Guid riid, out void *ppCommandQueue)
            {
                fixed (void **ppCommandQueueLocal = &ppCommandQueue)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateCommandQueue(pDescLocal, riidLocal, ppCommandQueueLocal);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCommandQueue(win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*pDesc, global::System.Guid*riid, void **ppCommandQueue)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateCommandQueue_9(pThis, pDesc, riid, ppCommandQueue);
            }

            /// <inheritdoc cref = "CreateCommandAllocator(win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandAllocator(win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, in global::System.Guid riid, out void *ppCommandAllocator)
            {
                fixed (void **ppCommandAllocatorLocal = &ppCommandAllocator)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateCommandAllocator(type, riidLocal, ppCommandAllocatorLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCommandAllocator(win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, global::System.Guid*riid, void **ppCommandAllocator)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateCommandAllocator_10(pThis, type, riid, ppCommandAllocator);
            }

            /// <inheritdoc cref = "CreateGraphicsPipelineState(win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateGraphicsPipelineState(in win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC pDesc, in global::System.Guid riid, out void *ppPipelineState)
            {
                fixed (void **ppPipelineStateLocal = &ppPipelineState)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateGraphicsPipelineState(pDescLocal, riidLocal, ppPipelineStateLocal);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateGraphicsPipelineState(win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*pDesc, global::System.Guid*riid, void **ppPipelineState)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateGraphicsPipelineState_11(pThis, pDesc, riid, ppPipelineState);
            }

            /// <inheritdoc cref = "CreateComputePipelineState(win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateComputePipelineState(in win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC pDesc, in global::System.Guid riid, out void *ppPipelineState)
            {
                fixed (void **ppPipelineStateLocal = &ppPipelineState)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateComputePipelineState(pDescLocal, riidLocal, ppPipelineStateLocal);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateComputePipelineState(win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*pDesc, global::System.Guid*riid, void **ppPipelineState)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateComputePipelineState_12(pThis, pDesc, riid, ppPipelineState);
            }

            /// <inheritdoc cref = "CreateCommandList(uint, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, win32.Graphics.Direct3D12.ID3D12CommandAllocator*, win32.Graphics.Direct3D12.ID3D12PipelineState*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandList(uint nodeMask, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, win32.Graphics.Direct3D12.ID3D12CommandAllocator*pCommandAllocator, win32.Graphics.Direct3D12.ID3D12PipelineState*pInitialState, in global::System.Guid riid, out void *ppCommandList)
            {
                fixed (void **ppCommandListLocal = &ppCommandList)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateCommandList(nodeMask, type, pCommandAllocator, pInitialState, riidLocal, ppCommandListLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCommandList(uint nodeMask, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, win32.Graphics.Direct3D12.ID3D12CommandAllocator*pCommandAllocator, [Optional] win32.Graphics.Direct3D12.ID3D12PipelineState*pInitialState, global::System.Guid*riid, void **ppCommandList)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateCommandList_13(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }

            internal unsafe win32.System.Com.HRESULT CheckFeatureSupport(win32.Graphics.Direct3D12.D3D12_FEATURE Feature, void *pFeatureSupportData, uint FeatureSupportDataSize)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CheckFeatureSupport_14(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }

            /// <inheritdoc cref = "CreateDescriptorHeap(win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateDescriptorHeap(in win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC pDescriptorHeapDesc, in global::System.Guid riid, out void *ppvHeap)
            {
                fixed (void **ppvHeapLocal = &ppvHeap)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*pDescriptorHeapDescLocal = &pDescriptorHeapDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateDescriptorHeap(pDescriptorHeapDescLocal, riidLocal, ppvHeapLocal);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateDescriptorHeap(win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*pDescriptorHeapDesc, global::System.Guid*riid, void **ppvHeap)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateDescriptorHeap_15(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }

            internal uint GetDescriptorHandleIncrementSize(win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetDescriptorHandleIncrementSize_16(pThis, DescriptorHeapType);
            }

            /// <inheritdoc cref = "CreateRootSignature(uint, void *, nuint, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateRootSignature(uint nodeMask, void *pBlobWithRootSignature, nuint blobLengthInBytes, in global::System.Guid riid, out void *ppvRootSignature)
            {
                fixed (void **ppvRootSignatureLocal = &ppvRootSignature)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateRootSignature(nodeMask, pBlobWithRootSignature, blobLengthInBytes, riidLocal, ppvRootSignatureLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRootSignature(uint nodeMask, void *pBlobWithRootSignature, nuint blobLengthInBytes, global::System.Guid*riid, void **ppvRootSignature)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateRootSignature_17(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }

            /// <inheritdoc cref = "CreateConstantBufferView(win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateConstantBufferView(win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC);
                this.CreateConstantBufferView(pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            internal unsafe void CreateConstantBufferView([Optional] win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CreateConstantBufferView_18(pThis, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateShaderResourceView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateShaderResourceView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC);
                this.CreateShaderResourceView(pResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            internal unsafe void CreateShaderResourceView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CreateShaderResourceView_19(pThis, pResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateUnorderedAccessView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateUnorderedAccessView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.ID3D12Resource*pCounterResource, win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC);
                this.CreateUnorderedAccessView(pResource, pCounterResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            internal unsafe void CreateUnorderedAccessView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.ID3D12Resource*pCounterResource, [Optional] win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CreateUnorderedAccessView_20(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateRenderTargetView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateRenderTargetView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC);
                this.CreateRenderTargetView(pResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            internal unsafe void CreateRenderTargetView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CreateRenderTargetView_21(pThis, pResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateDepthStencilView(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateDepthStencilView(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC? pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC);
                this.CreateDepthStencilView(pResource, pDesc.HasValue ? &pDescLocal : null, DestDescriptor);
            }

            internal unsafe void CreateDepthStencilView([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CreateDepthStencilView_22(pThis, pResource, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CreateSampler(win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE)"/>
            internal unsafe void CreateSampler(in win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*pDescLocal = &pDesc)
                {
                    this.CreateSampler(pDescLocal, DestDescriptor);
                }
            }

            internal unsafe void CreateSampler(win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CreateSampler_23(pThis, pDesc, DestDescriptor);
            }

            /// <inheritdoc cref = "CopyDescriptors(uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE)"/>
            internal unsafe void CopyDescriptors(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE> pDestDescriptorRangeStarts, ReadOnlySpan<uint> pDestDescriptorRangeSizes, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE> pSrcDescriptorRangeStarts, ReadOnlySpan<uint> pSrcDescriptorRangeSizes, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
            {
                fixed (uint *pSrcDescriptorRangeSizesLocal = pSrcDescriptorRangeSizes)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pSrcDescriptorRangeStartsLocal = pSrcDescriptorRangeStarts)
                    {
                        fixed (uint *pDestDescriptorRangeSizesLocal = pDestDescriptorRangeSizes)
                        {
                            fixed (win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pDestDescriptorRangeStartsLocal = pDestDescriptorRangeStarts)
                            {
                                if (pDestDescriptorRangeStarts.Length != pDestDescriptorRangeSizes.Length)
                                    throw new ArgumentException();
                                if (pSrcDescriptorRangeStarts.Length != pSrcDescriptorRangeSizes.Length)
                                    throw new ArgumentException();
                                this.CopyDescriptors((uint)pDestDescriptorRangeSizes.Length, pDestDescriptorRangeStartsLocal, pDestDescriptorRangeSizesLocal, (uint)pSrcDescriptorRangeSizes.Length, pSrcDescriptorRangeStartsLocal, pSrcDescriptorRangeSizesLocal, DescriptorHeapsType);
                            }
                        }
                    }
                }
            }

            internal unsafe void CopyDescriptors(uint NumDestDescriptorRanges, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pDestDescriptorRangeStarts, [Optional] uint *pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pSrcDescriptorRangeStarts, [Optional] uint *pSrcDescriptorRangeSizes, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CopyDescriptors_24(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }

            internal void CopyDescriptorsSimple(uint NumDescriptors, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->CopyDescriptorsSimple_25(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }

            /// <inheritdoc cref = "GetResourceAllocationInfo(uint, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*)"/>
            internal unsafe win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(uint visibleMask, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC> pResourceDescs)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescsLocal = pResourceDescs)
                {
                    win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO __result = this.GetResourceAllocationInfo(visibleMask, (uint)pResourceDescs.Length, pResourceDescsLocal);
                    return __result;
                }
            }

            internal unsafe win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescs)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetResourceAllocationInfo_26(pThis, visibleMask, numResourceDescs, pResourceDescs);
            }

            internal win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES GetCustomHeapProperties(uint nodeMask, win32.Graphics.Direct3D12.D3D12_HEAP_TYPE heapType)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetCustomHeapProperties_27(pThis, nodeMask, heapType);
            }

            /// <inheritdoc cref = "CreateCommittedResource(win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommittedResource(in win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES pHeapProperties, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS HeapFlags, in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialResourceState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, in global::System.Guid riidResource, void **ppvResource)
            {
                fixed (global::System.Guid*riidResourceLocal = &riidResource)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*pHeapPropertiesLocal = &pHeapProperties)
                        {
                            win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                            win32.System.Com.HRESULT __result = this.CreateCommittedResource(pHeapPropertiesLocal, HeapFlags, pDescLocal, InitialResourceState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, riidResourceLocal, ppvResource);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCommittedResource(win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*pHeapProperties, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS HeapFlags, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialResourceState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, global::System.Guid*riidResource, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateCommittedResource_28(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }

            /// <inheritdoc cref = "CreateHeap(win32.Graphics.Direct3D12.D3D12_HEAP_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateHeap(in win32.Graphics.Direct3D12.D3D12_HEAP_DESC pDesc, in global::System.Guid riid, void **ppvHeap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_HEAP_DESC*pDescLocal = &pDesc)
                    {
                        win32.System.Com.HRESULT __result = this.CreateHeap(pDescLocal, riidLocal, ppvHeap);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateHeap(win32.Graphics.Direct3D12.D3D12_HEAP_DESC*pDesc, global::System.Guid*riid, [Optional] void **ppvHeap)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateHeap_29(pThis, pDesc, riid, ppvHeap);
            }

            /// <inheritdoc cref = "CreatePlacedResource(win32.Graphics.Direct3D12.ID3D12Heap*, ulong, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreatePlacedResource(win32.Graphics.Direct3D12.ID3D12Heap*pHeap, ulong HeapOffset, in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, in global::System.Guid riid, void **ppvResource)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                        win32.System.Com.HRESULT __result = this.CreatePlacedResource(pHeap, HeapOffset, pDescLocal, InitialState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, riidLocal, ppvResource);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreatePlacedResource(win32.Graphics.Direct3D12.ID3D12Heap*pHeap, ulong HeapOffset, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, global::System.Guid*riid, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreatePlacedResource_30(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }

            /// <inheritdoc cref = "CreateReservedResource(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateReservedResource(in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, in global::System.Guid riid, void **ppvResource)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                        win32.System.Com.HRESULT __result = this.CreateReservedResource(pDescLocal, InitialState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, riidLocal, ppvResource);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateReservedResource(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, global::System.Guid*riid, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateReservedResource_31(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }

            /// <inheritdoc cref = "CreateSharedHandle(win32.Graphics.Direct3D12.ID3D12DeviceChild*, win32.System.SystemServices.SECURITY_ATTRIBUTES*, uint, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.HANDLE*)"/>
            internal unsafe win32.System.Com.HRESULT CreateSharedHandle(win32.Graphics.Direct3D12.ID3D12DeviceChild*pObject, win32.System.SystemServices.SECURITY_ATTRIBUTES? pAttributes, uint Access, string Name, out Microsoft.Win32.SafeHandles.SafeFileHandle pHandle)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.SystemServices.SECURITY_ATTRIBUTES pAttributesLocal = pAttributes.HasValue ? pAttributes.Value : default(win32.System.SystemServices.SECURITY_ATTRIBUTES);
                    win32.System.SystemServices.HANDLE pHandleLocal;
                    win32.System.Com.HRESULT __result = this.CreateSharedHandle(pObject, pAttributes.HasValue ? &pAttributesLocal : null, Access, NameLocal, &pHandleLocal);
                    pHandle = new Microsoft.Win32.SafeHandles.SafeFileHandle(pHandleLocal, ownsHandle: true);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSharedHandle(win32.Graphics.Direct3D12.ID3D12DeviceChild*pObject, [Optional] win32.System.SystemServices.SECURITY_ATTRIBUTES*pAttributes, uint Access, win32.System.SystemServices.PCWSTR Name, win32.System.SystemServices.HANDLE*pHandle)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateSharedHandle_32(pThis, pObject, pAttributes, Access, Name, pHandle);
            }

            /// <inheritdoc cref = "OpenSharedHandle(win32.System.SystemServices.HANDLE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT OpenSharedHandle(SafeHandle NTHandle, in global::System.Guid riid, void **ppvObj)
            {
                bool NTHandleAddRef = false;
                try
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.SystemServices.HANDLE NTHandleLocal;
                        if (NTHandle is object)
                        {
                            NTHandle.DangerousAddRef(ref NTHandleAddRef);
                            NTHandleLocal = (win32.System.SystemServices.HANDLE)NTHandle.DangerousGetHandle();
                        }
                        else
                            NTHandleLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.OpenSharedHandle(NTHandleLocal, riidLocal, ppvObj);
                        return __result;
                    }
                }
                finally
                {
                    if (NTHandleAddRef)
                        NTHandle.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT OpenSharedHandle(win32.System.SystemServices.HANDLE NTHandle, global::System.Guid*riid, [Optional] void **ppvObj)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->OpenSharedHandle_33(pThis, NTHandle, riid, ppvObj);
            }

            /// <inheritdoc cref = "OpenSharedHandleByName(win32.System.SystemServices.PCWSTR, uint, win32.System.SystemServices.HANDLE*)"/>
            internal unsafe win32.System.Com.HRESULT OpenSharedHandleByName(string Name, uint Access, out Microsoft.Win32.SafeHandles.SafeFileHandle pNTHandle)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.SystemServices.HANDLE pNTHandleLocal;
                    win32.System.Com.HRESULT __result = this.OpenSharedHandleByName(NameLocal, Access, &pNTHandleLocal);
                    pNTHandle = new Microsoft.Win32.SafeHandles.SafeFileHandle(pNTHandleLocal, ownsHandle: true);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT OpenSharedHandleByName(win32.System.SystemServices.PCWSTR Name, uint Access, win32.System.SystemServices.HANDLE*pNTHandle)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->OpenSharedHandleByName_34(pThis, Name, Access, pNTHandle);
            }

            internal unsafe win32.System.Com.HRESULT MakeResident(uint NumObjects, win32.Graphics.Direct3D12.ID3D12Pageable**ppObjects)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->MakeResident_35(pThis, NumObjects, ppObjects);
            }

            internal unsafe win32.System.Com.HRESULT Evict(uint NumObjects, win32.Graphics.Direct3D12.ID3D12Pageable**ppObjects)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->Evict_36(pThis, NumObjects, ppObjects);
            }

            /// <inheritdoc cref = "CreateFence(ulong, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateFence(ulong InitialValue, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS Flags, in global::System.Guid riid, out void *ppFence)
            {
                fixed (void **ppFenceLocal = &ppFence)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateFence(InitialValue, Flags, riidLocal, ppFenceLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateFence(ulong InitialValue, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS Flags, global::System.Guid*riid, void **ppFence)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateFence_37(pThis, InitialValue, Flags, riid, ppFence);
            }

            internal win32.System.Com.HRESULT GetDeviceRemovedReason()
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetDeviceRemovedReason_38(pThis);
            }

            /// <inheritdoc cref = "GetCopyableFootprints(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, uint, uint, ulong, win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, uint *, ulong *, ulong *)"/>
            internal unsafe void GetCopyableFootprints(in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pResourceDesc, uint FirstSubresource, ulong BaseOffset, Span<win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT> pLayouts, Span<uint> pNumRows, Span<ulong> pRowSizeInBytes, ulong *pTotalBytes)
            {
                fixed (ulong *pRowSizeInBytesLocal = pRowSizeInBytes)
                {
                    fixed (uint *pNumRowsLocal = pNumRows)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*pLayoutsLocal = pLayouts)
                        {
                            fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescLocal = &pResourceDesc)
                            {
                                if (pLayouts.Length != pNumRows.Length)
                                    throw new ArgumentException();
                                if (pLayouts.Length != pRowSizeInBytes.Length)
                                    throw new ArgumentException();
                                this.GetCopyableFootprints(pResourceDescLocal, FirstSubresource, (uint)pRowSizeInBytes.Length, BaseOffset, pLayoutsLocal, pNumRowsLocal, pRowSizeInBytesLocal, pTotalBytes);
                            }
                        }
                    }
                }
            }

            internal unsafe void GetCopyableFootprints(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, [Optional] win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*pLayouts, [Optional] uint *pNumRows, [Optional] ulong *pRowSizeInBytes, [Optional] ulong *pTotalBytes)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->GetCopyableFootprints_39(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }

            /// <inheritdoc cref = "CreateQueryHeap(win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateQueryHeap(in win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC pDesc, in global::System.Guid riid, void **ppvHeap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*pDescLocal = &pDesc)
                    {
                        win32.System.Com.HRESULT __result = this.CreateQueryHeap(pDescLocal, riidLocal, ppvHeap);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateQueryHeap(win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*pDesc, global::System.Guid*riid, [Optional] void **ppvHeap)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateQueryHeap_40(pThis, pDesc, riid, ppvHeap);
            }

            internal win32.System.Com.HRESULT SetStablePowerState(win32.System.SystemServices.BOOL Enable)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->SetStablePowerState_41(pThis, Enable);
            }

            /// <inheritdoc cref = "CreateCommandSignature(win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*, win32.Graphics.Direct3D12.ID3D12RootSignature*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandSignature(in win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC pDesc, win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature, in global::System.Guid riid, void **ppvCommandSignature)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*pDescLocal = &pDesc)
                    {
                        win32.System.Com.HRESULT __result = this.CreateCommandSignature(pDescLocal, pRootSignature, riidLocal, ppvCommandSignature);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCommandSignature(win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*pDesc, [Optional] win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature, global::System.Guid*riid, [Optional] void **ppvCommandSignature)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateCommandSignature_42(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }

            internal unsafe void GetResourceTiling(win32.Graphics.Direct3D12.ID3D12Resource*pTiledResource, [Optional] uint *pNumTilesForEntireResource, [Optional] win32.Graphics.Direct3D12.D3D12_PACKED_MIP_INFO*pPackedMipDesc, [Optional] win32.Graphics.Direct3D12.D3D12_TILE_SHAPE*pStandardTileShapeForNonPackedMips, [Optional] uint *pNumSubresourceTilings, uint FirstSubresourceTilingToGet, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_TILING*pSubresourceTilingsForNonPackedMips)
            {
                fixed (ID3D12Device4*pThis = &this)
                    lpVtbl->GetResourceTiling_43(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }

            internal win32.System.SystemServices.LUID GetAdapterLuid()
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetAdapterLuid_44(pThis);
            }

            /// <inheritdoc cref = "CreatePipelineLibrary(void *, nuint, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreatePipelineLibrary(void *pLibraryBlob, nuint BlobLength, in global::System.Guid riid, out void *ppPipelineLibrary)
            {
                fixed (void **ppPipelineLibraryLocal = &ppPipelineLibrary)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreatePipelineLibrary(pLibraryBlob, BlobLength, riidLocal, ppPipelineLibraryLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreatePipelineLibrary(void *pLibraryBlob, nuint BlobLength, global::System.Guid*riid, void **ppPipelineLibrary)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreatePipelineLibrary_45(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }

            /// <inheritdoc cref = "SetEventOnMultipleFenceCompletion(win32.Graphics.Direct3D12.ID3D12Fence**, ulong *, uint, win32.Graphics.Direct3D12.D3D12_MULTIPLE_FENCE_WAIT_FLAGS, win32.System.SystemServices.HANDLE)"/>
            internal unsafe win32.System.Com.HRESULT SetEventOnMultipleFenceCompletion(win32.Graphics.Direct3D12.ID3D12Fence**ppFences, ReadOnlySpan<ulong> pFenceValues, win32.Graphics.Direct3D12.D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, SafeHandle hEvent)
            {
                bool hEventAddRef = false;
                try
                {
                    fixed (ulong *pFenceValuesLocal = pFenceValues)
                    {
                        win32.System.SystemServices.HANDLE hEventLocal;
                        if (hEvent is object)
                        {
                            hEvent.DangerousAddRef(ref hEventAddRef);
                            hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                        }
                        else
                            hEventLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.SetEventOnMultipleFenceCompletion(ppFences, pFenceValuesLocal, (uint)pFenceValues.Length, Flags, hEventLocal);
                        return __result;
                    }
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT SetEventOnMultipleFenceCompletion(win32.Graphics.Direct3D12.ID3D12Fence**ppFences, ulong *pFenceValues, uint NumFences, win32.Graphics.Direct3D12.D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, win32.System.SystemServices.HANDLE hEvent)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->SetEventOnMultipleFenceCompletion_46(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }

            /// <inheritdoc cref = "SetResidencyPriority(uint, win32.Graphics.Direct3D12.ID3D12Pageable**, win32.Graphics.Direct3D12.D3D12_RESIDENCY_PRIORITY*)"/>
            internal unsafe win32.System.Com.HRESULT SetResidencyPriority(win32.Graphics.Direct3D12.ID3D12Pageable**ppObjects, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RESIDENCY_PRIORITY> pPriorities)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RESIDENCY_PRIORITY*pPrioritiesLocal = pPriorities)
                {
                    win32.System.Com.HRESULT __result = this.SetResidencyPriority((uint)pPriorities.Length, ppObjects, pPrioritiesLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetResidencyPriority(uint NumObjects, win32.Graphics.Direct3D12.ID3D12Pageable**ppObjects, win32.Graphics.Direct3D12.D3D12_RESIDENCY_PRIORITY*pPriorities)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->SetResidencyPriority_47(pThis, NumObjects, ppObjects, pPriorities);
            }

            /// <inheritdoc cref = "CreatePipelineState(win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_STREAM_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreatePipelineState(in win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_STREAM_DESC pDesc, in global::System.Guid riid, out void *ppPipelineState)
            {
                fixed (void **ppPipelineStateLocal = &ppPipelineState)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_STREAM_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreatePipelineState(pDescLocal, riidLocal, ppPipelineStateLocal);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreatePipelineState(win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_STREAM_DESC*pDesc, global::System.Guid*riid, void **ppPipelineState)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreatePipelineState_48(pThis, pDesc, riid, ppPipelineState);
            }

            /// <inheritdoc cref = "OpenExistingHeapFromAddress(void *, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT OpenExistingHeapFromAddress(void *pAddress, in global::System.Guid riid, out void *ppvHeap)
            {
                fixed (void **ppvHeapLocal = &ppvHeap)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.OpenExistingHeapFromAddress(pAddress, riidLocal, ppvHeapLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT OpenExistingHeapFromAddress(void *pAddress, global::System.Guid*riid, void **ppvHeap)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->OpenExistingHeapFromAddress_49(pThis, pAddress, riid, ppvHeap);
            }

            /// <inheritdoc cref = "OpenExistingHeapFromFileMapping(win32.System.SystemServices.HANDLE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT OpenExistingHeapFromFileMapping(SafeHandle hFileMapping, in global::System.Guid riid, out void *ppvHeap)
            {
                bool hFileMappingAddRef = false;
                try
                {
                    fixed (void **ppvHeapLocal = &ppvHeap)
                    {
                        fixed (global::System.Guid*riidLocal = &riid)
                        {
                            win32.System.SystemServices.HANDLE hFileMappingLocal;
                            if (hFileMapping is object)
                            {
                                hFileMapping.DangerousAddRef(ref hFileMappingAddRef);
                                hFileMappingLocal = (win32.System.SystemServices.HANDLE)hFileMapping.DangerousGetHandle();
                            }
                            else
                                hFileMappingLocal = default(win32.System.SystemServices.HANDLE);
                            win32.System.Com.HRESULT __result = this.OpenExistingHeapFromFileMapping(hFileMappingLocal, riidLocal, ppvHeapLocal);
                            return __result;
                        }
                    }
                }
                finally
                {
                    if (hFileMappingAddRef)
                        hFileMapping.DangerousRelease();
                }
            }

            internal unsafe win32.System.Com.HRESULT OpenExistingHeapFromFileMapping(win32.System.SystemServices.HANDLE hFileMapping, global::System.Guid*riid, void **ppvHeap)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->OpenExistingHeapFromFileMapping_50(pThis, hFileMapping, riid, ppvHeap);
            }

            internal unsafe win32.System.Com.HRESULT EnqueueMakeResident(win32.Graphics.Direct3D12.D3D12_RESIDENCY_FLAGS Flags, uint NumObjects, win32.Graphics.Direct3D12.ID3D12Pageable**ppObjects, win32.Graphics.Direct3D12.ID3D12Fence*pFenceToSignal, ulong FenceValueToSignal)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->EnqueueMakeResident_51(pThis, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
            }

            /// <inheritdoc cref = "CreateCommandList1(uint, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_FLAGS, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommandList1(uint nodeMask, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_FLAGS flags, in global::System.Guid riid, out void *ppCommandList)
            {
                fixed (void **ppCommandListLocal = &ppCommandList)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.CreateCommandList1(nodeMask, type, flags, riidLocal, ppCommandListLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCommandList1(uint nodeMask, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE type, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_FLAGS flags, global::System.Guid*riid, void **ppCommandList)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateCommandList1_52(pThis, nodeMask, type, flags, riid, ppCommandList);
            }

            /// <inheritdoc cref = "CreateProtectedResourceSession(win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateProtectedResourceSession(in win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC pDesc, in global::System.Guid riid, out void *ppSession)
            {
                fixed (void **ppSessionLocal = &ppSession)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CreateProtectedResourceSession(pDescLocal, riidLocal, ppSessionLocal);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateProtectedResourceSession(win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC*pDesc, global::System.Guid*riid, void **ppSession)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateProtectedResourceSession_53(pThis, pDesc, riid, ppSession);
            }

            /// <inheritdoc cref = "CreateCommittedResource1(win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateCommittedResource1(in win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES pHeapProperties, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS HeapFlags, in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialResourceState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*pProtectedSession, in global::System.Guid riidResource, void **ppvResource)
            {
                fixed (global::System.Guid*riidResourceLocal = &riidResource)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        fixed (win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*pHeapPropertiesLocal = &pHeapProperties)
                        {
                            win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                            win32.System.Com.HRESULT __result = this.CreateCommittedResource1(pHeapPropertiesLocal, HeapFlags, pDescLocal, InitialResourceState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, pProtectedSession, riidResourceLocal, ppvResource);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateCommittedResource1(win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*pHeapProperties, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS HeapFlags, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialResourceState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, [Optional] win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*pProtectedSession, global::System.Guid*riidResource, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateCommittedResource1_54(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
            }

            /// <inheritdoc cref = "CreateHeap1(win32.Graphics.Direct3D12.D3D12_HEAP_DESC*, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateHeap1(in win32.Graphics.Direct3D12.D3D12_HEAP_DESC pDesc, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*pProtectedSession, in global::System.Guid riid, void **ppvHeap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_HEAP_DESC*pDescLocal = &pDesc)
                    {
                        win32.System.Com.HRESULT __result = this.CreateHeap1(pDescLocal, pProtectedSession, riidLocal, ppvHeap);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateHeap1(win32.Graphics.Direct3D12.D3D12_HEAP_DESC*pDesc, [Optional] win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*pProtectedSession, global::System.Guid*riid, [Optional] void **ppvHeap)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateHeap1_55(pThis, pDesc, pProtectedSession, riid, ppvHeap);
            }

            /// <inheritdoc cref = "CreateReservedResource1(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT CreateReservedResource1(in win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE? pOptimizedClearValue, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*pProtectedSession, in global::System.Guid riid, void **ppvResource)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDescLocal = &pDesc)
                    {
                        win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE pOptimizedClearValueLocal = pOptimizedClearValue.HasValue ? pOptimizedClearValue.Value : default(win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE);
                        win32.System.Com.HRESULT __result = this.CreateReservedResource1(pDescLocal, InitialState, pOptimizedClearValue.HasValue ? &pOptimizedClearValueLocal : null, pProtectedSession, riidLocal, ppvResource);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateReservedResource1(win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pDesc, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES InitialState, [Optional] win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*pOptimizedClearValue, [Optional] win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*pProtectedSession, global::System.Guid*riid, [Optional] void **ppvResource)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->CreateReservedResource1_56(pThis, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
            }

            /// <inheritdoc cref = "GetResourceAllocationInfo1(uint, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO1*)"/>
            internal unsafe win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1(uint visibleMask, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC> pResourceDescs, Span<win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO1> pResourceAllocationInfo1)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO1*pResourceAllocationInfo1Local = pResourceAllocationInfo1)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescsLocal = pResourceDescs)
                    {
                        if (pResourceDescs.Length != pResourceAllocationInfo1.Length)
                            throw new ArgumentException();
                        win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO __result = this.GetResourceAllocationInfo1(visibleMask, (uint)pResourceAllocationInfo1.Length, pResourceDescsLocal, pResourceAllocationInfo1Local);
                        return __result;
                    }
                }
            }

            internal unsafe win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*pResourceDescs, [Optional] win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO1*pResourceAllocationInfo1)
            {
                fixed (ID3D12Device4*pThis = &this)
                    return lpVtbl->GetResourceAllocationInfo1_57(pThis, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_6;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.System.SystemServices.PCWSTR, win32.System.Com.HRESULT>SetName_7;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint>GetNodeCount_8;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandQueue_9;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandAllocator_10;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateGraphicsPipelineState_11;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateComputePipelineState_12;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, win32.Graphics.Direct3D12.ID3D12CommandAllocator*, win32.Graphics.Direct3D12.ID3D12PipelineState*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandList_13;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_FEATURE, void *, uint, win32.System.Com.HRESULT>CheckFeatureSupport_14;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateDescriptorHeap_15;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE, uint>GetDescriptorHandleIncrementSize_16;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, void *, nuint, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateRootSignature_17;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateConstantBufferView_18;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateShaderResourceView_19;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateUnorderedAccessView_20;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateRenderTargetView_21;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateDepthStencilView_22;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, void>CreateSampler_23;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, uint *, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE, void>CopyDescriptors_24;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE, void>CopyDescriptorsSimple_25;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO>GetResourceAllocationInfo_26;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.D3D12_HEAP_TYPE, win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES>GetCustomHeapProperties_27;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommittedResource_28;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_HEAP_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateHeap_29;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12Heap*, ulong, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreatePlacedResource_30;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateReservedResource_31;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12DeviceChild*, win32.System.SystemServices.SECURITY_ATTRIBUTES*, uint, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.HANDLE*, win32.System.Com.HRESULT>CreateSharedHandle_32;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.System.SystemServices.HANDLE, global::System.Guid*, void **, win32.System.Com.HRESULT>OpenSharedHandle_33;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.System.SystemServices.PCWSTR, uint, win32.System.SystemServices.HANDLE*, win32.System.Com.HRESULT>OpenSharedHandleByName_34;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.ID3D12Pageable**, win32.System.Com.HRESULT>MakeResident_35;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.ID3D12Pageable**, win32.System.Com.HRESULT>Evict_36;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, ulong, win32.Graphics.Direct3D12.D3D12_FENCE_FLAGS, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateFence_37;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.System.Com.HRESULT>GetDeviceRemovedReason_38;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, uint, uint, ulong, win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, uint *, ulong *, ulong *, void>GetCopyableFootprints_39;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateQueryHeap_40;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.System.SystemServices.BOOL, win32.System.Com.HRESULT>SetStablePowerState_41;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC*, win32.Graphics.Direct3D12.ID3D12RootSignature*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandSignature_42;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12Resource*, uint *, win32.Graphics.Direct3D12.D3D12_PACKED_MIP_INFO*, win32.Graphics.Direct3D12.D3D12_TILE_SHAPE*, uint *, uint, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_TILING*, void>GetResourceTiling_43;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.System.SystemServices.LUID>GetAdapterLuid_44;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, void *, nuint, global::System.Guid*, void **, win32.System.Com.HRESULT>CreatePipelineLibrary_45;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.ID3D12Fence**, ulong *, uint, win32.Graphics.Direct3D12.D3D12_MULTIPLE_FENCE_WAIT_FLAGS, win32.System.SystemServices.HANDLE, win32.System.Com.HRESULT>SetEventOnMultipleFenceCompletion_46;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.ID3D12Pageable**, win32.Graphics.Direct3D12.D3D12_RESIDENCY_PRIORITY*, win32.System.Com.HRESULT>SetResidencyPriority_47;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_STREAM_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreatePipelineState_48;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, void *, global::System.Guid*, void **, win32.System.Com.HRESULT>OpenExistingHeapFromAddress_49;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.System.SystemServices.HANDLE, global::System.Guid*, void **, win32.System.Com.HRESULT>OpenExistingHeapFromFileMapping_50;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_RESIDENCY_FLAGS, uint, win32.Graphics.Direct3D12.ID3D12Pageable**, win32.Graphics.Direct3D12.ID3D12Fence*, ulong, win32.System.Com.HRESULT>EnqueueMakeResident_51;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_FLAGS, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommandList1_52;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateProtectedResourceSession_53;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES*, win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateCommittedResource1_54;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_HEAP_DESC*, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateHeap1_55;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES, win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE*, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*, global::System.Guid*, void **, win32.System.Com.HRESULT>CreateReservedResource1_56;
                internal delegate *unmanaged[Stdcall]<ID3D12Device4*, uint, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC*, win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO1*, win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO>GetResourceAllocationInfo1_57;
            }

            private Vtbl*lpVtbl;
        }
    }
}