// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        [Guid("C3827890-E548-4CFA-96CF-5689A9370F80")]
        internal unsafe struct ID3D12GraphicsCommandList6
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->GetPrivateData_4(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->SetPrivateData_5(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_6(pThis, guid, pData);
            }

            /// <inheritdoc cref = "SetName(win32.System.SystemServices.PCWSTR)"/>
            internal unsafe win32.System.Com.HRESULT SetName(string Name)
            {
                fixed (char *NameLocal = Name)
                {
                    win32.System.Com.HRESULT __result = this.SetName(NameLocal);
                    return __result;
                }
            }

            internal win32.System.Com.HRESULT SetName(win32.System.SystemServices.PCWSTR Name)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->SetName_7(pThis, Name);
            }

            /// <inheritdoc cref = "GetDevice(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetDevice(in global::System.Guid riid, void **ppvDevice)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.System.Com.HRESULT __result = this.GetDevice(riidLocal, ppvDevice);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDevice(global::System.Guid*riid, [Optional] void **ppvDevice)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->GetDevice_8(pThis, riid, ppvDevice);
            }

            internal new win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE GetType()
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->GetType_9(pThis);
            }

            internal win32.System.Com.HRESULT Close()
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->Close_10(pThis);
            }

            internal unsafe win32.System.Com.HRESULT Reset(win32.Graphics.Direct3D12.ID3D12CommandAllocator*pAllocator, [Optional] win32.Graphics.Direct3D12.ID3D12PipelineState*pInitialState)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    return lpVtbl->Reset_11(pThis, pAllocator, pInitialState);
            }

            internal unsafe void ClearState([Optional] win32.Graphics.Direct3D12.ID3D12PipelineState*pPipelineState)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ClearState_12(pThis, pPipelineState);
            }

            internal void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->DrawInstanced_13(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }

            internal void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->DrawIndexedInstanced_14(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }

            internal void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->Dispatch_15(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }

            internal unsafe void CopyBufferRegion(win32.Graphics.Direct3D12.ID3D12Resource*pDstBuffer, ulong DstOffset, win32.Graphics.Direct3D12.ID3D12Resource*pSrcBuffer, ulong SrcOffset, ulong NumBytes)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->CopyBufferRegion_16(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }

            /// <inheritdoc cref = "CopyTextureRegion(win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, uint, uint, uint, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, win32.Graphics.Direct3D12.D3D12_BOX*)"/>
            internal unsafe void CopyTextureRegion(in win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION pDst, uint DstX, uint DstY, uint DstZ, in win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION pSrc, win32.Graphics.Direct3D12.D3D12_BOX? pSrcBox)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pSrcLocal = &pSrc)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pDstLocal = &pDst)
                    {
                        win32.Graphics.Direct3D12.D3D12_BOX pSrcBoxLocal = pSrcBox.HasValue ? pSrcBox.Value : default(win32.Graphics.Direct3D12.D3D12_BOX);
                        this.CopyTextureRegion(pDstLocal, DstX, DstY, DstZ, pSrcLocal, pSrcBox.HasValue ? &pSrcBoxLocal : null);
                    }
                }
            }

            internal unsafe void CopyTextureRegion(win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pDst, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*pSrc, [Optional] win32.Graphics.Direct3D12.D3D12_BOX*pSrcBox)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->CopyTextureRegion_17(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }

            internal unsafe void CopyResource(win32.Graphics.Direct3D12.ID3D12Resource*pDstResource, win32.Graphics.Direct3D12.ID3D12Resource*pSrcResource)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->CopyResource_18(pThis, pDstResource, pSrcResource);
            }

            /// <inheritdoc cref = "CopyTiles(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS)"/>
            internal unsafe void CopyTiles(win32.Graphics.Direct3D12.ID3D12Resource*pTiledResource, in win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE pTileRegionStartCoordinate, in win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE pTileRegionSize, win32.Graphics.Direct3D12.ID3D12Resource*pBuffer, ulong BufferStartOffsetInBytes, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS Flags)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*pTileRegionSizeLocal = &pTileRegionSize)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*pTileRegionStartCoordinateLocal = &pTileRegionStartCoordinate)
                    {
                        this.CopyTiles(pTiledResource, pTileRegionStartCoordinateLocal, pTileRegionSizeLocal, pBuffer, BufferStartOffsetInBytes, Flags);
                    }
                }
            }

            internal unsafe void CopyTiles(win32.Graphics.Direct3D12.ID3D12Resource*pTiledResource, win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*pTileRegionStartCoordinate, win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*pTileRegionSize, win32.Graphics.Direct3D12.ID3D12Resource*pBuffer, ulong BufferStartOffsetInBytes, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS Flags)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->CopyTiles_19(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }

            internal unsafe void ResolveSubresource(win32.Graphics.Direct3D12.ID3D12Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D12.ID3D12Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Dxgi.DXGI_FORMAT Format)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ResolveSubresource_20(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }

            internal void IASetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->IASetPrimitiveTopology_21(pThis, PrimitiveTopology);
            }

            /// <inheritdoc cref = "RSSetViewports(uint, win32.Graphics.Direct3D12.D3D12_VIEWPORT*)"/>
            internal unsafe void RSSetViewports(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_VIEWPORT> pViewports)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_VIEWPORT*pViewportsLocal = pViewports)
                {
                    this.RSSetViewports((uint)pViewports.Length, pViewportsLocal);
                }
            }

            internal unsafe void RSSetViewports(uint NumViewports, win32.Graphics.Direct3D12.D3D12_VIEWPORT*pViewports)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->RSSetViewports_22(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSSetScissorRects(uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSSetScissorRects(ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.RSSetScissorRects((uint)pRects.Length, pRectsLocal);
                }
            }

            internal unsafe void RSSetScissorRects(uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->RSSetScissorRects_23(pThis, NumRects, pRects);
            }

            /// <inheritdoc cref = "OMSetBlendFactor(float *)"/>
            internal unsafe void OMSetBlendFactor(ReadOnlySpan<float> BlendFactor)
            {
                fixed (float *BlendFactorLocal = BlendFactor)
                {
                    if (BlendFactor.Length < 4)
                        throw new ArgumentException();
                    this.OMSetBlendFactor(BlendFactorLocal);
                }
            }

            internal unsafe void OMSetBlendFactor([Optional] float *BlendFactor)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->OMSetBlendFactor_24(pThis, BlendFactor);
            }

            internal void OMSetStencilRef(uint StencilRef)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->OMSetStencilRef_25(pThis, StencilRef);
            }

            internal unsafe void SetPipelineState(win32.Graphics.Direct3D12.ID3D12PipelineState*pPipelineState)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetPipelineState_26(pThis, pPipelineState);
            }

            /// <inheritdoc cref = "ResourceBarrier(uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*)"/>
            internal unsafe void ResourceBarrier(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER> pBarriers)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*pBarriersLocal = pBarriers)
                {
                    this.ResourceBarrier((uint)pBarriers.Length, pBarriersLocal);
                }
            }

            internal unsafe void ResourceBarrier(uint NumBarriers, win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*pBarriers)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ResourceBarrier_27(pThis, NumBarriers, pBarriers);
            }

            internal unsafe void ExecuteBundle(win32.Graphics.Direct3D12.ID3D12GraphicsCommandList*pCommandList)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ExecuteBundle_28(pThis, pCommandList);
            }

            internal unsafe void SetDescriptorHeaps(uint NumDescriptorHeaps, win32.Graphics.Direct3D12.ID3D12DescriptorHeap**ppDescriptorHeaps)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetDescriptorHeaps_29(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }

            internal unsafe void SetComputeRootSignature([Optional] win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetComputeRootSignature_30(pThis, pRootSignature);
            }

            internal unsafe void SetGraphicsRootSignature([Optional] win32.Graphics.Direct3D12.ID3D12RootSignature*pRootSignature)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetGraphicsRootSignature_31(pThis, pRootSignature);
            }

            internal void SetComputeRootDescriptorTable(uint RootParameterIndex, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetComputeRootDescriptorTable_32(pThis, RootParameterIndex, BaseDescriptor);
            }

            internal void SetGraphicsRootDescriptorTable(uint RootParameterIndex, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetGraphicsRootDescriptorTable_33(pThis, RootParameterIndex, BaseDescriptor);
            }

            internal void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetComputeRoot32BitConstant_34(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }

            internal void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetGraphicsRoot32BitConstant_35(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }

            internal unsafe void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void *pSrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetComputeRoot32BitConstants_36(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }

            internal unsafe void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, void *pSrcData, uint DestOffsetIn32BitValues)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetGraphicsRoot32BitConstants_37(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }

            internal void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetComputeRootConstantBufferView_38(pThis, RootParameterIndex, BufferLocation);
            }

            internal void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetGraphicsRootConstantBufferView_39(pThis, RootParameterIndex, BufferLocation);
            }

            internal void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetComputeRootShaderResourceView_40(pThis, RootParameterIndex, BufferLocation);
            }

            internal void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetGraphicsRootShaderResourceView_41(pThis, RootParameterIndex, BufferLocation);
            }

            internal void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetComputeRootUnorderedAccessView_42(pThis, RootParameterIndex, BufferLocation);
            }

            internal void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetGraphicsRootUnorderedAccessView_43(pThis, RootParameterIndex, BufferLocation);
            }

            /// <inheritdoc cref = "IASetIndexBuffer(win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW*)"/>
            internal unsafe void IASetIndexBuffer(win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW? pView)
            {
                win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW pViewLocal = pView.HasValue ? pView.Value : default(win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW);
                this.IASetIndexBuffer(pView.HasValue ? &pViewLocal : null);
            }

            internal unsafe void IASetIndexBuffer([Optional] win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW*pView)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->IASetIndexBuffer_44(pThis, pView);
            }

            /// <inheritdoc cref = "IASetVertexBuffers(uint, uint, win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*)"/>
            internal unsafe void IASetVertexBuffers(uint StartSlot, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW> pViews)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*pViewsLocal = pViews)
                {
                    this.IASetVertexBuffers(StartSlot, (uint)pViews.Length, pViewsLocal);
                }
            }

            internal unsafe void IASetVertexBuffers(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*pViews)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->IASetVertexBuffers_45(pThis, StartSlot, NumViews, pViews);
            }

            /// <inheritdoc cref = "SOSetTargets(uint, uint, win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*)"/>
            internal unsafe void SOSetTargets(uint StartSlot, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW> pViews)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*pViewsLocal = pViews)
                {
                    this.SOSetTargets(StartSlot, (uint)pViews.Length, pViewsLocal);
                }
            }

            internal unsafe void SOSetTargets(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*pViews)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SOSetTargets_46(pThis, StartSlot, NumViews, pViews);
            }

            /// <inheritdoc cref = "OMSetRenderTargets(uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, win32.System.SystemServices.BOOL, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*)"/>
            internal unsafe void OMSetRenderTargets(uint NumRenderTargetDescriptors, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE? pRenderTargetDescriptors, win32.System.SystemServices.BOOL RTsSingleHandleToDescriptorRange, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE? pDepthStencilDescriptor)
            {
                win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE pRenderTargetDescriptorsLocal = pRenderTargetDescriptors.HasValue ? pRenderTargetDescriptors.Value : default(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE);
                win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE pDepthStencilDescriptorLocal = pDepthStencilDescriptor.HasValue ? pDepthStencilDescriptor.Value : default(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE);
                this.OMSetRenderTargets(NumRenderTargetDescriptors, pRenderTargetDescriptors.HasValue ? &pRenderTargetDescriptorsLocal : null, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor.HasValue ? &pDepthStencilDescriptorLocal : null);
            }

            internal unsafe void OMSetRenderTargets(uint NumRenderTargetDescriptors, [Optional] win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pRenderTargetDescriptors, win32.System.SystemServices.BOOL RTsSingleHandleToDescriptorRange, [Optional] win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*pDepthStencilDescriptor)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->OMSetRenderTargets_47(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }

            /// <inheritdoc cref = "ClearDepthStencilView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS, float, byte, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS ClearFlags, float Depth, byte Stencil, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.ClearDepthStencilView(DepthStencilView, ClearFlags, Depth, Stencil, (uint)pRects.Length, pRectsLocal);
                }
            }

            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS ClearFlags, float Depth, byte Stencil, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ClearDepthStencilView_48(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }

            /// <inheritdoc cref = "ClearRenderTargetView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, float *, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, in float ColorRGBA, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    fixed (float *ColorRGBALocal = &ColorRGBA)
                    {
                        this.ClearRenderTargetView(RenderTargetView, ColorRGBALocal, (uint)pRects.Length, pRectsLocal);
                    }
                }
            }

            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, float *ColorRGBA, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ClearRenderTargetView_49(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewUint(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, uint *, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, in uint Values, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    fixed (uint *ValuesLocal = &Values)
                    {
                        this.ClearUnorderedAccessViewUint(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, ValuesLocal, (uint)pRects.Length, pRectsLocal);
                    }
                }
            }

            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, uint *Values, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewUint_50(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, float *, uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, in float Values, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    fixed (float *ValuesLocal = &Values)
                    {
                        this.ClearUnorderedAccessViewFloat(ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, ValuesLocal, (uint)pRects.Length, pRectsLocal);
                    }
                }
            }

            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, win32.Graphics.Direct3D12.ID3D12Resource*pResource, float *Values, uint NumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewFloat_51(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }

            /// <inheritdoc cref = "DiscardResource(win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DISCARD_REGION*)"/>
            internal unsafe void DiscardResource(win32.Graphics.Direct3D12.ID3D12Resource*pResource, win32.Graphics.Direct3D12.D3D12_DISCARD_REGION? pRegion)
            {
                win32.Graphics.Direct3D12.D3D12_DISCARD_REGION pRegionLocal = pRegion.HasValue ? pRegion.Value : default(win32.Graphics.Direct3D12.D3D12_DISCARD_REGION);
                this.DiscardResource(pResource, pRegion.HasValue ? &pRegionLocal : null);
            }

            internal unsafe void DiscardResource(win32.Graphics.Direct3D12.ID3D12Resource*pResource, [Optional] win32.Graphics.Direct3D12.D3D12_DISCARD_REGION*pRegion)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->DiscardResource_52(pThis, pResource, pRegion);
            }

            internal unsafe void BeginQuery(win32.Graphics.Direct3D12.ID3D12QueryHeap*pQueryHeap, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE Type, uint Index)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->BeginQuery_53(pThis, pQueryHeap, Type, Index);
            }

            internal unsafe void EndQuery(win32.Graphics.Direct3D12.ID3D12QueryHeap*pQueryHeap, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE Type, uint Index)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->EndQuery_54(pThis, pQueryHeap, Type, Index);
            }

            internal unsafe void ResolveQueryData(win32.Graphics.Direct3D12.ID3D12QueryHeap*pQueryHeap, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE Type, uint StartIndex, uint NumQueries, win32.Graphics.Direct3D12.ID3D12Resource*pDestinationBuffer, ulong AlignedDestinationBufferOffset)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ResolveQueryData_55(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }

            internal unsafe void SetPredication([Optional] win32.Graphics.Direct3D12.ID3D12Resource*pBuffer, ulong AlignedBufferOffset, win32.Graphics.Direct3D12.D3D12_PREDICATION_OP Operation)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetPredication_56(pThis, pBuffer, AlignedBufferOffset, Operation);
            }

            internal unsafe void SetMarker(uint Metadata, [Optional] void *pData, uint Size)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetMarker_57(pThis, Metadata, pData, Size);
            }

            internal unsafe void BeginEvent(uint Metadata, [Optional] void *pData, uint Size)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->BeginEvent_58(pThis, Metadata, pData, Size);
            }

            internal void EndEvent()
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->EndEvent_59(pThis);
            }

            internal unsafe void ExecuteIndirect(win32.Graphics.Direct3D12.ID3D12CommandSignature*pCommandSignature, uint MaxCommandCount, win32.Graphics.Direct3D12.ID3D12Resource*pArgumentBuffer, ulong ArgumentBufferOffset, [Optional] win32.Graphics.Direct3D12.ID3D12Resource*pCountBuffer, ulong CountBufferOffset)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ExecuteIndirect_60(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }

            /// <inheritdoc cref = "AtomicCopyBufferUINT(win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, uint, win32.Graphics.Direct3D12.ID3D12Resource**, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*)"/>
            internal unsafe void AtomicCopyBufferUINT(win32.Graphics.Direct3D12.ID3D12Resource*pDstBuffer, ulong DstOffset, win32.Graphics.Direct3D12.ID3D12Resource*pSrcBuffer, ulong SrcOffset, win32.Graphics.Direct3D12.ID3D12Resource**ppDependentResources, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64> pDependentSubresourceRanges)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*pDependentSubresourceRangesLocal = pDependentSubresourceRanges)
                {
                    this.AtomicCopyBufferUINT(pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, (uint)pDependentSubresourceRanges.Length, ppDependentResources, pDependentSubresourceRangesLocal);
                }
            }

            internal unsafe void AtomicCopyBufferUINT(win32.Graphics.Direct3D12.ID3D12Resource*pDstBuffer, ulong DstOffset, win32.Graphics.Direct3D12.ID3D12Resource*pSrcBuffer, ulong SrcOffset, uint Dependencies, win32.Graphics.Direct3D12.ID3D12Resource**ppDependentResources, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*pDependentSubresourceRanges)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->AtomicCopyBufferUINT_61(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }

            /// <inheritdoc cref = "AtomicCopyBufferUINT64(win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, uint, win32.Graphics.Direct3D12.ID3D12Resource**, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*)"/>
            internal unsafe void AtomicCopyBufferUINT64(win32.Graphics.Direct3D12.ID3D12Resource*pDstBuffer, ulong DstOffset, win32.Graphics.Direct3D12.ID3D12Resource*pSrcBuffer, ulong SrcOffset, win32.Graphics.Direct3D12.ID3D12Resource**ppDependentResources, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64> pDependentSubresourceRanges)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*pDependentSubresourceRangesLocal = pDependentSubresourceRanges)
                {
                    this.AtomicCopyBufferUINT64(pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, (uint)pDependentSubresourceRanges.Length, ppDependentResources, pDependentSubresourceRangesLocal);
                }
            }

            internal unsafe void AtomicCopyBufferUINT64(win32.Graphics.Direct3D12.ID3D12Resource*pDstBuffer, ulong DstOffset, win32.Graphics.Direct3D12.ID3D12Resource*pSrcBuffer, ulong SrcOffset, uint Dependencies, win32.Graphics.Direct3D12.ID3D12Resource**ppDependentResources, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*pDependentSubresourceRanges)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->AtomicCopyBufferUINT64_62(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }

            internal void OMSetDepthBounds(float Min, float Max)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->OMSetDepthBounds_63(pThis, Min, Max);
            }

            /// <inheritdoc cref = "SetSamplePositions(uint, uint, win32.Graphics.Direct3D12.D3D12_SAMPLE_POSITION*)"/>
            internal unsafe void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, in win32.Graphics.Direct3D12.D3D12_SAMPLE_POSITION pSamplePositions)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_SAMPLE_POSITION*pSamplePositionsLocal = &pSamplePositions)
                {
                    this.SetSamplePositions(NumSamplesPerPixel, NumPixels, pSamplePositionsLocal);
                }
            }

            internal unsafe void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, win32.Graphics.Direct3D12.D3D12_SAMPLE_POSITION*pSamplePositions)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetSamplePositions_64(pThis, NumSamplesPerPixel, NumPixels, pSamplePositions);
            }

            /// <inheritdoc cref = "ResolveSubresourceRegion(win32.Graphics.Direct3D12.ID3D12Resource*, uint, uint, uint, win32.Graphics.Direct3D12.ID3D12Resource*, uint, win32.UI.DisplayDevices.RECT*, win32.Graphics.Dxgi.DXGI_FORMAT, win32.Graphics.Direct3D12.D3D12_RESOLVE_MODE)"/>
            internal unsafe void ResolveSubresourceRegion(win32.Graphics.Direct3D12.ID3D12Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, win32.Graphics.Direct3D12.ID3D12Resource*pSrcResource, uint SrcSubresource, win32.UI.DisplayDevices.RECT? pSrcRect, win32.Graphics.Dxgi.DXGI_FORMAT Format, win32.Graphics.Direct3D12.D3D12_RESOLVE_MODE ResolveMode)
            {
                win32.UI.DisplayDevices.RECT pSrcRectLocal = pSrcRect.HasValue ? pSrcRect.Value : default(win32.UI.DisplayDevices.RECT);
                this.ResolveSubresourceRegion(pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect.HasValue ? &pSrcRectLocal : null, Format, ResolveMode);
            }

            internal unsafe void ResolveSubresourceRegion(win32.Graphics.Direct3D12.ID3D12Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, win32.Graphics.Direct3D12.ID3D12Resource*pSrcResource, uint SrcSubresource, [Optional] win32.UI.DisplayDevices.RECT*pSrcRect, win32.Graphics.Dxgi.DXGI_FORMAT Format, win32.Graphics.Direct3D12.D3D12_RESOLVE_MODE ResolveMode)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ResolveSubresourceRegion_65(pThis, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
            }

            internal void SetViewInstanceMask(uint Mask)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetViewInstanceMask_66(pThis, Mask);
            }

            /// <inheritdoc cref = "WriteBufferImmediate(uint, win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE*)"/>
            internal unsafe void WriteBufferImmediate(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER> pParams, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE> pModes)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE*pModesLocal = pModes)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*pParamsLocal = pParams)
                    {
                        if (pParams.Length != pModes.Length)
                            throw new ArgumentException();
                        this.WriteBufferImmediate((uint)pModes.Length, pParamsLocal, pModesLocal);
                    }
                }
            }

            internal unsafe void WriteBufferImmediate(uint Count, win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*pParams, [Optional] win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE*pModes)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->WriteBufferImmediate_67(pThis, Count, pParams, pModes);
            }

            internal unsafe void SetProtectedResourceSession([Optional] win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*pProtectedResourceSession)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetProtectedResourceSession_68(pThis, pProtectedResourceSession);
            }

            /// <inheritdoc cref = "BeginRenderPass(uint, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_RENDER_TARGET_DESC*, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_FLAGS)"/>
            internal unsafe void BeginRenderPass(ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RENDER_PASS_RENDER_TARGET_DESC> pRenderTargets, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC? pDepthStencil, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_FLAGS Flags)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RENDER_PASS_RENDER_TARGET_DESC*pRenderTargetsLocal = pRenderTargets)
                {
                    win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC pDepthStencilLocal = pDepthStencil.HasValue ? pDepthStencil.Value : default(win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC);
                    this.BeginRenderPass((uint)pRenderTargets.Length, pRenderTargetsLocal, pDepthStencil.HasValue ? &pDepthStencilLocal : null, Flags);
                }
            }

            internal unsafe void BeginRenderPass(uint NumRenderTargets, [Optional] win32.Graphics.Direct3D12.D3D12_RENDER_PASS_RENDER_TARGET_DESC*pRenderTargets, [Optional] win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*pDepthStencil, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_FLAGS Flags)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->BeginRenderPass_69(pThis, NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
            }

            internal void EndRenderPass()
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->EndRenderPass_70(pThis);
            }

            internal unsafe void InitializeMetaCommand(win32.Graphics.Direct3D12.ID3D12MetaCommand*pMetaCommand, [Optional] void *pInitializationParametersData, nuint InitializationParametersDataSizeInBytes)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->InitializeMetaCommand_71(pThis, pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
            }

            internal unsafe void ExecuteMetaCommand(win32.Graphics.Direct3D12.ID3D12MetaCommand*pMetaCommand, [Optional] void *pExecutionParametersData, nuint ExecutionParametersDataSizeInBytes)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->ExecuteMetaCommand_72(pThis, pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
            }

            /// <inheritdoc cref = "BuildRaytracingAccelerationStructure(win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, uint, win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*)"/>
            internal unsafe void BuildRaytracingAccelerationStructure(in win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC pDesc, ReadOnlySpan<win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC> pPostbuildInfoDescs)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*pPostbuildInfoDescsLocal = pPostbuildInfoDescs)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*pDescLocal = &pDesc)
                    {
                        this.BuildRaytracingAccelerationStructure(pDescLocal, (uint)pPostbuildInfoDescs.Length, pPostbuildInfoDescsLocal);
                    }
                }
            }

            internal unsafe void BuildRaytracingAccelerationStructure(win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*pDesc, uint NumPostbuildInfoDescs, [Optional] win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*pPostbuildInfoDescs)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->BuildRaytracingAccelerationStructure_73(pThis, pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
            }

            /// <inheritdoc cref = "EmitRaytracingAccelerationStructurePostbuildInfo(win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, uint, ulong *)"/>
            internal unsafe void EmitRaytracingAccelerationStructurePostbuildInfo(in win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC pDesc, ReadOnlySpan<ulong> pSourceAccelerationStructureData)
            {
                fixed (ulong *pSourceAccelerationStructureDataLocal = pSourceAccelerationStructureData)
                {
                    fixed (win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*pDescLocal = &pDesc)
                    {
                        this.EmitRaytracingAccelerationStructurePostbuildInfo(pDescLocal, (uint)pSourceAccelerationStructureData.Length, pSourceAccelerationStructureDataLocal);
                    }
                }
            }

            internal unsafe void EmitRaytracingAccelerationStructurePostbuildInfo(win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*pDesc, uint NumSourceAccelerationStructures, ulong *pSourceAccelerationStructureData)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->EmitRaytracingAccelerationStructurePostbuildInfo_74(pThis, pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
            }

            internal void CopyRaytracingAccelerationStructure(ulong DestAccelerationStructureData, ulong SourceAccelerationStructureData, win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->CopyRaytracingAccelerationStructure_75(pThis, DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
            }

            internal unsafe void SetPipelineState1(win32.Graphics.Direct3D12.ID3D12StateObject*pStateObject)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->SetPipelineState1_76(pThis, pStateObject);
            }

            /// <inheritdoc cref = "DispatchRays(win32.Graphics.Direct3D12.D3D12_DISPATCH_RAYS_DESC*)"/>
            internal unsafe void DispatchRays(in win32.Graphics.Direct3D12.D3D12_DISPATCH_RAYS_DESC pDesc)
            {
                fixed (win32.Graphics.Direct3D12.D3D12_DISPATCH_RAYS_DESC*pDescLocal = &pDesc)
                {
                    this.DispatchRays(pDescLocal);
                }
            }

            internal unsafe void DispatchRays(win32.Graphics.Direct3D12.D3D12_DISPATCH_RAYS_DESC*pDesc)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->DispatchRays_77(pThis, pDesc);
            }

            /// <inheritdoc cref = "RSSetShadingRate(win32.Graphics.Direct3D12.D3D12_SHADING_RATE, win32.Graphics.Direct3D12.D3D12_SHADING_RATE_COMBINER*)"/>
            internal unsafe void RSSetShadingRate(win32.Graphics.Direct3D12.D3D12_SHADING_RATE baseShadingRate, win32.Graphics.Direct3D12.D3D12_SHADING_RATE_COMBINER? combiners)
            {
                win32.Graphics.Direct3D12.D3D12_SHADING_RATE_COMBINER combinersLocal = combiners.HasValue ? combiners.Value : default(win32.Graphics.Direct3D12.D3D12_SHADING_RATE_COMBINER);
                this.RSSetShadingRate(baseShadingRate, combiners.HasValue ? &combinersLocal : null);
            }

            internal unsafe void RSSetShadingRate(win32.Graphics.Direct3D12.D3D12_SHADING_RATE baseShadingRate, [Optional] win32.Graphics.Direct3D12.D3D12_SHADING_RATE_COMBINER*combiners)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->RSSetShadingRate_78(pThis, baseShadingRate, combiners);
            }

            internal unsafe void RSSetShadingRateImage([Optional] win32.Graphics.Direct3D12.ID3D12Resource*shadingRateImage)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->RSSetShadingRateImage_79(pThis, shadingRateImage);
            }

            internal void DispatchMesh(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
            {
                fixed (ID3D12GraphicsCommandList6*pThis = &this)
                    lpVtbl->DispatchMesh_80(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_4;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_6;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.System.SystemServices.PCWSTR, win32.System.Com.HRESULT>SetName_7;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetDevice_8;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE>GetType_9;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.System.Com.HRESULT>Close_10;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12CommandAllocator*, win32.Graphics.Direct3D12.ID3D12PipelineState*, win32.System.Com.HRESULT>Reset_11;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12PipelineState*, void>ClearState_12;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, uint, void>DrawInstanced_13;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, int, uint, void>DrawIndexedInstanced_14;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>Dispatch_15;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, ulong, void>CopyBufferRegion_16;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, uint, uint, uint, win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION*, win32.Graphics.Direct3D12.D3D12_BOX*, void>CopyTextureRegion_17;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.ID3D12Resource*, void>CopyResource_18;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.D3D12_TILE_COPY_FLAGS, void>CopyTiles_19;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, uint, win32.Graphics.Direct3D12.ID3D12Resource*, uint, win32.Graphics.Dxgi.DXGI_FORMAT, void>ResolveSubresource_20;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY, void>IASetPrimitiveTopology_21;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.D3D12_VIEWPORT*, void>RSSetViewports_22;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.UI.DisplayDevices.RECT*, void>RSSetScissorRects_23;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, float *, void>OMSetBlendFactor_24;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void>OMSetStencilRef_25;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12PipelineState*, void>SetPipelineState_26;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER*, void>ResourceBarrier_27;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12GraphicsCommandList*, void>ExecuteBundle_28;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.ID3D12DescriptorHeap**, void>SetDescriptorHeaps_29;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12RootSignature*, void>SetComputeRootSignature_30;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12RootSignature*, void>SetGraphicsRootSignature_31;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, void>SetComputeRootDescriptorTable_32;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, void>SetGraphicsRootDescriptorTable_33;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>SetComputeRoot32BitConstant_34;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>SetGraphicsRoot32BitConstant_35;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, void *, uint, void>SetComputeRoot32BitConstants_36;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, void *, uint, void>SetGraphicsRoot32BitConstants_37;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>SetComputeRootConstantBufferView_38;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>SetGraphicsRootConstantBufferView_39;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>SetComputeRootShaderResourceView_40;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>SetGraphicsRootShaderResourceView_41;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>SetComputeRootUnorderedAccessView_42;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, ulong, void>SetGraphicsRootUnorderedAccessView_43;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW*, void>IASetIndexBuffer_44;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW*, void>IASetVertexBuffers_45;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW*, void>SOSetTargets_46;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, win32.System.SystemServices.BOOL, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE*, void>OMSetRenderTargets_47;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CLEAR_FLAGS, float, byte, uint, win32.UI.DisplayDevices.RECT*, void>ClearDepthStencilView_48;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, float *, uint, win32.UI.DisplayDevices.RECT*, void>ClearRenderTargetView_49;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, uint *, uint, win32.UI.DisplayDevices.RECT*, void>ClearUnorderedAccessViewUint_50;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE, win32.Graphics.Direct3D12.ID3D12Resource*, float *, uint, win32.UI.DisplayDevices.RECT*, void>ClearUnorderedAccessViewFloat_51;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, win32.Graphics.Direct3D12.D3D12_DISCARD_REGION*, void>DiscardResource_52;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12QueryHeap*, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE, uint, void>BeginQuery_53;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12QueryHeap*, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE, uint, void>EndQuery_54;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12QueryHeap*, win32.Graphics.Direct3D12.D3D12_QUERY_TYPE, uint, uint, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, void>ResolveQueryData_55;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.D3D12_PREDICATION_OP, void>SetPredication_56;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void *, uint, void>SetMarker_57;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void *, uint, void>BeginEvent_58;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, void>EndEvent_59;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12CommandSignature*, uint, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, void>ExecuteIndirect_60;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, uint, win32.Graphics.Direct3D12.ID3D12Resource**, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*, void>AtomicCopyBufferUINT_61;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, win32.Graphics.Direct3D12.ID3D12Resource*, ulong, uint, win32.Graphics.Direct3D12.ID3D12Resource**, win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64*, void>AtomicCopyBufferUINT64_62;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, float, float, void>OMSetDepthBounds_63;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, win32.Graphics.Direct3D12.D3D12_SAMPLE_POSITION*, void>SetSamplePositions_64;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, uint, uint, uint, win32.Graphics.Direct3D12.ID3D12Resource*, uint, win32.UI.DisplayDevices.RECT*, win32.Graphics.Dxgi.DXGI_FORMAT, win32.Graphics.Direct3D12.D3D12_RESOLVE_MODE, void>ResolveSubresourceRegion_65;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, void>SetViewInstanceMask_66;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_MODE*, void>WriteBufferImmediate_67;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12ProtectedResourceSession*, void>SetProtectedResourceSession_68;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_RENDER_TARGET_DESC*, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D12.D3D12_RENDER_PASS_FLAGS, void>BeginRenderPass_69;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, void>EndRenderPass_70;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12MetaCommand*, void *, nuint, void>InitializeMetaCommand_71;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12MetaCommand*, void *, nuint, void>ExecuteMetaCommand_72;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, uint, win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, void>BuildRaytracingAccelerationStructure_73;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, uint, ulong *, void>EmitRaytracingAccelerationStructurePostbuildInfo_74;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, ulong, ulong, win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, void>CopyRaytracingAccelerationStructure_75;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12StateObject*, void>SetPipelineState1_76;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_DISPATCH_RAYS_DESC*, void>DispatchRays_77;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.D3D12_SHADING_RATE, win32.Graphics.Direct3D12.D3D12_SHADING_RATE_COMBINER*, void>RSSetShadingRate_78;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, win32.Graphics.Direct3D12.ID3D12Resource*, void>RSSetShadingRateImage_79;
                internal delegate *unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>DispatchMesh_80;
            }

            private Vtbl*lpVtbl;
        }
    }
}