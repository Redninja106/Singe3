// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D12
    {
        /// <summary>Used with ID3D11On12Device::CreateWrappedResourceto override flags that would be inferred by the resource properties or heap properties, including bind flags, misc flags, and CPU access flags.</summary>
        /// <remarks>
        /// <para>Use this structure with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11on12/nf-d3d11on12-id3d11on12device-createwrappedresource">CreateWrappedResource</a>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/ns-d3d11on12-d3d11_resource_flags#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct D3D11_RESOURCE_FLAGS
        {
            /// <summary>
            /// <para>Bind flags must be either completely inferred, or completely specified, to allow the graphics driver to scope a general D3D12 resource to something that D3D11 can understand.</para>
            /// <para>If a bind flag is specified which is not supported by the provided resource, an error will be returned.</para>
            /// <para>The following bind flags (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_FLAG</a> enumeration constants) will not be assumed, and must be specified in order for a resource to be used in such a fashion:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/ns-d3d11on12-d3d11_resource_flags#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint BindFlags;
            /// <summary>
            /// <para>If misc flags are nonzero, then any specified flags will be OR’d into the final resource desc with inferred flags. Misc flags can be partially specified in order to add functionality, but misc flags which are implied cannot be masked out.</para>
            /// <para>The following misc flags (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_FLAG</a> enumeration constants) will not be assumed:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/ns-d3d11on12-d3d11_resource_flags#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint MiscFlags;
            /// <summary>
            /// <para>The <b>CPUAccessFlags</b> are not inferred from the D3D12 resource. This is because all resources are treated as D3D11_USAGE_DEFAULT, so <b>CPUAccessFlags</b> force validation which assumes <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12resource-map">Map</a> of default buffers or textures. Wrapped resources do not support <b>Map(DISCARD)</b>. Wrapped resources do not support <b>Map(NO_OVERWRITE)</b>, but that can be implemented by mapping the underlying D3D12 resource instead. Issuing a <b>Map</b> call on a wrapped resource will synchronize with all D3D11 work submitted against that resource, unless the DO_NOT_WAIT flag was used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/ns-d3d11on12-d3d11_resource_flags#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint CPUAccessFlags;
            /// <summary>The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer.</summary>
            internal uint StructureByteStride;
        }
    }
}