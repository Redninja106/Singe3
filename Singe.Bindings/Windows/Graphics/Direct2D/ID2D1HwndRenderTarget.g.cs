// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("2CD90698-12E2-11DC-9FED-001143A055F9")]
        internal unsafe struct ID2D1HwndRenderTarget
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <inheritdoc cref = "CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, void *srcData, uint pitch, in win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapPropertiesLocal = &bitmapProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateBitmap(size, srcData, pitch, bitmapPropertiesLocal, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, [Optional] void *srcData, uint pitch, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateBitmap_5(pThis, size, srcData, pitch, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromWicBitmap(wicBitmapSource, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateBitmapFromWicBitmap_6(pThis, wicBitmapSource, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateSharedBitmap(global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(in global::System.Guid riid, void *data, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSharedBitmap(riidLocal, data, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(global::System.Guid*riid, void *data, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateSharedBitmap_7(pThis, riid, data, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES? bitmapBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushPropertiesLocal = bitmapBrushProperties.HasValue ? bitmapBrushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES);
                win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapBrush(bitmap, bitmapBrushProperties.HasValue ? &bitmapBrushPropertiesLocal : null, brushProperties.HasValue ? &brushPropertiesLocal : null, bitmapBrush);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush([Optional] win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*bitmapBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateBitmapBrush_8(pThis, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush);
            }

            /// <inheritdoc cref = "CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(in win32.Graphics.Direct2D.D2D1_COLOR_F color, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_COLOR_F*colorLocal = &color)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSolidColorBrush(colorLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, solidColorBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*color, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateSolidColorBrush_9(pThis, color, brushProperties, solidColorBrush);
            }

            /// <inheritdoc cref = "CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_GRADIENT_STOP> gradientStops, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStopsLocal = gradientStops)
                {
                    win32.System.Com.HRESULT __result = this.CreateGradientStopCollection(gradientStopsLocal, (uint)gradientStops.Length, colorInterpolationGamma, extendMode, gradientStopCollection);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStops, uint gradientStopsCount, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateGradientStopCollection_10(pThis, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection);
            }

            /// <inheritdoc cref = "CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(in win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushPropertiesLocal = &linearGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateLinearGradientBrush(linearGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, linearGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateLinearGradientBrush_11(pThis, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush);
            }

            /// <inheritdoc cref = "CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(in win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushPropertiesLocal = &radialGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateRadialGradientBrush(radialGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, radialGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateRadialGradientBrush_12(pThis, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush);
            }

            /// <inheritdoc cref = "CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F? desiredSize, win32.Graphics.Direct2D.D2D_SIZE_U? desiredPixelSize, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT? desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F desiredSizeLocal = desiredSize.HasValue ? desiredSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.Graphics.Direct2D.D2D_SIZE_U desiredPixelSizeLocal = desiredPixelSize.HasValue ? desiredPixelSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_U);
                win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT desiredFormatLocal = desiredFormat.HasValue ? desiredFormat.Value : default(win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT);
                win32.System.Com.HRESULT __result = this.CreateCompatibleRenderTarget(desiredSize.HasValue ? &desiredSizeLocal : null, desiredPixelSize.HasValue ? &desiredPixelSizeLocal : null, desiredFormat.HasValue ? &desiredFormatLocal : null, options, bitmapRenderTarget);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*desiredSize, [Optional] win32.Graphics.Direct2D.D2D_SIZE_U*desiredPixelSize, [Optional] win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateCompatibleRenderTarget_13(pThis, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget);
            }

            /// <inheritdoc cref = "CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F? size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F sizeLocal = size.HasValue ? size.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.System.Com.HRESULT __result = this.CreateLayer(size.HasValue ? &sizeLocal : null, layer);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateLayer([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateLayer_14(pThis, size, layer);
            }

            internal unsafe win32.System.Com.HRESULT CreateMesh(win32.Graphics.Direct2D.ID2D1Mesh**mesh)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CreateMesh_15(pThis, mesh);
            }

            internal unsafe void DrawLine(win32.Graphics.Direct2D.D2D_POINT_2F point0, win32.Graphics.Direct2D.D2D_POINT_2F point1, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawLine_16(pThis, point0, point1, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.DrawRectangle(rectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawRectangle_17(pThis, rect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.FillRectangle(rectLocal, brush);
                }
            }

            internal unsafe void FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->FillRectangle_18(pThis, rect, brush);
            }

            /// <inheritdoc cref = "DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.DrawRoundedRectangle(roundedRectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawRoundedRectangle_19(pThis, roundedRect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.FillRoundedRectangle(roundedRectLocal, brush);
                }
            }

            internal unsafe void FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->FillRoundedRectangle_20(pThis, roundedRect, brush);
            }

            /// <inheritdoc cref = "DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.DrawEllipse(ellipseLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawEllipse_21(pThis, ellipse, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.FillEllipse(ellipseLocal, brush);
                }
            }

            internal unsafe void FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->FillEllipse_22(pThis, ellipse, brush);
            }

            internal unsafe void DrawGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawGeometry_23(pThis, geometry, brush, strokeWidth, strokeStyle);
            }

            internal unsafe void FillGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.ID2D1Brush*opacityBrush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->FillGeometry_24(pThis, geometry, brush, opacityBrush);
            }

            internal unsafe void FillMesh(win32.Graphics.Direct2D.ID2D1Mesh*mesh, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->FillMesh_25(pThis, mesh, brush);
            }

            /// <inheritdoc cref = "FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.FillOpacityMask(opacityMask, brush, content, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->FillOpacityMask_26(pThis, opacityMask, brush, content, destinationRectangle, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.DrawBitmap(bitmap, destinationRectangle.HasValue ? &destinationRectangleLocal : null, opacity, interpolationMode, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawBitmap_27(pThis, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawText(win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawText(string @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, in win32.Graphics.Direct2D.D2D_RECT_F layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*layoutRectLocal = &layoutRect)
                {
                    fixed (char *@stringLocal = @string)
                    {
                        this.DrawText(@stringLocal, stringLength, textFormat, layoutRectLocal, defaultFillBrush, options, measuringMode);
                    }
                }
            }

            internal unsafe void DrawText(win32.System.SystemServices.PCWSTR @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, win32.Graphics.Direct2D.D2D_RECT_F*layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawText_28(pThis, @string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode);
            }

            internal unsafe void DrawTextLayout(win32.Graphics.Direct2D.D2D_POINT_2F origin, win32.Graphics.DirectWrite.IDWriteTextLayout*textLayout, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawTextLayout_29(pThis, origin, textLayout, defaultFillBrush, options);
            }

            /// <inheritdoc cref = "DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                {
                    this.DrawGlyphRun(baselineOrigin, glyphRunLocal, foregroundBrush, measuringMode);
                }
            }

            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->DrawGlyphRun_30(pThis, baselineOrigin, glyphRun, foregroundBrush, measuringMode);
            }

            /// <inheritdoc cref = "SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void SetTransform(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.SetTransform(transformLocal);
                }
            }

            internal unsafe void SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->SetTransform_31(pThis, transform);
            }

            /// <inheritdoc cref = "GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void GetTransform(out win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.GetTransform(transformLocal);
                }
            }

            internal unsafe void GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->GetTransform_32(pThis, transform);
            }

            internal void SetAntialiasMode(win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->SetAntialiasMode_33(pThis, antialiasMode);
            }

            internal win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE GetAntialiasMode()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->GetAntialiasMode_34(pThis);
            }

            internal void SetTextAntialiasMode(win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->SetTextAntialiasMode_35(pThis, textAntialiasMode);
            }

            internal win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->GetTextAntialiasMode_36(pThis);
            }

            internal unsafe void SetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams*textRenderingParams)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->SetTextRenderingParams_37(pThis, textRenderingParams);
            }

            internal unsafe void GetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams**textRenderingParams)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->GetTextRenderingParams_38(pThis, textRenderingParams);
            }

            internal void SetTags(ulong tag1, ulong tag2)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->SetTags_39(pThis, tag1, tag2);
            }

            internal unsafe void GetTags([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->GetTags_40(pThis, tag1, tag2);
            }

            /// <inheritdoc cref = "PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*)"/>
            internal unsafe void PushLayer(in win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS layerParameters, win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParametersLocal = &layerParameters)
                {
                    this.PushLayer(layerParametersLocal, layer);
                }
            }

            internal unsafe void PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParameters, [Optional] win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->PushLayer_41(pThis, layerParameters, layer);
            }

            internal void PopLayer()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->PopLayer_42(pThis);
            }

            internal unsafe win32.System.Com.HRESULT Flush([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->Flush_43(pThis, tag1, tag2);
            }

            internal unsafe void SaveDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->SaveDrawingState_44(pThis, drawingStateBlock);
            }

            internal unsafe void RestoreDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->RestoreDrawingState_45(pThis, drawingStateBlock);
            }

            /// <inheritdoc cref = "PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE)"/>
            internal unsafe void PushAxisAlignedClip(in win32.Graphics.Direct2D.D2D_RECT_F clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*clipRectLocal = &clipRect)
                {
                    this.PushAxisAlignedClip(clipRectLocal, antialiasMode);
                }
            }

            internal unsafe void PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->PushAxisAlignedClip_46(pThis, clipRect, antialiasMode);
            }

            internal void PopAxisAlignedClip()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->PopAxisAlignedClip_47(pThis);
            }

            /// <inheritdoc cref = "Clear(win32.Graphics.Direct2D.D2D1_COLOR_F*)"/>
            internal unsafe void Clear(win32.Graphics.Direct2D.D2D1_COLOR_F? clearColor)
            {
                win32.Graphics.Direct2D.D2D1_COLOR_F clearColorLocal = clearColor.HasValue ? clearColor.Value : default(win32.Graphics.Direct2D.D2D1_COLOR_F);
                this.Clear(clearColor.HasValue ? &clearColorLocal : null);
            }

            internal unsafe void Clear([Optional] win32.Graphics.Direct2D.D2D1_COLOR_F*clearColor)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->Clear_48(pThis, clearColor);
            }

            internal void BeginDraw()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->BeginDraw_49(pThis);
            }

            internal unsafe win32.System.Com.HRESULT EndDraw([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->EndDraw_50(pThis, tag1, tag2);
            }

            internal win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT GetPixelFormat()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->GetPixelFormat_51(pThis);
            }

            internal void SetDpi(float dpiX, float dpiY)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->SetDpi_52(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "GetDpi(float *, float *)"/>
            internal unsafe void GetDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            internal unsafe void GetDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    lpVtbl->GetDpi_53(pThis, dpiX, dpiY);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_F GetSize()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->GetSize_54(pThis);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_U GetPixelSize()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->GetPixelSize_55(pThis);
            }

            internal uint GetMaximumBitmapSize()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->GetMaximumBitmapSize_56(pThis);
            }

            /// <inheritdoc cref = "IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*)"/>
            internal unsafe win32.System.SystemServices.BOOL IsSupported(in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                {
                    win32.System.SystemServices.BOOL __result = this.IsSupported(renderTargetPropertiesLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.SystemServices.BOOL IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->IsSupported_57(pThis, renderTargetProperties);
            }

            /// <summary>Indicates whether the HWND associated with this render target is occluded.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_window_state">D2D1_WINDOW_STATE</a></b></para>
            /// <para>A value that indicates whether the HWND associated with this render target is occluded.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1hwndrendertarget-checkwindowstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_WINDOW_STATE CheckWindowState()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->CheckWindowState_58(pThis);
            }

            /// <inheritdoc cref = "Resize(win32.Graphics.Direct2D.D2D_SIZE_U*)"/>
            internal unsafe win32.System.Com.HRESULT Resize(in win32.Graphics.Direct2D.D2D_SIZE_U pixelSize)
            {
                fixed (win32.Graphics.Direct2D.D2D_SIZE_U*pixelSizeLocal = &pixelSize)
                {
                    win32.System.Com.HRESULT __result = this.Resize(pixelSizeLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT Resize(win32.Graphics.Direct2D.D2D_SIZE_U*pixelSize)
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->Resize_59(pThis, pixelSize);
            }

            /// <summary>Returns the HWND associated with this render target.</summary>
            /// <returns>
            /// <para>Type: <b>HWND</b></para>
            /// <para>The HWND associated with this render target.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1hwndrendertarget-gethwnd">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.UI.WindowsAndMessaging.HWND GetHwnd()
            {
                fixed (ID2D1HwndRenderTarget*pThis = &this)
                    return lpVtbl->GetHwnd_60(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmap_5;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmapFromWicBitmap_6;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateSharedBitmap_7;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**, win32.System.Com.HRESULT>CreateBitmapBrush_8;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**, win32.System.Com.HRESULT>CreateSolidColorBrush_9;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**, win32.System.Com.HRESULT>CreateGradientStopCollection_10;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**, win32.System.Com.HRESULT>CreateLinearGradientBrush_11;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**, win32.System.Com.HRESULT>CreateRadialGradientBrush_12;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**, win32.System.Com.HRESULT>CreateCompatibleRenderTarget_13;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**, win32.System.Com.HRESULT>CreateLayer_14;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Mesh**, win32.System.Com.HRESULT>CreateMesh_15;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawLine_16;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRectangle_17;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRectangle_18;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRoundedRectangle_19;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRoundedRectangle_20;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawEllipse_21;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillEllipse_22;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawGeometry_23;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillGeometry_24;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Mesh*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillMesh_25;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, void>FillOpacityMask_26;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, void>DrawBitmap_27;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawText_28;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.IDWriteTextLayout*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, void>DrawTextLayout_29;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawGlyphRun_30;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>SetTransform_31;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>GetTransform_32;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>SetAntialiasMode_33;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE>GetAntialiasMode_34;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE, void>SetTextAntialiasMode_35;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE>GetTextAntialiasMode_36;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.DirectWrite.IDWriteRenderingParams*, void>SetTextRenderingParams_37;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.DirectWrite.IDWriteRenderingParams**, void>GetTextRenderingParams_38;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, ulong, ulong, void>SetTags_39;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, ulong *, ulong *, void>GetTags_40;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*, void>PushLayer_41;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, void>PopLayer_42;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, ulong *, ulong *, win32.System.Com.HRESULT>Flush_43;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>SaveDrawingState_44;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>RestoreDrawingState_45;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>PushAxisAlignedClip_46;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, void>PopAxisAlignedClip_47;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_COLOR_F*, void>Clear_48;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, void>BeginDraw_49;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, ulong *, ulong *, win32.System.Com.HRESULT>EndDraw_50;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT>GetPixelFormat_51;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, float, float, void>SetDpi_52;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, float *, float *, void>GetDpi_53;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_F>GetSize_54;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_U>GetPixelSize_55;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, uint>GetMaximumBitmapSize_56;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.System.SystemServices.BOOL>IsSupported_57;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D1_WINDOW_STATE>CheckWindowState_58;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.System.Com.HRESULT>Resize_59;
                internal delegate *unmanaged[Stdcall]<ID2D1HwndRenderTarget*, win32.UI.WindowsAndMessaging.HWND>GetHwnd_60;
            }

            private Vtbl*lpVtbl;
        }
    }
}