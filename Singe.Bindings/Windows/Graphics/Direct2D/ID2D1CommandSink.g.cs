// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("54D7898A-A061-40A7-BEC7-E465BCBA2C4F")]
        internal unsafe struct ID2D1CommandSink
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Notifies the implementation of the command sink that drawing is about to commence.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>This method always returns <b>S_OK</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-begindraw">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT BeginDraw()
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->BeginDraw_4(pThis);
            }

            /// <summary>Indicates when ID2D1CommandSink processing has completed.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method/function succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-enddraw">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT EndDraw()
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->EndDraw_5(pThis);
            }

            /// <summary>Sets the antialiasing mode that will be used to render any subsequent geometry.</summary>
            /// <param name = "antialiasMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b></para>
            /// <para>The antialiasing mode selected for the command list.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-setantialiasmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-setantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetAntialiasMode(win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->SetAntialiasMode_6(pThis, antialiasMode);
            }

            /// <summary>Sets the tags that correspond to the tags in the command sink.</summary>
            /// <param name = "tag1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-tag">D2D1_TAG</a></b></para>
            /// <para>The first tag to associate with the primitive.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tag2">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-tag">D2D1_TAG</a></b></para>
            /// <para>The second tag to associate with the primitive.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settags">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetTags(ulong tag1, ulong tag2)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->SetTags_7(pThis, tag1, tag2);
            }

            /// <summary>Indicates the new default antialiasing mode for text.</summary>
            /// <param name = "textAntialiasMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_text_antialias_mode">D2D1_TEXT_ANTIALIAS_MODE</a></b></para>
            /// <para>The antialiasing mode for the text.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settextantialiasmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settextantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetTextAntialiasMode(win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->SetTextAntialiasMode_8(pThis, textAntialiasMode);
            }

            /// <summary>Indicates more detailed text rendering parameters.</summary>
            /// <param name = "textRenderingParams">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>*</b></para>
            /// <para>The parameters to use for text rendering.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settextrenderingparams#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settextrenderingparams">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams*textRenderingParams)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->SetTextRenderingParams_9(pThis, textRenderingParams);
            }

            /// <inheritdoc cref = "SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe win32.System.Com.HRESULT SetTransform(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    win32.System.Com.HRESULT __result = this.SetTransform(transformLocal);
                    return __result;
                }
            }

            /// <summary>Sets a new transform.</summary>
            /// <param name = "transform">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
            /// <para>The transform to be set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-settransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->SetTransform_10(pThis, transform);
            }

            /// <summary>Sets a new primitive blend mode.</summary>
            /// <param name = "primitiveBlend">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_primitive_blend">D2D1_PRIMITIVE_BLEND</a></b></para>
            /// <para>The primitive blend that will apply to subsequent primitives.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-setprimitiveblend#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-setprimitiveblend">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetPrimitiveBlend(win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND primitiveBlend)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->SetPrimitiveBlend_11(pThis, primitiveBlend);
            }

            /// <summary>The unit mode changes the meaning of subsequent units from device-independent pixels (DIPs) to pixels or the other way. The command sink does not record a DPI, this is implied by the playback context or other playback interface such as ID2D1PrintControl.</summary>
            /// <param name = "unitMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_unit_mode">D2D1_UNIT_MODE</a></b></para>
            /// <para>The enumeration that specifies how units are to be interpreted.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-setunitmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-setunitmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetUnitMode(win32.Graphics.Direct2D.D2D1_UNIT_MODE unitMode)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->SetUnitMode_12(pThis, unitMode);
            }

            /// <inheritdoc cref = "Clear(win32.Graphics.Direct2D.D2D1_COLOR_F*)"/>
            internal unsafe win32.System.Com.HRESULT Clear(win32.Graphics.Direct2D.D2D1_COLOR_F? color)
            {
                win32.Graphics.Direct2D.D2D1_COLOR_F colorLocal = color.HasValue ? color.Value : default(win32.Graphics.Direct2D.D2D1_COLOR_F);
                win32.System.Com.HRESULT __result = this.Clear(color.HasValue ? &colorLocal : null);
                return __result;
            }

            /// <summary>Clears the drawing area to the specified color.</summary>
            /// <param name = "color">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-color-f">D2D1_COLOR_F</a>*</b></para>
            /// <para>The color to which the command sink should be cleared.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-clear#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-clear">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Clear([Optional] win32.Graphics.Direct2D.D2D1_COLOR_F*color)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->Clear_13(pThis, color);
            }

            /// <inheritdoc cref = "DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe win32.System.Com.HRESULT DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION? glyphRunDescription, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                {
                    win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescriptionLocal = glyphRunDescription.HasValue ? glyphRunDescription.Value : default(win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION);
                    win32.System.Com.HRESULT __result = this.DrawGlyphRun(baselineOrigin, glyphRunLocal, glyphRunDescription.HasValue ? &glyphRunDescriptionLocal : null, foregroundBrush, measuringMode);
                    return __result;
                }
            }

            /// <summary>Indicates the glyphs to be drawn.</summary>
            /// <param name = "baselineOrigin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The upper left corner of the baseline.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRun">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b></para>
            /// <para>The glyphs to render.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRunDescription">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run_description">DWRITE_GLYPH_RUN_DESCRIPTION</a>*</b></para>
            /// <para>Additional non-rendering information about the glyphs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "foregroundBrush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to fill the glyphs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "measuringMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b></para>
            /// <para>The measuring mode to apply to the glyphs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawglyphrun">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, [Optional] win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*glyphRunDescription, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->DrawGlyphRun_14(pThis, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode);
            }

            /// <summary>Draws a line drawn between two points.</summary>
            /// <param name = "point0">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The start point of the line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "point1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The end point of the line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to fill the line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeWidth">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The width of the stroke to fill the line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b></para>
            /// <para>The style of the stroke. If not specified, the stroke is solid.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawLine(win32.Graphics.Direct2D.D2D_POINT_2F point0, win32.Graphics.Direct2D.D2D_POINT_2F point1, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->DrawLine_15(pThis, point0, point1, brush, strokeWidth, strokeStyle);
            }

            /// <summary>Indicates the geometry to be drawn to the command sink.</summary>
            /// <param name = "geometry">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry </a>*</b></para>
            /// <para>The geometry to be stroked.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush that will be used to fill the stroked geometry.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeWidth">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The width of the stroke.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b></para>
            /// <para>The style of the stroke.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>An HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgeometry">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->DrawGeometry_16(pThis, geometry, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe win32.System.Com.HRESULT DrawRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    win32.System.Com.HRESULT __result = this.DrawRectangle(rectLocal, brush, strokeWidth, strokeStyle);
                    return __result;
                }
            }

            /// <summary>Draws a rectangle.</summary>
            /// <param name = "rect">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The rectangle to be drawn to the command sink.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to stroke the geometry.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeWidth">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The width of the stroke.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b></para>
            /// <para>The style of the stroke.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawrectangle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->DrawRectangle_17(pThis, rect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*)"/>
            internal unsafe win32.System.Com.HRESULT DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F? perspectiveTransform)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_MATRIX_4X4_F perspectiveTransformLocal = perspectiveTransform.HasValue ? perspectiveTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_4X4_F);
                win32.System.Com.HRESULT __result = this.DrawBitmap(bitmap, destinationRectangle.HasValue ? &destinationRectangleLocal : null, opacity, interpolationMode, sourceRectangle.HasValue ? &sourceRectangleLocal : null, perspectiveTransform.HasValue ? &perspectiveTransformLocal : null);
                return __result;
            }

            /// <summary>Draws a bitmap to the render target.</summary>
            /// <param name = "bitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>*</b></para>
            /// <para>The bitmap to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "destinationRectangle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
            /// <para>The destination rectangle. The default is the size of the bitmap and the location is the upper left corner of the render target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "opacity">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The opacity of the bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "interpolationMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_interpolation_mode">D2D1_INTERPOLATION_MODE</a></b></para>
            /// <para>The interpolation mode to use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "sourceRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
            /// <para>An optional source rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "perspectiveTransform">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-matrix-4x4-f">D2D1_MATRIX_4X4_F</a></b></para>
            /// <para>An optional perspective transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method does not return a value.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawbitmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*perspectiveTransform)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->DrawBitmap_18(pThis, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform);
            }

            /// <inheritdoc cref = "DrawImage(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE)"/>
            internal unsafe win32.System.Com.HRESULT DrawImage(win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D_POINT_2F? targetOffset, win32.Graphics.Direct2D.D2D_RECT_F? imageRectangle, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE compositeMode)
            {
                win32.Graphics.Direct2D.D2D_POINT_2F targetOffsetLocal = targetOffset.HasValue ? targetOffset.Value : default(win32.Graphics.Direct2D.D2D_POINT_2F);
                win32.Graphics.Direct2D.D2D_RECT_F imageRectangleLocal = imageRectangle.HasValue ? imageRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.System.Com.HRESULT __result = this.DrawImage(image, targetOffset.HasValue ? &targetOffsetLocal : null, imageRectangle.HasValue ? &imageRectangleLocal : null, interpolationMode, compositeMode);
                return __result;
            }

            /// <summary>Draws the provided image to the command sink.</summary>
            /// <param name = "image">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b></para>
            /// <para>The image to be drawn to the command sink.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawimage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "targetOffset">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
            /// <para>This defines the offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawimage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "imageRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The corresponding rectangle in the image space will be mapped to the provided origins when processing the image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawimage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "interpolationMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_interpolation_mode">D2D1_INTERPOLATION_MODE</a></b></para>
            /// <para>The interpolation mode to use to  scale the image if necessary.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawimage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "compositeMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_composite_mode">D2D1_COMPOSITE_MODE</a></b></para>
            /// <para>If specified, the composite mode that will be applied to the limits of the currently selected clip.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawimage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawimage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawImage(win32.Graphics.Direct2D.ID2D1Image*image, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*targetOffset, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*imageRectangle, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE compositeMode)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->DrawImage_19(pThis, image, targetOffset, imageRectangle, interpolationMode, compositeMode);
            }

            /// <inheritdoc cref = "DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_POINT_2F*)"/>
            internal unsafe win32.System.Com.HRESULT DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, win32.Graphics.Direct2D.D2D_POINT_2F? targetOffset)
            {
                win32.Graphics.Direct2D.D2D_POINT_2F targetOffsetLocal = targetOffset.HasValue ? targetOffset.Value : default(win32.Graphics.Direct2D.D2D_POINT_2F);
                win32.System.Com.HRESULT __result = this.DrawGdiMetafile(gdiMetafile, targetOffset.HasValue ? &targetOffsetLocal : null);
                return __result;
            }

            /// <summary>Draw a metafile to the device context.</summary>
            /// <param name = "gdiMetafile">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1gdimetafile">ID2D1GdiMetafile</a>*</b></para>
            /// <para>The metafile to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgdimetafile#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "targetOffset">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
            /// <para>The offset from the upper left corner of the render target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgdimetafile#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method does not return a value.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-drawgdimetafile">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*targetOffset)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->DrawGdiMetafile_20(pThis, gdiMetafile, targetOffset);
            }

            /// <summary>Indicates a mesh to be filled by the command sink.</summary>
            /// <param name = "mesh">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>*</b></para>
            /// <para>The mesh object to be filled.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush with which to fill the mesh.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillmesh">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FillMesh(win32.Graphics.Direct2D.ID2D1Mesh*mesh, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->FillMesh_21(pThis, mesh, brush);
            }

            /// <inheritdoc cref = "FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.System.Com.HRESULT __result = this.FillOpacityMask(opacityMask, brush, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
                return __result;
            }

            /// <summary>Fills an opacity mask on the command sink.</summary>
            /// <param name = "opacityMask">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>*</b></para>
            /// <para>The bitmap whose alpha channel will be sampled to define the opacity mask.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillopacitymask#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush with which to fill the mask.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillopacitymask#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "destinationRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The destination rectangle in which to fill the mask. If not specified, this is the origin.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillopacitymask#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "sourceRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The source rectangle within the opacity mask. If not specified, this is the entire mask.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillopacitymask#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillopacitymask">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->FillOpacityMask_22(pThis, opacityMask, brush, destinationRectangle, sourceRectangle);
            }

            /// <summary>Indicates to the command sink a geometry to be filled.</summary>
            /// <param name = "geometry">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b></para>
            /// <para>The geometry that should be filled.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The primary brush used to fill the geometry.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "opacityBrush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>A brush whose alpha channel is used to modify the opacity of the primary fill brush.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillgeometry">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FillGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.ID2D1Brush*opacityBrush)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->FillGeometry_23(pThis, geometry, brush, opacityBrush);
            }

            /// <inheritdoc cref = "FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe win32.System.Com.HRESULT FillRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    win32.System.Com.HRESULT __result = this.FillRectangle(rectLocal, brush);
                    return __result;
                }
            }

            /// <summary>Indicates to the command sink a rectangle to be filled.</summary>
            /// <param name = "rect">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The rectangle to fill.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush with which to fill the rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-fillrectangle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->FillRectangle_24(pThis, rect, brush);
            }

            /// <inheritdoc cref = "PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE)"/>
            internal unsafe win32.System.Com.HRESULT PushAxisAlignedClip(in win32.Graphics.Direct2D.D2D_RECT_F clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*clipRectLocal = &clipRect)
                {
                    win32.System.Com.HRESULT __result = this.PushAxisAlignedClip(clipRectLocal, antialiasMode);
                    return __result;
                }
            }

            /// <summary>Pushes a clipping rectangle onto the clip and layer stack.</summary>
            /// <param name = "clipRect">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The rectangle that defines the clip.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-pushaxisalignedclip#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "antialiasMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b></para>
            /// <para>The antialias mode for the clip.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-pushaxisalignedclip#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-pushaxisalignedclip">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->PushAxisAlignedClip_25(pThis, clipRect, antialiasMode);
            }

            /// <inheritdoc cref = "PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*, win32.Graphics.Direct2D.ID2D1Layer*)"/>
            internal unsafe win32.System.Com.HRESULT PushLayer(in win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1 layerParameters1, win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*layerParameters1Local = &layerParameters1)
                {
                    win32.System.Com.HRESULT __result = this.PushLayer(layerParameters1Local, layer);
                    return __result;
                }
            }

            /// <summary>Pushes a layer onto the clip and layer stack.</summary>
            /// <param name = "layerParameters1">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ns-d2d1-d2d1_layer_parameters">D2D1_LAYER_PARAMETERS1</a>*</b></para>
            /// <para>The parameters that define the layer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-pushlayer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "layer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1layer">ID2D1Layer</a>*</b></para>
            /// <para>The layer resource that receives subsequent drawing operations.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-pushlayer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-pushlayer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*layerParameters1, [Optional] win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->PushLayer_26(pThis, layerParameters1, layer);
            }

            /// <summary>Removes an axis-aligned clip from the layer and clip stack.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-popaxisalignedclip">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PopAxisAlignedClip()
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->PopAxisAlignedClip_27(pThis);
            }

            /// <summary>Removes a layer from the layer and clip stack.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1commandsink-poplayer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PopLayer()
            {
                fixed (ID2D1CommandSink*pThis = &this)
                    return lpVtbl->PopLayer_28(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.System.Com.HRESULT>BeginDraw_4;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.System.Com.HRESULT>EndDraw_5;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, win32.System.Com.HRESULT>SetAntialiasMode_6;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, ulong, ulong, win32.System.Com.HRESULT>SetTags_7;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE, win32.System.Com.HRESULT>SetTextAntialiasMode_8;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.DirectWrite.IDWriteRenderingParams*, win32.System.Com.HRESULT>SetTextRenderingParams_9;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, win32.System.Com.HRESULT>SetTransform_10;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND, win32.System.Com.HRESULT>SetPrimitiveBlend_11;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D1_UNIT_MODE, win32.System.Com.HRESULT>SetUnitMode_12;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.System.Com.HRESULT>Clear_13;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.System.Com.HRESULT>DrawGlyphRun_14;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.System.Com.HRESULT>DrawLine_15;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.System.Com.HRESULT>DrawGeometry_16;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.System.Com.HRESULT>DrawRectangle_17;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*, win32.System.Com.HRESULT>DrawBitmap_18;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE, win32.System.Com.HRESULT>DrawImage_19;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.System.Com.HRESULT>DrawGdiMetafile_20;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.ID2D1Mesh*, win32.Graphics.Direct2D.ID2D1Brush*, win32.System.Com.HRESULT>FillMesh_21;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>FillOpacityMask_22;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.ID2D1Brush*, win32.System.Com.HRESULT>FillGeometry_23;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.System.Com.HRESULT>FillRectangle_24;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, win32.System.Com.HRESULT>PushAxisAlignedClip_25;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*, win32.Graphics.Direct2D.ID2D1Layer*, win32.System.Com.HRESULT>PushLayer_26;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.System.Com.HRESULT>PopAxisAlignedClip_27;
                internal delegate *unmanaged[Stdcall]<ID2D1CommandSink*, win32.System.Com.HRESULT>PopLayer_28;
            }

            private Vtbl*lpVtbl;
        }
    }
}