// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("3D9F916B-27DC-4AD7-B4F1-64945340F563")]
        internal unsafe struct ID2D1EffectContext
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetDpi(float *, float *)"/>
            internal unsafe void GetDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            /// <summary>Gets the unit mapping that an effect will use for properties that could be in either dots per inch (dpi) or pixels.</summary>
            /// <param name = "dpiX">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>The dpi on the x-axis.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dpiY">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>The dpi on the y-axis.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_unit_mode">D2D1_UNIT_MODE</a> is <b>D2D1_UNIT_MODE_PIXELS</b>, both <i>dpiX</i> and <i>dpiY</i> will be set to 96.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-getdpi#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    lpVtbl->GetDpi_4(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "CreateEffect(global::System.Guid*, win32.Graphics.Direct2D.ID2D1Effect**)"/>
            internal unsafe win32.System.Com.HRESULT CreateEffect(in global::System.Guid effectId, win32.Graphics.Direct2D.ID2D1Effect**effect)
            {
                fixed (global::System.Guid*effectIdLocal = &effectId)
                {
                    win32.System.Com.HRESULT __result = this.CreateEffect(effectIdLocal, effect);
                    return __result;
                }
            }

            /// <summary>Creates a Direct2D effect for the specified class ID.</summary>
            /// <param name = "effectId">
            /// <para>Type: <b>REFCLSID</b></para>
            /// <para>The built-in or registered effect ID to create the effect. See <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/built-in-effects">Built-in Effects</a> for a list of effect IDs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "effect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the effect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createeffect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateEffect(global::System.Guid*effectId, win32.Graphics.Direct2D.ID2D1Effect**effect)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateEffect_5(pThis, effectId, effect);
            }

            /// <inheritdoc cref = "GetMaximumSupportedFeatureLevel(win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, uint, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*)"/>
            internal unsafe win32.System.Com.HRESULT GetMaximumSupportedFeatureLevel(ReadOnlySpan<win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL> featureLevels, out win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL maximumSupportedFeatureLevel)
            {
                fixed (win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*maximumSupportedFeatureLevelLocal = &maximumSupportedFeatureLevel)
                {
                    fixed (win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*featureLevelsLocal = featureLevels)
                    {
                        win32.System.Com.HRESULT __result = this.GetMaximumSupportedFeatureLevel(featureLevelsLocal, (uint)featureLevels.Length, maximumSupportedFeatureLevelLocal);
                        return __result;
                    }
                }
            }

            /// <summary>This indicates the maximum feature level from the provided list which is supported by the device.</summary>
            /// <param name = "featureLevels">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b></para>
            /// <para>The feature levels provided by the application.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-getmaximumsupportedfeaturelevel#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "featureLevelsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The count of feature levels provided by the application</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-getmaximumsupportedfeaturelevel#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "maximumSupportedFeatureLevel">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b></para>
            /// <para>The maximum feature level from the <i>featureLevels</i> list which is supported by the D2D device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-getmaximumsupportedfeaturelevel#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-getmaximumsupportedfeaturelevel">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMaximumSupportedFeatureLevel(win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*featureLevels, uint featureLevelsCount, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*maximumSupportedFeatureLevel)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->GetMaximumSupportedFeatureLevel_6(pThis, featureLevels, featureLevelsCount, maximumSupportedFeatureLevel);
            }

            /// <summary>Wraps an effect graph into a single transform node and then inserted into a transform graph. This allows an effect to aggregate other effects.</summary>
            /// <param name = "effect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b></para>
            /// <para>The effect to be wrapped in a transform node.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createtransformnodefromeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transformNode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1transformnode">ID2D1TransformNode</a>**</b></para>
            /// <para>The returned transform node that encapsulates the effect graph.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createtransformnodefromeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createtransformnodefromeffect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTransformNodeFromEffect(win32.Graphics.Direct2D.ID2D1Effect*effect, win32.Graphics.Direct2D.ID2D1TransformNode**transformNode)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateTransformNodeFromEffect_7(pThis, effect, transformNode);
            }

            /// <inheritdoc cref = "CreateBlendTransform(uint, win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1BlendTransform**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBlendTransform(uint numInputs, in win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION blendDescription, win32.Graphics.Direct2D.ID2D1BlendTransform**transform)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION*blendDescriptionLocal = &blendDescription)
                {
                    win32.System.Com.HRESULT __result = this.CreateBlendTransform(numInputs, blendDescriptionLocal, transform);
                    return __result;
                }
            }

            /// <summary>This creates a blend transform that can be inserted into a transform graph.</summary>
            /// <param name = "numInputs">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of inputs to the blend transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createblendtransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "blendDescription">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ns-d2d1effectauthor-d2d1_blend_description">D2D1_BLEND_DESCRIPTION</a>*</b></para>
            /// <para>Describes the blend transform that is to be created.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createblendtransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transform">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1blendtransform">ID2D1BlendTransform</a>**</b></para>
            /// <para>The returned blend transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createblendtransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createblendtransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBlendTransform(uint numInputs, win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION*blendDescription, win32.Graphics.Direct2D.ID2D1BlendTransform**transform)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateBlendTransform_8(pThis, numInputs, blendDescription, transform);
            }

            /// <summary>Creates a transform that extends its input infinitely in every direction based on the passed in extend mode.</summary>
            /// <param name = "extendModeX">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>The extend mode in the X-axis direction.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createbordertransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "extendModeY">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>The extend mode in the Y-axis direction.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createbordertransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transform">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1bordertransform">ID2D1BorderTransform</a>**</b></para>
            /// <para>The returned transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createbordertransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createbordertransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBorderTransform(win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendModeX, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendModeY, win32.Graphics.Direct2D.ID2D1BorderTransform**transform)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateBorderTransform_9(pThis, extendModeX, extendModeY, transform);
            }

            /// <summary>Creates and returns an offset transform.</summary>
            /// <param name = "offset">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/hh847948(v=vs.85)">D2D1_POINT_2L</a></b></para>
            /// <para>The offset amount.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createoffsettransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transform">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1offsettransform">ID2D1OffsetTransform</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to an offset transform object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createoffsettransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createoffsettransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateOffsetTransform(win32.UI.DisplayDevices.POINT offset, win32.Graphics.Direct2D.ID2D1OffsetTransform**transform)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateOffsetTransform_10(pThis, offset, transform);
            }

            /// <inheritdoc cref = "CreateBoundsAdjustmentTransform(win32.UI.DisplayDevices.RECT*, win32.Graphics.Direct2D.ID2D1BoundsAdjustmentTransform**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBoundsAdjustmentTransform(in win32.UI.DisplayDevices.RECT outputRectangle, win32.Graphics.Direct2D.ID2D1BoundsAdjustmentTransform**transform)
            {
                fixed (win32.UI.DisplayDevices.RECT*outputRectangleLocal = &outputRectangle)
                {
                    win32.System.Com.HRESULT __result = this.CreateBoundsAdjustmentTransform(outputRectangleLocal, transform);
                    return __result;
                }
            }

            /// <summary>Creates and returns a bounds adjustment transform.</summary>
            /// <param name = "outputRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/hh847950(v=vs.85)">D2D1_RECT_L</a>*</b></para>
            /// <para>The initial output rectangle for the bounds adjustment transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createboundsadjustmenttransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transform">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1boundsadjustmenttransform">ID2D1BoundsAdjustmentTransform</a>**</b></para>
            /// <para>The returned bounds adjustment transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createboundsadjustmenttransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createboundsadjustmenttransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBoundsAdjustmentTransform(win32.UI.DisplayDevices.RECT*outputRectangle, win32.Graphics.Direct2D.ID2D1BoundsAdjustmentTransform**transform)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateBoundsAdjustmentTransform_11(pThis, outputRectangle, transform);
            }

            /// <inheritdoc cref = "LoadPixelShader(global::System.Guid*, byte *, uint)"/>
            internal unsafe win32.System.Com.HRESULT LoadPixelShader(in global::System.Guid shaderId, ReadOnlySpan<byte> shaderBuffer)
            {
                fixed (byte *shaderBufferLocal = shaderBuffer)
                {
                    fixed (global::System.Guid*shaderIdLocal = &shaderId)
                    {
                        win32.System.Com.HRESULT __result = this.LoadPixelShader(shaderIdLocal, shaderBufferLocal, (uint)shaderBuffer.Length);
                        return __result;
                    }
                }
            }

            /// <summary>Loads the given shader by its unique ID.</summary>
            /// <param name = "shaderId">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The unique id that identifies the shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "shaderBuffer">
            /// <para>Type: <b>const BYTE*</b></para>
            /// <para>The buffer that contains the shader to register.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "shaderBufferCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the shader buffer in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadpixelshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT LoadPixelShader(global::System.Guid*shaderId, byte *shaderBuffer, uint shaderBufferCount)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->LoadPixelShader_12(pThis, shaderId, shaderBuffer, shaderBufferCount);
            }

            /// <inheritdoc cref = "LoadVertexShader(global::System.Guid*, byte *, uint)"/>
            internal unsafe win32.System.Com.HRESULT LoadVertexShader(in global::System.Guid resourceId, ReadOnlySpan<byte> shaderBuffer)
            {
                fixed (byte *shaderBufferLocal = shaderBuffer)
                {
                    fixed (global::System.Guid*resourceIdLocal = &resourceId)
                    {
                        win32.System.Com.HRESULT __result = this.LoadVertexShader(resourceIdLocal, shaderBufferLocal, (uint)shaderBuffer.Length);
                        return __result;
                    }
                }
            }

            /// <summary>Loads the given shader by its unique ID.</summary>
            /// <param name = "resourceId">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The unique id that identifies the shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "shaderBuffer">
            /// <para>Type: <b>BYTE*</b></para>
            /// <para>The buffer that contains the shader to register.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "shaderBufferCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the shader buffer in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadvertexshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT LoadVertexShader(global::System.Guid*resourceId, byte *shaderBuffer, uint shaderBufferCount)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->LoadVertexShader_13(pThis, resourceId, shaderBuffer, shaderBufferCount);
            }

            /// <inheritdoc cref = "LoadComputeShader(global::System.Guid*, byte *, uint)"/>
            internal unsafe win32.System.Com.HRESULT LoadComputeShader(in global::System.Guid resourceId, ReadOnlySpan<byte> shaderBuffer)
            {
                fixed (byte *shaderBufferLocal = shaderBuffer)
                {
                    fixed (global::System.Guid*resourceIdLocal = &resourceId)
                    {
                        win32.System.Com.HRESULT __result = this.LoadComputeShader(resourceIdLocal, shaderBufferLocal, (uint)shaderBuffer.Length);
                        return __result;
                    }
                }
            }

            /// <summary>Loads the given shader by its unique ID.</summary>
            /// <param name = "resourceId">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The unique id that identifies the shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "shaderBuffer">
            /// <para>Type: <b>BYTE*</b></para>
            /// <para>The buffer that contains the shader to register.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "shaderBufferCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the shader buffer in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-loadcomputeshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT LoadComputeShader(global::System.Guid*resourceId, byte *shaderBuffer, uint shaderBufferCount)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->LoadComputeShader_14(pThis, resourceId, shaderBuffer, shaderBufferCount);
            }

            /// <inheritdoc cref = "IsShaderLoaded(global::System.Guid*)"/>
            internal unsafe win32.System.SystemServices.BOOL IsShaderLoaded(in global::System.Guid shaderId)
            {
                fixed (global::System.Guid*shaderIdLocal = &shaderId)
                {
                    win32.System.SystemServices.BOOL __result = this.IsShaderLoaded(shaderIdLocal);
                    return __result;
                }
            }

            /// <summary>This tests to see if the given shader is loaded.</summary>
            /// <param name = "shaderId">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The unique id that identifies the shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-isshaderloaded#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Whether the shader is loaded.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-isshaderloaded">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.SystemServices.BOOL IsShaderLoaded(global::System.Guid*shaderId)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->IsShaderLoaded_15(pThis, shaderId);
            }

            /// <inheritdoc cref = "CreateResourceTexture(global::System.Guid*, win32.Graphics.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES*, byte *, uint *, uint, win32.Graphics.Direct2D.ID2D1ResourceTexture**)"/>
            internal unsafe win32.System.Com.HRESULT CreateResourceTexture(global::System.Guid? resourceId, in win32.Graphics.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES resourceTextureProperties, ReadOnlySpan<byte> data, uint? strides, win32.Graphics.Direct2D.ID2D1ResourceTexture**resourceTexture)
            {
                fixed (byte *dataLocal = data)
                {
                    fixed (win32.Graphics.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES*resourceTexturePropertiesLocal = &resourceTextureProperties)
                    {
                        global::System.Guid resourceIdLocal = resourceId.HasValue ? resourceId.Value : default(global::System.Guid);
                        uint stridesLocal = strides.HasValue ? strides.Value : default(uint);
                        win32.System.Com.HRESULT __result = this.CreateResourceTexture(resourceId.HasValue ? &resourceIdLocal : null, resourceTexturePropertiesLocal, dataLocal, strides.HasValue ? &stridesLocal : null, (uint)data.Length, resourceTexture);
                        return __result;
                    }
                }
            }

            /// <summary>Creates or finds the given resource texture, depending on whether a resource id is specified.</summary>
            /// <param name = "resourceId">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>An optional pointer to the unique id that identifies the lookup table.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "resourceTextureProperties">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ns-d2d1effectauthor-d2d1_resource_texture_properties">D2D1_RESOURCE_TEXTURE_PROPERTIES</a>*</b></para>
            /// <para>The properties used to create the resource texture.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "data">
            /// <para>Type: <b>const BYTE*</b></para>
            /// <para>The optional data to be loaded into the resource texture.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strides">
            /// <para>Type: <b>const UINT32*</b></para>
            /// <para>An optional pointer to the stride to advance through the resource texture, according to dimension.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dataSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size, in bytes, of the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "resourceTexture">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1resourcetexture">ID2D1ResourceTexture</a>**</b></para>
            /// <para>The returned texture that can be used as a resource in a Direct2D effect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createresourcetexture">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateResourceTexture([Optional] global::System.Guid*resourceId, win32.Graphics.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES*resourceTextureProperties, [Optional] byte *data, [Optional] uint *strides, uint dataSize, win32.Graphics.Direct2D.ID2D1ResourceTexture**resourceTexture)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateResourceTexture_16(pThis, resourceId, resourceTextureProperties, data, strides, dataSize, resourceTexture);
            }

            /// <inheritdoc cref = "FindResourceTexture(global::System.Guid*, win32.Graphics.Direct2D.ID2D1ResourceTexture**)"/>
            internal unsafe win32.System.Com.HRESULT FindResourceTexture(in global::System.Guid resourceId, win32.Graphics.Direct2D.ID2D1ResourceTexture**resourceTexture)
            {
                fixed (global::System.Guid*resourceIdLocal = &resourceId)
                {
                    win32.System.Com.HRESULT __result = this.FindResourceTexture(resourceIdLocal, resourceTexture);
                    return __result;
                }
            }

            /// <summary>Finds the given resource texture if it has already been created with ID2D1EffectContext::CreateResourceTexture with the same GUID.</summary>
            /// <param name = "resourceId">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The unique id that identifies the resource texture.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-findresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "resourceTexture">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1resourcetexture">ID2D1ResourceTexture</a>**</b></para>
            /// <para>The returned texture that can be used as a resource in a Direct2D effect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-findresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-findresourcetexture">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindResourceTexture(global::System.Guid*resourceId, win32.Graphics.Direct2D.ID2D1ResourceTexture**resourceTexture)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->FindResourceTexture_17(pThis, resourceId, resourceTexture);
            }

            /// <inheritdoc cref = "CreateVertexBuffer(win32.Graphics.Direct2D.D2D1_VERTEX_BUFFER_PROPERTIES*, global::System.Guid*, win32.Graphics.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, win32.Graphics.Direct2D.ID2D1VertexBuffer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateVertexBuffer(in win32.Graphics.Direct2D.D2D1_VERTEX_BUFFER_PROPERTIES vertexBufferProperties, global::System.Guid? resourceId, win32.Graphics.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES? customVertexBufferProperties, win32.Graphics.Direct2D.ID2D1VertexBuffer**buffer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_VERTEX_BUFFER_PROPERTIES*vertexBufferPropertiesLocal = &vertexBufferProperties)
                {
                    global::System.Guid resourceIdLocal = resourceId.HasValue ? resourceId.Value : default(global::System.Guid);
                    win32.Graphics.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES customVertexBufferPropertiesLocal = customVertexBufferProperties.HasValue ? customVertexBufferProperties.Value : default(win32.Graphics.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateVertexBuffer(vertexBufferPropertiesLocal, resourceId.HasValue ? &resourceIdLocal : null, customVertexBufferProperties.HasValue ? &customVertexBufferPropertiesLocal : null, buffer);
                    return __result;
                }
            }

            /// <summary>Creates a vertex buffer or finds a standard vertex buffer and optionally initializes it with vertices.</summary>
            /// <param name = "vertexBufferProperties">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ns-d2d1effectauthor-d2d1_vertex_buffer_properties">D2D1_VERTEX_BUFFER_PROPERTIES</a>*</b></para>
            /// <para>The properties used to describe the vertex buffer and vertex shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createvertexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "resourceId">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The unique id that identifies the vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createvertexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "customVertexBufferProperties">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ns-d2d1effectauthor-d2d1_custom_vertex_buffer_properties">D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES</a>*</b></para>
            /// <para>The properties used to define a custom vertex buffer. If you use a built-in vertex shader, you don't have to specify this property.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createvertexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "buffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1vertexbuffer">ID2D1VertexBuffer</a>**</b></para>
            /// <para>The returned vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createvertexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createvertexbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateVertexBuffer(win32.Graphics.Direct2D.D2D1_VERTEX_BUFFER_PROPERTIES*vertexBufferProperties, [Optional] global::System.Guid*resourceId, [Optional] win32.Graphics.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*customVertexBufferProperties, win32.Graphics.Direct2D.ID2D1VertexBuffer**buffer)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateVertexBuffer_18(pThis, vertexBufferProperties, resourceId, customVertexBufferProperties, buffer);
            }

            /// <inheritdoc cref = "FindVertexBuffer(global::System.Guid*, win32.Graphics.Direct2D.ID2D1VertexBuffer**)"/>
            internal unsafe win32.System.Com.HRESULT FindVertexBuffer(in global::System.Guid resourceId, win32.Graphics.Direct2D.ID2D1VertexBuffer**buffer)
            {
                fixed (global::System.Guid*resourceIdLocal = &resourceId)
                {
                    win32.System.Com.HRESULT __result = this.FindVertexBuffer(resourceIdLocal, buffer);
                    return __result;
                }
            }

            /// <summary>This finds the given vertex buffer if it has already been created with ID2D1EffectContext::CreateVertexBuffer with the same GUID.</summary>
            /// <param name = "resourceId">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The unique id that identifies the vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-findvertexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "buffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1vertexbuffer">ID2D1VertexBuffer</a>**</b></para>
            /// <para>The returned vertex buffer that can be used as a resource in a <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/direct2d-portal">Direct2D</a> effect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-findvertexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-findvertexbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindVertexBuffer(global::System.Guid*resourceId, win32.Graphics.Direct2D.ID2D1VertexBuffer**buffer)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->FindVertexBuffer_19(pThis, resourceId, buffer);
            }

            /// <inheritdoc cref = "CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE, byte *, uint, win32.Graphics.Direct2D.ID2D1ColorContext**)"/>
            internal unsafe win32.System.Com.HRESULT CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE space, ReadOnlySpan<byte> profile, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (byte *profileLocal = profile)
                {
                    win32.System.Com.HRESULT __result = this.CreateColorContext(space, profileLocal, (uint)profile.Length, colorContext);
                    return __result;
                }
            }

            /// <summary>Creates a color context from a color space.</summary>
            /// <param name = "space">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b></para>
            /// <para>The space  of color context to create.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "profile">
            /// <para>Type: <b>const BYTE*</b></para>
            /// <para>A buffer containing the ICC profile bytes used to initialize the color context when <i>space</i> is <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE_CUSTOM</a>.  For other types, the parameter is ignored and should be set to <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "profileSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size in bytes of <i>Profile</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a new color context object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE space, [Optional] byte *profile, uint profileSize, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateColorContext_20(pThis, space, profile, profileSize, colorContext);
            }

            /// <inheritdoc cref = "CreateColorContextFromFilename(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1ColorContext**)"/>
            internal unsafe win32.System.Com.HRESULT CreateColorContextFromFilename(string filename, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (char *filenameLocal = filename)
                {
                    win32.System.Com.HRESULT __result = this.CreateColorContextFromFilename(filenameLocal, colorContext);
                    return __result;
                }
            }

            /// <summary>Creates a color context by loading it from the specified filename. The profile bytes are the contents of the file specified by filename.</summary>
            /// <param name = "filename">
            /// <para>Type: <b>PCWSTR</b></para>
            /// <para>The path to the file containing the profile bytes to initialize the color context with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontextfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a new color context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontextfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontextfromfilename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorContextFromFilename(win32.System.SystemServices.PCWSTR filename, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateColorContextFromFilename_21(pThis, filename, colorContext);
            }

            /// <summary>Creates a color context from an IWICColorContext. The D2D1ColorContext space of the resulting context varies, see Remarks for more info.</summary>
            /// <param name = "wicColorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a> used to initialize the color context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontextfromwiccolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a new color context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontextfromwiccolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-createcolorcontextfromwiccolorcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorContextFromWicColorContext(win32.Graphics.Imaging.IWICColorContext*wicColorContext, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CreateColorContextFromWicColorContext_22(pThis, wicColorContext, colorContext);
            }

            /// <summary>This indicates whether an optional capability is supported by the D3D device.</summary>
            /// <param name = "feature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ne-d2d1effectauthor-d2d1_feature">D2D1_FEATURE</a></b></para>
            /// <para>The feature to query support for.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "featureSupportData">
            /// <para>Type: <b>void*</b></para>
            /// <para>A structure indicating information about how or if the feature is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "featureSupportDataSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size of the <i>featureSupportData</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-checkfeaturesupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckFeatureSupport(win32.Graphics.Direct2D.D2D1_FEATURE feature, void *featureSupportData, uint featureSupportDataSize)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->CheckFeatureSupport_23(pThis, feature, featureSupportData, featureSupportDataSize);
            }

            /// <summary>Indicates whether the buffer precision is supported by the underlying Direct2D device.</summary>
            /// <param name = "bufferPrecision">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b></para>
            /// <para>The buffer precision to check.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-isbufferprecisionsupported#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns TRUE if the buffer precision is supported.  Returns FALSE if the buffer precision is not supported.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1effectcontext-isbufferprecisionsupported">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsBufferPrecisionSupported(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision)
            {
                fixed (ID2D1EffectContext*pThis = &this)
                    return lpVtbl->IsBufferPrecisionSupported_24(pThis, bufferPrecision);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, float *, float *, void>GetDpi_4;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, win32.Graphics.Direct2D.ID2D1Effect**, win32.System.Com.HRESULT>CreateEffect_5;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, uint, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, win32.System.Com.HRESULT>GetMaximumSupportedFeatureLevel_6;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.ID2D1TransformNode**, win32.System.Com.HRESULT>CreateTransformNodeFromEffect_7;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, uint, win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1BlendTransform**, win32.System.Com.HRESULT>CreateBlendTransform_8;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1BorderTransform**, win32.System.Com.HRESULT>CreateBorderTransform_9;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.UI.DisplayDevices.POINT, win32.Graphics.Direct2D.ID2D1OffsetTransform**, win32.System.Com.HRESULT>CreateOffsetTransform_10;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.UI.DisplayDevices.RECT*, win32.Graphics.Direct2D.ID2D1BoundsAdjustmentTransform**, win32.System.Com.HRESULT>CreateBoundsAdjustmentTransform_11;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, byte *, uint, win32.System.Com.HRESULT>LoadPixelShader_12;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, byte *, uint, win32.System.Com.HRESULT>LoadVertexShader_13;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, byte *, uint, win32.System.Com.HRESULT>LoadComputeShader_14;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, win32.System.SystemServices.BOOL>IsShaderLoaded_15;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, win32.Graphics.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES*, byte *, uint *, uint, win32.Graphics.Direct2D.ID2D1ResourceTexture**, win32.System.Com.HRESULT>CreateResourceTexture_16;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, win32.Graphics.Direct2D.ID2D1ResourceTexture**, win32.System.Com.HRESULT>FindResourceTexture_17;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Direct2D.D2D1_VERTEX_BUFFER_PROPERTIES*, global::System.Guid*, win32.Graphics.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES*, win32.Graphics.Direct2D.ID2D1VertexBuffer**, win32.System.Com.HRESULT>CreateVertexBuffer_18;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, global::System.Guid*, win32.Graphics.Direct2D.ID2D1VertexBuffer**, win32.System.Com.HRESULT>FindVertexBuffer_19;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, byte *, uint, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContext_20;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContextFromFilename_21;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Imaging.IWICColorContext*, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContextFromWicColorContext_22;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Direct2D.D2D1_FEATURE, void *, uint, win32.System.Com.HRESULT>CheckFeatureSupport_23;
                internal delegate *unmanaged[Stdcall]<ID2D1EffectContext*, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.System.SystemServices.BOOL>IsBufferPrecisionSupported_24;
            }

            private Vtbl*lpVtbl;
        }
    }
}