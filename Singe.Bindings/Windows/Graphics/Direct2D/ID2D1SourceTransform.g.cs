// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("DB1800DD-0C34-4CF9-BE90-31CC0A5653E1")]
        internal unsafe struct ID2D1SourceTransform
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal uint GetInputCount()
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->GetInputCount_4(pThis);
            }

            /// <inheritdoc cref = "MapOutputRectToInputRects(win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint)"/>
            internal unsafe win32.System.Com.HRESULT MapOutputRectToInputRects(in win32.UI.DisplayDevices.RECT outputRect, Span<win32.UI.DisplayDevices.RECT> inputRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*inputRectsLocal = inputRects)
                {
                    fixed (win32.UI.DisplayDevices.RECT*outputRectLocal = &outputRect)
                    {
                        win32.System.Com.HRESULT __result = this.MapOutputRectToInputRects(outputRectLocal, inputRectsLocal, (uint)inputRects.Length);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT MapOutputRectToInputRects(win32.UI.DisplayDevices.RECT*outputRect, win32.UI.DisplayDevices.RECT*inputRects, uint inputRectsCount)
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->MapOutputRectToInputRects_5(pThis, outputRect, inputRects, inputRectsCount);
            }

            /// <inheritdoc cref = "MapInputRectsToOutputRect(win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT MapInputRectsToOutputRect(ReadOnlySpan<win32.UI.DisplayDevices.RECT> inputRects, ReadOnlySpan<win32.UI.DisplayDevices.RECT> inputOpaqueSubRects, out win32.UI.DisplayDevices.RECT outputRect, out win32.UI.DisplayDevices.RECT outputOpaqueSubRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*outputOpaqueSubRectLocal = &outputOpaqueSubRect)
                {
                    fixed (win32.UI.DisplayDevices.RECT*outputRectLocal = &outputRect)
                    {
                        fixed (win32.UI.DisplayDevices.RECT*inputOpaqueSubRectsLocal = inputOpaqueSubRects)
                        {
                            fixed (win32.UI.DisplayDevices.RECT*inputRectsLocal = inputRects)
                            {
                                if (inputRects.Length != inputOpaqueSubRects.Length)
                                    throw new ArgumentException();
                                win32.System.Com.HRESULT __result = this.MapInputRectsToOutputRect(inputRectsLocal, inputOpaqueSubRectsLocal, (uint)inputOpaqueSubRects.Length, outputRectLocal, outputOpaqueSubRectLocal);
                                return __result;
                            }
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT MapInputRectsToOutputRect(win32.UI.DisplayDevices.RECT*inputRects, win32.UI.DisplayDevices.RECT*inputOpaqueSubRects, uint inputRectCount, win32.UI.DisplayDevices.RECT*outputRect, win32.UI.DisplayDevices.RECT*outputOpaqueSubRect)
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->MapInputRectsToOutputRect_6(pThis, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect);
            }

            /// <inheritdoc cref = "MapInvalidRect(uint, win32.UI.DisplayDevices.RECT, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT MapInvalidRect(uint inputIndex, win32.UI.DisplayDevices.RECT invalidInputRect, out win32.UI.DisplayDevices.RECT invalidOutputRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*invalidOutputRectLocal = &invalidOutputRect)
                {
                    win32.System.Com.HRESULT __result = this.MapInvalidRect(inputIndex, invalidInputRect, invalidOutputRectLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT MapInvalidRect(uint inputIndex, win32.UI.DisplayDevices.RECT invalidInputRect, win32.UI.DisplayDevices.RECT*invalidOutputRect)
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->MapInvalidRect_7(pThis, inputIndex, invalidInputRect, invalidOutputRect);
            }

            /// <summary>Sets the render information for the transform.</summary>
            /// <param name = "renderInfo">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1renderinfo">ID2D1RenderInfo</a>*</b></para>
            /// <para>The interface supplied to the transform to allow specifying the CPU based transform pass.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1sourcetransform-setrenderinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1sourcetransform-setrenderinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetRenderInfo(win32.Graphics.Direct2D.ID2D1RenderInfo*renderInfo)
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->SetRenderInfo_8(pThis, renderInfo);
            }

            /// <inheritdoc cref = "Draw(win32.Graphics.Direct2D.ID2D1Bitmap1*, win32.UI.DisplayDevices.RECT*, win32.Graphics.Direct2D.D2D_POINT_2U)"/>
            internal unsafe win32.System.Com.HRESULT Draw(win32.Graphics.Direct2D.ID2D1Bitmap1*target, in win32.UI.DisplayDevices.RECT drawRect, win32.Graphics.Direct2D.D2D_POINT_2U targetOrigin)
            {
                fixed (win32.UI.DisplayDevices.RECT*drawRectLocal = &drawRect)
                {
                    win32.System.Com.HRESULT __result = this.Draw(target, drawRectLocal, targetOrigin);
                    return __result;
                }
            }

            /// <summary>Draws the transform to the graphics processing unit (GPU)–based Direct2D pipeline.</summary>
            /// <param name = "target">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1bitmap1">ID2D1Bitmap1</a>*</b></para>
            /// <para>The target to which the transform should be written.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1sourcetransform-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "drawRect">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/hh847950(v=vs.85)">D2D1_RECT_L</a>*</b></para>
            /// <para>The area within the source from which the image should be drawn.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1sourcetransform-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "targetOrigin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2u">D2D1_POINT_2U</a></b></para>
            /// <para>The origin within the target bitmap to which the source data should be drawn.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1sourcetransform-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1sourcetransform-draw">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Draw(win32.Graphics.Direct2D.ID2D1Bitmap1*target, win32.UI.DisplayDevices.RECT*drawRect, win32.Graphics.Direct2D.D2D_POINT_2U targetOrigin)
            {
                fixed (ID2D1SourceTransform*pThis = &this)
                    return lpVtbl->Draw_9(pThis, target, drawRect, targetOrigin);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, uint>GetInputCount_4;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint, win32.System.Com.HRESULT>MapOutputRectToInputRects_5;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>MapInputRectsToOutputRect_6;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, uint, win32.UI.DisplayDevices.RECT, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>MapInvalidRect_7;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, win32.Graphics.Direct2D.ID2D1RenderInfo*, win32.System.Com.HRESULT>SetRenderInfo_8;
                internal delegate *unmanaged[Stdcall]<ID2D1SourceTransform*, win32.Graphics.Direct2D.ID2D1Bitmap1*, win32.UI.DisplayDevices.RECT*, win32.Graphics.Direct2D.D2D_POINT_2U, win32.System.Com.HRESULT>Draw_9;
            }

            private Vtbl*lpVtbl;
        }
    }
}