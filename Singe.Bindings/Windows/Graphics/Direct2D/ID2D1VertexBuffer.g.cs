// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("9B8B1336-00A5-4668-92B7-CED5D8BF9B7B")]
        internal unsafe struct ID2D1VertexBuffer
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1VertexBuffer*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1VertexBuffer*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1VertexBuffer*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "Map(byte **, uint)"/>
            internal unsafe win32.System.Com.HRESULT Map(out byte *data, uint bufferSize)
            {
                fixed (byte **dataLocal = &data)
                {
                    win32.System.Com.HRESULT __result = this.Map(dataLocal, bufferSize);
                    return __result;
                }
            }

            /// <summary>Maps the provided data into user memory.</summary>
            /// <param name = "data">
            /// <para>Type: <b>const BYTE**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the available buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1vertexbuffer-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bufferSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The desired size of the buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1vertexbuffer-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1vertexbuffer-map">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Map(byte **data, uint bufferSize)
            {
                fixed (ID2D1VertexBuffer*pThis = &this)
                    return lpVtbl->Map_4(pThis, data, bufferSize);
            }

            /// <summary>Unmaps the vertex buffer.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1vertexbuffer-unmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Unmap()
            {
                fixed (ID2D1VertexBuffer*pThis = &this)
                    return lpVtbl->Unmap_5(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1VertexBuffer*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1VertexBuffer*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1VertexBuffer*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1VertexBuffer*, byte **, uint, win32.System.Com.HRESULT>Map_4;
                internal delegate *unmanaged[Stdcall]<ID2D1VertexBuffer*, win32.System.Com.HRESULT>Unmap_5;
            }

            private Vtbl*lpVtbl;
        }
    }
}