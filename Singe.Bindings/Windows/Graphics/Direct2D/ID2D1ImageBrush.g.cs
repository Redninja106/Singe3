// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("FE9E984D-3F95-407C-B5DB-CB94D4E8F87C")]
        internal unsafe struct ID2D1ImageBrush
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            internal void SetOpacity(float opacity)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->SetOpacity_5(pThis, opacity);
            }

            /// <inheritdoc cref = "SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void SetTransform(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.SetTransform(transformLocal);
                }
            }

            internal unsafe void SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->SetTransform_6(pThis, transform);
            }

            internal float GetOpacity()
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    return lpVtbl->GetOpacity_7(pThis);
            }

            /// <inheritdoc cref = "GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void GetTransform(out win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.GetTransform(transformLocal);
                }
            }

            internal unsafe void GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->GetTransform_8(pThis, transform);
            }

            /// <summary>Sets the image associated with the provided image brush.</summary>
            /// <param name = "image">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b></para>
            /// <para>The image to be associated with the image brush.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setimage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setimage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetImage([Optional] win32.Graphics.Direct2D.ID2D1Image*image)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->SetImage_9(pThis, image);
            }

            /// <summary>Sets how the content inside the source rectangle in the image brush will be extended on the x-axis.</summary>
            /// <param name = "extendModeX">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>The extend mode on the x-axis of the image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setextendmodex#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setextendmodex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetExtendModeX(win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendModeX)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->SetExtendModeX_10(pThis, extendModeX);
            }

            /// <summary>Sets the extend mode on the y-axis.</summary>
            /// <param name = "extendModeY">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>The extend mode on the y-axis of the image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setextendmodey#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setextendmodey">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetExtendModeY(win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendModeY)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->SetExtendModeY_11(pThis, extendModeY);
            }

            /// <summary>Sets the interpolation mode for the image brush.</summary>
            /// <param name = "interpolationMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_interpolation_mode">D2D1_INTERPOLATION_MODE</a></b></para>
            /// <para>How the contents of the image will be interpolated to handle the brush transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setinterpolationmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setinterpolationmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetInterpolationMode(win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->SetInterpolationMode_12(pThis, interpolationMode);
            }

            /// <inheritdoc cref = "SetSourceRectangle(win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void SetSourceRectangle(in win32.Graphics.Direct2D.D2D_RECT_F sourceRectangle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangleLocal = &sourceRectangle)
                {
                    this.SetSourceRectangle(sourceRectangleLocal);
                }
            }

            /// <summary>Sets the source rectangle in the image brush.</summary>
            /// <param name = "sourceRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The source rectangle that defines the portion of the image to tile.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setsourcerectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The top left corner of the <i>sourceRectangle</i> parameter maps to the brush space origin. That is, if the  brush and world transforms are both identity, the portion of the image in the top left corner of the source rectangle will be rendered at (0,0) in the render target.</para>
            /// <para>The source rectangle will be expanded differently depending on whether the input image is based on   pixels (a bitmap or effect) or by a command list.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-setsourcerectangle#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetSourceRectangle(win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->SetSourceRectangle_13(pThis, sourceRectangle);
            }

            /// <summary>Gets the image associated with the image brush.</summary>
            /// <param name = "image">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the image associated with  this brush.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-getimage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-getimage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetImage([Optional] win32.Graphics.Direct2D.ID2D1Image**image)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->GetImage_14(pThis, image);
            }

            /// <summary>Gets the extend mode of the image brush on the x-axis.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>This method returns the x-extend mode.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-getextendmodex">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_EXTEND_MODE GetExtendModeX()
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    return lpVtbl->GetExtendModeX_15(pThis);
            }

            /// <summary>Gets the extend mode of the image brush on the y-axis of the image.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>This method returns the  y-extend mode.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-getextendmodey">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_EXTEND_MODE GetExtendModeY()
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    return lpVtbl->GetExtendModeY_16(pThis);
            }

            /// <summary>Gets the interpolation mode of the image brush.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_interpolation_mode">D2D1_INTERPOLATION_MODE</a></b></para>
            /// <para>This method returns the  interpolation mode.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-getinterpolationmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE GetInterpolationMode()
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    return lpVtbl->GetInterpolationMode_17(pThis);
            }

            /// <inheritdoc cref = "GetSourceRectangle(win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void GetSourceRectangle(out win32.Graphics.Direct2D.D2D_RECT_F sourceRectangle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangleLocal = &sourceRectangle)
                {
                    this.GetSourceRectangle(sourceRectangleLocal);
                }
            }

            /// <summary>Gets the rectangle that will be used as the bounds of the image when drawn as an image brush.</summary>
            /// <param name = "sourceRectangle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>When this method returns, contains the address of the output source rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-getsourcerectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1imagebrush-getsourcerectangle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetSourceRectangle(win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1ImageBrush*pThis = &this)
                    lpVtbl->GetSourceRectangle_18(pThis, sourceRectangle);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, float, void>SetOpacity_5;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>SetTransform_6;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, float>GetOpacity_7;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>GetTransform_8;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.ID2D1Image*, void>SetImage_9;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, void>SetExtendModeX_10;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, void>SetExtendModeY_11;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, void>SetInterpolationMode_12;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D_RECT_F*, void>SetSourceRectangle_13;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.ID2D1Image**, void>GetImage_14;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D1_EXTEND_MODE>GetExtendModeX_15;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D1_EXTEND_MODE>GetExtendModeY_16;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE>GetInterpolationMode_17;
                internal delegate *unmanaged[Stdcall]<ID2D1ImageBrush*, win32.Graphics.Direct2D.D2D_RECT_F*, void>GetSourceRectangle_18;
            }

            private Vtbl*lpVtbl;
        }
    }
}