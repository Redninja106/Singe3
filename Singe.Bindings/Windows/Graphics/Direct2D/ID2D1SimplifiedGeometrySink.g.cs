// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("2CD9069E-12E2-11DC-9FED-001143A055F9")]
        internal unsafe struct ID2D1SimplifiedGeometrySink
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.</summary>
            /// <param name = "fillMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_fill_mode">D2D1_FILL_MODE</a></b></para>
            /// <para>The method used to determine whether a given point is part of the geometry.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-setfillmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The fill mode defaults to D2D1_FILL_MODE_ALTERNATE. To set the fill mode, call <b>SetFillMode</b> before the first call to <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure">BeginFigure</a>. Not doing will put the geometry sink in an error state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-setfillmode#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetFillMode(win32.Graphics.Direct2D.D2D1_FILL_MODE fillMode)
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    lpVtbl->SetFillMode_4(pThis, fillMode);
            }

            /// <summary>Specifies stroke and join options to be applied to new segments added to the geometry sink.</summary>
            /// <param name = "vertexFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_path_segment">D2D1_PATH_SEGMENT</a></b></para>
            /// <para>Stroke and join options to be applied to new segments added to the geometry sink.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-setsegmentflags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>After this method is called, the specified segment flags are applied to each segment subsequently added to the sink. The segment flags are applied to every additional segment until this method is called again and a different set of segment flags is specified.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-setsegmentflags#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetSegmentFlags(win32.Graphics.Direct2D.D2D1_PATH_SEGMENT vertexFlags)
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    lpVtbl->SetSegmentFlags_5(pThis, vertexFlags);
            }

            /// <summary>Starts a new figure at the specified point.</summary>
            /// <param name = "startPoint">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The point at which to begin the new figure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "figureBegin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_figure_begin">D2D1_FIGURE_BEGIN</a></b></para>
            /// <para>Whether the new figure should be hollow or filled.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If this method is called while a figure is currently in progress, the interface is invalidated and all future methods will fail.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void BeginFigure(win32.Graphics.Direct2D.D2D_POINT_2F startPoint, win32.Graphics.Direct2D.D2D1_FIGURE_BEGIN figureBegin)
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    lpVtbl->BeginFigure_6(pThis, startPoint, figureBegin);
            }

            /// <inheritdoc cref = "AddLines(win32.Graphics.Direct2D.D2D_POINT_2F*, uint)"/>
            internal unsafe void AddLines(ReadOnlySpan<win32.Graphics.Direct2D.D2D_POINT_2F> points)
            {
                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pointsLocal = points)
                {
                    this.AddLines(pointsLocal, (uint)points.Length);
                }
            }

            /// <summary>Creates a sequence of lines using the specified points and adds them to the geometry sink.</summary>
            /// <param name = "points">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
            /// <para>A pointer to an array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure">BeginFigure</a>) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-addlines#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointsCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of points in the <i>points</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-addlines#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-addlines">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void AddLines(win32.Graphics.Direct2D.D2D_POINT_2F*points, uint pointsCount)
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    lpVtbl->AddLines_7(pThis, points, pointsCount);
            }

            /// <inheritdoc cref = "AddBeziers(win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*, uint)"/>
            internal unsafe void AddBeziers(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT> beziers)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*beziersLocal = beziers)
                {
                    this.AddBeziers(beziersLocal, (uint)beziers.Length);
                }
            }

            /// <summary>Creates a sequence of cubic Bezier curves and adds them to the geometry sink.</summary>
            /// <param name = "beziers">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ns-d2d1-d2d1_bezier_segment">D2D1_BEZIER_SEGMENT</a>*</b></para>
            /// <para>A pointer to an array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure">BeginFigure</a>) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-addbeziers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "beziersCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of Bezier segments in the <i>beziers</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-addbeziers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-addbeziers">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void AddBeziers(win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*beziers, uint beziersCount)
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    lpVtbl->AddBeziers_8(pThis, beziers, beziersCount);
            }

            /// <summary>Ends the current figure; optionally, closes it.</summary>
            /// <param name = "figureEnd">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_figure_end">D2D1_FIGURE_END</a></b></para>
            /// <para>A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure">BeginFigure</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-endfigure#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Calling this method without a matching call to <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1simplifiedgeometrysink-beginfigure">BeginFigure</a>  places the geometry sink in an error state; subsequent calls are ignored, and the overall failure will be returned when the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1simplifiedgeometrysink-close">Close</a> method is called.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-endfigure#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void EndFigure(win32.Graphics.Direct2D.D2D1_FIGURE_END figureEnd)
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    lpVtbl->EndFigure_9(pThis, figureEnd);
            }

            /// <summary>Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1simplifiedgeometrysink-close">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Close()
            {
                fixed (ID2D1SimplifiedGeometrySink*pThis = &this)
                    return lpVtbl->Close_10(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, win32.Graphics.Direct2D.D2D1_FILL_MODE, void>SetFillMode_4;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, win32.Graphics.Direct2D.D2D1_PATH_SEGMENT, void>SetSegmentFlags_5;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D1_FIGURE_BEGIN, void>BeginFigure_6;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, win32.Graphics.Direct2D.D2D_POINT_2F*, uint, void>AddLines_7;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*, uint, void>AddBeziers_8;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, win32.Graphics.Direct2D.D2D1_FIGURE_END, void>EndFigure_9;
                internal delegate *unmanaged[Stdcall]<ID2D1SimplifiedGeometrySink*, win32.System.Com.HRESULT>Close_10;
            }

            private Vtbl*lpVtbl;
        }
    }
}