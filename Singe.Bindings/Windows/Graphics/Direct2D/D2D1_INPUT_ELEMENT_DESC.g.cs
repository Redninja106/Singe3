// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        /// <summary>A description of a single element to the vertex layout.</summary>
        /// <remarks>
        /// <para>This structure is a subset of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_input_element_desc">D3D11_INPUT_ELEMENT_DESC</a> that omits fields required to define a vertex layout.</para>
        /// <para>If the <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/direct2d-constants">D2D1_APPEND_ALIGNED_ELEMENT</a> constant is used for  <b>alignedByteOffset</b>, the elements will be packed contiguously for convenience.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/ns-d2d1effectauthor-d2d1_input_element_desc#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct D2D1_INPUT_ELEMENT_DESC
        {
            /// <summary>The <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">HLSL semantic</a> associated with this element in a <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-signatures">shader input-signature</a>.</summary>
            internal win32.System.SystemServices.PCSTR semanticName;
            /// <summary>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix; however, each of the four components would have different semantic indices (0, 1, 2, and 3).</summary>
            internal uint semanticIndex;
            /// <summary>The data type of the element data.</summary>
            internal win32.Graphics.Dxgi.DXGI_FORMAT format;
            /// <summary>An integer value that identifies the input-assembler. Valid values are between 0 and 15.</summary>
            internal uint inputSlot;
            /// <summary>The offset in bytes between each element.</summary>
            internal uint alignedByteOffset;
        }
    }
}