// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("519AE1BD-D19A-420D-B849-364F594776B7")]
        internal unsafe struct ID2D1RenderInfo
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1RenderInfo*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1RenderInfo*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1RenderInfo*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Sets how a specific input to the transform should be handled by the renderer in terms of sampling.</summary>
            /// <param name = "inputIndex">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index of the input that will have the input description applied.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setinputdescription#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inputDescription">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ns-d2d1effectauthor-d2d1_input_description">D2D1_INPUT_DESCRIPTION</a></b></para>
            /// <para>The description of the input to be applied to the transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setinputdescription#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setinputdescription">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetInputDescription(uint inputIndex, win32.Graphics.Direct2D.D2D1_INPUT_DESCRIPTION inputDescription)
            {
                fixed (ID2D1RenderInfo*pThis = &this)
                    return lpVtbl->SetInputDescription_4(pThis, inputIndex, inputDescription);
            }

            /// <summary>Allows a caller to control the output precision and channel-depth of the transform in which the render information is encapsulated.</summary>
            /// <param name = "bufferPrecision">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b></para>
            /// <para>The type of buffer that should be used as an output from this transform.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setoutputbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "channelDepth">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ne-d2d1effectauthor-d2d1_channel_depth">D2D1_CHANNEL_DEPTH</a></b></para>
            /// <para>The number of channels that will be used on the output buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setoutputbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setoutputbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetOutputBuffer(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision, win32.Graphics.Direct2D.D2D1_CHANNEL_DEPTH channelDepth)
            {
                fixed (ID2D1RenderInfo*pThis = &this)
                    return lpVtbl->SetOutputBuffer_5(pThis, bufferPrecision, channelDepth);
            }

            /// <summary>Specifies that the output of the transform in which the render information is encapsulated is or is not cached.</summary>
            /// <param name = "isCached">
            /// <para>Type: <b>BOOL</b></para>
            /// <para><b>TRUE</b> if the output of the transform is cached; otherwise, <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setcached#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setcached">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetCached(win32.System.SystemServices.BOOL isCached)
            {
                fixed (ID2D1RenderInfo*pThis = &this)
                    lpVtbl->SetCached_6(pThis, isCached);
            }

            /// <summary>Provides an estimated hint of shader execution cost to D2D.</summary>
            /// <param name = "instructionCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>An approximate instruction count of the associated shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setinstructioncounthint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The instruction count may be set according to the number of instructions in the shader.  This information is used as a hint when rendering extremely large images.  Calling this API is optional, but it may  improve performance if you provide an accurate number.</para>
            /// <para><div class = "alert"><b>Note</b>  Instructions that occur in a loop should be counted according to the number of loop iterations.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1renderinfo-setinstructioncounthint#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetInstructionCountHint(uint instructionCount)
            {
                fixed (ID2D1RenderInfo*pThis = &this)
                    lpVtbl->SetInstructionCountHint_7(pThis, instructionCount);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1RenderInfo*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderInfo*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderInfo*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderInfo*, uint, win32.Graphics.Direct2D.D2D1_INPUT_DESCRIPTION, win32.System.Com.HRESULT>SetInputDescription_4;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderInfo*, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.Graphics.Direct2D.D2D1_CHANNEL_DEPTH, win32.System.Com.HRESULT>SetOutputBuffer_5;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderInfo*, win32.System.SystemServices.BOOL, void>SetCached_6;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderInfo*, uint, void>SetInstructionCountHint_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}