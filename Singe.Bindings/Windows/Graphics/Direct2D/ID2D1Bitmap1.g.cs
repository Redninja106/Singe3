// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("A898A84C-3873-4588-B08B-EBBF978DF041")]
        internal unsafe struct ID2D1Bitmap1
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_F GetSize()
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->GetSize_5(pThis);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_U GetPixelSize()
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->GetPixelSize_6(pThis);
            }

            internal win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT GetPixelFormat()
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->GetPixelFormat_7(pThis);
            }

            /// <inheritdoc cref = "GetDpi(float *, float *)"/>
            internal unsafe void GetDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            internal unsafe void GetDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    lpVtbl->GetDpi_8(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "CopyFromBitmap(win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_U*)"/>
            internal unsafe win32.System.Com.HRESULT CopyFromBitmap(win32.Graphics.Direct2D.D2D_POINT_2U? destPoint, win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_U? srcRect)
            {
                win32.Graphics.Direct2D.D2D_POINT_2U destPointLocal = destPoint.HasValue ? destPoint.Value : default(win32.Graphics.Direct2D.D2D_POINT_2U);
                win32.Graphics.Direct2D.D2D_RECT_U srcRectLocal = srcRect.HasValue ? srcRect.Value : default(win32.Graphics.Direct2D.D2D_RECT_U);
                win32.System.Com.HRESULT __result = this.CopyFromBitmap(destPoint.HasValue ? &destPointLocal : null, bitmap, srcRect.HasValue ? &srcRectLocal : null);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CopyFromBitmap([Optional] win32.Graphics.Direct2D.D2D_POINT_2U*destPoint, win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_U*srcRect)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->CopyFromBitmap_9(pThis, destPoint, bitmap, srcRect);
            }

            /// <inheritdoc cref = "CopyFromRenderTarget(win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_RECT_U*)"/>
            internal unsafe win32.System.Com.HRESULT CopyFromRenderTarget(win32.Graphics.Direct2D.D2D_POINT_2U? destPoint, win32.Graphics.Direct2D.ID2D1RenderTarget*renderTarget, win32.Graphics.Direct2D.D2D_RECT_U? srcRect)
            {
                win32.Graphics.Direct2D.D2D_POINT_2U destPointLocal = destPoint.HasValue ? destPoint.Value : default(win32.Graphics.Direct2D.D2D_POINT_2U);
                win32.Graphics.Direct2D.D2D_RECT_U srcRectLocal = srcRect.HasValue ? srcRect.Value : default(win32.Graphics.Direct2D.D2D_RECT_U);
                win32.System.Com.HRESULT __result = this.CopyFromRenderTarget(destPoint.HasValue ? &destPointLocal : null, renderTarget, srcRect.HasValue ? &srcRectLocal : null);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CopyFromRenderTarget([Optional] win32.Graphics.Direct2D.D2D_POINT_2U*destPoint, win32.Graphics.Direct2D.ID2D1RenderTarget*renderTarget, [Optional] win32.Graphics.Direct2D.D2D_RECT_U*srcRect)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->CopyFromRenderTarget_10(pThis, destPoint, renderTarget, srcRect);
            }

            /// <inheritdoc cref = "CopyFromMemory(win32.Graphics.Direct2D.D2D_RECT_U*, void *, uint)"/>
            internal unsafe win32.System.Com.HRESULT CopyFromMemory(win32.Graphics.Direct2D.D2D_RECT_U? dstRect, void *srcData, uint pitch)
            {
                win32.Graphics.Direct2D.D2D_RECT_U dstRectLocal = dstRect.HasValue ? dstRect.Value : default(win32.Graphics.Direct2D.D2D_RECT_U);
                win32.System.Com.HRESULT __result = this.CopyFromMemory(dstRect.HasValue ? &dstRectLocal : null, srcData, pitch);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CopyFromMemory([Optional] win32.Graphics.Direct2D.D2D_RECT_U*dstRect, void *srcData, uint pitch)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->CopyFromMemory_11(pThis, dstRect, srcData, pitch);
            }

            /// <summary>Gets the color context information associated with the bitmap.</summary>
            /// <param name = "colorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the  color context interface associated with the bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-getcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the bitmap was created without specifying a color context, the returned context is <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-getcolorcontext#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetColorContext([Optional] win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    lpVtbl->GetColorContext_12(pThis, colorContext);
            }

            /// <summary>Gets the options used in creating the bitmap.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_bitmap_options">D2D1_BITMAP_OPTIONS</a></b></para>
            /// <para>This method returns the options used.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-getoptions">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_BITMAP_OPTIONS GetOptions()
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->GetOptions_13(pThis);
            }

            /// <summary>Gets either the surface that was specified when the bitmap was created, or the default surface created when the bitmap was created.</summary>
            /// <param name = "dxgiSurface">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>**</b></para>
            /// <para>The underlying DXGI surface for the bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-getsurface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-getsurface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSurface([Optional] win32.Graphics.Dxgi.IDXGISurface**dxgiSurface)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->GetSurface_14(pThis, dxgiSurface);
            }

            /// <inheritdoc cref = "Map(win32.Graphics.Direct2D.D2D1_MAP_OPTIONS, win32.Graphics.Direct2D.D2D1_MAPPED_RECT*)"/>
            internal unsafe win32.System.Com.HRESULT Map(win32.Graphics.Direct2D.D2D1_MAP_OPTIONS options, out win32.Graphics.Direct2D.D2D1_MAPPED_RECT mappedRect)
            {
                fixed (win32.Graphics.Direct2D.D2D1_MAPPED_RECT*mappedRectLocal = &mappedRect)
                {
                    win32.System.Com.HRESULT __result = this.Map(options, mappedRectLocal);
                    return __result;
                }
            }

            /// <summary>Maps the given bitmap into memory.</summary>
            /// <param name = "options">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_map_options">D2D1_MAP_OPTIONS</a></b></para>
            /// <para>The options used in mapping the bitmap into memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "mappedRect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_mapped_rect">D2D1_MAPPED_RECT</a>*</b></para>
            /// <para>When this method returns, contains a reference to the rectangle that is mapped into memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-map">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Map(win32.Graphics.Direct2D.D2D1_MAP_OPTIONS options, win32.Graphics.Direct2D.D2D1_MAPPED_RECT*mappedRect)
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->Map_15(pThis, options, mappedRect);
            }

            /// <summary>Unmaps the bitmap from memory.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1bitmap1-unmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Unmap()
            {
                fixed (ID2D1Bitmap1*pThis = &this)
                    return lpVtbl->Unmap_16(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D_SIZE_F>GetSize_5;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D_SIZE_U>GetPixelSize_6;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT>GetPixelFormat_7;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, float *, float *, void>GetDpi_8;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_U*, win32.System.Com.HRESULT>CopyFromBitmap_9;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_RECT_U*, win32.System.Com.HRESULT>CopyFromRenderTarget_10;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D_RECT_U*, void *, uint, win32.System.Com.HRESULT>CopyFromMemory_11;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.ID2D1ColorContext**, void>GetColorContext_12;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D1_BITMAP_OPTIONS>GetOptions_13;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Dxgi.IDXGISurface**, win32.System.Com.HRESULT>GetSurface_14;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.Graphics.Direct2D.D2D1_MAP_OPTIONS, win32.Graphics.Direct2D.D2D1_MAPPED_RECT*, win32.System.Com.HRESULT>Map_15;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap1*, win32.System.Com.HRESULT>Unmap_16;
            }

            private Vtbl*lpVtbl;
        }
    }
}