// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("394EA6A3-0C34-4321-950B-6CA20F0BE6C7")]
        internal unsafe struct ID2D1DeviceContext2
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <inheritdoc cref = "CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, void *srcData, uint pitch, in win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapPropertiesLocal = &bitmapProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateBitmap(size, srcData, pitch, bitmapPropertiesLocal, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, [Optional] void *srcData, uint pitch, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateBitmap_5(pThis, size, srcData, pitch, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromWicBitmap(wicBitmapSource, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateBitmapFromWicBitmap_6(pThis, wicBitmapSource, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateSharedBitmap(global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(in global::System.Guid riid, void *data, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSharedBitmap(riidLocal, data, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(global::System.Guid*riid, void *data, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateSharedBitmap_7(pThis, riid, data, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES? bitmapBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushPropertiesLocal = bitmapBrushProperties.HasValue ? bitmapBrushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES);
                win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapBrush(bitmap, bitmapBrushProperties.HasValue ? &bitmapBrushPropertiesLocal : null, brushProperties.HasValue ? &brushPropertiesLocal : null, bitmapBrush);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush([Optional] win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*bitmapBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateBitmapBrush_8(pThis, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush);
            }

            /// <inheritdoc cref = "CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(in win32.Graphics.Direct2D.D2D1_COLOR_F color, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_COLOR_F*colorLocal = &color)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSolidColorBrush(colorLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, solidColorBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*color, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateSolidColorBrush_9(pThis, color, brushProperties, solidColorBrush);
            }

            /// <inheritdoc cref = "CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_GRADIENT_STOP> gradientStops, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStopsLocal = gradientStops)
                {
                    win32.System.Com.HRESULT __result = this.CreateGradientStopCollection(gradientStopsLocal, (uint)gradientStops.Length, colorInterpolationGamma, extendMode, gradientStopCollection);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStops, uint gradientStopsCount, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateGradientStopCollection_10(pThis, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection);
            }

            /// <inheritdoc cref = "CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(in win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushPropertiesLocal = &linearGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateLinearGradientBrush(linearGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, linearGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateLinearGradientBrush_11(pThis, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush);
            }

            /// <inheritdoc cref = "CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(in win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushPropertiesLocal = &radialGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateRadialGradientBrush(radialGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, radialGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateRadialGradientBrush_12(pThis, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush);
            }

            /// <inheritdoc cref = "CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F? desiredSize, win32.Graphics.Direct2D.D2D_SIZE_U? desiredPixelSize, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT? desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F desiredSizeLocal = desiredSize.HasValue ? desiredSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.Graphics.Direct2D.D2D_SIZE_U desiredPixelSizeLocal = desiredPixelSize.HasValue ? desiredPixelSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_U);
                win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT desiredFormatLocal = desiredFormat.HasValue ? desiredFormat.Value : default(win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT);
                win32.System.Com.HRESULT __result = this.CreateCompatibleRenderTarget(desiredSize.HasValue ? &desiredSizeLocal : null, desiredPixelSize.HasValue ? &desiredPixelSizeLocal : null, desiredFormat.HasValue ? &desiredFormatLocal : null, options, bitmapRenderTarget);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*desiredSize, [Optional] win32.Graphics.Direct2D.D2D_SIZE_U*desiredPixelSize, [Optional] win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateCompatibleRenderTarget_13(pThis, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget);
            }

            /// <inheritdoc cref = "CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F? size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F sizeLocal = size.HasValue ? size.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.System.Com.HRESULT __result = this.CreateLayer(size.HasValue ? &sizeLocal : null, layer);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateLayer([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateLayer_14(pThis, size, layer);
            }

            internal unsafe win32.System.Com.HRESULT CreateMesh(win32.Graphics.Direct2D.ID2D1Mesh**mesh)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateMesh_15(pThis, mesh);
            }

            internal unsafe void DrawLine(win32.Graphics.Direct2D.D2D_POINT_2F point0, win32.Graphics.Direct2D.D2D_POINT_2F point1, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawLine_16(pThis, point0, point1, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.DrawRectangle(rectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawRectangle_17(pThis, rect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.FillRectangle(rectLocal, brush);
                }
            }

            internal unsafe void FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->FillRectangle_18(pThis, rect, brush);
            }

            /// <inheritdoc cref = "DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.DrawRoundedRectangle(roundedRectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawRoundedRectangle_19(pThis, roundedRect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.FillRoundedRectangle(roundedRectLocal, brush);
                }
            }

            internal unsafe void FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->FillRoundedRectangle_20(pThis, roundedRect, brush);
            }

            /// <inheritdoc cref = "DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.DrawEllipse(ellipseLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawEllipse_21(pThis, ellipse, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.FillEllipse(ellipseLocal, brush);
                }
            }

            internal unsafe void FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->FillEllipse_22(pThis, ellipse, brush);
            }

            internal unsafe void DrawGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawGeometry_23(pThis, geometry, brush, strokeWidth, strokeStyle);
            }

            internal unsafe void FillGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.ID2D1Brush*opacityBrush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->FillGeometry_24(pThis, geometry, brush, opacityBrush);
            }

            internal unsafe void FillMesh(win32.Graphics.Direct2D.ID2D1Mesh*mesh, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->FillMesh_25(pThis, mesh, brush);
            }

            /// <inheritdoc cref = "FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.FillOpacityMask(opacityMask, brush, content, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->FillOpacityMask_26(pThis, opacityMask, brush, content, destinationRectangle, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.DrawBitmap(bitmap, destinationRectangle.HasValue ? &destinationRectangleLocal : null, opacity, interpolationMode, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawBitmap_27(pThis, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawText(win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawText(string @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, in win32.Graphics.Direct2D.D2D_RECT_F layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*layoutRectLocal = &layoutRect)
                {
                    fixed (char *@stringLocal = @string)
                    {
                        this.DrawText(@stringLocal, stringLength, textFormat, layoutRectLocal, defaultFillBrush, options, measuringMode);
                    }
                }
            }

            internal unsafe void DrawText(win32.System.SystemServices.PCWSTR @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, win32.Graphics.Direct2D.D2D_RECT_F*layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawText_28(pThis, @string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode);
            }

            internal unsafe void DrawTextLayout(win32.Graphics.Direct2D.D2D_POINT_2F origin, win32.Graphics.DirectWrite.IDWriteTextLayout*textLayout, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawTextLayout_29(pThis, origin, textLayout, defaultFillBrush, options);
            }

            /// <inheritdoc cref = "DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                {
                    this.DrawGlyphRun(baselineOrigin, glyphRunLocal, foregroundBrush, measuringMode);
                }
            }

            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawGlyphRun_30(pThis, baselineOrigin, glyphRun, foregroundBrush, measuringMode);
            }

            /// <inheritdoc cref = "SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void SetTransform(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.SetTransform(transformLocal);
                }
            }

            internal unsafe void SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetTransform_31(pThis, transform);
            }

            /// <inheritdoc cref = "GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void GetTransform(out win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.GetTransform(transformLocal);
                }
            }

            internal unsafe void GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetTransform_32(pThis, transform);
            }

            internal void SetAntialiasMode(win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetAntialiasMode_33(pThis, antialiasMode);
            }

            internal win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE GetAntialiasMode()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetAntialiasMode_34(pThis);
            }

            internal void SetTextAntialiasMode(win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetTextAntialiasMode_35(pThis, textAntialiasMode);
            }

            internal win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetTextAntialiasMode_36(pThis);
            }

            internal unsafe void SetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams*textRenderingParams)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetTextRenderingParams_37(pThis, textRenderingParams);
            }

            internal unsafe void GetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams**textRenderingParams)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetTextRenderingParams_38(pThis, textRenderingParams);
            }

            internal void SetTags(ulong tag1, ulong tag2)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetTags_39(pThis, tag1, tag2);
            }

            internal unsafe void GetTags([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetTags_40(pThis, tag1, tag2);
            }

            /// <inheritdoc cref = "PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*)"/>
            internal unsafe void PushLayer(in win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS layerParameters, win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParametersLocal = &layerParameters)
                {
                    this.PushLayer(layerParametersLocal, layer);
                }
            }

            internal unsafe void PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParameters, [Optional] win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->PushLayer_41(pThis, layerParameters, layer);
            }

            internal void PopLayer()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->PopLayer_42(pThis);
            }

            internal unsafe win32.System.Com.HRESULT Flush([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->Flush_43(pThis, tag1, tag2);
            }

            internal unsafe void SaveDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SaveDrawingState_44(pThis, drawingStateBlock);
            }

            internal unsafe void RestoreDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->RestoreDrawingState_45(pThis, drawingStateBlock);
            }

            /// <inheritdoc cref = "PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE)"/>
            internal unsafe void PushAxisAlignedClip(in win32.Graphics.Direct2D.D2D_RECT_F clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*clipRectLocal = &clipRect)
                {
                    this.PushAxisAlignedClip(clipRectLocal, antialiasMode);
                }
            }

            internal unsafe void PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->PushAxisAlignedClip_46(pThis, clipRect, antialiasMode);
            }

            internal void PopAxisAlignedClip()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->PopAxisAlignedClip_47(pThis);
            }

            /// <inheritdoc cref = "Clear(win32.Graphics.Direct2D.D2D1_COLOR_F*)"/>
            internal unsafe void Clear(win32.Graphics.Direct2D.D2D1_COLOR_F? clearColor)
            {
                win32.Graphics.Direct2D.D2D1_COLOR_F clearColorLocal = clearColor.HasValue ? clearColor.Value : default(win32.Graphics.Direct2D.D2D1_COLOR_F);
                this.Clear(clearColor.HasValue ? &clearColorLocal : null);
            }

            internal unsafe void Clear([Optional] win32.Graphics.Direct2D.D2D1_COLOR_F*clearColor)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->Clear_48(pThis, clearColor);
            }

            internal void BeginDraw()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->BeginDraw_49(pThis);
            }

            internal unsafe win32.System.Com.HRESULT EndDraw([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->EndDraw_50(pThis, tag1, tag2);
            }

            internal win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT GetPixelFormat()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetPixelFormat_51(pThis);
            }

            internal void SetDpi(float dpiX, float dpiY)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetDpi_52(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "GetDpi(float *, float *)"/>
            internal unsafe void GetDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            internal unsafe void GetDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetDpi_53(pThis, dpiX, dpiY);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_F GetSize()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetSize_54(pThis);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_U GetPixelSize()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetPixelSize_55(pThis);
            }

            internal uint GetMaximumBitmapSize()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetMaximumBitmapSize_56(pThis);
            }

            /// <inheritdoc cref = "IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*)"/>
            internal unsafe win32.System.SystemServices.BOOL IsSupported(in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                {
                    win32.System.SystemServices.BOOL __result = this.IsSupported(renderTargetPropertiesLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.SystemServices.BOOL IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->IsSupported_57(pThis, renderTargetProperties);
            }

            /// <inheritdoc cref = "CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, void *sourceData, uint pitch, in win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1 bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapPropertiesLocal = &bitmapProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateBitmap(size, sourceData, pitch, bitmapPropertiesLocal, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, [Optional] void *sourceData, uint pitch, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateBitmap_58(pThis, size, sourceData, pitch, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1 bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromWicBitmap(wicBitmapSource, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateBitmapFromWicBitmap_59(pThis, wicBitmapSource, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE, byte *, uint, win32.Graphics.Direct2D.ID2D1ColorContext**)"/>
            internal unsafe win32.System.Com.HRESULT CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE space, ReadOnlySpan<byte> profile, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (byte *profileLocal = profile)
                {
                    win32.System.Com.HRESULT __result = this.CreateColorContext(space, profileLocal, (uint)profile.Length, colorContext);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE space, [Optional] byte *profile, uint profileSize, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateColorContext_60(pThis, space, profile, profileSize, colorContext);
            }

            /// <inheritdoc cref = "CreateColorContextFromFilename(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1ColorContext**)"/>
            internal unsafe win32.System.Com.HRESULT CreateColorContextFromFilename(string filename, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (char *filenameLocal = filename)
                {
                    win32.System.Com.HRESULT __result = this.CreateColorContextFromFilename(filenameLocal, colorContext);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateColorContextFromFilename(win32.System.SystemServices.PCWSTR filename, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateColorContextFromFilename_61(pThis, filename, colorContext);
            }

            internal unsafe win32.System.Com.HRESULT CreateColorContextFromWicColorContext(win32.Graphics.Imaging.IWICColorContext*wicColorContext, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateColorContextFromWicColorContext_62(pThis, wicColorContext, colorContext);
            }

            /// <inheritdoc cref = "CreateBitmapFromDxgiSurface(win32.Graphics.Dxgi.IDXGISurface*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromDxgiSurface(win32.Graphics.Dxgi.IDXGISurface*surface, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1 bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromDxgiSurface(surface, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromDxgiSurface(win32.Graphics.Dxgi.IDXGISurface*surface, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateBitmapFromDxgiSurface_63(pThis, surface, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateEffect(global::System.Guid*, win32.Graphics.Direct2D.ID2D1Effect**)"/>
            internal unsafe win32.System.Com.HRESULT CreateEffect(in global::System.Guid effectId, win32.Graphics.Direct2D.ID2D1Effect**effect)
            {
                fixed (global::System.Guid*effectIdLocal = &effectId)
                {
                    win32.System.Com.HRESULT __result = this.CreateEffect(effectIdLocal, effect);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateEffect(global::System.Guid*effectId, win32.Graphics.Direct2D.ID2D1Effect**effect)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateEffect_64(pThis, effectId, effect);
            }

            /// <inheritdoc cref = "CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_GRADIENT_STOP> straightAlphaGradientStops, win32.Graphics.Direct2D.D2D1_COLOR_SPACE preInterpolationSpace, win32.Graphics.Direct2D.D2D1_COLOR_SPACE postInterpolationSpace, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**gradientStopCollection1)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*straightAlphaGradientStopsLocal = straightAlphaGradientStops)
                {
                    win32.System.Com.HRESULT __result = this.CreateGradientStopCollection(straightAlphaGradientStopsLocal, (uint)straightAlphaGradientStops.Length, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*straightAlphaGradientStops, uint straightAlphaGradientStopsCount, win32.Graphics.Direct2D.D2D1_COLOR_SPACE preInterpolationSpace, win32.Graphics.Direct2D.D2D1_COLOR_SPACE postInterpolationSpace, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**gradientStopCollection1)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateGradientStopCollection_65(pThis, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1);
            }

            /// <inheritdoc cref = "CreateImageBrush(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1ImageBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateImageBrush(win32.Graphics.Direct2D.ID2D1Image*image, in win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES imageBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1ImageBrush**imageBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*imageBrushPropertiesLocal = &imageBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateImageBrush(image, imageBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, imageBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateImageBrush([Optional] win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*imageBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1ImageBrush**imageBrush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateImageBrush_66(pThis, image, imageBrushProperties, brushProperties, imageBrush);
            }

            /// <inheritdoc cref = "CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1? bitmapBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush1**bitmapBrush)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1 bitmapBrushPropertiesLocal = bitmapBrushProperties.HasValue ? bitmapBrushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1);
                win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapBrush(bitmap, bitmapBrushProperties.HasValue ? &bitmapBrushPropertiesLocal : null, brushProperties.HasValue ? &brushPropertiesLocal : null, bitmapBrush);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush([Optional] win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1*bitmapBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush1**bitmapBrush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateBitmapBrush_67(pThis, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush);
            }

            internal unsafe win32.System.Com.HRESULT CreateCommandList(win32.Graphics.Direct2D.ID2D1CommandList**commandList)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateCommandList_68(pThis, commandList);
            }

            internal win32.System.SystemServices.BOOL IsDxgiFormatSupported(win32.Graphics.Dxgi.DXGI_FORMAT format)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->IsDxgiFormatSupported_69(pThis, format);
            }

            internal win32.System.SystemServices.BOOL IsBufferPrecisionSupported(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->IsBufferPrecisionSupported_70(pThis, bufferPrecision);
            }

            /// <inheritdoc cref = "GetImageLocalBounds(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetImageLocalBounds(win32.Graphics.Direct2D.ID2D1Image*image, out win32.Graphics.Direct2D.D2D_RECT_F localBounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*localBoundsLocal = &localBounds)
                {
                    win32.System.Com.HRESULT __result = this.GetImageLocalBounds(image, localBoundsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetImageLocalBounds(win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D_RECT_F*localBounds)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetImageLocalBounds_71(pThis, image, localBounds);
            }

            /// <inheritdoc cref = "GetImageWorldBounds(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetImageWorldBounds(win32.Graphics.Direct2D.ID2D1Image*image, out win32.Graphics.Direct2D.D2D_RECT_F worldBounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*worldBoundsLocal = &worldBounds)
                {
                    win32.System.Com.HRESULT __result = this.GetImageWorldBounds(image, worldBoundsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetImageWorldBounds(win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D_RECT_F*worldBounds)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetImageWorldBounds_72(pThis, image, worldBounds);
            }

            /// <inheritdoc cref = "GetGlyphRunWorldBounds(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetGlyphRunWorldBounds(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, out win32.Graphics.Direct2D.D2D_RECT_F bounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*boundsLocal = &bounds)
                {
                    fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                    {
                        win32.System.Com.HRESULT __result = this.GetGlyphRunWorldBounds(baselineOrigin, glyphRunLocal, measuringMode, boundsLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetGlyphRunWorldBounds(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, win32.Graphics.Direct2D.D2D_RECT_F*bounds)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetGlyphRunWorldBounds_73(pThis, baselineOrigin, glyphRun, measuringMode, bounds);
            }

            internal unsafe void GetDevice(win32.Graphics.Direct2D.ID2D1Device**device)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetDevice_74(pThis, device);
            }

            internal unsafe void SetTarget([Optional] win32.Graphics.Direct2D.ID2D1Image*image)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetTarget_75(pThis, image);
            }

            internal unsafe void GetTarget([Optional] win32.Graphics.Direct2D.ID2D1Image**image)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetTarget_76(pThis, image);
            }

            /// <inheritdoc cref = "SetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*)"/>
            internal unsafe void SetRenderingControls(in win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS renderingControls)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControlsLocal = &renderingControls)
                {
                    this.SetRenderingControls(renderingControlsLocal);
                }
            }

            internal unsafe void SetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControls)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetRenderingControls_77(pThis, renderingControls);
            }

            /// <inheritdoc cref = "GetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*)"/>
            internal unsafe void GetRenderingControls(out win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS renderingControls)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControlsLocal = &renderingControls)
                {
                    this.GetRenderingControls(renderingControlsLocal);
                }
            }

            internal unsafe void GetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControls)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->GetRenderingControls_78(pThis, renderingControls);
            }

            internal void SetPrimitiveBlend(win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND primitiveBlend)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetPrimitiveBlend_79(pThis, primitiveBlend);
            }

            internal win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND GetPrimitiveBlend()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetPrimitiveBlend_80(pThis);
            }

            internal void SetUnitMode(win32.Graphics.Direct2D.D2D1_UNIT_MODE unitMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->SetUnitMode_81(pThis, unitMode);
            }

            internal win32.Graphics.Direct2D.D2D1_UNIT_MODE GetUnitMode()
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetUnitMode_82(pThis);
            }

            /// <inheritdoc cref = "DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION? glyphRunDescription, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                {
                    win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescriptionLocal = glyphRunDescription.HasValue ? glyphRunDescription.Value : default(win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION);
                    this.DrawGlyphRun(baselineOrigin, glyphRunLocal, glyphRunDescription.HasValue ? &glyphRunDescriptionLocal : null, foregroundBrush, measuringMode);
                }
            }

            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, [Optional] win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*glyphRunDescription, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawGlyphRun_83(pThis, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode);
            }

            /// <inheritdoc cref = "DrawImage(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE)"/>
            internal unsafe void DrawImage(win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D_POINT_2F? targetOffset, win32.Graphics.Direct2D.D2D_RECT_F? imageRectangle, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE compositeMode)
            {
                win32.Graphics.Direct2D.D2D_POINT_2F targetOffsetLocal = targetOffset.HasValue ? targetOffset.Value : default(win32.Graphics.Direct2D.D2D_POINT_2F);
                win32.Graphics.Direct2D.D2D_RECT_F imageRectangleLocal = imageRectangle.HasValue ? imageRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.DrawImage(image, targetOffset.HasValue ? &targetOffsetLocal : null, imageRectangle.HasValue ? &imageRectangleLocal : null, interpolationMode, compositeMode);
            }

            internal unsafe void DrawImage(win32.Graphics.Direct2D.ID2D1Image*image, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*targetOffset, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*imageRectangle, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE compositeMode)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawImage_84(pThis, image, targetOffset, imageRectangle, interpolationMode, compositeMode);
            }

            /// <inheritdoc cref = "DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_POINT_2F*)"/>
            internal unsafe void DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, win32.Graphics.Direct2D.D2D_POINT_2F? targetOffset)
            {
                win32.Graphics.Direct2D.D2D_POINT_2F targetOffsetLocal = targetOffset.HasValue ? targetOffset.Value : default(win32.Graphics.Direct2D.D2D_POINT_2F);
                this.DrawGdiMetafile(gdiMetafile, targetOffset.HasValue ? &targetOffsetLocal : null);
            }

            internal unsafe void DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*targetOffset)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawGdiMetafile_85(pThis, gdiMetafile, targetOffset);
            }

            /// <inheritdoc cref = "DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*)"/>
            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F? perspectiveTransform)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_MATRIX_4X4_F perspectiveTransformLocal = perspectiveTransform.HasValue ? perspectiveTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_4X4_F);
                this.DrawBitmap(bitmap, destinationRectangle.HasValue ? &destinationRectangleLocal : null, opacity, interpolationMode, sourceRectangle.HasValue ? &sourceRectangleLocal : null, perspectiveTransform.HasValue ? &perspectiveTransformLocal : null);
            }

            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*perspectiveTransform)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawBitmap_86(pThis, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform);
            }

            /// <inheritdoc cref = "PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*, win32.Graphics.Direct2D.ID2D1Layer*)"/>
            internal unsafe void PushLayer(in win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1 layerParameters, win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*layerParametersLocal = &layerParameters)
                {
                    this.PushLayer(layerParametersLocal, layer);
                }
            }

            internal unsafe void PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*layerParameters, [Optional] win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->PushLayer_87(pThis, layerParameters, layer);
            }

            /// <inheritdoc cref = "InvalidateEffectInputRectangle(win32.Graphics.Direct2D.ID2D1Effect*, uint, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT InvalidateEffectInputRectangle(win32.Graphics.Direct2D.ID2D1Effect*effect, uint input, in win32.Graphics.Direct2D.D2D_RECT_F inputRectangle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*inputRectangleLocal = &inputRectangle)
                {
                    win32.System.Com.HRESULT __result = this.InvalidateEffectInputRectangle(effect, input, inputRectangleLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT InvalidateEffectInputRectangle(win32.Graphics.Direct2D.ID2D1Effect*effect, uint input, win32.Graphics.Direct2D.D2D_RECT_F*inputRectangle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->InvalidateEffectInputRectangle_88(pThis, effect, input, inputRectangle);
            }

            /// <inheritdoc cref = "GetEffectInvalidRectangleCount(win32.Graphics.Direct2D.ID2D1Effect*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangleCount(win32.Graphics.Direct2D.ID2D1Effect*effect, out uint rectangleCount)
            {
                fixed (uint *rectangleCountLocal = &rectangleCount)
                {
                    win32.System.Com.HRESULT __result = this.GetEffectInvalidRectangleCount(effect, rectangleCountLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangleCount(win32.Graphics.Direct2D.ID2D1Effect*effect, uint *rectangleCount)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetEffectInvalidRectangleCount_89(pThis, effect, rectangleCount);
            }

            /// <inheritdoc cref = "GetEffectInvalidRectangles(win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangles(win32.Graphics.Direct2D.ID2D1Effect*effect, Span<win32.Graphics.Direct2D.D2D_RECT_F> rectangles)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectanglesLocal = rectangles)
                {
                    win32.System.Com.HRESULT __result = this.GetEffectInvalidRectangles(effect, rectanglesLocal, (uint)rectangles.Length);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangles(win32.Graphics.Direct2D.ID2D1Effect*effect, win32.Graphics.Direct2D.D2D_RECT_F*rectangles, uint rectanglesCount)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetEffectInvalidRectangles_90(pThis, effect, rectangles, rectanglesCount);
            }

            /// <inheritdoc cref = "GetEffectRequiredInputRectangles(win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*, win32.Graphics.Direct2D.D2D_RECT_F*, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetEffectRequiredInputRectangles(win32.Graphics.Direct2D.ID2D1Effect*renderEffect, win32.Graphics.Direct2D.D2D_RECT_F? renderImageRectangle, ReadOnlySpan<win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION> inputDescriptions, Span<win32.Graphics.Direct2D.D2D_RECT_F> requiredInputRects)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*requiredInputRectsLocal = requiredInputRects)
                {
                    fixed (win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*inputDescriptionsLocal = inputDescriptions)
                    {
                        win32.Graphics.Direct2D.D2D_RECT_F renderImageRectangleLocal = renderImageRectangle.HasValue ? renderImageRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                        if (inputDescriptions.Length != requiredInputRects.Length)
                            throw new ArgumentException();
                        win32.System.Com.HRESULT __result = this.GetEffectRequiredInputRectangles(renderEffect, renderImageRectangle.HasValue ? &renderImageRectangleLocal : null, inputDescriptionsLocal, requiredInputRectsLocal, (uint)requiredInputRects.Length);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetEffectRequiredInputRectangles(win32.Graphics.Direct2D.ID2D1Effect*renderEffect, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*renderImageRectangle, win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*inputDescriptions, win32.Graphics.Direct2D.D2D_RECT_F*requiredInputRects, uint inputCount)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetEffectRequiredInputRectangles_91(pThis, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount);
            }

            /// <inheritdoc cref = "FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.FillOpacityMask(opacityMask, brush, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->FillOpacityMask_92(pThis, opacityMask, brush, destinationRectangle, sourceRectangle);
            }

            internal unsafe win32.System.Com.HRESULT CreateFilledGeometryRealization(win32.Graphics.Direct2D.ID2D1Geometry*geometry, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1GeometryRealization**geometryRealization)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateFilledGeometryRealization_93(pThis, geometry, flatteningTolerance, geometryRealization);
            }

            internal unsafe win32.System.Com.HRESULT CreateStrokedGeometryRealization(win32.Graphics.Direct2D.ID2D1Geometry*geometry, float flatteningTolerance, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle, win32.Graphics.Direct2D.ID2D1GeometryRealization**geometryRealization)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateStrokedGeometryRealization_94(pThis, geometry, flatteningTolerance, strokeWidth, strokeStyle, geometryRealization);
            }

            internal unsafe void DrawGeometryRealization(win32.Graphics.Direct2D.ID2D1GeometryRealization*geometryRealization, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawGeometryRealization_95(pThis, geometryRealization, brush);
            }

            /// <inheritdoc cref = "CreateInk(win32.Graphics.Direct2D.D2D1_INK_POINT*, win32.Graphics.Direct2D.ID2D1Ink**)"/>
            internal unsafe win32.System.Com.HRESULT CreateInk(in win32.Graphics.Direct2D.D2D1_INK_POINT startPoint, win32.Graphics.Direct2D.ID2D1Ink**ink)
            {
                fixed (win32.Graphics.Direct2D.D2D1_INK_POINT*startPointLocal = &startPoint)
                {
                    win32.System.Com.HRESULT __result = this.CreateInk(startPointLocal, ink);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateInk(win32.Graphics.Direct2D.D2D1_INK_POINT*startPoint, win32.Graphics.Direct2D.ID2D1Ink**ink)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateInk_96(pThis, startPoint, ink);
            }

            /// <inheritdoc cref = "CreateInkStyle(win32.Graphics.Direct2D.D2D1_INK_STYLE_PROPERTIES*, win32.Graphics.Direct2D.ID2D1InkStyle**)"/>
            internal unsafe win32.System.Com.HRESULT CreateInkStyle(win32.Graphics.Direct2D.D2D1_INK_STYLE_PROPERTIES? inkStyleProperties, win32.Graphics.Direct2D.ID2D1InkStyle**inkStyle)
            {
                win32.Graphics.Direct2D.D2D1_INK_STYLE_PROPERTIES inkStylePropertiesLocal = inkStyleProperties.HasValue ? inkStyleProperties.Value : default(win32.Graphics.Direct2D.D2D1_INK_STYLE_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateInkStyle(inkStyleProperties.HasValue ? &inkStylePropertiesLocal : null, inkStyle);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateInkStyle([Optional] win32.Graphics.Direct2D.D2D1_INK_STYLE_PROPERTIES*inkStyleProperties, win32.Graphics.Direct2D.ID2D1InkStyle**inkStyle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateInkStyle_97(pThis, inkStyleProperties, inkStyle);
            }

            /// <inheritdoc cref = "CreateGradientMesh(win32.Graphics.Direct2D.D2D1_GRADIENT_MESH_PATCH*, uint, win32.Graphics.Direct2D.ID2D1GradientMesh**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGradientMesh(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_GRADIENT_MESH_PATCH> patches, win32.Graphics.Direct2D.ID2D1GradientMesh**gradientMesh)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GRADIENT_MESH_PATCH*patchesLocal = patches)
                {
                    win32.System.Com.HRESULT __result = this.CreateGradientMesh(patchesLocal, (uint)patches.Length, gradientMesh);
                    return __result;
                }
            }

            /// <summary>Creates a new ID2D1GradientMesh instance using the given array of patches.</summary>
            /// <param name = "patches">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_gradient_mesh_patch">D2D1_GRADIENT_MESH_PATCH</a>*</b></para>
            /// <para>A pointer to the array containing the patches to be used in this mesh.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "patchesCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of patches in the patches argument to read.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "gradientMesh">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1gradientmesh">ID2D1GradientMesh</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the new gradient mesh.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-creategradientmesh">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGradientMesh(win32.Graphics.Direct2D.D2D1_GRADIENT_MESH_PATCH*patches, uint patchesCount, win32.Graphics.Direct2D.ID2D1GradientMesh**gradientMesh)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateGradientMesh_98(pThis, patches, patchesCount, gradientMesh);
            }

            internal unsafe win32.System.Com.HRESULT CreateImageSourceFromWic(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, win32.Graphics.Direct2D.D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, win32.Graphics.Direct2D.D2D1_ALPHA_MODE alphaMode, win32.Graphics.Direct2D.ID2D1ImageSourceFromWic**imageSource)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateImageSourceFromWic_99(pThis, wicBitmapSource, loadingOptions, alphaMode, imageSource);
            }

            /// <inheritdoc cref = "CreateLookupTable3D(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, uint *, byte *, uint, uint *, win32.Graphics.Direct2D.ID2D1LookupTable3D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLookupTable3D(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION precision, ReadOnlySpan<uint> extents, ReadOnlySpan<byte> data, ReadOnlySpan<uint> strides, win32.Graphics.Direct2D.ID2D1LookupTable3D**lookupTable)
            {
                fixed (uint *stridesLocal = strides)
                {
                    fixed (byte *dataLocal = data)
                    {
                        fixed (uint *extentsLocal = extents)
                        {
                            if (extents.Length < 3)
                                throw new ArgumentException();
                            if (strides.Length < 2)
                                throw new ArgumentException();
                            win32.System.Com.HRESULT __result = this.CreateLookupTable3D(precision, extentsLocal, dataLocal, (uint)data.Length, stridesLocal, lookupTable);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Creates a 3D lookup table for mapping a 3-channel input to a 3-channel output. The table data must be provided in 4-channel format.</summary>
            /// <param name = "precision">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b></para>
            /// <para>Precision of the input lookup table data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "extents">
            /// <para>Type: <b>const UINT32*</b></para>
            /// <para>Number of lookup table elements per dimension (X, Y, Z).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "data">
            /// <para>Type: <b>const BYTE*</b></para>
            /// <para>Buffer holding the lookup table data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dataCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Size of the lookup table data buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strides">
            /// <para>Type: <b>const UINT32*</b></para>
            /// <para>An array containing two values.  The first value is the size in bytes from one row (X dimension) of LUT data to the next. The second value is the size in bytes from one LUT data plane (X and Y dimensions) to the next.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "lookupTable">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1lookuptable3d">ID2D1LookupTable3D</a>**</b></para>
            /// <para>Receives the new lookup table instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createlookuptable3d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateLookupTable3D(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION precision, uint *extents, byte *data, uint dataCount, uint *strides, win32.Graphics.Direct2D.ID2D1LookupTable3D**lookupTable)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateLookupTable3D_100(pThis, precision, extents, data, dataCount, strides, lookupTable);
            }

            /// <summary>Creates an image source from a set of DXGI surface(s). The YCbCr surface(s) are converted to RGBA automatically during subsequent drawing.</summary>
            /// <param name = "surfaces">
            /// <para>Type: [in] <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>**</b></para>
            /// <para>The DXGI surfaces to create the image source from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "surfaceCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of surfaces provided; must be between one and three.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorSpace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a></b></para>
            /// <para>The color space of the input.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "options">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ne-d2d1_3-d2d1_image_source_from_dxgi_options">D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</a></b></para>
            /// <para>Options controlling color space conversions.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "imageSource">
            /// <para>Type: [out] <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1imagesource">ID2D1ImageSource</a>**</b></para>
            /// <para>Receives the new image source instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createimagesourcefromdxgi">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateImageSourceFromDxgi(win32.Graphics.Dxgi.IDXGISurface**surfaces, uint surfaceCount, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE colorSpace, win32.Graphics.Direct2D.D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, win32.Graphics.Direct2D.ID2D1ImageSource**imageSource)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateImageSourceFromDxgi_101(pThis, surfaces, surfaceCount, colorSpace, options, imageSource);
            }

            /// <inheritdoc cref = "GetGradientMeshWorldBounds(win32.Graphics.Direct2D.ID2D1GradientMesh*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetGradientMeshWorldBounds(win32.Graphics.Direct2D.ID2D1GradientMesh*gradientMesh, out win32.Graphics.Direct2D.D2D_RECT_F pBounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*pBoundsLocal = &pBounds)
                {
                    win32.System.Com.HRESULT __result = this.GetGradientMeshWorldBounds(gradientMesh, pBoundsLocal);
                    return __result;
                }
            }

            /// <summary>Returns the world bounds of a given gradient mesh.</summary>
            /// <param name = "gradientMesh">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1gradientmesh">ID2D1GradientMesh</a>*</b></para>
            /// <para>The gradient mesh whose world bounds will be calculated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-getgradientmeshworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pBounds">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>When this method returns, contains a pointer to the bounds of the gradient mesh, in device independent pixels (DIPs).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-getgradientmeshworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>S_OK if successful, otherwise a failure HRESULT.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-getgradientmeshworldbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGradientMeshWorldBounds(win32.Graphics.Direct2D.ID2D1GradientMesh*gradientMesh, win32.Graphics.Direct2D.D2D_RECT_F*pBounds)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->GetGradientMeshWorldBounds_102(pThis, gradientMesh, pBounds);
            }

            /// <summary>Renders the given ink object using the given brush and ink style.</summary>
            /// <param name = "ink">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1ink">ID2D1Ink</a>*</b></para>
            /// <para>The ink object to be rendered.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush with which to render the ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inkStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1inkstyle">ID2D1InkStyle</a>*</b></para>
            /// <para>The ink style to use when rendering the ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawink">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawInk(win32.Graphics.Direct2D.ID2D1Ink*ink, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.ID2D1InkStyle*inkStyle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawInk_103(pThis, ink, brush, inkStyle);
            }

            /// <summary>Renders a given gradient mesh to the target.</summary>
            /// <param name = "gradientMesh">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1gradientmesh">ID2D1GradientMesh</a>*</b></para>
            /// <para>The gradient mesh to be rendered.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawgradientmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-drawgradientmesh">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawGradientMesh(win32.Graphics.Direct2D.ID2D1GradientMesh*gradientMesh)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawGradientMesh_104(pThis, gradientMesh);
            }

            /// <inheritdoc cref = "DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.DrawGdiMetafile(gdiMetafile, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    lpVtbl->DrawGdiMetafile_105(pThis, gdiMetafile, destinationRectangle, sourceRectangle);
            }

            /// <inheritdoc cref = "CreateTransformedImageSource(win32.Graphics.Direct2D.ID2D1ImageSource*, win32.Graphics.Direct2D.D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, win32.Graphics.Direct2D.ID2D1TransformedImageSource**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTransformedImageSource(win32.Graphics.Direct2D.ID2D1ImageSource*imageSource, in win32.Graphics.Direct2D.D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES properties, win32.Graphics.Direct2D.ID2D1TransformedImageSource**transformedImageSource)
            {
                fixed (win32.Graphics.Direct2D.D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*propertiesLocal = &properties)
                {
                    win32.System.Com.HRESULT __result = this.CreateTransformedImageSource(imageSource, propertiesLocal, transformedImageSource);
                    return __result;
                }
            }

            /// <summary>Creates an image source which shares resources with an original.</summary>
            /// <param name = "imageSource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1imagesource">ID2D1ImageSource</a>*</b></para>
            /// <para>The original image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "properties">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_transformed_image_source_properties">D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES</a>*</b></para>
            /// <para>Properties for the source image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "transformedImageSource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1transformedimagesource">ID2D1TransformedImageSource</a>**</b></para>
            /// <para>Receives the new image source.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1devicecontext2-createtransformedimagesource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTransformedImageSource(win32.Graphics.Direct2D.ID2D1ImageSource*imageSource, win32.Graphics.Direct2D.D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*properties, win32.Graphics.Direct2D.ID2D1TransformedImageSource**transformedImageSource)
            {
                fixed (ID2D1DeviceContext2*pThis = &this)
                    return lpVtbl->CreateTransformedImageSource_106(pThis, imageSource, properties, transformedImageSource);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmap_5;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmapFromWicBitmap_6;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateSharedBitmap_7;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**, win32.System.Com.HRESULT>CreateBitmapBrush_8;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**, win32.System.Com.HRESULT>CreateSolidColorBrush_9;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**, win32.System.Com.HRESULT>CreateGradientStopCollection_10;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**, win32.System.Com.HRESULT>CreateLinearGradientBrush_11;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**, win32.System.Com.HRESULT>CreateRadialGradientBrush_12;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**, win32.System.Com.HRESULT>CreateCompatibleRenderTarget_13;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**, win32.System.Com.HRESULT>CreateLayer_14;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Mesh**, win32.System.Com.HRESULT>CreateMesh_15;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawLine_16;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRectangle_17;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRectangle_18;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRoundedRectangle_19;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRoundedRectangle_20;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawEllipse_21;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillEllipse_22;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawGeometry_23;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillGeometry_24;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Mesh*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillMesh_25;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, void>FillOpacityMask_26;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, void>DrawBitmap_27;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawText_28;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.IDWriteTextLayout*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, void>DrawTextLayout_29;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawGlyphRun_30;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>SetTransform_31;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>GetTransform_32;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>SetAntialiasMode_33;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE>GetAntialiasMode_34;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE, void>SetTextAntialiasMode_35;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE>GetTextAntialiasMode_36;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.DirectWrite.IDWriteRenderingParams*, void>SetTextRenderingParams_37;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.DirectWrite.IDWriteRenderingParams**, void>GetTextRenderingParams_38;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, ulong, ulong, void>SetTags_39;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, ulong *, ulong *, void>GetTags_40;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*, void>PushLayer_41;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, void>PopLayer_42;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, ulong *, ulong *, win32.System.Com.HRESULT>Flush_43;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>SaveDrawingState_44;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>RestoreDrawingState_45;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>PushAxisAlignedClip_46;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, void>PopAxisAlignedClip_47;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_COLOR_F*, void>Clear_48;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, void>BeginDraw_49;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, ulong *, ulong *, win32.System.Com.HRESULT>EndDraw_50;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT>GetPixelFormat_51;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, float, float, void>SetDpi_52;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, float *, float *, void>GetDpi_53;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_SIZE_F>GetSize_54;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_SIZE_U>GetPixelSize_55;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, uint>GetMaximumBitmapSize_56;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.System.SystemServices.BOOL>IsSupported_57;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**, win32.System.Com.HRESULT>CreateBitmap_58;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**, win32.System.Com.HRESULT>CreateBitmapFromWicBitmap_59;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, byte *, uint, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContext_60;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContextFromFilename_61;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Imaging.IWICColorContext*, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContextFromWicColorContext_62;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Dxgi.IDXGISurface*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**, win32.System.Com.HRESULT>CreateBitmapFromDxgiSurface_63;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, global::System.Guid*, win32.Graphics.Direct2D.ID2D1Effect**, win32.System.Com.HRESULT>CreateEffect_64;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**, win32.System.Com.HRESULT>CreateGradientStopCollection_65;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1ImageBrush**, win32.System.Com.HRESULT>CreateImageBrush_66;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush1**, win32.System.Com.HRESULT>CreateBitmapBrush_67;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1CommandList**, win32.System.Com.HRESULT>CreateCommandList_68;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Dxgi.DXGI_FORMAT, win32.System.SystemServices.BOOL>IsDxgiFormatSupported_69;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.System.SystemServices.BOOL>IsBufferPrecisionSupported_70;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetImageLocalBounds_71;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetImageWorldBounds_72;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetGlyphRunWorldBounds_73;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Device**, void>GetDevice_74;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Image*, void>SetTarget_75;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Image**, void>GetTarget_76;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*, void>SetRenderingControls_77;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*, void>GetRenderingControls_78;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND, void>SetPrimitiveBlend_79;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND>GetPrimitiveBlend_80;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_UNIT_MODE, void>SetUnitMode_81;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_UNIT_MODE>GetUnitMode_82;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawGlyphRun_83;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE, void>DrawImage_84;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_POINT_2F*, void>DrawGdiMetafile_85;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*, void>DrawBitmap_86;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*, win32.Graphics.Direct2D.ID2D1Layer*, void>PushLayer_87;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Effect*, uint, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>InvalidateEffectInputRectangle_88;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Effect*, uint *, win32.System.Com.HRESULT>GetEffectInvalidRectangleCount_89;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, uint, win32.System.Com.HRESULT>GetEffectInvalidRectangles_90;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*, win32.Graphics.Direct2D.D2D_RECT_F*, uint, win32.System.Com.HRESULT>GetEffectRequiredInputRectangles_91;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, void>FillOpacityMask_92;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Geometry*, float, win32.Graphics.Direct2D.ID2D1GeometryRealization**, win32.System.Com.HRESULT>CreateFilledGeometryRealization_93;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Geometry*, float, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.Graphics.Direct2D.ID2D1GeometryRealization**, win32.System.Com.HRESULT>CreateStrokedGeometryRealization_94;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1GeometryRealization*, win32.Graphics.Direct2D.ID2D1Brush*, void>DrawGeometryRealization_95;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_INK_POINT*, win32.Graphics.Direct2D.ID2D1Ink**, win32.System.Com.HRESULT>CreateInk_96;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_INK_STYLE_PROPERTIES*, win32.Graphics.Direct2D.ID2D1InkStyle**, win32.System.Com.HRESULT>CreateInkStyle_97;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_GRADIENT_MESH_PATCH*, uint, win32.Graphics.Direct2D.ID2D1GradientMesh**, win32.System.Com.HRESULT>CreateGradientMesh_98;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_IMAGE_SOURCE_LOADING_OPTIONS, win32.Graphics.Direct2D.D2D1_ALPHA_MODE, win32.Graphics.Direct2D.ID2D1ImageSourceFromWic**, win32.System.Com.HRESULT>CreateImageSourceFromWic_99;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, uint *, byte *, uint, uint *, win32.Graphics.Direct2D.ID2D1LookupTable3D**, win32.System.Com.HRESULT>CreateLookupTable3D_100;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Dxgi.IDXGISurface**, uint, win32.Graphics.Dxgi.DXGI_COLOR_SPACE_TYPE, win32.Graphics.Direct2D.D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, win32.Graphics.Direct2D.ID2D1ImageSource**, win32.System.Com.HRESULT>CreateImageSourceFromDxgi_101;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1GradientMesh*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetGradientMeshWorldBounds_102;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1Ink*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.ID2D1InkStyle*, void>DrawInk_103;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1GradientMesh*, void>DrawGradientMesh_104;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, void>DrawGdiMetafile_105;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext2*, win32.Graphics.Direct2D.ID2D1ImageSource*, win32.Graphics.Direct2D.D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES*, win32.Graphics.Direct2D.ID2D1TransformedImageSource**, win32.System.Com.HRESULT>CreateTransformedImageSource_106;
            }

            private Vtbl*lpVtbl;
        }
    }
}