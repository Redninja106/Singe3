// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("A44472E1-8DFB-4E60-8492-6E2861C9CA8B")]
        internal unsafe struct ID2D1Device2
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1Device2*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <summary>Creates a new ID2D1DeviceContext2 from a Direct2D device.</summary>
            /// <param name = "options">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_device_context_options">D2D1_DEVICE_CONTEXT_OPTIONS</a></b></para>
            /// <para>The options to be applied to the created device context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-createdevicecontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-createdevicecontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDeviceContext(win32.Graphics.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS options, win32.Graphics.Direct2D.ID2D1DeviceContext**deviceContext)
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->CreateDeviceContext_5(pThis, options, deviceContext);
            }

            /// <inheritdoc cref = "CreatePrintControl(win32.Graphics.Imaging.IWICImagingFactory*, win32.Storage.Xps.IPrintDocumentPackageTarget*, win32.Graphics.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES*, win32.Graphics.Direct2D.ID2D1PrintControl**)"/>
            internal unsafe win32.System.Com.HRESULT CreatePrintControl(win32.Graphics.Imaging.IWICImagingFactory*wicFactory, win32.Storage.Xps.IPrintDocumentPackageTarget*documentTarget, win32.Graphics.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES? printControlProperties, win32.Graphics.Direct2D.ID2D1PrintControl**printControl)
            {
                win32.Graphics.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES printControlPropertiesLocal = printControlProperties.HasValue ? printControlProperties.Value : default(win32.Graphics.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreatePrintControl(wicFactory, documentTarget, printControlProperties.HasValue ? &printControlPropertiesLocal : null, printControl);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreatePrintControl(win32.Graphics.Imaging.IWICImagingFactory*wicFactory, win32.Storage.Xps.IPrintDocumentPackageTarget*documentTarget, [Optional] win32.Graphics.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES*printControlProperties, win32.Graphics.Direct2D.ID2D1PrintControl**printControl)
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->CreatePrintControl_6(pThis, wicFactory, documentTarget, printControlProperties, printControl);
            }

            internal void SetMaximumTextureMemory(ulong maximumInBytes)
            {
                fixed (ID2D1Device2*pThis = &this)
                    lpVtbl->SetMaximumTextureMemory_7(pThis, maximumInBytes);
            }

            internal ulong GetMaximumTextureMemory()
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->GetMaximumTextureMemory_8(pThis);
            }

            internal void ClearResources(uint millisecondsSinceUse)
            {
                fixed (ID2D1Device2*pThis = &this)
                    lpVtbl->ClearResources_9(pThis, millisecondsSinceUse);
            }

            internal win32.Graphics.Direct2D.D2D1_RENDERING_PRIORITY GetRenderingPriority()
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->GetRenderingPriority_10(pThis);
            }

            internal void SetRenderingPriority(win32.Graphics.Direct2D.D2D1_RENDERING_PRIORITY renderingPriority)
            {
                fixed (ID2D1Device2*pThis = &this)
                    lpVtbl->SetRenderingPriority_11(pThis, renderingPriority);
            }

            /// <summary>Creates a new ID2D1DeviceContext2 from a Direct2D device.</summary>
            /// <param name = "options">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_device_context_options">D2D1_DEVICE_CONTEXT_OPTIONS</a></b></para>
            /// <para>The options to be applied to the created device context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-createdevicecontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-createdevicecontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDeviceContext(win32.Graphics.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS options, win32.Graphics.Direct2D.ID2D1DeviceContext1**deviceContext1)
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->CreateDeviceContext_12(pThis, options, deviceContext1);
            }

            /// <summary>Creates a new ID2D1DeviceContext2 from a Direct2D device.</summary>
            /// <param name = "options">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_device_context_options">D2D1_DEVICE_CONTEXT_OPTIONS</a></b></para>
            /// <para>The options to be applied to the created device context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-createdevicecontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "deviceContext2">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1devicecontext2">ID2D1DeviceContext2</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the new device context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-createdevicecontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-createdevicecontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDeviceContext(win32.Graphics.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS options, win32.Graphics.Direct2D.ID2D1DeviceContext2**deviceContext2)
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->CreateDeviceContext_13(pThis, options, deviceContext2);
            }

            /// <summary>Flush all device contexts that reference a given bitmap.</summary>
            /// <param name = "bitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>*</b></para>
            /// <para>The bitmap, created on this device, for which all referencing device contexts will be flushed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-flushdevicecontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-flushdevicecontexts">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void FlushDeviceContexts(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap)
            {
                fixed (ID2D1Device2*pThis = &this)
                    lpVtbl->FlushDeviceContexts_14(pThis, bitmap);
            }

            /// <summary>Returns the DXGI device associated with this Direct2D device.</summary>
            /// <param name = "dxgiDevice">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgidevice">IDXGIDevice</a>**</b></para>
            /// <para>The DXGI device associated with this Direct2D device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-getdxgidevice#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1device2-getdxgidevice">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDxgiDevice(win32.Graphics.Dxgi.IDXGIDevice**dxgiDevice)
            {
                fixed (ID2D1Device2*pThis = &this)
                    return lpVtbl->GetDxgiDevice_15(pThis, dxgiDevice);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS, win32.Graphics.Direct2D.ID2D1DeviceContext**, win32.System.Com.HRESULT>CreateDeviceContext_5;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Imaging.IWICImagingFactory*, win32.Storage.Xps.IPrintDocumentPackageTarget*, win32.Graphics.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES*, win32.Graphics.Direct2D.ID2D1PrintControl**, win32.System.Com.HRESULT>CreatePrintControl_6;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, ulong, void>SetMaximumTextureMemory_7;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, ulong>GetMaximumTextureMemory_8;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, uint, void>ClearResources_9;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Direct2D.D2D1_RENDERING_PRIORITY>GetRenderingPriority_10;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Direct2D.D2D1_RENDERING_PRIORITY, void>SetRenderingPriority_11;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS, win32.Graphics.Direct2D.ID2D1DeviceContext1**, win32.System.Com.HRESULT>CreateDeviceContext_12;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS, win32.Graphics.Direct2D.ID2D1DeviceContext2**, win32.System.Com.HRESULT>CreateDeviceContext_13;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Direct2D.ID2D1Bitmap*, void>FlushDeviceContexts_14;
                internal delegate *unmanaged[Stdcall]<ID2D1Device2*, win32.Graphics.Dxgi.IDXGIDevice**, win32.System.Com.HRESULT>GetDxgiDevice_15;
            }

            private Vtbl*lpVtbl;
        }
    }
}