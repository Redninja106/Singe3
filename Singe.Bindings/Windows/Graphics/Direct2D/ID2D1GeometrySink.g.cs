// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("2CD9069F-12E2-11DC-9FED-001143A055F9")]
        internal unsafe struct ID2D1GeometrySink
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal void SetFillMode(win32.Graphics.Direct2D.D2D1_FILL_MODE fillMode)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->SetFillMode_4(pThis, fillMode);
            }

            internal void SetSegmentFlags(win32.Graphics.Direct2D.D2D1_PATH_SEGMENT vertexFlags)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->SetSegmentFlags_5(pThis, vertexFlags);
            }

            internal void BeginFigure(win32.Graphics.Direct2D.D2D_POINT_2F startPoint, win32.Graphics.Direct2D.D2D1_FIGURE_BEGIN figureBegin)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->BeginFigure_6(pThis, startPoint, figureBegin);
            }

            /// <inheritdoc cref = "AddLines(win32.Graphics.Direct2D.D2D_POINT_2F*, uint)"/>
            internal unsafe void AddLines(ReadOnlySpan<win32.Graphics.Direct2D.D2D_POINT_2F> points)
            {
                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pointsLocal = points)
                {
                    this.AddLines(pointsLocal, (uint)points.Length);
                }
            }

            internal unsafe void AddLines(win32.Graphics.Direct2D.D2D_POINT_2F*points, uint pointsCount)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->AddLines_7(pThis, points, pointsCount);
            }

            /// <inheritdoc cref = "AddBeziers(win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*, uint)"/>
            internal unsafe void AddBeziers(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT> beziers)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*beziersLocal = beziers)
                {
                    this.AddBeziers(beziersLocal, (uint)beziers.Length);
                }
            }

            internal unsafe void AddBeziers(win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*beziers, uint beziersCount)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->AddBeziers_8(pThis, beziers, beziersCount);
            }

            internal void EndFigure(win32.Graphics.Direct2D.D2D1_FIGURE_END figureEnd)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->EndFigure_9(pThis, figureEnd);
            }

            internal win32.System.Com.HRESULT Close()
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    return lpVtbl->Close_10(pThis);
            }

            /// <summary>Creates a line segment between the current point and the specified end point and adds it to the geometry sink.</summary>
            /// <param name = "point">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The end point of the line to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1geometrysink-addline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1geometrysink-addline">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void AddLine(win32.Graphics.Direct2D.D2D_POINT_2F point)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->AddLine_11(pThis, point);
            }

            /// <inheritdoc cref = "AddBezier(win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*)"/>
            internal unsafe void AddBezier(in win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT bezier)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*bezierLocal = &bezier)
                {
                    this.AddBezier(bezierLocal);
                }
            }

            internal unsafe void AddBezier(win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*bezier)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->AddBezier_12(pThis, bezier);
            }

            /// <inheritdoc cref = "AddQuadraticBezier(win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*)"/>
            internal unsafe void AddQuadraticBezier(in win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT bezier)
            {
                fixed (win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*bezierLocal = &bezier)
                {
                    this.AddQuadraticBezier(bezierLocal);
                }
            }

            internal unsafe void AddQuadraticBezier(win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*bezier)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->AddQuadraticBezier_13(pThis, bezier);
            }

            /// <inheritdoc cref = "AddQuadraticBeziers(win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*, uint)"/>
            internal unsafe void AddQuadraticBeziers(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT> beziers)
            {
                fixed (win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*beziersLocal = beziers)
                {
                    this.AddQuadraticBeziers(beziersLocal, (uint)beziers.Length);
                }
            }

            /// <summary>Adds a sequence of quadratic Bezier segments as an array in a single call.</summary>
            /// <param name = "beziers">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ns-d2d1-d2d1_quadratic_bezier_segment">D2D1_QUADRATIC_BEZIER_SEGMENT</a>*</b></para>
            /// <para>An array of a sequence of quadratic Bezier segments.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1geometrysink-addquadraticbeziers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "beziersCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>A value indicating the number of quadratic Bezier segments in <i>beziers</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1geometrysink-addquadraticbeziers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1geometrysink-addquadraticbeziers">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void AddQuadraticBeziers(win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*beziers, uint beziersCount)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->AddQuadraticBeziers_14(pThis, beziers, beziersCount);
            }

            /// <inheritdoc cref = "AddArc(win32.Graphics.Direct2D.D2D1_ARC_SEGMENT*)"/>
            internal unsafe void AddArc(in win32.Graphics.Direct2D.D2D1_ARC_SEGMENT arc)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ARC_SEGMENT*arcLocal = &arc)
                {
                    this.AddArc(arcLocal);
                }
            }

            internal unsafe void AddArc(win32.Graphics.Direct2D.D2D1_ARC_SEGMENT*arc)
            {
                fixed (ID2D1GeometrySink*pThis = &this)
                    lpVtbl->AddArc_15(pThis, arc);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_FILL_MODE, void>SetFillMode_4;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_PATH_SEGMENT, void>SetSegmentFlags_5;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D1_FIGURE_BEGIN, void>BeginFigure_6;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D_POINT_2F*, uint, void>AddLines_7;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*, uint, void>AddBeziers_8;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_FIGURE_END, void>EndFigure_9;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.System.Com.HRESULT>Close_10;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D_POINT_2F, void>AddLine_11;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_BEZIER_SEGMENT*, void>AddBezier_12;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*, void>AddQuadraticBezier_13;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT*, uint, void>AddQuadraticBeziers_14;
                internal delegate *unmanaged[Stdcall]<ID2D1GeometrySink*, win32.Graphics.Direct2D.D2D1_ARC_SEGMENT*, void>AddArc_15;
            }

            private Vtbl*lpVtbl;
        }
    }
}