// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("62BAA2D2-AB54-41B7-B872-787E0106A421")]
        internal unsafe struct ID2D1PathGeometry1
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <inheritdoc cref = "GetBounds(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetBounds(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, out win32.Graphics.Direct2D.D2D_RECT_F bounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*boundsLocal = &bounds)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.GetBounds(worldTransform.HasValue ? &worldTransformLocal : null, boundsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetBounds([Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, win32.Graphics.Direct2D.D2D_RECT_F*bounds)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->GetBounds_5(pThis, worldTransform, bounds);
            }

            /// <inheritdoc cref = "GetWidenedBounds(float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetWidenedBounds(float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, out win32.Graphics.Direct2D.D2D_RECT_F bounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*boundsLocal = &bounds)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.GetWidenedBounds(strokeWidth, strokeStyle, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, boundsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetWidenedBounds(float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.D2D_RECT_F*bounds)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->GetWidenedBounds_6(pThis, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, bounds);
            }

            /// <inheritdoc cref = "StrokeContainsPoint(win32.Graphics.Direct2D.D2D_POINT_2F, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT StrokeContainsPoint(win32.Graphics.Direct2D.D2D_POINT_2F point, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, out win32.System.SystemServices.BOOL contains)
            {
                fixed (win32.System.SystemServices.BOOL*containsLocal = &contains)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.StrokeContainsPoint(point, strokeWidth, strokeStyle, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, containsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT StrokeContainsPoint(win32.Graphics.Direct2D.D2D_POINT_2F point, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.System.SystemServices.BOOL*contains)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->StrokeContainsPoint_7(pThis, point, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, contains);
            }

            /// <inheritdoc cref = "FillContainsPoint(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT FillContainsPoint(win32.Graphics.Direct2D.D2D_POINT_2F point, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, out win32.System.SystemServices.BOOL contains)
            {
                fixed (win32.System.SystemServices.BOOL*containsLocal = &contains)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.FillContainsPoint(point, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, containsLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT FillContainsPoint(win32.Graphics.Direct2D.D2D_POINT_2F point, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.System.SystemServices.BOOL*contains)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->FillContainsPoint_8(pThis, point, worldTransform, flatteningTolerance, contains);
            }

            /// <inheritdoc cref = "CompareWithGeometry(win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D1_GEOMETRY_RELATION*)"/>
            internal unsafe win32.System.Com.HRESULT CompareWithGeometry(win32.Graphics.Direct2D.ID2D1Geometry*inputGeometry, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? inputGeometryTransform, float flatteningTolerance, out win32.Graphics.Direct2D.D2D1_GEOMETRY_RELATION relation)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GEOMETRY_RELATION*relationLocal = &relation)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F inputGeometryTransformLocal = inputGeometryTransform.HasValue ? inputGeometryTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.CompareWithGeometry(inputGeometry, inputGeometryTransform.HasValue ? &inputGeometryTransformLocal : null, flatteningTolerance, relationLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CompareWithGeometry(win32.Graphics.Direct2D.ID2D1Geometry*inputGeometry, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*inputGeometryTransform, float flatteningTolerance, win32.Graphics.Direct2D.D2D1_GEOMETRY_RELATION*relation)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->CompareWithGeometry_9(pThis, inputGeometry, inputGeometryTransform, flatteningTolerance, relation);
            }

            /// <inheritdoc cref = "Simplify(win32.Graphics.Direct2D.D2D1_GEOMETRY_SIMPLIFICATION_OPTION, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*)"/>
            internal unsafe win32.System.Com.HRESULT Simplify(win32.Graphics.Direct2D.D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                win32.System.Com.HRESULT __result = this.Simplify(simplificationOption, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, geometrySink);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT Simplify(win32.Graphics.Direct2D.D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->Simplify_10(pThis, simplificationOption, worldTransform, flatteningTolerance, geometrySink);
            }

            /// <inheritdoc cref = "Tessellate(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1TessellationSink*)"/>
            internal unsafe win32.System.Com.HRESULT Tessellate(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1TessellationSink*tessellationSink)
            {
                win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                win32.System.Com.HRESULT __result = this.Tessellate(worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, tessellationSink);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT Tessellate([Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1TessellationSink*tessellationSink)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->Tessellate_11(pThis, worldTransform, flatteningTolerance, tessellationSink);
            }

            /// <inheritdoc cref = "CombineWithGeometry(win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.D2D1_COMBINE_MODE, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*)"/>
            internal unsafe win32.System.Com.HRESULT CombineWithGeometry(win32.Graphics.Direct2D.ID2D1Geometry*inputGeometry, win32.Graphics.Direct2D.D2D1_COMBINE_MODE combineMode, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? inputGeometryTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                win32.Graphics.Direct2D.D2D_MATRIX_3X2_F inputGeometryTransformLocal = inputGeometryTransform.HasValue ? inputGeometryTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                win32.System.Com.HRESULT __result = this.CombineWithGeometry(inputGeometry, combineMode, inputGeometryTransform.HasValue ? &inputGeometryTransformLocal : null, flatteningTolerance, geometrySink);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CombineWithGeometry(win32.Graphics.Direct2D.ID2D1Geometry*inputGeometry, win32.Graphics.Direct2D.D2D1_COMBINE_MODE combineMode, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*inputGeometryTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->CombineWithGeometry_12(pThis, inputGeometry, combineMode, inputGeometryTransform, flatteningTolerance, geometrySink);
            }

            /// <inheritdoc cref = "Outline(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*)"/>
            internal unsafe win32.System.Com.HRESULT Outline(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                win32.System.Com.HRESULT __result = this.Outline(worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, geometrySink);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT Outline([Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->Outline_13(pThis, worldTransform, flatteningTolerance, geometrySink);
            }

            /// <inheritdoc cref = "ComputeArea(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, float *)"/>
            internal unsafe win32.System.Com.HRESULT ComputeArea(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, out float area)
            {
                fixed (float *areaLocal = &area)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.ComputeArea(worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, areaLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT ComputeArea([Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, float *area)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->ComputeArea_14(pThis, worldTransform, flatteningTolerance, area);
            }

            /// <inheritdoc cref = "ComputeLength(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, float *)"/>
            internal unsafe win32.System.Com.HRESULT ComputeLength(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, out float length)
            {
                fixed (float *lengthLocal = &length)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.ComputeLength(worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, lengthLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT ComputeLength([Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, float *length)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->ComputeLength_15(pThis, worldTransform, flatteningTolerance, length);
            }

            /// <inheritdoc cref = "ComputePointAtLength(float, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*)"/>
            internal unsafe win32.System.Com.HRESULT ComputePointAtLength(float length, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.D2D_POINT_2F*point, win32.Graphics.Direct2D.D2D_POINT_2F*unitTangentVector)
            {
                win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                win32.System.Com.HRESULT __result = this.ComputePointAtLength(length, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, point, unitTangentVector);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT ComputePointAtLength(float length, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*point, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*unitTangentVector)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->ComputePointAtLength_16(pThis, length, worldTransform, flatteningTolerance, point, unitTangentVector);
            }

            /// <inheritdoc cref = "Widen(float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*)"/>
            internal unsafe win32.System.Com.HRESULT Widen(float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                win32.System.Com.HRESULT __result = this.Widen(strokeWidth, strokeStyle, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, geometrySink);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT Widen(float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->Widen_17(pThis, strokeWidth, strokeStyle, worldTransform, flatteningTolerance, geometrySink);
            }

            internal unsafe win32.System.Com.HRESULT Open(win32.Graphics.Direct2D.ID2D1GeometrySink**geometrySink)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->Open_18(pThis, geometrySink);
            }

            internal unsafe win32.System.Com.HRESULT Stream(win32.Graphics.Direct2D.ID2D1GeometrySink*geometrySink)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->Stream_19(pThis, geometrySink);
            }

            /// <inheritdoc cref = "GetSegmentCount(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSegmentCount(out uint count)
            {
                fixed (uint *countLocal = &count)
                {
                    win32.System.Com.HRESULT __result = this.GetSegmentCount(countLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetSegmentCount(uint *count)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->GetSegmentCount_20(pThis, count);
            }

            /// <inheritdoc cref = "GetFigureCount(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetFigureCount(out uint count)
            {
                fixed (uint *countLocal = &count)
                {
                    win32.System.Com.HRESULT __result = this.GetFigureCount(countLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFigureCount(uint *count)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->GetFigureCount_21(pThis, count);
            }

            /// <inheritdoc cref = "ComputePointAndSegmentAtLength(float, uint, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D1_POINT_DESCRIPTION*)"/>
            internal unsafe win32.System.Com.HRESULT ComputePointAndSegmentAtLength(float length, uint startSegment, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, out win32.Graphics.Direct2D.D2D1_POINT_DESCRIPTION pointDescription)
            {
                fixed (win32.Graphics.Direct2D.D2D1_POINT_DESCRIPTION*pointDescriptionLocal = &pointDescription)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.ComputePointAndSegmentAtLength(length, startSegment, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, pointDescriptionLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT ComputePointAndSegmentAtLength(float length, uint startSegment, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.D2D1_POINT_DESCRIPTION*pointDescription)
            {
                fixed (ID2D1PathGeometry1*pThis = &this)
                    return lpVtbl->ComputePointAndSegmentAtLength_22(pThis, length, startSegment, worldTransform, flatteningTolerance, pointDescription);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetBounds_5;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetWidenedBounds_6;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D_POINT_2F, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>StrokeContainsPoint_7;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>FillContainsPoint_8;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D1_GEOMETRY_RELATION*, win32.System.Com.HRESULT>CompareWithGeometry_9;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D1_GEOMETRY_SIMPLIFICATION_OPTION, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*, win32.System.Com.HRESULT>Simplify_10;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1TessellationSink*, win32.System.Com.HRESULT>Tessellate_11;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.D2D1_COMBINE_MODE, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*, win32.System.Com.HRESULT>CombineWithGeometry_12;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*, win32.System.Com.HRESULT>Outline_13;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, float *, win32.System.Com.HRESULT>ComputeArea_14;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, float *, win32.System.Com.HRESULT>ComputeLength_15;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, float, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.System.Com.HRESULT>ComputePointAtLength_16;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*, win32.System.Com.HRESULT>Widen_17;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.ID2D1GeometrySink**, win32.System.Com.HRESULT>Open_18;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, win32.Graphics.Direct2D.ID2D1GeometrySink*, win32.System.Com.HRESULT>Stream_19;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, uint *, win32.System.Com.HRESULT>GetSegmentCount_20;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, uint *, win32.System.Com.HRESULT>GetFigureCount_21;
                internal delegate *unmanaged[Stdcall]<ID2D1PathGeometry1*, float, uint, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.D2D1_POINT_DESCRIPTION*, win32.System.Com.HRESULT>ComputePointAndSegmentAtLength_22;
            }

            private Vtbl*lpVtbl;
        }
    }
}