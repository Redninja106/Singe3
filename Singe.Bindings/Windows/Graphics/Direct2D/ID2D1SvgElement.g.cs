// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("AC7B67A6-183E-49C1-A823-0EBE40B0DB29")]
        internal unsafe struct ID2D1SvgElement
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <summary>Gets the document that contains this element.</summary>
            /// <param name = "document">
            /// <para>Type: <b>ID2D1SvgDocument**</b></para>
            /// <para>Ouputs the document that contains this element. This argument will be null if the element has been removed from the tree.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getdocument#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getdocument">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDocument([Optional] win32.Graphics.Direct2D.ID2D1SvgDocument**document)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    lpVtbl->GetDocument_5(pThis, document);
            }

            /// <summary>Gets the tag name.</summary>
            /// <param name = "name">
            /// <para>Type: <b>PWSTR</b></para>
            /// <para>The tag name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettagname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Length of the value in the name argument.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettagname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettagname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetTagName(win32.System.SystemServices.PWSTR name, uint nameCount)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetTagName_6(pThis, name, nameCount);
            }

            /// <summary>Gets the string length of the tag name.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Returns the string length of the tag name. The returned string length does not include room for the null terminator.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettagnamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetTagNameLength()
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetTagNameLength_7(pThis);
            }

            /// <summary>Returns a boolean indicating wether this element represents text content.</summary>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns TRUE if this element represents text content, e.g. the content of a 'title' or 'desc' element. Text content does not have a tag name.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-istextcontent">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsTextContent()
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->IsTextContent_8(pThis);
            }

            /// <summary>Gets the parent element.</summary>
            /// <param name = "parent">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>Outputs the parent element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getparent#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getparent">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetParent([Optional] win32.Graphics.Direct2D.ID2D1SvgElement**parent)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    lpVtbl->GetParent_9(pThis, parent);
            }

            /// <summary>Returns a boolean indicating whether this element has children.</summary>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns TRUE if this element has children.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-haschildren">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL HasChildren()
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->HasChildren_10(pThis);
            }

            /// <summary>Gets the first child of this element.</summary>
            /// <param name = "child">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>Outputs the first child of this element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getfirstchild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getfirstchild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetFirstChild([Optional] win32.Graphics.Direct2D.ID2D1SvgElement**child)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    lpVtbl->GetFirstChild_11(pThis, child);
            }

            /// <summary>Gets the last child of this element.</summary>
            /// <param name = "child">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>Outputs the last child of this element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getlastchild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getlastchild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetLastChild([Optional] win32.Graphics.Direct2D.ID2D1SvgElement**child)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    lpVtbl->GetLastChild_12(pThis, child);
            }

            /// <summary>Gets the previous sibling of the referenceChild element.</summary>
            /// <param name = "referenceChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The referenceChild must be an immediate child of this element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getpreviouschild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "previousChild">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>The output previousChild element will be non-null if the referenceChild has a previous sibling. If the referenceChild is the first child, the output is null.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getpreviouschild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getpreviouschild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPreviousChild(win32.Graphics.Direct2D.ID2D1SvgElement*referenceChild, [Optional] win32.Graphics.Direct2D.ID2D1SvgElement**previousChild)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetPreviousChild_13(pThis, referenceChild, previousChild);
            }

            /// <summary>Gets the next sibling of the referenceChild element.</summary>
            /// <param name = "referenceChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The referenceChild must be an immediate child of this element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getnextchild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nextChild">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>The output nextChild element will be non-null if the referenceChild has a next sibling. If the referenceChild is the last child, the output is null.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getnextchild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getnextchild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetNextChild(win32.Graphics.Direct2D.ID2D1SvgElement*referenceChild, [Optional] win32.Graphics.Direct2D.ID2D1SvgElement**nextChild)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetNextChild_14(pThis, referenceChild, nextChild);
            }

            /// <summary>Inserts newChild as a child of this element, before the referenceChild element.</summary>
            /// <param name = "newChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The element to be inserted.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-insertchildbefore#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "referenceChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The element that the child should be inserted before. If referenceChild is null, the newChild is placed as the last child. If referenceChild is non-null, it must be an immediate child of this element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-insertchildbefore#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-insertchildbefore">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT InsertChildBefore(win32.Graphics.Direct2D.ID2D1SvgElement*newChild, [Optional] win32.Graphics.Direct2D.ID2D1SvgElement*referenceChild)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->InsertChildBefore_15(pThis, newChild, referenceChild);
            }

            /// <summary>Appends an element to the list of children.</summary>
            /// <param name = "newChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The element to append.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-appendchild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-appendchild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AppendChild(win32.Graphics.Direct2D.ID2D1SvgElement*newChild)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->AppendChild_16(pThis, newChild);
            }

            /// <summary>Replaces the oldChild element with the newChild.</summary>
            /// <param name = "newChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The element to be inserted.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-replacechild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "oldChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The child element to be replaced. The oldChild element must be an immediate child of this element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-replacechild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code. Returns an error if this element cannot accept children of the type of newChild. Returns an error if the newChild is an ancestor of this element.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-replacechild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT ReplaceChild(win32.Graphics.Direct2D.ID2D1SvgElement*newChild, win32.Graphics.Direct2D.ID2D1SvgElement*oldChild)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->ReplaceChild_17(pThis, newChild, oldChild);
            }

            /// <summary>Removes the oldChild from the tree. Children of oldChild remain children of oldChild.</summary>
            /// <param name = "oldChild">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The child element to be removed. The oldChild element must be an immediate child of this element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-removechild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-removechild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT RemoveChild(win32.Graphics.Direct2D.ID2D1SvgElement*oldChild)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->RemoveChild_18(pThis, oldChild);
            }

            /// <inheritdoc cref = "CreateChild(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgElement**)"/>
            internal unsafe win32.System.Com.HRESULT CreateChild(string tagName, win32.Graphics.Direct2D.ID2D1SvgElement**newChild)
            {
                fixed (char *tagNameLocal = tagName)
                {
                    win32.System.Com.HRESULT __result = this.CreateChild(tagNameLocal, newChild);
                    return __result;
                }
            }

            /// <summary>Creates an element from a tag name. The element is appended to the list of children.</summary>
            /// <param name = "tagName">
            /// <para>Type: <b>PCWSTR</b></para>
            /// <para>The tag name of the new child. An empty string is interpreted to be a text content element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-createchild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "newChild">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>The new child element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-createchild#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code. Returns an error if this element cannot accept children of the specified type.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-createchild">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateChild(win32.System.SystemServices.PCWSTR tagName, win32.Graphics.Direct2D.ID2D1SvgElement**newChild)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->CreateChild_19(pThis, tagName, newChild);
            }

            /// <inheritdoc cref = "IsAttributeSpecified(win32.System.SystemServices.PCWSTR, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.SystemServices.BOOL IsAttributeSpecified(string name, win32.System.SystemServices.BOOL*inherited)
            {
                fixed (char *nameLocal = name)
                {
                    win32.System.SystemServices.BOOL __result = this.IsAttributeSpecified(nameLocal, inherited);
                    return __result;
                }
            }

            /// <summary>Returns a boolean indicating if the attribute is explicitly set on the element.</summary>
            /// <param name = "name">
            /// <para>Type: <b>PCWSTR</b></para>
            /// <para>The name of the attribute.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-isattributespecified#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inherited">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>Outputs whether the attribute is set to the inherit value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-isattributespecified#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>TReturns true if the attribute is explicitly set on the element or if it is present within an inline style. Returns FALSE if the attribute is not a valid attribute on this element.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-isattributespecified">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.SystemServices.BOOL IsAttributeSpecified(win32.System.SystemServices.PCWSTR name, [Optional] win32.System.SystemServices.BOOL*inherited)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->IsAttributeSpecified_20(pThis, name, inherited);
            }

            /// <summary>Returns the number of specified attributes on this element.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Returns the number of specified attributes on this element.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributecount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetSpecifiedAttributeCount()
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetSpecifiedAttributeCount_21(pThis);
            }

            /// <summary>Gets the name of the attribute at the given index.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index of the attribute.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "name">
            /// <para>Type: <b>PWSTR</b></para>
            /// <para>Outputs the name of the attribute.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Length of the string returned in the name argument.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inherited">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>Outputs whether the attribute is set to the inherit value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSpecifiedAttributeName(uint index, win32.System.SystemServices.PWSTR name, uint nameCount, [Optional] win32.System.SystemServices.BOOL*inherited)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetSpecifiedAttributeName_22(pThis, index, name, nameCount, inherited);
            }

            /// <inheritdoc cref = "GetSpecifiedAttributeNameLength(uint, uint *, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT GetSpecifiedAttributeNameLength(uint index, out uint nameLength, win32.System.SystemServices.BOOL*inherited)
            {
                fixed (uint *nameLengthLocal = &nameLength)
                {
                    win32.System.Com.HRESULT __result = this.GetSpecifiedAttributeNameLength(index, nameLengthLocal, inherited);
                    return __result;
                }
            }

            /// <summary>Gets the string length of the name of the specified attribute at the given index.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index of the attribute.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameLength">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>Outputs the string length of the name of the specified attribute.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inherited">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>Indicates whether the attribute is set to the inherit value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributenamelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getspecifiedattributenamelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSpecifiedAttributeNameLength(uint index, uint *nameLength, [Optional] win32.System.SystemServices.BOOL*inherited)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetSpecifiedAttributeNameLength_23(pThis, index, nameLength, inherited);
            }

            /// <inheritdoc cref = "RemoveAttribute(win32.System.SystemServices.PCWSTR)"/>
            internal unsafe win32.System.Com.HRESULT RemoveAttribute(string name)
            {
                fixed (char *nameLocal = name)
                {
                    win32.System.Com.HRESULT __result = this.RemoveAttribute(nameLocal);
                    return __result;
                }
            }

            /// <summary>Removes the attribute from this element.</summary>
            /// <param name = "name">
            /// <para>Type: <b>PCWSTR</b></para>
            /// <para>The name of the attribute to remove.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-removeattribute#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code. Returns an error if the attribute name is not valid on this element.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-removeattribute">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT RemoveAttribute(win32.System.SystemServices.PCWSTR name)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->RemoveAttribute_24(pThis, name);
            }

            /// <inheritdoc cref = "SetTextValue(win32.System.SystemServices.PCWSTR, uint)"/>
            internal unsafe win32.System.Com.HRESULT SetTextValue(string name, uint nameCount)
            {
                fixed (char *nameLocal = name)
                {
                    win32.System.Com.HRESULT __result = this.SetTextValue(nameLocal, nameCount);
                    return __result;
                }
            }

            /// <summary>Sets the value of a text content element.</summary>
            /// <param name = "name">
            /// <para>Type: <b>const WCHAR*</b></para>
            /// <para>The new value of the text content element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-settextvalue#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameCount">Type: <b>UINT32</b></param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-settextvalue">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetTextValue(win32.System.SystemServices.PCWSTR name, uint nameCount)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->SetTextValue_25(pThis, name, nameCount);
            }

            /// <summary>Gets the value of a text content element.</summary>
            /// <param name = "name">
            /// <para>Type: <b>PWSTR</b></para>
            /// <para>The value of the text content element.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettextvalue#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "nameCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The length of the value in the name argument.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettextvalue#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettextvalue">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetTextValue(win32.System.SystemServices.PWSTR name, uint nameCount)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetTextValue_26(pThis, name, nameCount);
            }

            /// <summary>Gets the length of the text content value.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Returns the length of the text content value.  The returned string length does not include room for the null terminator.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-gettextvaluelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetTextValueLength()
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetTextValueLength_27(pThis);
            }

            /// <inheritdoc cref = "SetAttributeValue(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE, win32.System.SystemServices.PCWSTR)"/>
            internal unsafe win32.System.Com.HRESULT SetAttributeValue(string name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE type, string value)
            {
                fixed (char *valueLocal = value)
                {
                    fixed (char *nameLocal = name)
                    {
                        win32.System.Com.HRESULT __result = this.SetAttributeValue(nameLocal, type, valueLocal);
                        return __result;
                    }
                }
            }

            internal win32.System.Com.HRESULT SetAttributeValue(win32.System.SystemServices.PCWSTR name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE type, win32.System.SystemServices.PCWSTR value)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->SetAttributeValue_28(pThis, name, type, value);
            }

            /// <inheritdoc cref = "GetAttributeValue(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE, win32.System.SystemServices.PWSTR, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetAttributeValue(string name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE type, win32.System.SystemServices.PWSTR value, uint valueCount)
            {
                fixed (char *nameLocal = name)
                {
                    win32.System.Com.HRESULT __result = this.GetAttributeValue(nameLocal, type, value, valueCount);
                    return __result;
                }
            }

            internal win32.System.Com.HRESULT GetAttributeValue(win32.System.SystemServices.PCWSTR name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE type, win32.System.SystemServices.PWSTR value, uint valueCount)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetAttributeValue_29(pThis, name, type, value, valueCount);
            }

            /// <inheritdoc cref = "GetAttributeValueLength(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetAttributeValueLength(string name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE type, out uint valueLength)
            {
                fixed (uint *valueLengthLocal = &valueLength)
                {
                    fixed (char *nameLocal = name)
                    {
                        win32.System.Com.HRESULT __result = this.GetAttributeValueLength(nameLocal, type, valueLengthLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Gets the string length of an attribute of this element.</summary>
            /// <param name = "name">
            /// <para>Type: <b>PCWSTR</b></para>
            /// <para>The name of the attribute.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getattributevaluelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "type">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1svg/ne-d2d1svg-d2d1_svg_attribute_string_type">D2D1_SVG_ATTRIBUTE_STRING_TYPE</a></b></para>
            /// <para>The string type of the attribute.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getattributevaluelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "valueLength">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>The lengthe of the attribute. The returned string length does not include room for the null terminator.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getattributevaluelength#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code. Returns an error if the attribute is not specified. Returns an error if the attribute name is not valid on this element. Returns an error if the attribute cannot be expressed as the specified string type.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgelement-getattributevaluelength">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetAttributeValueLength(win32.System.SystemServices.PCWSTR name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE type, uint *valueLength)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetAttributeValueLength_30(pThis, name, type, valueLength);
            }

            /// <inheritdoc cref = "SetAttributeValue(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE, void *, uint)"/>
            internal unsafe win32.System.Com.HRESULT SetAttributeValue(string name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE type, void *value, uint valueSizeInBytes)
            {
                fixed (char *nameLocal = name)
                {
                    win32.System.Com.HRESULT __result = this.SetAttributeValue(nameLocal, type, value, valueSizeInBytes);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetAttributeValue(win32.System.SystemServices.PCWSTR name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE type, void *value, uint valueSizeInBytes)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->SetAttributeValue_31(pThis, name, type, value, valueSizeInBytes);
            }

            /// <inheritdoc cref = "GetAttributeValue(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE, void *, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetAttributeValue(string name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE type, void *value, uint valueSizeInBytes)
            {
                fixed (char *nameLocal = name)
                {
                    win32.System.Com.HRESULT __result = this.GetAttributeValue(nameLocal, type, value, valueSizeInBytes);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetAttributeValue(win32.System.SystemServices.PCWSTR name, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE type, void *value, uint valueSizeInBytes)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetAttributeValue_32(pThis, name, type, value, valueSizeInBytes);
            }

            /// <inheritdoc cref = "SetAttributeValue(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgAttribute*)"/>
            internal unsafe win32.System.Com.HRESULT SetAttributeValue(string name, win32.Graphics.Direct2D.ID2D1SvgAttribute*value)
            {
                fixed (char *nameLocal = name)
                {
                    win32.System.Com.HRESULT __result = this.SetAttributeValue(nameLocal, value);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetAttributeValue(win32.System.SystemServices.PCWSTR name, win32.Graphics.Direct2D.ID2D1SvgAttribute*value)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->SetAttributeValue_33(pThis, name, value);
            }

            /// <inheritdoc cref = "GetAttributeValue(win32.System.SystemServices.PCWSTR, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetAttributeValue(string name, in global::System.Guid riid, void **value)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    fixed (char *nameLocal = name)
                    {
                        win32.System.Com.HRESULT __result = this.GetAttributeValue(nameLocal, riidLocal, value);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetAttributeValue(win32.System.SystemServices.PCWSTR name, global::System.Guid*riid, [Optional] void **value)
            {
                fixed (ID2D1SvgElement*pThis = &this)
                    return lpVtbl->GetAttributeValue_34(pThis, name, riid, value);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgDocument**, void>GetDocument_5;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetTagName_6;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, uint>GetTagNameLength_7;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.BOOL>IsTextContent_8;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement**, void>GetParent_9;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.BOOL>HasChildren_10;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement**, void>GetFirstChild_11;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement**, void>GetLastChild_12;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement**, win32.System.Com.HRESULT>GetPreviousChild_13;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement**, win32.System.Com.HRESULT>GetNextChild_14;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.System.Com.HRESULT>InsertChildBefore_15;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.System.Com.HRESULT>AppendChild_16;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.System.Com.HRESULT>ReplaceChild_17;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.System.Com.HRESULT>RemoveChild_18;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgElement**, win32.System.Com.HRESULT>CreateChild_19;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.BOOL*, win32.System.SystemServices.BOOL>IsAttributeSpecified_20;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, uint>GetSpecifiedAttributeCount_21;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, uint, win32.System.SystemServices.PWSTR, uint, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>GetSpecifiedAttributeName_22;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, uint, uint *, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>GetSpecifiedAttributeNameLength_23;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.System.Com.HRESULT>RemoveAttribute_24;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, uint, win32.System.Com.HRESULT>SetTextValue_25;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetTextValue_26;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, uint>GetTextValueLength_27;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE, win32.System.SystemServices.PCWSTR, win32.System.Com.HRESULT>SetAttributeValue_28;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE, win32.System.SystemServices.PWSTR, uint, win32.System.Com.HRESULT>GetAttributeValue_29;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_STRING_TYPE, uint *, win32.System.Com.HRESULT>GetAttributeValueLength_30;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE, void *, uint, win32.System.Com.HRESULT>SetAttributeValue_31;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.D2D1_SVG_ATTRIBUTE_POD_TYPE, void *, uint, win32.System.Com.HRESULT>GetAttributeValue_32;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgAttribute*, win32.System.Com.HRESULT>SetAttributeValue_33;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgElement*, win32.System.SystemServices.PCWSTR, global::System.Guid*, void **, win32.System.Com.HRESULT>GetAttributeValue_34;
            }

            private Vtbl*lpVtbl;
        }
    }
}