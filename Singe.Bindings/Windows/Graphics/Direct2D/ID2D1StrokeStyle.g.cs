// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("2CD9069D-12E2-11DC-9FED-001143A055F9")]
        internal unsafe struct ID2D1StrokeStyle
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <summary>Retrieves the type of shape used at the beginning of a stroke.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_cap_style">D2D1_CAP_STYLE</a></b></para>
            /// <para>The type of shape used at the beginning of a stroke.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getstartcap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_CAP_STYLE GetStartCap()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetStartCap_5(pThis);
            }

            /// <summary>Retrieves the type of shape used at the end of a stroke.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_cap_style">D2D1_CAP_STYLE</a></b></para>
            /// <para>The type of shape used at the end of a stroke.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getendcap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_CAP_STYLE GetEndCap()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetEndCap_6(pThis);
            }

            /// <summary>Gets a value that specifies how the ends of each dash are drawn.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_cap_style">D2D1_CAP_STYLE</a></b></para>
            /// <para>A value that specifies how the ends of each dash are drawn.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getdashcap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_CAP_STYLE GetDashCap()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetDashCap_7(pThis);
            }

            /// <summary>Retrieves the limit on the ratio of the miter length to half the stroke's thickness.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>A positive number greater than or equal to 1.0f that describes the limit on the ratio of the miter length to half the stroke's thickness.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getmiterlimit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetMiterLimit()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetMiterLimit_8(pThis);
            }

            /// <summary>Retrieves the type of joint used at the vertices of a shape's outline.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_line_join">D2D1_LINE_JOIN</a></b></para>
            /// <para>A value that specifies the type of joint used at the vertices of a shape's outline.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getlinejoin">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_LINE_JOIN GetLineJoin()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetLineJoin_9(pThis);
            }

            /// <summary>Retrieves a value that specifies how far in the dash sequence the stroke will start.</summary>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>A value that specifies how far in the dash sequence the stroke will start.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getdashoffset">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetDashOffset()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetDashOffset_10(pThis);
            }

            /// <summary>Gets a value that describes the stroke's dash pattern.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_dash_style">D2D1_DASH_STYLE</a></b></para>
            /// <para>A value that describes the predefined dash pattern used, or <a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_dash_style">D2D1_DASH_STYLE_CUSTOM</a> if a custom dash style is used.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getdashstyle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_DASH_STYLE GetDashStyle()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetDashStyle_11(pThis);
            }

            /// <summary>Retrieves the number of entries in the dashes array.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of entries in the dashes array if the stroke is dashed; otherwise, 0.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getdashescount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetDashesCount()
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    return lpVtbl->GetDashesCount_12(pThis);
            }

            /// <inheritdoc cref = "GetDashes(float *, uint)"/>
            internal unsafe void GetDashes(Span<float> dashes)
            {
                fixed (float *dashesLocal = dashes)
                {
                    this.GetDashes(dashesLocal, (uint)dashes.Length);
                }
            }

            /// <summary>Copies the dash pattern to the specified array.</summary>
            /// <param name = "dashes">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>A pointer to an array that will receive the dash pattern. The array must be able to contain at least as many elements as specified by <i>dashesCount</i>. You must allocate storage for this array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getdashes#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dashesCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of dashes to copy. If this value is less than the number of dashes in the stroke style's dashes array, the returned dashes are truncated to <i>dashesCount</i>. If this value is greater than the number of dashes in the stroke style's dashes array, the extra dashes are set to 0.0f. To obtain the actual number of dashes in the stroke style's dashes array, use the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1strokestyle-getdashescount">GetDashesCount</a> method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getdashes#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The dashes are specified in units that are a multiple of the stroke width, with subsequent members of the array indicating the dashes and gaps between dashes: the first entry indicates a filled dash, the second a gap, and so on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1strokestyle-getdashes#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDashes(float *dashes, uint dashesCount)
            {
                fixed (ID2D1StrokeStyle*pThis = &this)
                    lpVtbl->GetDashes_13(pThis, dashes, dashesCount);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D1_CAP_STYLE>GetStartCap_5;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D1_CAP_STYLE>GetEndCap_6;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D1_CAP_STYLE>GetDashCap_7;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, float>GetMiterLimit_8;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D1_LINE_JOIN>GetLineJoin_9;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, float>GetDashOffset_10;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, win32.Graphics.Direct2D.D2D1_DASH_STYLE>GetDashStyle_11;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, uint>GetDashesCount_12;
                internal delegate *unmanaged[Stdcall]<ID2D1StrokeStyle*, float *, uint, void>GetDashes_13;
            }

            private Vtbl*lpVtbl;
        }
    }
}