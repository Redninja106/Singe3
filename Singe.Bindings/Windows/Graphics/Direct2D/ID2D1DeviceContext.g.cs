// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("E8F7FE7A-191C-466D-AD95-975678BDA998")]
        internal unsafe struct ID2D1DeviceContext
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <inheritdoc cref = "CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, void *srcData, uint pitch, in win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapPropertiesLocal = &bitmapProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateBitmap(size, srcData, pitch, bitmapPropertiesLocal, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, [Optional] void *srcData, uint pitch, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateBitmap_5(pThis, size, srcData, pitch, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromWicBitmap(wicBitmapSource, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateBitmapFromWicBitmap_6(pThis, wicBitmapSource, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateSharedBitmap(global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(in global::System.Guid riid, void *data, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSharedBitmap(riidLocal, data, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(global::System.Guid*riid, void *data, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateSharedBitmap_7(pThis, riid, data, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES? bitmapBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushPropertiesLocal = bitmapBrushProperties.HasValue ? bitmapBrushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES);
                win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapBrush(bitmap, bitmapBrushProperties.HasValue ? &bitmapBrushPropertiesLocal : null, brushProperties.HasValue ? &brushPropertiesLocal : null, bitmapBrush);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush([Optional] win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*bitmapBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateBitmapBrush_8(pThis, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush);
            }

            /// <inheritdoc cref = "CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(in win32.Graphics.Direct2D.D2D1_COLOR_F color, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_COLOR_F*colorLocal = &color)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSolidColorBrush(colorLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, solidColorBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*color, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateSolidColorBrush_9(pThis, color, brushProperties, solidColorBrush);
            }

            /// <inheritdoc cref = "CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_GRADIENT_STOP> gradientStops, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStopsLocal = gradientStops)
                {
                    win32.System.Com.HRESULT __result = this.CreateGradientStopCollection(gradientStopsLocal, (uint)gradientStops.Length, colorInterpolationGamma, extendMode, gradientStopCollection);
                    return __result;
                }
            }

            /// <summary>Creates a gradient stop collection, enabling the gradient to contain color channels with values outside of [0,1] and also enabling rendering to a high-color render target with interpolation in sRGB space.</summary>
            /// <param name = "extendMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>Defines how colors outside of the range defined by the stop collection are determined.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStops, uint gradientStopsCount, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateGradientStopCollection_10(pThis, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection);
            }

            /// <inheritdoc cref = "CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(in win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushPropertiesLocal = &linearGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateLinearGradientBrush(linearGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, linearGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateLinearGradientBrush_11(pThis, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush);
            }

            /// <inheritdoc cref = "CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(in win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushPropertiesLocal = &radialGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateRadialGradientBrush(radialGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, radialGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateRadialGradientBrush_12(pThis, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush);
            }

            /// <inheritdoc cref = "CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F? desiredSize, win32.Graphics.Direct2D.D2D_SIZE_U? desiredPixelSize, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT? desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F desiredSizeLocal = desiredSize.HasValue ? desiredSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.Graphics.Direct2D.D2D_SIZE_U desiredPixelSizeLocal = desiredPixelSize.HasValue ? desiredPixelSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_U);
                win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT desiredFormatLocal = desiredFormat.HasValue ? desiredFormat.Value : default(win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT);
                win32.System.Com.HRESULT __result = this.CreateCompatibleRenderTarget(desiredSize.HasValue ? &desiredSizeLocal : null, desiredPixelSize.HasValue ? &desiredPixelSizeLocal : null, desiredFormat.HasValue ? &desiredFormatLocal : null, options, bitmapRenderTarget);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*desiredSize, [Optional] win32.Graphics.Direct2D.D2D_SIZE_U*desiredPixelSize, [Optional] win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateCompatibleRenderTarget_13(pThis, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget);
            }

            /// <inheritdoc cref = "CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F? size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F sizeLocal = size.HasValue ? size.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.System.Com.HRESULT __result = this.CreateLayer(size.HasValue ? &sizeLocal : null, layer);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateLayer([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateLayer_14(pThis, size, layer);
            }

            internal unsafe win32.System.Com.HRESULT CreateMesh(win32.Graphics.Direct2D.ID2D1Mesh**mesh)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateMesh_15(pThis, mesh);
            }

            internal unsafe void DrawLine(win32.Graphics.Direct2D.D2D_POINT_2F point0, win32.Graphics.Direct2D.D2D_POINT_2F point1, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawLine_16(pThis, point0, point1, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.DrawRectangle(rectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawRectangle_17(pThis, rect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.FillRectangle(rectLocal, brush);
                }
            }

            internal unsafe void FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->FillRectangle_18(pThis, rect, brush);
            }

            /// <inheritdoc cref = "DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.DrawRoundedRectangle(roundedRectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawRoundedRectangle_19(pThis, roundedRect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.FillRoundedRectangle(roundedRectLocal, brush);
                }
            }

            internal unsafe void FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->FillRoundedRectangle_20(pThis, roundedRect, brush);
            }

            /// <inheritdoc cref = "DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.DrawEllipse(ellipseLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawEllipse_21(pThis, ellipse, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.FillEllipse(ellipseLocal, brush);
                }
            }

            internal unsafe void FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->FillEllipse_22(pThis, ellipse, brush);
            }

            internal unsafe void DrawGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawGeometry_23(pThis, geometry, brush, strokeWidth, strokeStyle);
            }

            internal unsafe void FillGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.ID2D1Brush*opacityBrush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->FillGeometry_24(pThis, geometry, brush, opacityBrush);
            }

            internal unsafe void FillMesh(win32.Graphics.Direct2D.ID2D1Mesh*mesh, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->FillMesh_25(pThis, mesh, brush);
            }

            /// <inheritdoc cref = "FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.FillOpacityMask(opacityMask, brush, content, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->FillOpacityMask_26(pThis, opacityMask, brush, content, destinationRectangle, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.DrawBitmap(bitmap, destinationRectangle.HasValue ? &destinationRectangleLocal : null, opacity, interpolationMode, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawBitmap_27(pThis, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawText(win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawText(string @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, in win32.Graphics.Direct2D.D2D_RECT_F layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*layoutRectLocal = &layoutRect)
                {
                    fixed (char *@stringLocal = @string)
                    {
                        this.DrawText(@stringLocal, stringLength, textFormat, layoutRectLocal, defaultFillBrush, options, measuringMode);
                    }
                }
            }

            internal unsafe void DrawText(win32.System.SystemServices.PCWSTR @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, win32.Graphics.Direct2D.D2D_RECT_F*layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawText_28(pThis, @string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode);
            }

            internal unsafe void DrawTextLayout(win32.Graphics.Direct2D.D2D_POINT_2F origin, win32.Graphics.DirectWrite.IDWriteTextLayout*textLayout, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawTextLayout_29(pThis, origin, textLayout, defaultFillBrush, options);
            }

            /// <inheritdoc cref = "DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                {
                    this.DrawGlyphRun(baselineOrigin, glyphRunLocal, foregroundBrush, measuringMode);
                }
            }

            /// <summary>Draws a series of glyphs to the device context.</summary>
            /// <param name = "baselineOrigin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>Origin of first glyph in the series.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRun">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b></para>
            /// <para>The glyphs to render.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "foregroundBrush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush that defines the text color.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "measuringMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b></para>
            /// <para>The measuring mode of the glyph series, used to determine the advances and offsets. The default value is DWRITE_MEASURING_MODE_NATURAL.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The <i>glyphRunDescription</i> is ignored when rendering, but can be useful for printing and serialization of rendering commands, such as to an XPS or SVG file. This extends <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun">ID2D1RenderTarget::DrawGlyphRun</a>, which lacked the glyph run description.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawGlyphRun_30(pThis, baselineOrigin, glyphRun, foregroundBrush, measuringMode);
            }

            /// <inheritdoc cref = "SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void SetTransform(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.SetTransform(transformLocal);
                }
            }

            internal unsafe void SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetTransform_31(pThis, transform);
            }

            /// <inheritdoc cref = "GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void GetTransform(out win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.GetTransform(transformLocal);
                }
            }

            internal unsafe void GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetTransform_32(pThis, transform);
            }

            internal void SetAntialiasMode(win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetAntialiasMode_33(pThis, antialiasMode);
            }

            internal win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE GetAntialiasMode()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetAntialiasMode_34(pThis);
            }

            internal void SetTextAntialiasMode(win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetTextAntialiasMode_35(pThis, textAntialiasMode);
            }

            internal win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetTextAntialiasMode_36(pThis);
            }

            internal unsafe void SetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams*textRenderingParams)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetTextRenderingParams_37(pThis, textRenderingParams);
            }

            internal unsafe void GetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams**textRenderingParams)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetTextRenderingParams_38(pThis, textRenderingParams);
            }

            internal void SetTags(ulong tag1, ulong tag2)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetTags_39(pThis, tag1, tag2);
            }

            internal unsafe void GetTags([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetTags_40(pThis, tag1, tag2);
            }

            /// <inheritdoc cref = "PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*)"/>
            internal unsafe void PushLayer(in win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS layerParameters, win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParametersLocal = &layerParameters)
                {
                    this.PushLayer(layerParametersLocal, layer);
                }
            }

            internal unsafe void PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParameters, [Optional] win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->PushLayer_41(pThis, layerParameters, layer);
            }

            internal void PopLayer()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->PopLayer_42(pThis);
            }

            internal unsafe win32.System.Com.HRESULT Flush([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->Flush_43(pThis, tag1, tag2);
            }

            internal unsafe void SaveDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SaveDrawingState_44(pThis, drawingStateBlock);
            }

            internal unsafe void RestoreDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->RestoreDrawingState_45(pThis, drawingStateBlock);
            }

            /// <inheritdoc cref = "PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE)"/>
            internal unsafe void PushAxisAlignedClip(in win32.Graphics.Direct2D.D2D_RECT_F clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*clipRectLocal = &clipRect)
                {
                    this.PushAxisAlignedClip(clipRectLocal, antialiasMode);
                }
            }

            internal unsafe void PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->PushAxisAlignedClip_46(pThis, clipRect, antialiasMode);
            }

            internal void PopAxisAlignedClip()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->PopAxisAlignedClip_47(pThis);
            }

            /// <inheritdoc cref = "Clear(win32.Graphics.Direct2D.D2D1_COLOR_F*)"/>
            internal unsafe void Clear(win32.Graphics.Direct2D.D2D1_COLOR_F? clearColor)
            {
                win32.Graphics.Direct2D.D2D1_COLOR_F clearColorLocal = clearColor.HasValue ? clearColor.Value : default(win32.Graphics.Direct2D.D2D1_COLOR_F);
                this.Clear(clearColor.HasValue ? &clearColorLocal : null);
            }

            internal unsafe void Clear([Optional] win32.Graphics.Direct2D.D2D1_COLOR_F*clearColor)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->Clear_48(pThis, clearColor);
            }

            internal void BeginDraw()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->BeginDraw_49(pThis);
            }

            internal unsafe win32.System.Com.HRESULT EndDraw([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->EndDraw_50(pThis, tag1, tag2);
            }

            internal win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT GetPixelFormat()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetPixelFormat_51(pThis);
            }

            internal void SetDpi(float dpiX, float dpiY)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetDpi_52(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "GetDpi(float *, float *)"/>
            internal unsafe void GetDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            internal unsafe void GetDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetDpi_53(pThis, dpiX, dpiY);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_F GetSize()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetSize_54(pThis);
            }

            internal win32.Graphics.Direct2D.D2D_SIZE_U GetPixelSize()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetPixelSize_55(pThis);
            }

            internal uint GetMaximumBitmapSize()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetMaximumBitmapSize_56(pThis);
            }

            /// <inheritdoc cref = "IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*)"/>
            internal unsafe win32.System.SystemServices.BOOL IsSupported(in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                {
                    win32.System.SystemServices.BOOL __result = this.IsSupported(renderTargetPropertiesLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.SystemServices.BOOL IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->IsSupported_57(pThis, renderTargetProperties);
            }

            /// <inheritdoc cref = "CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, void *sourceData, uint pitch, in win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1 bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapPropertiesLocal = &bitmapProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateBitmap(size, sourceData, pitch, bitmapPropertiesLocal, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, [Optional] void *sourceData, uint pitch, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateBitmap_58(pThis, size, sourceData, pitch, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1 bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromWicBitmap(wicBitmapSource, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateBitmapFromWicBitmap_59(pThis, wicBitmapSource, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE, byte *, uint, win32.Graphics.Direct2D.ID2D1ColorContext**)"/>
            internal unsafe win32.System.Com.HRESULT CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE space, ReadOnlySpan<byte> profile, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (byte *profileLocal = profile)
                {
                    win32.System.Com.HRESULT __result = this.CreateColorContext(space, profileLocal, (uint)profile.Length, colorContext);
                    return __result;
                }
            }

            /// <summary>Creates a color context.</summary>
            /// <param name = "space">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b></para>
            /// <para>The space  of color context to create.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "profile">
            /// <para>Type: <b>const BYTE*</b></para>
            /// <para>A buffer containing the ICC profile bytes used to initialize the color context when <i>space</i> is <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE_CUSTOM</a>.  For other types, the parameter is ignored and should be set to <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "profileSize">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The size in bytes of <i>Profile</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a new color context object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorContext(win32.Graphics.Direct2D.D2D1_COLOR_SPACE space, [Optional] byte *profile, uint profileSize, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateColorContext_60(pThis, space, profile, profileSize, colorContext);
            }

            /// <inheritdoc cref = "CreateColorContextFromFilename(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1ColorContext**)"/>
            internal unsafe win32.System.Com.HRESULT CreateColorContextFromFilename(string filename, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (char *filenameLocal = filename)
                {
                    win32.System.Com.HRESULT __result = this.CreateColorContextFromFilename(filenameLocal, colorContext);
                    return __result;
                }
            }

            /// <summary>Creates a color context by loading it from the specified filename. The profile bytes are the contents of the file specified by Filename.</summary>
            /// <param name = "filename">
            /// <para>Type: <b>PCWSTR</b></para>
            /// <para>The path to the file containing the profile bytes to initialize the color context with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a new color context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromfilename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorContextFromFilename(win32.System.SystemServices.PCWSTR filename, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateColorContextFromFilename_61(pThis, filename, colorContext);
            }

            /// <summary>Creates a color context from an IWICColorContext. The D2D1ColorContext space of the resulting context varies, see Remarks for more info.</summary>
            /// <param name = "wicColorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a> used to initialize the color context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromwiccolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1colorcontext">ID2D1ColorContext</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a new color context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromwiccolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcolorcontextfromwiccolorcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorContextFromWicColorContext(win32.Graphics.Imaging.IWICColorContext*wicColorContext, win32.Graphics.Direct2D.ID2D1ColorContext**colorContext)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateColorContextFromWicColorContext_62(pThis, wicColorContext, colorContext);
            }

            /// <inheritdoc cref = "CreateBitmapFromDxgiSurface(win32.Graphics.Dxgi.IDXGISurface*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromDxgiSurface(win32.Graphics.Dxgi.IDXGISurface*surface, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1 bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromDxgiSurface(surface, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromDxgiSurface(win32.Graphics.Dxgi.IDXGISurface*surface, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap1**bitmap)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateBitmapFromDxgiSurface_63(pThis, surface, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateEffect(global::System.Guid*, win32.Graphics.Direct2D.ID2D1Effect**)"/>
            internal unsafe win32.System.Com.HRESULT CreateEffect(in global::System.Guid effectId, win32.Graphics.Direct2D.ID2D1Effect**effect)
            {
                fixed (global::System.Guid*effectIdLocal = &effectId)
                {
                    win32.System.Com.HRESULT __result = this.CreateEffect(effectIdLocal, effect);
                    return __result;
                }
            }

            /// <summary>Creates an effect for the specified class ID.</summary>
            /// <param name = "effectId">
            /// <para>Type: <b>REFCLSID</b></para>
            /// <para>The class ID of the effect to create. See <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/built-in-effects">Built-in Effects</a> for a list of effect IDs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "effect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a new effect.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createeffect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createeffect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateEffect(global::System.Guid*effectId, win32.Graphics.Direct2D.ID2D1Effect**effect)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateEffect_64(pThis, effectId, effect);
            }

            /// <inheritdoc cref = "CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_GRADIENT_STOP> straightAlphaGradientStops, win32.Graphics.Direct2D.D2D1_COLOR_SPACE preInterpolationSpace, win32.Graphics.Direct2D.D2D1_COLOR_SPACE postInterpolationSpace, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**gradientStopCollection1)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*straightAlphaGradientStopsLocal = straightAlphaGradientStops)
                {
                    win32.System.Com.HRESULT __result = this.CreateGradientStopCollection(straightAlphaGradientStopsLocal, (uint)straightAlphaGradientStops.Length, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1);
                    return __result;
                }
            }

            /// <summary>Creates a gradient stop collection, enabling the gradient to contain color channels with values outside of [0,1] and also enabling rendering to a high-color render target with interpolation in sRGB space.</summary>
            /// <param name = "straightAlphaGradientStops">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ns-d2d1-d2d1_gradient_stop">D2D1_GRADIENT_STOP</a>*</b></para>
            /// <para>An array of color values and offsets.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "straightAlphaGradientStopsCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of elements in the <i>gradientStops</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "preInterpolationSpace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b></para>
            /// <para>Specifies both the input color space and the space in which the color interpolation occurs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "postInterpolationSpace">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b></para>
            /// <para>The color space that colors will be converted to after interpolation occurs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bufferPrecision">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b></para>
            /// <para>The precision of the texture used to hold interpolated values.</para>
            /// <para><div class = "alert"><b>Note</b>  This method will fail if the underlying Direct3D device does not support the requested buffer precision.  Use <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-isbufferprecisionsupported">ID2D1DeviceContext::IsBufferPrecisionSupported</a> to determine what is supported. </div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "extendMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE</a></b></para>
            /// <para>Defines how colors outside of the range defined by the stop collection are determined.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "colorInterpolationMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_interpolation_mode">D2D1_COLOR_INTERPOLATION_MODE</a></b></para>
            /// <para>Defines how colors are interpolated.  D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED is the default, see Remarks for more info.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "gradientStopCollection1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1gradientstopcollection1">ID2D1GradientStopCollection1</a>**</b></para>
            /// <para>The new gradient stop collection.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-creategradientstopcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*straightAlphaGradientStops, uint straightAlphaGradientStopsCount, win32.Graphics.Direct2D.D2D1_COLOR_SPACE preInterpolationSpace, win32.Graphics.Direct2D.D2D1_COLOR_SPACE postInterpolationSpace, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**gradientStopCollection1)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateGradientStopCollection_65(pThis, straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, gradientStopCollection1);
            }

            /// <inheritdoc cref = "CreateImageBrush(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1ImageBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateImageBrush(win32.Graphics.Direct2D.ID2D1Image*image, in win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES imageBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1ImageBrush**imageBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*imageBrushPropertiesLocal = &imageBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateImageBrush(image, imageBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, imageBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateImageBrush([Optional] win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*imageBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1ImageBrush**imageBrush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateImageBrush_66(pThis, image, imageBrushProperties, brushProperties, imageBrush);
            }

            /// <inheritdoc cref = "CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush1**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1? bitmapBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush1**bitmapBrush)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1 bitmapBrushPropertiesLocal = bitmapBrushProperties.HasValue ? bitmapBrushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1);
                win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapBrush(bitmap, bitmapBrushProperties.HasValue ? &bitmapBrushPropertiesLocal : null, brushProperties.HasValue ? &brushPropertiesLocal : null, bitmapBrush);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush([Optional] win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1*bitmapBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush1**bitmapBrush)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateBitmapBrush_67(pThis, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush);
            }

            /// <summary>Creates a ID2D1CommandList object.</summary>
            /// <param name = "commandList">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1commandlist">ID2D1CommandList</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a command list.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-createcommandlist">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCommandList(win32.Graphics.Direct2D.ID2D1CommandList**commandList)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->CreateCommandList_68(pThis, commandList);
            }

            /// <summary>Indicates whether the format is supported by the device context.</summary>
            /// <param name = "format">
            /// <para>Type: <b>format</b></para>
            /// <para>The DXGI format to check.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isdxgiformatsupported#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns TRUE if the format is supported.  Returns FALSE if the format is not supported.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isdxgiformatsupported">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsDxgiFormatSupported(win32.Graphics.Dxgi.DXGI_FORMAT format)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->IsDxgiFormatSupported_69(pThis, format);
            }

            /// <summary>Indicates whether the buffer precision is supported by the underlying Direct3D device.</summary>
            /// <param name = "bufferPrecision">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_buffer_precision">D2D1_BUFFER_PRECISION</a></b></para>
            /// <para>The buffer precision to check.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isbufferprecisionsupported#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns TRUE if the buffer precision is supported.  Returns FALSE if the buffer precision is not supported.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-isbufferprecisionsupported">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL IsBufferPrecisionSupported(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->IsBufferPrecisionSupported_70(pThis, bufferPrecision);
            }

            /// <inheritdoc cref = "GetImageLocalBounds(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetImageLocalBounds(win32.Graphics.Direct2D.ID2D1Image*image, out win32.Graphics.Direct2D.D2D_RECT_F localBounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*localBoundsLocal = &localBounds)
                {
                    win32.System.Com.HRESULT __result = this.GetImageLocalBounds(image, localBoundsLocal);
                    return __result;
                }
            }

            /// <summary>Gets the bounds of an image without the world transform of the context applied.</summary>
            /// <param name = "image">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b></para>
            /// <para>The image whose bounds will be calculated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimagelocalbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "localBounds">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>[1]</b></para>
            /// <para>When this method returns, contains a pointer to the bounds of the image in device independent pixels (DIPs) and in local space.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimagelocalbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>This method does not return a value.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimagelocalbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetImageLocalBounds(win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D_RECT_F*localBounds)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetImageLocalBounds_71(pThis, image, localBounds);
            }

            /// <inheritdoc cref = "GetImageWorldBounds(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetImageWorldBounds(win32.Graphics.Direct2D.ID2D1Image*image, out win32.Graphics.Direct2D.D2D_RECT_F worldBounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*worldBoundsLocal = &worldBounds)
                {
                    win32.System.Com.HRESULT __result = this.GetImageWorldBounds(image, worldBoundsLocal);
                    return __result;
                }
            }

            /// <summary>Gets the bounds of an image with the world transform of the context applied.</summary>
            /// <param name = "image">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b></para>
            /// <para>The image whose bounds will be calculated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimageworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "worldBounds">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>[1]</b></para>
            /// <para>When this method returns, contains a pointer to the bounds of the image in device independent pixels (DIPs).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimageworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getimageworldbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetImageWorldBounds(win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D_RECT_F*worldBounds)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetImageWorldBounds_72(pThis, image, worldBounds);
            }

            /// <inheritdoc cref = "GetGlyphRunWorldBounds(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetGlyphRunWorldBounds(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, out win32.Graphics.Direct2D.D2D_RECT_F bounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*boundsLocal = &bounds)
                {
                    fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                    {
                        win32.System.Com.HRESULT __result = this.GetGlyphRunWorldBounds(baselineOrigin, glyphRunLocal, measuringMode, boundsLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Gets the world-space bounds in DIPs of the glyph run using the device context DPI.</summary>
            /// <param name = "baselineOrigin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The origin of the baseline for the glyph run.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRun">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b></para>
            /// <para>The glyph run to render.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "measuringMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b></para>
            /// <para>The DirectWrite measuring mode that indicates how glyph metrics are used to measure text when it is formatted.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bounds">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The bounds of the glyph run in DIPs and in world space.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getglyphrunworldbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetGlyphRunWorldBounds(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode, win32.Graphics.Direct2D.D2D_RECT_F*bounds)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetGlyphRunWorldBounds_73(pThis, baselineOrigin, glyphRun, measuringMode, bounds);
            }

            /// <summary>Gets the device associated with a device context.</summary>
            /// <param name = "device">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1device">ID2D1Device</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to a Direct2D device associated with this device context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getdevice#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The application can retrieve the device even if it is created from an earlier render target code-path. The application must use an <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1devicecontext">ID2D1DeviceContext</a> interface and then call <b>GetDevice</b>. Some functionality for controlling all of the resources for a set of device contexts is maintained only on an <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1device">ID2D1Device</a> object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getdevice#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDevice(win32.Graphics.Direct2D.ID2D1Device**device)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetDevice_74(pThis, device);
            }

            /// <summary>The bitmap or command list to which the Direct2D device context will now render.</summary>
            /// <param name = "image">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>*</b></para>
            /// <para>The surface or command list to which the Direct2D device context will render.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-settarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The target can be changed at any time, including while the context is drawing.</para>
            /// <para>The target can be either a bitmap created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_bitmap_options">D2D1_BITMAP_OPTIONS_TARGET</a> flag, or it can be a command list. Other kinds of images cannot be set as a target. For example, you cannot set the output of an effect as target. If the target is not valid the context will enter the <b>D2DERR_INVALID_TARGET </b>error state.</para>
            /// <para>You cannot  use <b>SetTarget</b> to render to a bitmap/command list from multiple device contexts simultaneously. An image is considered “being rendered to” if it has ever been set on a device context within a <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-begindraw">BeginDraw</a>/<a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> timespan. If an attempt is made to render to an image through multiple device contexts, all subsequent device contexts after the first will enter an error state.</para>
            /// <para>Callers wishing to attach an image to a second device context should first call <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> on the first device context.</para>
            /// <para>Here is an example of the correct calling order.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-settarget#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetTarget([Optional] win32.Graphics.Direct2D.ID2D1Image*image)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetTarget_75(pThis, image);
            }

            /// <summary>Gets the target currently associated with the device context.</summary>
            /// <param name = "image">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1image">ID2D1Image</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the target currently associated with the device context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-gettarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If a target is not associated with the device context, <i>target</i> will contain <b>NULL</b> when the methods returns.</para>
            /// <para>If the currently selected target is a bitmap rather than a command list, the application can gain access to the initial bitmaps created by using one of the following methods:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-gettarget#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetTarget([Optional] win32.Graphics.Direct2D.ID2D1Image**image)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetTarget_76(pThis, image);
            }

            /// <inheritdoc cref = "SetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*)"/>
            internal unsafe void SetRenderingControls(in win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS renderingControls)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControlsLocal = &renderingControls)
                {
                    this.SetRenderingControls(renderingControlsLocal);
                }
            }

            internal unsafe void SetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControls)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetRenderingControls_77(pThis, renderingControls);
            }

            /// <inheritdoc cref = "GetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*)"/>
            internal unsafe void GetRenderingControls(out win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS renderingControls)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControlsLocal = &renderingControls)
                {
                    this.GetRenderingControls(renderingControlsLocal);
                }
            }

            /// <summary>Gets the rendering controls that have been applied to the context.</summary>
            /// <param name = "renderingControls">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_rendering_controls">D2D1_RENDERING_CONTROLS</a>*</b></para>
            /// <para>When this method returns, contains a pointer to the rendering controls for this context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getrenderingcontrols#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getrenderingcontrols">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetRenderingControls(win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*renderingControls)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->GetRenderingControls_78(pThis, renderingControls);
            }

            /// <summary>Changes the primitive blend mode that is used for all rendering operations in the device context.</summary>
            /// <param name = "primitiveBlend">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_primitive_blend">D2D1_PRIMITIVE_BLEND</a></b></para>
            /// <para>The primitive blend to use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setprimitiveblend#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The primitive blend will apply to all of the primitive drawn on the context, unless this is overridden with the <i>compositeMode</i> parameter on the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawimage(id2d1effect_constd2d1_point_2f_constd2d1_rect_f_d2d1_interpolation_mode_d2d1_composite_mode)">DrawImage</a> API.</para>
            /// <para>The primitive blend applies to the interior of any primitives drawn on the context. In the case of <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-drawimage(id2d1effect_constd2d1_point_2f_constd2d1_rect_f_d2d1_interpolation_mode_d2d1_composite_mode)">DrawImage</a>, this will be implied by the image rectangle, offset and world transform.</para>
            /// <para>If the primitive blend is anything other than <b>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</b> then ClearType rendering will be turned off. If the application explicitly forces ClearType rendering in these modes, the drawing context will be placed in an error state. D2DERR_WRONG_STATE will be returned from either <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-flush">Flush</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setprimitiveblend#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetPrimitiveBlend(win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND primitiveBlend)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetPrimitiveBlend_79(pThis, primitiveBlend);
            }

            /// <summary>Returns the currently set primitive blend used by the device context.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_primitive_blend">D2D1_PRIMITIVE_BLEND</a></b></para>
            /// <para>The current primitive blend. The default value is <b>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</b>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getprimitiveblend">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND GetPrimitiveBlend()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetPrimitiveBlend_80(pThis);
            }

            /// <summary>Sets what units will be used to interpret values passed into the device context.</summary>
            /// <param name = "unitMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_unit_mode">D2D1_UNIT_MODE</a></b></para>
            /// <para>An enumeration defining how passed-in units will be interpreted by the device context.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setunitmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method will affect all properties and parameters affected by <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-setdpi">SetDpi</a> and <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-getdpi">GetDpi</a>. This affects all coordinates, lengths, and other properties that are not explicitly defined as being in another unit. For example:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-setunitmode#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetUnitMode(win32.Graphics.Direct2D.D2D1_UNIT_MODE unitMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->SetUnitMode_81(pThis, unitMode);
            }

            /// <summary>Gets the mode that is being used to interpret values by the device context.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_unit_mode">D2D1_UNIT_MODE</a></b></para>
            /// <para>The  unit mode.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-getunitmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_UNIT_MODE GetUnitMode()
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetUnitMode_82(pThis);
            }

            /// <inheritdoc cref = "DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION? glyphRunDescription, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                {
                    win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescriptionLocal = glyphRunDescription.HasValue ? glyphRunDescription.Value : default(win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION);
                    this.DrawGlyphRun(baselineOrigin, glyphRunLocal, glyphRunDescription.HasValue ? &glyphRunDescriptionLocal : null, foregroundBrush, measuringMode);
                }
            }

            /// <summary>Draws a series of glyphs to the device context.</summary>
            /// <param name = "baselineOrigin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>Origin of first glyph in the series.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRun">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b></para>
            /// <para>The glyphs to render.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRunDescription">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dwrite/ns-dwrite-dwrite_glyph_run_description">DWRITE_GLYPH_RUN_DESCRIPTION</a>*</b></para>
            /// <para>Supplementary glyph series information.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "foregroundBrush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush that defines the text color.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "measuringMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b></para>
            /// <para>The measuring mode of the glyph series, used to determine the advances and offsets. The default value is DWRITE_MEASURING_MODE_NATURAL.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The <i>glyphRunDescription</i> is ignored when rendering, but can be useful for printing and serialization of rendering commands, such as to an XPS or SVG file. This extends <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun">ID2D1RenderTarget::DrawGlyphRun</a>, which lacked the glyph run description.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-drawglyphrun#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, [Optional] win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*glyphRunDescription, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawGlyphRun_83(pThis, baselineOrigin, glyphRun, glyphRunDescription, foregroundBrush, measuringMode);
            }

            /// <inheritdoc cref = "DrawImage(win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE)"/>
            internal unsafe void DrawImage(win32.Graphics.Direct2D.ID2D1Image*image, win32.Graphics.Direct2D.D2D_POINT_2F? targetOffset, win32.Graphics.Direct2D.D2D_RECT_F? imageRectangle, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE compositeMode)
            {
                win32.Graphics.Direct2D.D2D_POINT_2F targetOffsetLocal = targetOffset.HasValue ? targetOffset.Value : default(win32.Graphics.Direct2D.D2D_POINT_2F);
                win32.Graphics.Direct2D.D2D_RECT_F imageRectangleLocal = imageRectangle.HasValue ? imageRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.DrawImage(image, targetOffset.HasValue ? &targetOffsetLocal : null, imageRectangle.HasValue ? &imageRectangleLocal : null, interpolationMode, compositeMode);
            }

            internal unsafe void DrawImage(win32.Graphics.Direct2D.ID2D1Image*image, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*targetOffset, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*imageRectangle, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE compositeMode)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawImage_84(pThis, image, targetOffset, imageRectangle, interpolationMode, compositeMode);
            }

            /// <inheritdoc cref = "DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_POINT_2F*)"/>
            internal unsafe void DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, win32.Graphics.Direct2D.D2D_POINT_2F? targetOffset)
            {
                win32.Graphics.Direct2D.D2D_POINT_2F targetOffsetLocal = targetOffset.HasValue ? targetOffset.Value : default(win32.Graphics.Direct2D.D2D_POINT_2F);
                this.DrawGdiMetafile(gdiMetafile, targetOffset.HasValue ? &targetOffsetLocal : null);
            }

            internal unsafe void DrawGdiMetafile(win32.Graphics.Direct2D.ID2D1GdiMetafile*gdiMetafile, [Optional] win32.Graphics.Direct2D.D2D_POINT_2F*targetOffset)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawGdiMetafile_85(pThis, gdiMetafile, targetOffset);
            }

            /// <inheritdoc cref = "DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*)"/>
            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F? perspectiveTransform)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_MATRIX_4X4_F perspectiveTransformLocal = perspectiveTransform.HasValue ? perspectiveTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_4X4_F);
                this.DrawBitmap(bitmap, destinationRectangle.HasValue ? &destinationRectangleLocal : null, opacity, interpolationMode, sourceRectangle.HasValue ? &sourceRectangleLocal : null, perspectiveTransform.HasValue ? &perspectiveTransformLocal : null);
            }

            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE interpolationMode, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*perspectiveTransform)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->DrawBitmap_86(pThis, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle, perspectiveTransform);
            }

            /// <inheritdoc cref = "PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*, win32.Graphics.Direct2D.ID2D1Layer*)"/>
            internal unsafe void PushLayer(in win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1 layerParameters, win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*layerParametersLocal = &layerParameters)
                {
                    this.PushLayer(layerParametersLocal, layer);
                }
            }

            internal unsafe void PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*layerParameters, [Optional] win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->PushLayer_87(pThis, layerParameters, layer);
            }

            /// <inheritdoc cref = "InvalidateEffectInputRectangle(win32.Graphics.Direct2D.ID2D1Effect*, uint, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT InvalidateEffectInputRectangle(win32.Graphics.Direct2D.ID2D1Effect*effect, uint input, in win32.Graphics.Direct2D.D2D_RECT_F inputRectangle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*inputRectangleLocal = &inputRectangle)
                {
                    win32.System.Com.HRESULT __result = this.InvalidateEffectInputRectangle(effect, input, inputRectangleLocal);
                    return __result;
                }
            }

            /// <summary>This indicates that a portion of an effect's input is invalid. This method can be called many times.</summary>
            /// <param name = "effect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b></para>
            /// <para>The effect to invalidate.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "input">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The input index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inputRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The rect to invalidate.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-invalidateeffectinputrectangle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT InvalidateEffectInputRectangle(win32.Graphics.Direct2D.ID2D1Effect*effect, uint input, win32.Graphics.Direct2D.D2D_RECT_F*inputRectangle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->InvalidateEffectInputRectangle_88(pThis, effect, input, inputRectangle);
            }

            /// <inheritdoc cref = "GetEffectInvalidRectangleCount(win32.Graphics.Direct2D.ID2D1Effect*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangleCount(win32.Graphics.Direct2D.ID2D1Effect*effect, out uint rectangleCount)
            {
                fixed (uint *rectangleCountLocal = &rectangleCount)
                {
                    win32.System.Com.HRESULT __result = this.GetEffectInvalidRectangleCount(effect, rectangleCountLocal);
                    return __result;
                }
            }

            /// <summary>Gets the number of invalid output rectangles that have accumulated on the effect.</summary>
            /// <param name = "effect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b></para>
            /// <para>The effect to count the invalid rectangles on.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "rectangleCount">
            /// <para>Type: <b>UINT32*</b></para>
            /// <para>The returned rectangle count.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangleCount(win32.Graphics.Direct2D.ID2D1Effect*effect, uint *rectangleCount)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetEffectInvalidRectangleCount_89(pThis, effect, rectangleCount);
            }

            /// <inheritdoc cref = "GetEffectInvalidRectangles(win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangles(win32.Graphics.Direct2D.ID2D1Effect*effect, Span<win32.Graphics.Direct2D.D2D_RECT_F> rectangles)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectanglesLocal = rectangles)
                {
                    win32.System.Com.HRESULT __result = this.GetEffectInvalidRectangles(effect, rectanglesLocal, (uint)rectangles.Length);
                    return __result;
                }
            }

            /// <summary>Gets the invalid rectangles that have accumulated since the last time the effect was drawn and EndDraw was then called on the device context.</summary>
            /// <param name = "effect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b></para>
            /// <para>The effect to get the invalid rectangles from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "rectangles">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>An array of <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a> structures.  You must allocate this to the correct size.  You can get the count of the invalid rectangles using the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectanglecount">GetEffectInvalidRectangleCount</a> method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "rectanglesCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of rectangles to get.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectinvalidrectangles">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetEffectInvalidRectangles(win32.Graphics.Direct2D.ID2D1Effect*effect, win32.Graphics.Direct2D.D2D_RECT_F*rectangles, uint rectanglesCount)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetEffectInvalidRectangles_90(pThis, effect, rectangles, rectanglesCount);
            }

            /// <inheritdoc cref = "GetEffectRequiredInputRectangles(win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*, win32.Graphics.Direct2D.D2D_RECT_F*, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetEffectRequiredInputRectangles(win32.Graphics.Direct2D.ID2D1Effect*renderEffect, win32.Graphics.Direct2D.D2D_RECT_F? renderImageRectangle, ReadOnlySpan<win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION> inputDescriptions, Span<win32.Graphics.Direct2D.D2D_RECT_F> requiredInputRects)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*requiredInputRectsLocal = requiredInputRects)
                {
                    fixed (win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*inputDescriptionsLocal = inputDescriptions)
                    {
                        win32.Graphics.Direct2D.D2D_RECT_F renderImageRectangleLocal = renderImageRectangle.HasValue ? renderImageRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                        if (inputDescriptions.Length != requiredInputRects.Length)
                            throw new ArgumentException();
                        win32.System.Com.HRESULT __result = this.GetEffectRequiredInputRectangles(renderEffect, renderImageRectangle.HasValue ? &renderImageRectangleLocal : null, inputDescriptionsLocal, requiredInputRectsLocal, (uint)requiredInputRects.Length);
                        return __result;
                    }
                }
            }

            /// <summary>Returns the input rectangles that are required to be supplied by the caller to produce the given output rectangle.</summary>
            /// <param name = "renderEffect">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/nn-d2d1_1-id2d1effect">ID2D1Effect</a>*</b></para>
            /// <para>The image whose output is being rendered.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "renderImageRectangle">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The portion of the output image whose inputs are being inspected.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inputDescriptions">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ns-d2d1_1-d2d1_effect_input_description">D2D1_EFFECT_INPUT_DESCRIPTION</a>*</b></para>
            /// <para>A list of the inputs whos rectangles are being queried.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "requiredInputRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>The input rectangles returned to the caller.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "inputCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of inputs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>A failure code, this will typically only be because an effect in the chain returned some error.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-id2d1devicecontext-geteffectrequiredinputrectangles">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetEffectRequiredInputRectangles(win32.Graphics.Direct2D.ID2D1Effect*renderEffect, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*renderImageRectangle, win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*inputDescriptions, win32.Graphics.Direct2D.D2D_RECT_F*requiredInputRects, uint inputCount)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    return lpVtbl->GetEffectRequiredInputRectangles_91(pThis, renderEffect, renderImageRectangle, inputDescriptions, requiredInputRects, inputCount);
            }

            /// <inheritdoc cref = "FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.FillOpacityMask(opacityMask, brush, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1DeviceContext*pThis = &this)
                    lpVtbl->FillOpacityMask_92(pThis, opacityMask, brush, destinationRectangle, sourceRectangle);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmap_5;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmapFromWicBitmap_6;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateSharedBitmap_7;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**, win32.System.Com.HRESULT>CreateBitmapBrush_8;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**, win32.System.Com.HRESULT>CreateSolidColorBrush_9;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**, win32.System.Com.HRESULT>CreateGradientStopCollection_10;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**, win32.System.Com.HRESULT>CreateLinearGradientBrush_11;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**, win32.System.Com.HRESULT>CreateRadialGradientBrush_12;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**, win32.System.Com.HRESULT>CreateCompatibleRenderTarget_13;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**, win32.System.Com.HRESULT>CreateLayer_14;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Mesh**, win32.System.Com.HRESULT>CreateMesh_15;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawLine_16;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRectangle_17;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRectangle_18;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRoundedRectangle_19;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRoundedRectangle_20;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawEllipse_21;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillEllipse_22;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawGeometry_23;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillGeometry_24;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Mesh*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillMesh_25;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, void>FillOpacityMask_26;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, void>DrawBitmap_27;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawText_28;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.IDWriteTextLayout*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, void>DrawTextLayout_29;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawGlyphRun_30;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>SetTransform_31;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>GetTransform_32;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>SetAntialiasMode_33;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE>GetAntialiasMode_34;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE, void>SetTextAntialiasMode_35;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE>GetTextAntialiasMode_36;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.DirectWrite.IDWriteRenderingParams*, void>SetTextRenderingParams_37;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.DirectWrite.IDWriteRenderingParams**, void>GetTextRenderingParams_38;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, ulong, ulong, void>SetTags_39;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, ulong *, ulong *, void>GetTags_40;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*, void>PushLayer_41;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, void>PopLayer_42;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, ulong *, ulong *, win32.System.Com.HRESULT>Flush_43;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>SaveDrawingState_44;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>RestoreDrawingState_45;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>PushAxisAlignedClip_46;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, void>PopAxisAlignedClip_47;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_COLOR_F*, void>Clear_48;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, void>BeginDraw_49;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, ulong *, ulong *, win32.System.Com.HRESULT>EndDraw_50;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT>GetPixelFormat_51;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, float, float, void>SetDpi_52;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, float *, float *, void>GetDpi_53;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_SIZE_F>GetSize_54;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_SIZE_U>GetPixelSize_55;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, uint>GetMaximumBitmapSize_56;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.System.SystemServices.BOOL>IsSupported_57;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**, win32.System.Com.HRESULT>CreateBitmap_58;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**, win32.System.Com.HRESULT>CreateBitmapFromWicBitmap_59;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, byte *, uint, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContext_60;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContextFromFilename_61;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Imaging.IWICColorContext*, win32.Graphics.Direct2D.ID2D1ColorContext**, win32.System.Com.HRESULT>CreateColorContextFromWicColorContext_62;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Dxgi.IDXGISurface*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1*, win32.Graphics.Direct2D.ID2D1Bitmap1**, win32.System.Com.HRESULT>CreateBitmapFromDxgiSurface_63;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, global::System.Guid*, win32.Graphics.Direct2D.ID2D1Effect**, win32.System.Com.HRESULT>CreateEffect_64;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.D2D1_COLOR_INTERPOLATION_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection1**, win32.System.Com.HRESULT>CreateGradientStopCollection_65;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1ImageBrush**, win32.System.Com.HRESULT>CreateImageBrush_66;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush1**, win32.System.Com.HRESULT>CreateBitmapBrush_67;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1CommandList**, win32.System.Com.HRESULT>CreateCommandList_68;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Dxgi.DXGI_FORMAT, win32.System.SystemServices.BOOL>IsDxgiFormatSupported_69;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.System.SystemServices.BOOL>IsBufferPrecisionSupported_70;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetImageLocalBounds_71;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetImageWorldBounds_72;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetGlyphRunWorldBounds_73;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Device**, void>GetDevice_74;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Image*, void>SetTarget_75;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Image**, void>GetTarget_76;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*, void>SetRenderingControls_77;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS*, void>GetRenderingControls_78;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND, void>SetPrimitiveBlend_79;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND>GetPrimitiveBlend_80;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_UNIT_MODE, void>SetUnitMode_81;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_UNIT_MODE>GetUnitMode_82;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawGlyphRun_83;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Image*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D1_COMPOSITE_MODE, void>DrawImage_84;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1GdiMetafile*, win32.Graphics.Direct2D.D2D_POINT_2F*, void>DrawGdiMetafile_85;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_MATRIX_4X4_F*, void>DrawBitmap_86;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1*, win32.Graphics.Direct2D.ID2D1Layer*, void>PushLayer_87;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Effect*, uint, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>InvalidateEffectInputRectangle_88;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Effect*, uint *, win32.System.Com.HRESULT>GetEffectInvalidRectangleCount_89;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, uint, win32.System.Com.HRESULT>GetEffectInvalidRectangles_90;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Effect*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION*, win32.Graphics.Direct2D.D2D_RECT_F*, uint, win32.System.Com.HRESULT>GetEffectRequiredInputRectangles_91;
                internal delegate *unmanaged[Stdcall]<ID2D1DeviceContext*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, void>FillOpacityMask_92;
            }

            private Vtbl*lpVtbl;
        }
    }
}