// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("9DBE4C0D-3572-4DD9-9825-5530813BB712")]
        internal unsafe struct ID2D1SvgPointCollection
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            internal unsafe void GetElement([Optional] win32.Graphics.Direct2D.ID2D1SvgElement**element)
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    lpVtbl->GetElement_5(pThis, element);
            }

            internal unsafe win32.System.Com.HRESULT Clone(win32.Graphics.Direct2D.ID2D1SvgAttribute**attribute)
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->Clone_6(pThis, attribute);
            }

            /// <summary>Removes points from the end of the array.</summary>
            /// <param name = "pointsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Specifies how many points to remove.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-removepointsatend#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-removepointsatend">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT RemovePointsAtEnd(uint pointsCount)
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->RemovePointsAtEnd_7(pThis, pointsCount);
            }

            /// <inheritdoc cref = "UpdatePoints(win32.Graphics.Direct2D.D2D_POINT_2F*, uint, uint)"/>
            internal unsafe win32.System.Com.HRESULT UpdatePoints(ReadOnlySpan<win32.Graphics.Direct2D.D2D_POINT_2F> points, uint startIndex)
            {
                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pointsLocal = points)
                {
                    win32.System.Com.HRESULT __result = this.UpdatePoints(pointsLocal, (uint)points.Length, startIndex);
                    return __result;
                }
            }

            /// <summary>Updates the points array. Existing points not updated by this method are preserved. The array is resized larger if necessary to accomodate the new points.</summary>
            /// <param name = "points">
            /// <para>Type: <b>const D2D1_POINT_2F*</b></para>
            /// <para>The points array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-updatepoints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of points to update.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-updatepoints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "startIndex">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index at which to begin updating points. Must be less than or equal to the size of the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-updatepoints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-updatepoints">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT UpdatePoints(win32.Graphics.Direct2D.D2D_POINT_2F*points, uint pointsCount, uint startIndex)
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->UpdatePoints_8(pThis, points, pointsCount, startIndex);
            }

            /// <inheritdoc cref = "GetPoints(win32.Graphics.Direct2D.D2D_POINT_2F*, uint, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetPoints(Span<win32.Graphics.Direct2D.D2D_POINT_2F> points, uint startIndex)
            {
                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pointsLocal = points)
                {
                    win32.System.Com.HRESULT __result = this.GetPoints(pointsLocal, (uint)points.Length, startIndex);
                    return __result;
                }
            }

            /// <summary>Gets points from the points array.</summary>
            /// <param name = "points">
            /// <para>Type: <b>D2D1_POINT_2F*</b></para>
            /// <para>Buffer to contain the points.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-getpoints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The element count of the buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-getpoints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "startIndex">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index of the first point to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-getpoints#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-getpoints">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPoints(win32.Graphics.Direct2D.D2D_POINT_2F*points, uint pointsCount, uint startIndex)
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->GetPoints_9(pThis, points, pointsCount, startIndex);
            }

            /// <summary>Gets the number of points in the array.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Returns the number of points in the array.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgpointcollection-getpointscount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetPointsCount()
            {
                fixed (ID2D1SvgPointCollection*pThis = &this)
                    return lpVtbl->GetPointsCount_10(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, win32.Graphics.Direct2D.ID2D1SvgElement**, void>GetElement_5;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, win32.Graphics.Direct2D.ID2D1SvgAttribute**, win32.System.Com.HRESULT>Clone_6;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, uint, win32.System.Com.HRESULT>RemovePointsAtEnd_7;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, win32.Graphics.Direct2D.D2D_POINT_2F*, uint, uint, win32.System.Com.HRESULT>UpdatePoints_8;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, win32.Graphics.Direct2D.D2D_POINT_2F*, uint, uint, win32.System.Com.HRESULT>GetPoints_9;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgPointCollection*, uint>GetPointsCount_10;
            }

            private Vtbl*lpVtbl;
        }
    }
}