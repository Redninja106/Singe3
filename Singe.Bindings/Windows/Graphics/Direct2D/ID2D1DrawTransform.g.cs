// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("36BFDCB6-9739-435D-A30D-A653BEFF6A6F")]
        internal unsafe struct ID2D1DrawTransform
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal uint GetInputCount()
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->GetInputCount_4(pThis);
            }

            /// <inheritdoc cref = "MapOutputRectToInputRects(win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint)"/>
            internal unsafe win32.System.Com.HRESULT MapOutputRectToInputRects(in win32.UI.DisplayDevices.RECT outputRect, Span<win32.UI.DisplayDevices.RECT> inputRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*inputRectsLocal = inputRects)
                {
                    fixed (win32.UI.DisplayDevices.RECT*outputRectLocal = &outputRect)
                    {
                        win32.System.Com.HRESULT __result = this.MapOutputRectToInputRects(outputRectLocal, inputRectsLocal, (uint)inputRects.Length);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT MapOutputRectToInputRects(win32.UI.DisplayDevices.RECT*outputRect, win32.UI.DisplayDevices.RECT*inputRects, uint inputRectsCount)
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->MapOutputRectToInputRects_5(pThis, outputRect, inputRects, inputRectsCount);
            }

            /// <inheritdoc cref = "MapInputRectsToOutputRect(win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT MapInputRectsToOutputRect(ReadOnlySpan<win32.UI.DisplayDevices.RECT> inputRects, ReadOnlySpan<win32.UI.DisplayDevices.RECT> inputOpaqueSubRects, out win32.UI.DisplayDevices.RECT outputRect, out win32.UI.DisplayDevices.RECT outputOpaqueSubRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*outputOpaqueSubRectLocal = &outputOpaqueSubRect)
                {
                    fixed (win32.UI.DisplayDevices.RECT*outputRectLocal = &outputRect)
                    {
                        fixed (win32.UI.DisplayDevices.RECT*inputOpaqueSubRectsLocal = inputOpaqueSubRects)
                        {
                            fixed (win32.UI.DisplayDevices.RECT*inputRectsLocal = inputRects)
                            {
                                if (inputRects.Length != inputOpaqueSubRects.Length)
                                    throw new ArgumentException();
                                win32.System.Com.HRESULT __result = this.MapInputRectsToOutputRect(inputRectsLocal, inputOpaqueSubRectsLocal, (uint)inputOpaqueSubRects.Length, outputRectLocal, outputOpaqueSubRectLocal);
                                return __result;
                            }
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT MapInputRectsToOutputRect(win32.UI.DisplayDevices.RECT*inputRects, win32.UI.DisplayDevices.RECT*inputOpaqueSubRects, uint inputRectCount, win32.UI.DisplayDevices.RECT*outputRect, win32.UI.DisplayDevices.RECT*outputOpaqueSubRect)
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->MapInputRectsToOutputRect_6(pThis, inputRects, inputOpaqueSubRects, inputRectCount, outputRect, outputOpaqueSubRect);
            }

            /// <inheritdoc cref = "MapInvalidRect(uint, win32.UI.DisplayDevices.RECT, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe win32.System.Com.HRESULT MapInvalidRect(uint inputIndex, win32.UI.DisplayDevices.RECT invalidInputRect, out win32.UI.DisplayDevices.RECT invalidOutputRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*invalidOutputRectLocal = &invalidOutputRect)
                {
                    win32.System.Com.HRESULT __result = this.MapInvalidRect(inputIndex, invalidInputRect, invalidOutputRectLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT MapInvalidRect(uint inputIndex, win32.UI.DisplayDevices.RECT invalidInputRect, win32.UI.DisplayDevices.RECT*invalidOutputRect)
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->MapInvalidRect_7(pThis, inputIndex, invalidInputRect, invalidOutputRect);
            }

            /// <summary>Provides the GPU render info interface to the transform implementation.</summary>
            /// <param name = "drawInfo">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1drawinfo">ID2D1DrawInfo</a>*</b></para>
            /// <para>The interface supplied back to the calling method to allow it to specify the GPU based transform pass.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawtransform-setdrawinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>Any HRESULT value can be returned when implementing this method. A failure will be returned from the corresponding <a href = "/windows/desktop/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1DeviceContext::EndDraw</a> call.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawtransform-setdrawinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetDrawInfo(win32.Graphics.Direct2D.ID2D1DrawInfo*drawInfo)
            {
                fixed (ID2D1DrawTransform*pThis = &this)
                    return lpVtbl->SetDrawInfo_8(pThis, drawInfo);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, uint>GetInputCount_4;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint, win32.System.Com.HRESULT>MapOutputRectToInputRects_5;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, uint, win32.UI.DisplayDevices.RECT*, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>MapInputRectsToOutputRect_6;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, uint, win32.UI.DisplayDevices.RECT, win32.UI.DisplayDevices.RECT*, win32.System.Com.HRESULT>MapInvalidRect_7;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawTransform*, win32.Graphics.Direct2D.ID2D1DrawInfo*, win32.System.Com.HRESULT>SetDrawInfo_8;
            }

            private Vtbl*lpVtbl;
        }
    }
}