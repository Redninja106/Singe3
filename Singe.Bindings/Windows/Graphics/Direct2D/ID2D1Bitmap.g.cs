// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("A2296057-EA42-4099-983B-539FB6505426")]
        internal unsafe struct ID2D1Bitmap
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <summary>Returns the size, in device-independent pixels (DIPs), of the bitmap.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
            /// <para>The size, in DIPs, of the bitmap.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-getsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D_SIZE_F GetSize()
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->GetSize_5(pThis);
            }

            /// <summary>Returns the size, in device-dependent units (pixels), of the bitmap.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
            /// <para>The size, in pixels, of the bitmap.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-getpixelsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D_SIZE_U GetPixelSize()
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->GetPixelSize_6(pThis);
            }

            /// <summary>Retrieves the pixel format and alpha mode of the bitmap.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dcommon/ns-dcommon-d2d1_pixel_format">D2D1_PIXEL_FORMAT</a></b></para>
            /// <para>The pixel format and alpha mode of the bitmap.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-getpixelformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT GetPixelFormat()
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->GetPixelFormat_7(pThis);
            }

            /// <inheritdoc cref = "GetDpi(float *, float *)"/>
            internal unsafe void GetDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            /// <summary>Return the dots per inch (DPI) of the bitmap.</summary>
            /// <param name = "dpiX">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>The horizontal DPI of the image. You must allocate storage for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dpiY">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>The vertical DPI of the image.  You must allocate storage for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-getdpi">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    lpVtbl->GetDpi_8(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "CopyFromBitmap(win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_U*)"/>
            internal unsafe win32.System.Com.HRESULT CopyFromBitmap(win32.Graphics.Direct2D.D2D_POINT_2U? destPoint, win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_U? srcRect)
            {
                win32.Graphics.Direct2D.D2D_POINT_2U destPointLocal = destPoint.HasValue ? destPoint.Value : default(win32.Graphics.Direct2D.D2D_POINT_2U);
                win32.Graphics.Direct2D.D2D_RECT_U srcRectLocal = srcRect.HasValue ? srcRect.Value : default(win32.Graphics.Direct2D.D2D_RECT_U);
                win32.System.Com.HRESULT __result = this.CopyFromBitmap(destPoint.HasValue ? &destPointLocal : null, bitmap, srcRect.HasValue ? &srcRectLocal : null);
                return __result;
            }

            /// <summary>Copies the specified region from the specified bitmap into the current bitmap.</summary>
            /// <param name = "destPoint">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2u">D2D1_POINT_2U</a>*</b></para>
            /// <para>In the current bitmap, the upper-left corner of the area to which the region specified by <i>srcRect</i> is copied.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrombitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>*</b></para>
            /// <para>The bitmap to copy from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrombitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "srcRect">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-rect-u">D2D1_RECT_U</a>*</b></para>
            /// <para>The area of <i>bitmap</i> to copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrombitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrombitmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CopyFromBitmap([Optional] win32.Graphics.Direct2D.D2D_POINT_2U*destPoint, win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_U*srcRect)
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->CopyFromBitmap_9(pThis, destPoint, bitmap, srcRect);
            }

            /// <inheritdoc cref = "CopyFromRenderTarget(win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_RECT_U*)"/>
            internal unsafe win32.System.Com.HRESULT CopyFromRenderTarget(win32.Graphics.Direct2D.D2D_POINT_2U? destPoint, win32.Graphics.Direct2D.ID2D1RenderTarget*renderTarget, win32.Graphics.Direct2D.D2D_RECT_U? srcRect)
            {
                win32.Graphics.Direct2D.D2D_POINT_2U destPointLocal = destPoint.HasValue ? destPoint.Value : default(win32.Graphics.Direct2D.D2D_POINT_2U);
                win32.Graphics.Direct2D.D2D_RECT_U srcRectLocal = srcRect.HasValue ? srcRect.Value : default(win32.Graphics.Direct2D.D2D_RECT_U);
                win32.System.Com.HRESULT __result = this.CopyFromRenderTarget(destPoint.HasValue ? &destPointLocal : null, renderTarget, srcRect.HasValue ? &srcRectLocal : null);
                return __result;
            }

            /// <summary>Copies the specified region from the specified render target into the current bitmap.</summary>
            /// <param name = "destPoint">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2u">D2D1_POINT_2U</a>*</b></para>
            /// <para>In the current bitmap, the upper-left corner of the area to which the region specified by <i>srcRect</i> is copied.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfromrendertarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "renderTarget">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1rendertarget">ID2D1RenderTarget</a>*</b></para>
            /// <para>The render target that contains the region to copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfromrendertarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "srcRect">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-rect-u">D2D1_RECT_U</a>*</b></para>
            /// <para>The area of <i>renderTarget</i> to copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfromrendertarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfromrendertarget">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CopyFromRenderTarget([Optional] win32.Graphics.Direct2D.D2D_POINT_2U*destPoint, win32.Graphics.Direct2D.ID2D1RenderTarget*renderTarget, [Optional] win32.Graphics.Direct2D.D2D_RECT_U*srcRect)
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->CopyFromRenderTarget_10(pThis, destPoint, renderTarget, srcRect);
            }

            /// <inheritdoc cref = "CopyFromMemory(win32.Graphics.Direct2D.D2D_RECT_U*, void *, uint)"/>
            internal unsafe win32.System.Com.HRESULT CopyFromMemory(win32.Graphics.Direct2D.D2D_RECT_U? dstRect, void *srcData, uint pitch)
            {
                win32.Graphics.Direct2D.D2D_RECT_U dstRectLocal = dstRect.HasValue ? dstRect.Value : default(win32.Graphics.Direct2D.D2D_RECT_U);
                win32.System.Com.HRESULT __result = this.CopyFromMemory(dstRect.HasValue ? &dstRectLocal : null, srcData, pitch);
                return __result;
            }

            /// <summary>Copies the specified region from memory into the current bitmap.</summary>
            /// <param name = "dstRect">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-rect-u">D2D1_RECT_U</a>*</b></para>
            /// <para>In the current bitmap, the rectangle to which the region specified by <i>srcRect</i> is copied.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "srcData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>The data to copy.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pitch">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The stride, or pitch, of the source bitmap stored in <i>srcData</i>. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1bitmap-copyfrommemory">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CopyFromMemory([Optional] win32.Graphics.Direct2D.D2D_RECT_U*dstRect, void *srcData, uint pitch)
            {
                fixed (ID2D1Bitmap*pThis = &this)
                    return lpVtbl->CopyFromMemory_11(pThis, dstRect, srcData, pitch);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_SIZE_F>GetSize_5;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_SIZE_U>GetPixelSize_6;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT>GetPixelFormat_7;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, float *, float *, void>GetDpi_8;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_U*, win32.System.Com.HRESULT>CopyFromBitmap_9;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_POINT_2U*, win32.Graphics.Direct2D.ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_RECT_U*, win32.System.Com.HRESULT>CopyFromRenderTarget_10;
                internal delegate *unmanaged[Stdcall]<ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_U*, void *, uint, win32.System.Com.HRESULT>CopyFromMemory_11;
            }

            private Vtbl*lpVtbl;
        }
    }
}