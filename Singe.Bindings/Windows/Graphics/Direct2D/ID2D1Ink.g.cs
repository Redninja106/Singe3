// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("B499923B-7029-478F-A8B3-432C7C5F5312")]
        internal unsafe struct ID2D1Ink
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1Ink*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <inheritdoc cref = "SetStartPoint(win32.Graphics.Direct2D.D2D1_INK_POINT*)"/>
            internal unsafe void SetStartPoint(in win32.Graphics.Direct2D.D2D1_INK_POINT startPoint)
            {
                fixed (win32.Graphics.Direct2D.D2D1_INK_POINT*startPointLocal = &startPoint)
                {
                    this.SetStartPoint(startPointLocal);
                }
            }

            internal unsafe void SetStartPoint(win32.Graphics.Direct2D.D2D1_INK_POINT*startPoint)
            {
                fixed (ID2D1Ink*pThis = &this)
                    lpVtbl->SetStartPoint_5(pThis, startPoint);
            }

            /// <summary>Retrieves the starting point for this ink object.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_ink_point">D2D1_INK_POINT</a></b></para>
            /// <para>The starting point for this ink object.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getstartpoint">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_INK_POINT GetStartPoint()
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->GetStartPoint_6(pThis);
            }

            /// <inheritdoc cref = "AddSegments(win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*, uint)"/>
            internal unsafe win32.System.Com.HRESULT AddSegments(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT> segments)
            {
                fixed (win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segmentsLocal = segments)
                {
                    win32.System.Com.HRESULT __result = this.AddSegments(segmentsLocal, (uint)segments.Length);
                    return __result;
                }
            }

            /// <summary>Adds the given segments to the end of this ink object.</summary>
            /// <param name = "segments">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_ink_bezier_segment">D2D1_INK_BEZIER_SEGMENT</a>*</b></para>
            /// <para>A pointer to an array of segments to be added to this ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-addsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "segmentsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of segments to be added to this ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-addsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-addsegments">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AddSegments(win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segments, uint segmentsCount)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->AddSegments_7(pThis, segments, segmentsCount);
            }

            /// <summary>Removes the given number of segments from the end of this ink object.</summary>
            /// <param name = "segmentsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of segments to be removed from the end of this ink object. Note that segmentsCount must be less or equal to the number of segments in the ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-removesegmentsatend#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-removesegmentsatend">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT RemoveSegmentsAtEnd(uint segmentsCount)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->RemoveSegmentsAtEnd_8(pThis, segmentsCount);
            }

            /// <inheritdoc cref = "SetSegments(uint, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*, uint)"/>
            internal unsafe win32.System.Com.HRESULT SetSegments(uint startSegment, ReadOnlySpan<win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT> segments)
            {
                fixed (win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segmentsLocal = segments)
                {
                    win32.System.Com.HRESULT __result = this.SetSegments(startSegment, segmentsLocal, (uint)segments.Length);
                    return __result;
                }
            }

            /// <summary>Updates the specified segments in this ink object with new control points.</summary>
            /// <param name = "startSegment">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index of the first segment in this ink object to update.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-setsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "segments">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_ink_bezier_segment">D2D1_INK_BEZIER_SEGMENT</a>*</b></para>
            /// <para>A pointer to the array of segment data to be used in the update.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-setsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "segmentsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of segments in this ink object that will be updated with new data. Note that segmentsCount must be less than or equal to the number of segments in the ink object minus startSegment.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-setsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-setsegments">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetSegments(uint startSegment, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segments, uint segmentsCount)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->SetSegments_9(pThis, startSegment, segments, segmentsCount);
            }

            /// <inheritdoc cref = "SetSegmentAtEnd(win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*)"/>
            internal unsafe win32.System.Com.HRESULT SetSegmentAtEnd(in win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT segment)
            {
                fixed (win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segmentLocal = &segment)
                {
                    win32.System.Com.HRESULT __result = this.SetSegmentAtEnd(segmentLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetSegmentAtEnd(win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segment)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->SetSegmentAtEnd_10(pThis, segment);
            }

            /// <summary>Returns the number of segments in this ink object.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32 </b></para>
            /// <para>Returns the number of segments in this ink object.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getsegmentcount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetSegmentCount()
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->GetSegmentCount_11(pThis);
            }

            /// <inheritdoc cref = "GetSegments(uint, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*, uint)"/>
            internal unsafe win32.System.Com.HRESULT GetSegments(uint startSegment, Span<win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT> segments)
            {
                fixed (win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segmentsLocal = segments)
                {
                    win32.System.Com.HRESULT __result = this.GetSegments(startSegment, segmentsLocal, (uint)segments.Length);
                    return __result;
                }
            }

            /// <summary>Retrieves the specified subset of segments stored in this ink object.</summary>
            /// <param name = "startSegment">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index of the first segment in this ink object to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "segments">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_ink_bezier_segment">D2D1_INK_BEZIER_SEGMENT</a>*</b></para>
            /// <para>When this method returns, contains a pointer to an array of retrieved segments.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "segmentsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of segments to retrieve. Note that segmentsCount must be less than or equal to the number of segments in the ink object minus startSegment.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getsegments#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getsegments">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSegments(uint startSegment, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*segments, uint segmentsCount)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->GetSegments_12(pThis, startSegment, segments, segmentsCount);
            }

            /// <inheritdoc cref = "StreamAsGeometry(win32.Graphics.Direct2D.ID2D1InkStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*)"/>
            internal unsafe win32.System.Com.HRESULT StreamAsGeometry(win32.Graphics.Direct2D.ID2D1InkStyle*inkStyle, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                win32.System.Com.HRESULT __result = this.StreamAsGeometry(inkStyle, worldTransform.HasValue ? &worldTransformLocal : null, flatteningTolerance, geometrySink);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT StreamAsGeometry([Optional] win32.Graphics.Direct2D.ID2D1InkStyle*inkStyle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, float flatteningTolerance, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*geometrySink)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->StreamAsGeometry_13(pThis, inkStyle, worldTransform, flatteningTolerance, geometrySink);
            }

            /// <inheritdoc cref = "GetBounds(win32.Graphics.Direct2D.ID2D1InkStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe win32.System.Com.HRESULT GetBounds(win32.Graphics.Direct2D.ID2D1InkStyle*inkStyle, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F? worldTransform, out win32.Graphics.Direct2D.D2D_RECT_F bounds)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*boundsLocal = &bounds)
                {
                    win32.Graphics.Direct2D.D2D_MATRIX_3X2_F worldTransformLocal = worldTransform.HasValue ? worldTransform.Value : default(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F);
                    win32.System.Com.HRESULT __result = this.GetBounds(inkStyle, worldTransform.HasValue ? &worldTransformLocal : null, boundsLocal);
                    return __result;
                }
            }

            /// <summary>Retrieve the bounds of the geometry, with an optional applied transform.</summary>
            /// <param name = "inkStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/nn-d2d1_3-id2d1inkstyle">ID2D1InkStyle</a>*</b></para>
            /// <para>The ink style to be used in determining the bounds of this ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "worldTransform">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
            /// <para>The world transform to be used in determining the bounds of this ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bounds">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
            /// <para>When this method returns, contains the bounds of this ink object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getbounds#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-id2d1ink-getbounds">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetBounds([Optional] win32.Graphics.Direct2D.ID2D1InkStyle*inkStyle, [Optional] win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*worldTransform, win32.Graphics.Direct2D.D2D_RECT_F*bounds)
            {
                fixed (ID2D1Ink*pThis = &this)
                    return lpVtbl->GetBounds_14(pThis, inkStyle, worldTransform, bounds);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, win32.Graphics.Direct2D.D2D1_INK_POINT*, void>SetStartPoint_5;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, win32.Graphics.Direct2D.D2D1_INK_POINT>GetStartPoint_6;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*, uint, win32.System.Com.HRESULT>AddSegments_7;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, uint, win32.System.Com.HRESULT>RemoveSegmentsAtEnd_8;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, uint, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*, uint, win32.System.Com.HRESULT>SetSegments_9;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*, win32.System.Com.HRESULT>SetSegmentAtEnd_10;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, uint>GetSegmentCount_11;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, uint, win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT*, uint, win32.System.Com.HRESULT>GetSegments_12;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, win32.Graphics.Direct2D.ID2D1InkStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, float, win32.Graphics.Direct2D.ID2D1SimplifiedGeometrySink*, win32.System.Com.HRESULT>StreamAsGeometry_13;
                internal delegate *unmanaged[Stdcall]<ID2D1Ink*, win32.Graphics.Direct2D.ID2D1InkStyle*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.System.Com.HRESULT>GetBounds_14;
            }

            private Vtbl*lpVtbl;
        }
    }
}