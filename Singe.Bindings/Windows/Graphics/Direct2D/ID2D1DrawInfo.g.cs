// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("693CE632-7F2F-45DE-93FE-18D88B37AA21")]
        internal unsafe struct ID2D1DrawInfo
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal win32.System.Com.HRESULT SetInputDescription(uint inputIndex, win32.Graphics.Direct2D.D2D1_INPUT_DESCRIPTION inputDescription)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->SetInputDescription_4(pThis, inputIndex, inputDescription);
            }

            internal win32.System.Com.HRESULT SetOutputBuffer(win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION bufferPrecision, win32.Graphics.Direct2D.D2D1_CHANNEL_DEPTH channelDepth)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->SetOutputBuffer_5(pThis, bufferPrecision, channelDepth);
            }

            internal void SetCached(win32.System.SystemServices.BOOL isCached)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    lpVtbl->SetCached_6(pThis, isCached);
            }

            internal void SetInstructionCountHint(uint instructionCount)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    lpVtbl->SetInstructionCountHint_7(pThis, instructionCount);
            }

            /// <inheritdoc cref = "SetPixelShaderConstantBuffer(byte *, uint)"/>
            internal unsafe win32.System.Com.HRESULT SetPixelShaderConstantBuffer(ReadOnlySpan<byte> buffer)
            {
                fixed (byte *bufferLocal = buffer)
                {
                    win32.System.Com.HRESULT __result = this.SetPixelShaderConstantBuffer(bufferLocal, (uint)buffer.Length);
                    return __result;
                }
            }

            /// <summary>Sets the constant buffer for this transform's pixel shader.</summary>
            /// <param name = "buffer">
            /// <para>Type: <b>const BYTE*</b></para>
            /// <para>The data applied to the constant buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setpixelshaderconstantbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bufferCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of bytes of data in the constant buffer</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setpixelshaderconstantbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setpixelshaderconstantbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPixelShaderConstantBuffer(byte *buffer, uint bufferCount)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->SetPixelShaderConstantBuffer_8(pThis, buffer, bufferCount);
            }

            /// <summary>Sets the resource texture corresponding to the given shader texture index.</summary>
            /// <param name = "textureIndex">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The index of the texture to be bound to the pixel shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "resourceTexture">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1resourcetexture">ID2D1ResourceTexture</a>*</b></para>
            /// <para>The created resource texture.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setresourcetexture#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setresourcetexture">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetResourceTexture(uint textureIndex, win32.Graphics.Direct2D.ID2D1ResourceTexture*resourceTexture)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->SetResourceTexture_9(pThis, textureIndex, resourceTexture);
            }

            /// <inheritdoc cref = "SetVertexShaderConstantBuffer(byte *, uint)"/>
            internal unsafe win32.System.Com.HRESULT SetVertexShaderConstantBuffer(ReadOnlySpan<byte> buffer)
            {
                fixed (byte *bufferLocal = buffer)
                {
                    win32.System.Com.HRESULT __result = this.SetVertexShaderConstantBuffer(bufferLocal, (uint)buffer.Length);
                    return __result;
                }
            }

            /// <summary>Sets the constant buffer for this transform's vertex shader.</summary>
            /// <param name = "buffer">
            /// <para>Type: <b>const BYTE*</b></para>
            /// <para>The data applied to the constant buffer</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexshaderconstantbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bufferCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of bytes of data in the constant buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexshaderconstantbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexshaderconstantbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetVertexShaderConstantBuffer(byte *buffer, uint bufferCount)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->SetVertexShaderConstantBuffer_10(pThis, buffer, bufferCount);
            }

            /// <inheritdoc cref = "SetPixelShader(global::System.Guid*, win32.Graphics.Direct2D.D2D1_PIXEL_OPTIONS)"/>
            internal unsafe win32.System.Com.HRESULT SetPixelShader(in global::System.Guid shaderId, win32.Graphics.Direct2D.D2D1_PIXEL_OPTIONS pixelOptions)
            {
                fixed (global::System.Guid*shaderIdLocal = &shaderId)
                {
                    win32.System.Com.HRESULT __result = this.SetPixelShader(shaderIdLocal, pixelOptions);
                    return __result;
                }
            }

            /// <summary>Set the shader instructions for this transform.</summary>
            /// <param name = "shaderId">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The resource id for the  shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pixelOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ne-d2d1effectauthor-d2d1_pixel_options">D2D1_PIXEL_OPTIONS</a></b></para>
            /// <para>Additional information provided to the renderer to indicate the operations the pixel shader does.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setpixelshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPixelShader(global::System.Guid*shaderId, win32.Graphics.Direct2D.D2D1_PIXEL_OPTIONS pixelOptions)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->SetPixelShader_11(pThis, shaderId, pixelOptions);
            }

            /// <inheritdoc cref = "SetVertexProcessing(win32.Graphics.Direct2D.ID2D1VertexBuffer*, win32.Graphics.Direct2D.D2D1_VERTEX_OPTIONS, win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION*, win32.Graphics.Direct2D.D2D1_VERTEX_RANGE*, global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT SetVertexProcessing(win32.Graphics.Direct2D.ID2D1VertexBuffer*vertexBuffer, win32.Graphics.Direct2D.D2D1_VERTEX_OPTIONS vertexOptions, win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION? blendDescription, win32.Graphics.Direct2D.D2D1_VERTEX_RANGE? vertexRange, global::System.Guid? vertexShader)
            {
                win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION blendDescriptionLocal = blendDescription.HasValue ? blendDescription.Value : default(win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION);
                win32.Graphics.Direct2D.D2D1_VERTEX_RANGE vertexRangeLocal = vertexRange.HasValue ? vertexRange.Value : default(win32.Graphics.Direct2D.D2D1_VERTEX_RANGE);
                global::System.Guid vertexShaderLocal = vertexShader.HasValue ? vertexShader.Value : default(global::System.Guid);
                win32.System.Com.HRESULT __result = this.SetVertexProcessing(vertexBuffer, vertexOptions, blendDescription.HasValue ? &blendDescriptionLocal : null, vertexRange.HasValue ? &vertexRangeLocal : null, vertexShader.HasValue ? &vertexShaderLocal : null);
                return __result;
            }

            /// <summary>Sets a vertex buffer, a corresponding vertex shader, and options to control how the vertices are to be handled by the Direct2D context.</summary>
            /// <param name = "vertexBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/nn-d2d1effectauthor-id2d1vertexbuffer">ID2D1VertexBuffer</a>*</b></para>
            /// <para>The vertex buffer, if this is cleared, the default vertex shader and mapping to the transform rectangles will be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexprocessing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "vertexOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ne-d2d1effectauthor-d2d1_vertex_options">D2D1_VERTEX_OPTIONS</a></b></para>
            /// <para>Options that influence how the renderer will interact with the vertex shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexprocessing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "blendDescription">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ns-d2d1effectauthor-d2d1_blend_description">D2D1_BLEND_DESCRIPTION</a>*</b></para>
            /// <para>How the vertices will be blended with the output texture.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexprocessing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "vertexRange">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1effectauthor/ns-d2d1effectauthor-d2d1_vertex_range">D2D1_VERTEX_RANGE</a>*</b></para>
            /// <para>The set of vertices to use from the buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexprocessing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "vertexShader">
            /// <para>Type: <b>GUID*</b></para>
            /// <para>The GUID of the vertex shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexprocessing#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1effectauthor/nf-d2d1effectauthor-id2d1drawinfo-setvertexprocessing">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetVertexProcessing([Optional] win32.Graphics.Direct2D.ID2D1VertexBuffer*vertexBuffer, win32.Graphics.Direct2D.D2D1_VERTEX_OPTIONS vertexOptions, [Optional] win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION*blendDescription, [Optional] win32.Graphics.Direct2D.D2D1_VERTEX_RANGE*vertexRange, [Optional] global::System.Guid*vertexShader)
            {
                fixed (ID2D1DrawInfo*pThis = &this)
                    return lpVtbl->SetVertexProcessing_12(pThis, vertexBuffer, vertexOptions, blendDescription, vertexRange, vertexShader);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, uint, win32.Graphics.Direct2D.D2D1_INPUT_DESCRIPTION, win32.System.Com.HRESULT>SetInputDescription_4;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION, win32.Graphics.Direct2D.D2D1_CHANNEL_DEPTH, win32.System.Com.HRESULT>SetOutputBuffer_5;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, win32.System.SystemServices.BOOL, void>SetCached_6;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, uint, void>SetInstructionCountHint_7;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, byte *, uint, win32.System.Com.HRESULT>SetPixelShaderConstantBuffer_8;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, uint, win32.Graphics.Direct2D.ID2D1ResourceTexture*, win32.System.Com.HRESULT>SetResourceTexture_9;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, byte *, uint, win32.System.Com.HRESULT>SetVertexShaderConstantBuffer_10;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, global::System.Guid*, win32.Graphics.Direct2D.D2D1_PIXEL_OPTIONS, win32.System.Com.HRESULT>SetPixelShader_11;
                internal delegate *unmanaged[Stdcall]<ID2D1DrawInfo*, win32.Graphics.Direct2D.ID2D1VertexBuffer*, win32.Graphics.Direct2D.D2D1_VERTEX_OPTIONS, win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION*, win32.Graphics.Direct2D.D2D1_VERTEX_RANGE*, global::System.Guid*, win32.System.Com.HRESULT>SetVertexProcessing_12;
            }

            private Vtbl*lpVtbl;
        }
    }
}