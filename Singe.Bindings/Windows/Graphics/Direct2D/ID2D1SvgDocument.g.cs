// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("86B88E4D-AFA4-4D7B-88E4-68A51C4A0AEC")]
        internal unsafe struct ID2D1SvgDocument
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <summary>Sets the size of the initial viewport.</summary>
            /// <param name = "viewportSize">
            /// <para>Type: <b>D2D1_SIZE_F</b></para>
            /// <para>The size of the viewport.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-setviewportsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-setviewportsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetViewportSize(win32.Graphics.Direct2D.D2D_SIZE_F viewportSize)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->SetViewportSize_5(pThis, viewportSize);
            }

            /// <summary>Returns the size of the initial viewport.</summary>
            /// <returns>
            /// <para>Type: <b>D2D1_SIZE_F</b></para>
            /// <para>Returns the size of the initial viewport</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-getviewportsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D_SIZE_F GetViewportSize()
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->GetViewportSize_6(pThis);
            }

            /// <summary>Sets the root element of the document.</summary>
            /// <param name = "root">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The new root element of the document.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-setroot#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-setroot">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetRoot([Optional] win32.Graphics.Direct2D.ID2D1SvgElement*root)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->SetRoot_7(pThis, root);
            }

            /// <summary>Gets the root element of the document.</summary>
            /// <param name = "root">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>Outputs the root element of the document.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-getroot#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-getroot">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetRoot([Optional] win32.Graphics.Direct2D.ID2D1SvgElement**root)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    lpVtbl->GetRoot_8(pThis, root);
            }

            /// <inheritdoc cref = "FindElementById(win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgElement**)"/>
            internal unsafe win32.System.Com.HRESULT FindElementById(string id, win32.Graphics.Direct2D.ID2D1SvgElement**svgElement)
            {
                fixed (char *idLocal = id)
                {
                    win32.System.Com.HRESULT __result = this.FindElementById(idLocal, svgElement);
                    return __result;
                }
            }

            /// <summary>Gets the SVG element with the specified ID.</summary>
            /// <param name = "id">
            /// <para>Type: <b>PCWSTR</b></para>
            /// <para>ID of the element to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-findelementbyid#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "svgElement">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>The element matching the specified ID. If the element cannot be found, the returned element will be null.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-findelementbyid#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-findelementbyid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FindElementById(win32.System.SystemServices.PCWSTR id, [Optional] win32.Graphics.Direct2D.ID2D1SvgElement**svgElement)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->FindElementById_9(pThis, id, svgElement);
            }

            /// <summary>Serializes an element and its subtree to XML. The output XML is encoded as UTF-8.</summary>
            /// <param name = "outputXmlStream">
            /// <para>Type: <b>IStream*</b></para>
            /// <para>An output stream to contain the SVG XML subtree.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-serialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "subtree">
            /// <para>Type: <b>ID2D1SvgElement*</b></para>
            /// <para>The root of the subtree. If null, the entire document is serialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-serialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-serialize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Serialize(win32.Storage.StructuredStorage.IStream*outputXmlStream, [Optional] win32.Graphics.Direct2D.ID2D1SvgElement*subtree)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->Serialize_10(pThis, outputXmlStream, subtree);
            }

            /// <summary>Deserializes a subtree from the stream. The stream must have only one root element, but that root element need not be an 'svg' element. The output element is not inserted into this document tree.</summary>
            /// <param name = "inputXmlStream">
            /// <para>Type: <b>IStream*</b></para>
            /// <para>An input stream containing the SVG XML subtree.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-deserialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "subtree">
            /// <para>Type: <b>ID2D1SvgElement**</b></para>
            /// <para>The root of the subtree.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-deserialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-deserialize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Deserialize(win32.Storage.StructuredStorage.IStream*inputXmlStream, win32.Graphics.Direct2D.ID2D1SvgElement**subtree)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->Deserialize_11(pThis, inputXmlStream, subtree);
            }

            /// <inheritdoc cref = "CreatePaint(win32.Graphics.Direct2D.D2D1_SVG_PAINT_TYPE, win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgPaint**)"/>
            internal unsafe win32.System.Com.HRESULT CreatePaint(win32.Graphics.Direct2D.D2D1_SVG_PAINT_TYPE paintType, win32.Graphics.Direct2D.D2D1_COLOR_F? color, string id, win32.Graphics.Direct2D.ID2D1SvgPaint**paint)
            {
                fixed (char *idLocal = id)
                {
                    win32.Graphics.Direct2D.D2D1_COLOR_F colorLocal = color.HasValue ? color.Value : default(win32.Graphics.Direct2D.D2D1_COLOR_F);
                    win32.System.Com.HRESULT __result = this.CreatePaint(paintType, color.HasValue ? &colorLocal : null, idLocal, paint);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreatePaint(win32.Graphics.Direct2D.D2D1_SVG_PAINT_TYPE paintType, [Optional] win32.Graphics.Direct2D.D2D1_COLOR_F*color, win32.System.SystemServices.PCWSTR id, win32.Graphics.Direct2D.ID2D1SvgPaint**paint)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->CreatePaint_12(pThis, paintType, color, id, paint);
            }

            /// <inheritdoc cref = "CreateStrokeDashArray(win32.Graphics.Direct2D.D2D1_SVG_LENGTH*, uint, win32.Graphics.Direct2D.ID2D1SvgStrokeDashArray**)"/>
            internal unsafe win32.System.Com.HRESULT CreateStrokeDashArray(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_SVG_LENGTH> dashes, win32.Graphics.Direct2D.ID2D1SvgStrokeDashArray**strokeDashArray)
            {
                fixed (win32.Graphics.Direct2D.D2D1_SVG_LENGTH*dashesLocal = dashes)
                {
                    win32.System.Com.HRESULT __result = this.CreateStrokeDashArray(dashesLocal, (uint)dashes.Length, strokeDashArray);
                    return __result;
                }
            }

            /// <summary>Creates a dash array object which can be used to set the stroke-dasharray property.</summary>
            /// <param name = "dashes">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1svg/ns-d2d1svg-d2d1_svg_length">D2D1_SVG_LENGTH</a>*</b></para>
            /// <para>An array of dashes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createstrokedasharray#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dashesCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Size of the array in th dashes argument.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createstrokedasharray#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeDashArray">
            /// <para>Type: <b>ID2D1SvgStrokeDashArray**</b></para>
            /// <para>The created <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1svg/nn-d2d1svg-id2d1svgstrokedasharray">ID2D1SvgStrokeDashArray</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createstrokedasharray#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createstrokedasharray">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateStrokeDashArray([Optional] win32.Graphics.Direct2D.D2D1_SVG_LENGTH*dashes, uint dashesCount, win32.Graphics.Direct2D.ID2D1SvgStrokeDashArray**strokeDashArray)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->CreateStrokeDashArray_13(pThis, dashes, dashesCount, strokeDashArray);
            }

            /// <inheritdoc cref = "CreatePointCollection(win32.Graphics.Direct2D.D2D_POINT_2F*, uint, win32.Graphics.Direct2D.ID2D1SvgPointCollection**)"/>
            internal unsafe win32.System.Com.HRESULT CreatePointCollection(ReadOnlySpan<win32.Graphics.Direct2D.D2D_POINT_2F> points, win32.Graphics.Direct2D.ID2D1SvgPointCollection**pointCollection)
            {
                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pointsLocal = points)
                {
                    win32.System.Com.HRESULT __result = this.CreatePointCollection(pointsLocal, (uint)points.Length, pointCollection);
                    return __result;
                }
            }

            /// <summary>Creates a points object which can be used to set a points attribute on a polygon or polyline element.</summary>
            /// <param name = "points">
            /// <para>Type: <b>const D2D1_POINT_2F*</b></para>
            /// <para>The points in the point collection.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpointcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of points in the points argument.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpointcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pointCollection">
            /// <para>Type: <b>ID2D1SvgPointCollection**</b></para>
            /// <para>The created <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1svg/nn-d2d1svg-id2d1svgpointcollection">ID2D1SvgPointCollection</a> object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpointcollection#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpointcollection">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePointCollection([Optional] win32.Graphics.Direct2D.D2D_POINT_2F*points, uint pointsCount, win32.Graphics.Direct2D.ID2D1SvgPointCollection**pointCollection)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->CreatePointCollection_14(pThis, points, pointsCount, pointCollection);
            }

            /// <inheritdoc cref = "CreatePathData(float *, uint, win32.Graphics.Direct2D.D2D1_SVG_PATH_COMMAND*, uint, win32.Graphics.Direct2D.ID2D1SvgPathData**)"/>
            internal unsafe win32.System.Com.HRESULT CreatePathData(ReadOnlySpan<float> segmentData, ReadOnlySpan<win32.Graphics.Direct2D.D2D1_SVG_PATH_COMMAND> commands, win32.Graphics.Direct2D.ID2D1SvgPathData**pathData)
            {
                fixed (win32.Graphics.Direct2D.D2D1_SVG_PATH_COMMAND*commandsLocal = commands)
                {
                    fixed (float *segmentDataLocal = segmentData)
                    {
                        win32.System.Com.HRESULT __result = this.CreatePathData(segmentDataLocal, (uint)segmentData.Length, commandsLocal, (uint)commands.Length, pathData);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a path data object which can be used to set a 'd' attribute on a 'path' element.</summary>
            /// <param name = "segmentData">
            /// <para>Type: <b>const FLOAT*</b></para>
            /// <para>An array of segment data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpathdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "segmentDataCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>Number of items in segmentData.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpathdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "commands">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1svg/ne-d2d1svg-d2d1_svg_path_command">D2D1_SVG_PATH_COMMAND</a>*</b></para>
            /// <para>An array of path commands.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpathdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "commandsCount">
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The number of items in commands.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpathdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pathData">
            /// <para>Type: <b>ID2D1SvgPathData**</b></para>
            /// <para>When this method completes, this points to the created path data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpathdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns an HRESULT success or error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1svg/nf-d2d1svg-id2d1svgdocument-createpathdata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePathData([Optional] float *segmentData, uint segmentDataCount, [Optional] win32.Graphics.Direct2D.D2D1_SVG_PATH_COMMAND*commands, uint commandsCount, win32.Graphics.Direct2D.ID2D1SvgPathData**pathData)
            {
                fixed (ID2D1SvgDocument*pThis = &this)
                    return lpVtbl->CreatePathData_15(pThis, segmentData, segmentDataCount, commands, commandsCount, pathData);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.D2D_SIZE_F, win32.System.Com.HRESULT>SetViewportSize_5;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.D2D_SIZE_F>GetViewportSize_6;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.System.Com.HRESULT>SetRoot_7;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.ID2D1SvgElement**, void>GetRoot_8;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgElement**, win32.System.Com.HRESULT>FindElementById_9;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Storage.StructuredStorage.IStream*, win32.Graphics.Direct2D.ID2D1SvgElement*, win32.System.Com.HRESULT>Serialize_10;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Storage.StructuredStorage.IStream*, win32.Graphics.Direct2D.ID2D1SvgElement**, win32.System.Com.HRESULT>Deserialize_11;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.D2D1_SVG_PAINT_TYPE, win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.System.SystemServices.PCWSTR, win32.Graphics.Direct2D.ID2D1SvgPaint**, win32.System.Com.HRESULT>CreatePaint_12;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.D2D1_SVG_LENGTH*, uint, win32.Graphics.Direct2D.ID2D1SvgStrokeDashArray**, win32.System.Com.HRESULT>CreateStrokeDashArray_13;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, win32.Graphics.Direct2D.D2D_POINT_2F*, uint, win32.Graphics.Direct2D.ID2D1SvgPointCollection**, win32.System.Com.HRESULT>CreatePointCollection_14;
                internal delegate *unmanaged[Stdcall]<ID2D1SvgDocument*, float *, uint, win32.Graphics.Direct2D.D2D1_SVG_PATH_COMMAND*, uint, win32.Graphics.Direct2D.ID2D1SvgPathData**, win32.System.Com.HRESULT>CreatePathData_15;
            }

            private Vtbl*lpVtbl;
        }
    }
}