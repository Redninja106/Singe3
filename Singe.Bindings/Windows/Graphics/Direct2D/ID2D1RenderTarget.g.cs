// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("2CD90694-12E2-11DC-9FED-001143A055F9")]
        internal unsafe struct ID2D1RenderTarget
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetFactory(win32.Graphics.Direct2D.ID2D1Factory**factory)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->GetFactory_4(pThis, factory);
            }

            /// <inheritdoc cref = "CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, void *srcData, uint pitch, in win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapPropertiesLocal = &bitmapProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateBitmap(size, srcData, pitch, bitmapPropertiesLocal, bitmap);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmap(win32.Graphics.Direct2D.D2D_SIZE_U size, [Optional] void *srcData, uint pitch, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateBitmap_5(pThis, size, srcData, pitch, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapFromWicBitmap(wicBitmapSource, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapFromWicBitmap(win32.Graphics.Imaging.IWICBitmapSource*wicBitmapSource, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateBitmapFromWicBitmap_6(pThis, wicBitmapSource, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateSharedBitmap(global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(in global::System.Guid riid, void *data, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES? bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES bitmapPropertiesLocal = bitmapProperties.HasValue ? bitmapProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSharedBitmap(riidLocal, data, bitmapProperties.HasValue ? &bitmapPropertiesLocal : null, bitmap);
                    return __result;
                }
            }

            /// <summary>Creates an ID2D1Bitmap whose data is shared with another resource.</summary>
            /// <param name = "riid">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The interface ID of the object supplying the source data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "data">
            /// <para>Type: <b>void*</b></para>
            /// <para>An <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>, <a href = "https://docs.microsoft.com/windows/win32/api/dxgi/nn-dxgi-idxgisurface">IDXGISurface</a>, or an <a href = "https://docs.microsoft.com/windows/win32/api/wincodec/nn-wincodec-iwicbitmaplock">IWICBitmapLock</a> that contains the data to share with the new <b>ID2D1Bitmap</b>. For more information, see the Remarks section.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bitmapProperties">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ns-d2d1-d2d1_bitmap_properties">D2D1_BITMAP_PROPERTIES</a>*</b></para>
            /// <para>The pixel format  and DPI of the bitmap to create . The <a href = "https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> portion of the pixel format  must match the <a href = "https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> of <i>data</i> or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass <b>NULL</b> or the value obtained from the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1helper/nf-d2d1helper-pixelformat">D2D1::PixelFormat</a> helper function. The DPI settings do not have to match those of <i>data</i>. If both <i>dpiX</i> and <i>dpiY</i> are  0.0f, the DPI of the render target is used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "bitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmap">ID2D1Bitmap</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createsharedbitmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSharedBitmap(global::System.Guid*riid, void *data, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*bitmapProperties, win32.Graphics.Direct2D.ID2D1Bitmap**bitmap)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateSharedBitmap_7(pThis, riid, data, bitmapProperties, bitmap);
            }

            /// <inheritdoc cref = "CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES? bitmapBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushPropertiesLocal = bitmapBrushProperties.HasValue ? bitmapBrushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES);
                win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                win32.System.Com.HRESULT __result = this.CreateBitmapBrush(bitmap, bitmapBrushProperties.HasValue ? &bitmapBrushPropertiesLocal : null, brushProperties.HasValue ? &brushPropertiesLocal : null, bitmapBrush);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateBitmapBrush([Optional] win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*bitmapBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1BitmapBrush**bitmapBrush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateBitmapBrush_8(pThis, bitmap, bitmapBrushProperties, brushProperties, bitmapBrush);
            }

            /// <inheritdoc cref = "CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(in win32.Graphics.Direct2D.D2D1_COLOR_F color, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_COLOR_F*colorLocal = &color)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateSolidColorBrush(colorLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, solidColorBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateSolidColorBrush(win32.Graphics.Direct2D.D2D1_COLOR_F*color, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1SolidColorBrush**solidColorBrush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateSolidColorBrush_9(pThis, color, brushProperties, solidColorBrush);
            }

            /// <inheritdoc cref = "CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(ReadOnlySpan<win32.Graphics.Direct2D.D2D1_GRADIENT_STOP> gradientStops, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStopsLocal = gradientStops)
                {
                    win32.System.Com.HRESULT __result = this.CreateGradientStopCollection(gradientStopsLocal, (uint)gradientStops.Length, colorInterpolationGamma, extendMode, gradientStopCollection);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateGradientStopCollection(win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*gradientStops, uint gradientStopsCount, win32.Graphics.Direct2D.D2D1_GAMMA colorInterpolationGamma, win32.Graphics.Direct2D.D2D1_EXTEND_MODE extendMode, win32.Graphics.Direct2D.ID2D1GradientStopCollection**gradientStopCollection)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateGradientStopCollection_10(pThis, gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, gradientStopCollection);
            }

            /// <inheritdoc cref = "CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(in win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushPropertiesLocal = &linearGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateLinearGradientBrush(linearGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, linearGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateLinearGradientBrush(win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*linearGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**linearGradientBrush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateLinearGradientBrush_11(pThis, linearGradientBrushProperties, brushProperties, gradientStopCollection, linearGradientBrush);
            }

            /// <inheritdoc cref = "CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(in win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES? brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushPropertiesLocal = &radialGradientBrushProperties)
                {
                    win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES brushPropertiesLocal = brushProperties.HasValue ? brushProperties.Value : default(win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES);
                    win32.System.Com.HRESULT __result = this.CreateRadialGradientBrush(radialGradientBrushPropertiesLocal, brushProperties.HasValue ? &brushPropertiesLocal : null, gradientStopCollection, radialGradientBrush);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRadialGradientBrush(win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*radialGradientBrushProperties, [Optional] win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*brushProperties, win32.Graphics.Direct2D.ID2D1GradientStopCollection*gradientStopCollection, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**radialGradientBrush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateRadialGradientBrush_12(pThis, radialGradientBrushProperties, brushProperties, gradientStopCollection, radialGradientBrush);
            }

            /// <inheritdoc cref = "CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget(win32.Graphics.Direct2D.D2D_SIZE_F? desiredSize, win32.Graphics.Direct2D.D2D_SIZE_U? desiredPixelSize, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT? desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F desiredSizeLocal = desiredSize.HasValue ? desiredSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.Graphics.Direct2D.D2D_SIZE_U desiredPixelSizeLocal = desiredPixelSize.HasValue ? desiredPixelSize.Value : default(win32.Graphics.Direct2D.D2D_SIZE_U);
                win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT desiredFormatLocal = desiredFormat.HasValue ? desiredFormat.Value : default(win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT);
                win32.System.Com.HRESULT __result = this.CreateCompatibleRenderTarget(desiredSize.HasValue ? &desiredSizeLocal : null, desiredPixelSize.HasValue ? &desiredPixelSizeLocal : null, desiredFormat.HasValue ? &desiredFormatLocal : null, options, bitmapRenderTarget);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateCompatibleRenderTarget([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*desiredSize, [Optional] win32.Graphics.Direct2D.D2D_SIZE_U*desiredPixelSize, [Optional] win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*desiredFormat, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**bitmapRenderTarget)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateCompatibleRenderTarget_13(pThis, desiredSize, desiredPixelSize, desiredFormat, options, bitmapRenderTarget);
            }

            /// <inheritdoc cref = "CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateLayer(win32.Graphics.Direct2D.D2D_SIZE_F? size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                win32.Graphics.Direct2D.D2D_SIZE_F sizeLocal = size.HasValue ? size.Value : default(win32.Graphics.Direct2D.D2D_SIZE_F);
                win32.System.Com.HRESULT __result = this.CreateLayer(size.HasValue ? &sizeLocal : null, layer);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateLayer([Optional] win32.Graphics.Direct2D.D2D_SIZE_F*size, win32.Graphics.Direct2D.ID2D1Layer**layer)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateLayer_14(pThis, size, layer);
            }

            /// <summary>Create a mesh that uses triangles to describe a shape.</summary>
            /// <param name = "mesh">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>**</b></para>
            /// <para>When this method returns, contains a pointer to a pointer to the new mesh.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-createmesh">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateMesh(win32.Graphics.Direct2D.ID2D1Mesh**mesh)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->CreateMesh_15(pThis, mesh);
            }

            /// <summary>Draws a line between the specified points using the specified stroke style.</summary>
            /// <param name = "point0">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The start point of the line, in device-independent pixels.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "point1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The end point of the line, in device-independent pixels.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to paint the line's stroke.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeWidth">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b></para>
            /// <para>The style of stroke to paint, or <b>NULL</b> to paint a solid line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawLine</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawline#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawLine(win32.Graphics.Direct2D.D2D_POINT_2F point0, win32.Graphics.Direct2D.D2D_POINT_2F point1, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawLine_16(pThis, point0, point1, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.DrawRectangle(rectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawRectangle_17(pThis, rect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRectangle(in win32.Graphics.Direct2D.D2D_RECT_F rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectLocal = &rect)
                {
                    this.FillRectangle(rectLocal, brush);
                }
            }

            internal unsafe void FillRectangle(win32.Graphics.Direct2D.D2D_RECT_F*rect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->FillRectangle_18(pThis, rect, brush);
            }

            /// <inheritdoc cref = "DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.DrawRoundedRectangle(roundedRectLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawRoundedRectangle_19(pThis, roundedRect, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillRoundedRectangle(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectLocal = &roundedRect)
                {
                    this.FillRoundedRectangle(roundedRectLocal, brush);
                }
            }

            internal unsafe void FillRoundedRectangle(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRect, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->FillRoundedRectangle_20(pThis, roundedRect, brush);
            }

            /// <inheritdoc cref = "DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*)"/>
            internal unsafe void DrawEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.DrawEllipse(ellipseLocal, brush, strokeWidth, strokeStyle);
                }
            }

            internal unsafe void DrawEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawEllipse_21(pThis, ellipse, brush, strokeWidth, strokeStyle);
            }

            /// <inheritdoc cref = "FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*)"/>
            internal unsafe void FillEllipse(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    this.FillEllipse(ellipseLocal, brush);
                }
            }

            internal unsafe void FillEllipse(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->FillEllipse_22(pThis, ellipse, brush);
            }

            /// <summary>Draws the outline of the specified geometry using the specified stroke style.</summary>
            /// <param name = "geometry">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b></para>
            /// <para>The geometry to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to paint the geometry's stroke.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeWidth">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "strokeStyle">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1strokestyle">ID2D1StrokeStyle</a>*</b></para>
            /// <para>The style of stroke to apply to the geometry's outline, or <b>NULL</b> to paint a solid stroke.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawGeometry</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawgeometry#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, float strokeWidth, [Optional] win32.Graphics.Direct2D.ID2D1StrokeStyle*strokeStyle)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawGeometry_23(pThis, geometry, brush, strokeWidth, strokeStyle);
            }

            /// <summary>Paints the interior of the specified geometry.</summary>
            /// <param name = "geometry">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>*</b></para>
            /// <para>The geometry to paint.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to paint the geometry's interior.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "opacityBrush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The opacity mask to apply to the geometry, or <b>NULL</b> for no opacity mask. If an opacity mask (the <i>opacityBrush</i> parameter) is specified, <i>brush</i> must be an <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmapbrush">ID2D1BitmapBrush</a> that has   its x- and y-extend modes set to <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_extend_mode">D2D1_EXTEND_MODE_CLAMP</a>. For more information, see the Remarks section.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the <i>opacityBrush</i> parameter is not <b>NULL</b>, the alpha value of each pixel of the mapped <i>opacityBrush</i> is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored.</para>
            /// <para>The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by <i>brush</i>.</para>
            /// <para>When this method fails, it does not return an error code. To determine whether a drawing operation (such as <b>FillGeometry</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillgeometry#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void FillGeometry(win32.Graphics.Direct2D.ID2D1Geometry*geometry, win32.Graphics.Direct2D.ID2D1Brush*brush, [Optional] win32.Graphics.Direct2D.ID2D1Brush*opacityBrush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->FillGeometry_24(pThis, geometry, brush, opacityBrush);
            }

            /// <summary>Paints the interior of the specified mesh.</summary>
            /// <param name = "mesh">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>*</b></para>
            /// <para>The mesh to paint.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "brush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to paint the mesh.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillmesh#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The current antialias mode of the render target must be <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE_ALIASED</a> when <b>FillMesh</b> is called. To change the render target's antialias mode, use the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode">SetAntialiasMode</a> method.</para>
            /// <para><b>FillMesh</b> does not expect a particular winding order for the triangles in the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1mesh">ID2D1Mesh</a>; both clockwise and counter-clockwise will work.</para>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>FillMesh</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-fillmesh#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void FillMesh(win32.Graphics.Direct2D.ID2D1Mesh*mesh, win32.Graphics.Direct2D.ID2D1Brush*brush)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->FillMesh_25(pThis, mesh, brush);
            }

            /// <inheritdoc cref = "FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.FillOpacityMask(opacityMask, brush, content, destinationRectangle.HasValue ? &destinationRectangleLocal : null, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void FillOpacityMask(win32.Graphics.Direct2D.ID2D1Bitmap*opacityMask, win32.Graphics.Direct2D.ID2D1Brush*brush, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT content, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->FillOpacityMask_26(pThis, opacityMask, brush, content, destinationRectangle, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*)"/>
            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, win32.Graphics.Direct2D.D2D_RECT_F? destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, win32.Graphics.Direct2D.D2D_RECT_F? sourceRectangle)
            {
                win32.Graphics.Direct2D.D2D_RECT_F destinationRectangleLocal = destinationRectangle.HasValue ? destinationRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                win32.Graphics.Direct2D.D2D_RECT_F sourceRectangleLocal = sourceRectangle.HasValue ? sourceRectangle.Value : default(win32.Graphics.Direct2D.D2D_RECT_F);
                this.DrawBitmap(bitmap, destinationRectangle.HasValue ? &destinationRectangleLocal : null, opacity, interpolationMode, sourceRectangle.HasValue ? &sourceRectangleLocal : null);
            }

            internal unsafe void DrawBitmap(win32.Graphics.Direct2D.ID2D1Bitmap*bitmap, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*destinationRectangle, float opacity, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, [Optional] win32.Graphics.Direct2D.D2D_RECT_F*sourceRectangle)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawBitmap_27(pThis, bitmap, destinationRectangle, opacity, interpolationMode, sourceRectangle);
            }

            /// <inheritdoc cref = "DrawText(win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawText(string @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, in win32.Graphics.Direct2D.D2D_RECT_F layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*layoutRectLocal = &layoutRect)
                {
                    fixed (char *@stringLocal = @string)
                    {
                        this.DrawText(@stringLocal, stringLength, textFormat, layoutRectLocal, defaultFillBrush, options, measuringMode);
                    }
                }
            }

            internal unsafe void DrawText(win32.System.SystemServices.PCWSTR @string, uint stringLength, win32.Graphics.DirectWrite.IDWriteTextFormat*textFormat, win32.Graphics.Direct2D.D2D_RECT_F*layoutRect, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawText_28(pThis, @string, stringLength, textFormat, layoutRect, defaultFillBrush, options, measuringMode);
            }

            /// <summary>Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            /// <param name = "origin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The point, described in device-independent pixels, at which the upper-left corner of the text described by <i>textLayout</i> is drawn.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "textLayout">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwritetextlayout">IDWriteTextLayout</a>*</b></para>
            /// <para>The formatted text to draw. Any drawing effects that do not inherit from <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1resource">ID2D1Resource</a> are ignored. If there are drawing effects that inherit from <b>ID2D1Resource</b> that are not brushes, this method fails and the render target is put in an error state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "defaultFillBrush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to paint any text in <i>textLayout</i> that does not already have a brush associated with it as a drawing effect (specified by the <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nf-dwrite-idwritetextlayout-setdrawingeffect">IDWriteTextLayout::SetDrawingEffect</a> method).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "options">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS</a></b></para>
            /// <para>A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_draw_text_options">D2D1_DRAW_TEXT_OPTIONS_NONE</a>, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>When drawing the same text repeatedly, using the <b>DrawTextLayout</b> method is more efficient than using the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-drawtext(constwchar_uint32_idwritetextformat_constd2d1_rect_f__id2d1brush_d2d1_draw_text_options_dwrite_measuring_mode)">DrawText</a> method because the text doesn't need to be formatted and the layout processed with each call.</para>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawTextLayout</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawtextlayout#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawTextLayout(win32.Graphics.Direct2D.D2D_POINT_2F origin, win32.Graphics.DirectWrite.IDWriteTextLayout*textLayout, win32.Graphics.Direct2D.ID2D1Brush*defaultFillBrush, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS options)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawTextLayout_29(pThis, origin, textLayout, defaultFillBrush, options);
            }

            /// <inheritdoc cref = "DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE)"/>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, in win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRunLocal = &glyphRun)
                {
                    this.DrawGlyphRun(baselineOrigin, glyphRunLocal, foregroundBrush, measuringMode);
                }
            }

            /// <summary>Draws the specified glyphs.</summary>
            /// <param name = "baselineOrigin">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
            /// <para>The origin, in device-independent pixels, of the glyphs' baseline.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "glyphRun">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/dwrite/ns-dwrite-dwrite_glyph_run">DWRITE_GLYPH_RUN</a>*</b></para>
            /// <para>The glyphs to render.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "foregroundBrush">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1brush">ID2D1Brush</a>*</b></para>
            /// <para>The brush used to paint the specified glyphs.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "measuringMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE</a></b></para>
            /// <para>A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is <a href = "https://docs.microsoft.com/windows/win32/api/dcommon/ne-dcommon-dwrite_measuring_mode">DWRITE_MEASURING_MODE_NATURAL</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawGlyphRun</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-drawglyphrun#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawGlyphRun(win32.Graphics.Direct2D.D2D_POINT_2F baselineOrigin, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*glyphRun, win32.Graphics.Direct2D.ID2D1Brush*foregroundBrush, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE measuringMode)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->DrawGlyphRun_30(pThis, baselineOrigin, glyphRun, foregroundBrush, measuringMode);
            }

            /// <inheritdoc cref = "SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void SetTransform(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.SetTransform(transformLocal);
                }
            }

            internal unsafe void SetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->SetTransform_31(pThis, transform);
            }

            /// <inheritdoc cref = "GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
            internal unsafe void GetTransform(out win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    this.GetTransform(transformLocal);
                }
            }

            /// <summary>Gets the current transform of the render target.</summary>
            /// <param name = "transform">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
            /// <para>When this returns, contains the current transform of the render target. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetTransform(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->GetTransform_32(pThis, transform);
            }

            /// <summary>Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</summary>
            /// <param name = "antialiasMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b></para>
            /// <para>The antialiasing mode for future drawing operations.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To specify the antialiasing mode for text and glyph operations, use the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a> method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetAntialiasMode(win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->SetAntialiasMode_33(pThis, antialiasMode);
            }

            /// <summary>Retrieves the current antialiasing mode for nontext drawing operations.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_antialias_mode">D2D1_ANTIALIAS_MODE</a></b></para>
            /// <para>The current antialiasing mode for nontext drawing operations.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE GetAntialiasMode()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->GetAntialiasMode_34(pThis);
            }

            /// <summary>Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</summary>
            /// <param name = "textAntialiasMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_text_antialias_mode">D2D1_TEXT_ANTIALIAS_MODE</a></b></para>
            /// <para>The antialiasing mode to use for subsequent text and glyph drawing operations.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetTextAntialiasMode(win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->SetTextAntialiasMode_35(pThis, textAntialiasMode);
            }

            /// <summary>Gets the current antialiasing mode for text and glyph drawing operations.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/d2d1/ne-d2d1-d2d1_text_antialias_mode">D2D1_TEXT_ANTIALIAS_MODE</a></b></para>
            /// <para>The current antialiasing mode for text and glyph drawing operations.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettextantialiasmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->GetTextAntialiasMode_36(pThis);
            }

            /// <summary>Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</summary>
            /// <param name = "textRenderingParams">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>*</b></para>
            /// <para>The text rendering options to be applied to all subsequent text and glyph drawing operations; <b>NULL</b> to clear current text rendering options.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextrenderingparams#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a>), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settextrenderingparams#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams*textRenderingParams)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->SetTextRenderingParams_37(pThis, textRenderingParams);
            }

            /// <summary>Retrieves the render target's current text rendering options.</summary>
            /// <param name = "textRenderingParams">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/dwrite/nn-dwrite-idwriterenderingparams">IDWriteRenderingParams</a>**</b></para>
            /// <para>When this method returns, <i>textRenderingParams</i>contains the address  of a pointer to the render target's current text rendering options.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettextrenderingparams#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode">SetTextAntialiasMode</a>), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettextrenderingparams#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetTextRenderingParams([Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams**textRenderingParams)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->GetTextRenderingParams_38(pThis, textRenderingParams);
            }

            /// <summary>Specifies a label for subsequent drawing operations.</summary>
            /// <param name = "tag1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b></para>
            /// <para>A label to apply to subsequent drawing operations.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tag2">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b></para>
            /// <para>A label to apply to subsequent drawing operations.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The labels specified by this method are printed by debug error messages. If no tag is set, the default value for each tag is 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-settags#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetTags(ulong tag1, ulong tag2)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->SetTags_39(pThis, tag1, tag2);
            }

            /// <summary>Gets the label for subsequent drawing operations.</summary>
            /// <param name = "tag1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
            /// <para>When this method returns, contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tag2">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
            /// <para>When this method returns, contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettags#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If the same address is passed for both parameters, both parameters receive the value of the second tag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-gettags#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetTags([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->GetTags_40(pThis, tag1, tag2);
            }

            /// <inheritdoc cref = "PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*)"/>
            internal unsafe void PushLayer(in win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS layerParameters, win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParametersLocal = &layerParameters)
                {
                    this.PushLayer(layerParametersLocal, layer);
                }
            }

            internal unsafe void PushLayer(win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*layerParameters, [Optional] win32.Graphics.Direct2D.ID2D1Layer*layer)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->PushLayer_41(pThis, layerParameters, layer);
            }

            /// <summary>Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.</summary>
            /// <remarks>
            /// <para>A <b>PopLayer</b>  must match a previous <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushlayer(constd2d1_layer_parameters__id2d1layer)">PushLayer</a> call.</para>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopLayer</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-poplayer#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void PopLayer()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->PopLayer_42(pThis);
            }

            /// <summary>Executes all pending drawing commands.</summary>
            /// <param name = "tag1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
            /// <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-flush#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tag2">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
            /// <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-flush#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0).</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-flush">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Flush([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->Flush_43(pThis, tag1, tag2);
            }

            /// <summary>Saves the current drawing state to the specified ID2D1DrawingStateBlock.</summary>
            /// <param name = "drawingStateBlock">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1drawingstateblock">ID2D1DrawingStateBlock</a>*</b></para>
            /// <para>When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-savedrawingstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-savedrawingstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SaveDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->SaveDrawingState_44(pThis, drawingStateBlock);
            }

            /// <summary>Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.</summary>
            /// <param name = "drawingStateBlock">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1drawingstateblock">ID2D1DrawingStateBlock</a>*</b></para>
            /// <para>The new drawing state of the render target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-restoredrawingstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-restoredrawingstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RestoreDrawingState(win32.Graphics.Direct2D.ID2D1DrawingStateBlock*drawingStateBlock)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->RestoreDrawingState_45(pThis, drawingStateBlock);
            }

            /// <inheritdoc cref = "PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE)"/>
            internal unsafe void PushAxisAlignedClip(in win32.Graphics.Direct2D.D2D_RECT_F clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*clipRectLocal = &clipRect)
                {
                    this.PushAxisAlignedClip(clipRectLocal, antialiasMode);
                }
            }

            internal unsafe void PushAxisAlignedClip(win32.Graphics.Direct2D.D2D_RECT_F*clipRect, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE antialiasMode)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->PushAxisAlignedClip_46(pThis, clipRect, antialiasMode);
            }

            /// <summary>Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
            /// <remarks>
            /// <para>A <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushaxisalignedclip(constd2d1_rect_f__d2d1_antialias_mode)">PushAxisAlignedClip</a>/<b>PopAxisAlignedClip</b> pair can occur around or within a <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushlayer(constd2d1_layer_parameters__id2d1layer)">PushLayer</a>/<a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-poplayer">PopLayer</a> pair, but may not overlap. For example, a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopLayer</b>, <b>PopAxisAlignedClip</b>  sequence is valid, but a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopAxisAlignedClip</b>, <b>PopLayer</b> sequence is not.</para>
            /// <para><b>PopAxisAlignedClip</b> must be called once for every call to <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-pushaxisalignedclip(constd2d1_rect_f__d2d1_antialias_mode)">PushAxisAlignedClip</a>.</para>
            /// <para>For an example, see <a href = "https://docs.microsoft.com/windows/win32/Direct2D/how-to-clip-with-axis-aligned-rects">How to Clip with an Axis-Aligned Clip Rectangle</a>.</para>
            /// <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopAxisAlignedClip</b>) failed, check the result returned by the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">ID2D1RenderTarget::EndDraw</a> or <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">ID2D1RenderTarget::Flush</a> methods.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-popaxisalignedclip#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void PopAxisAlignedClip()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->PopAxisAlignedClip_47(pThis);
            }

            /// <inheritdoc cref = "Clear(win32.Graphics.Direct2D.D2D1_COLOR_F*)"/>
            internal unsafe void Clear(win32.Graphics.Direct2D.D2D1_COLOR_F? clearColor)
            {
                win32.Graphics.Direct2D.D2D1_COLOR_F clearColorLocal = clearColor.HasValue ? clearColor.Value : default(win32.Graphics.Direct2D.D2D1_COLOR_F);
                this.Clear(clearColor.HasValue ? &clearColorLocal : null);
            }

            internal unsafe void Clear([Optional] win32.Graphics.Direct2D.D2D1_COLOR_F*clearColor)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->Clear_48(pThis, clearColor);
            }

            /// <summary>Initiates drawing on this render target.</summary>
            /// <remarks>
            /// <para>Drawing operations can only be issued between a <b>BeginDraw</b> and <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> call.</para>
            /// <para>BeginDraw and EndDraw are used to indicate that a render target is in use by the Direct2D system. Different implementations of <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1rendertarget">ID2D1RenderTarget</a> might behave differently when <b>BeginDraw</b> is called. An <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1bitmaprendertarget">ID2D1BitmapRenderTarget</a> may be locked between <b>BeginDraw</b>/<a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> calls, a DXGI surface render target might be acquired on <b>BeginDraw</b> and released on <b>EndDraw</b>, while an <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a> may begin batching at <b>BeginDraw</b> and may present on <b>EndDraw</b>, for example.</para>
            /// <para>The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of <b>BeginDraw</b>/<a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a>.</para>
            /// <para>After <b>BeginDraw</b> is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-flush">Flush</a> method is called, or until <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> is called. The <b>EndDraw</b> method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The <b>EndDraw</b> method always succeeds: it should not be called twice even if a previous <b>EndDraw</b> resulted in a failing HRESULT.</para>
            /// <para>If <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-enddraw">EndDraw</a> is called without a matched call to <b>BeginDraw</b>, it returns an error indicating that <b>BeginDraw</b> must be called before <b>EndDraw</b>.</para>
            /// <para>Calling <b>BeginDraw</b> twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when <b>EndDraw</b> is called.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-begindraw#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void BeginDraw()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->BeginDraw_49(pThis);
            }

            /// <summary>Ends drawing operations on the render target and indicates the current error state and associated tags.</summary>
            /// <param name = "tag1">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
            /// <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-enddraw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "tag2">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
            /// <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-enddraw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-enddraw">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT EndDraw([Optional] ulong *tag1, [Optional] ulong *tag2)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->EndDraw_50(pThis, tag1, tag2);
            }

            /// <summary>Retrieves the pixel format and alpha mode of the render target.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/api/dcommon/ns-dcommon-d2d1_pixel_format">D2D1_PIXEL_FORMAT</a></b></para>
            /// <para>The pixel format and alpha mode of the render target.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getpixelformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT GetPixelFormat()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->GetPixelFormat_51(pThis);
            }

            /// <summary>Sets the dots per inch (DPI) of the render target.</summary>
            /// <param name = "dpiX">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>A value greater than or equal to zero that specifies the horizontal DPI of the render target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dpiY">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>A value greater than or equal to zero that specifies the vertical DPI of the render target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method specifies the mapping from pixel space to device-independent space  for the render target.  If both <i>dpiX</i> and <i>dpiY</i> are 0, the factory-read system DPI is chosen. If one parameter is zero and the other unspecified, the DPI is not changed.</para>
            /// <para>For <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-setdpi#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void SetDpi(float dpiX, float dpiY)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->SetDpi_52(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "GetDpi(float *, float *)"/>
            internal unsafe void GetDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            /// <summary>Return the render target's dots per inch (DPI).</summary>
            /// <param name = "dpiX">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the horizontal DPI of the render target. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dpiY">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the vertical DPI of the render target. This parameter is passed uninitialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method indicates the mapping from pixel space to device-independent space  for the render target.</para>
            /// <para>For <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1hwndrendertarget">ID2D1HwndRenderTarget</a>, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getdpi#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    lpVtbl->GetDpi_53(pThis, dpiX, dpiY);
            }

            /// <summary>Returns the size of the render target in device-independent pixels.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
            /// <para>The current size of the render target in device-independent pixels.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D_SIZE_F GetSize()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->GetSize_54(pThis);
            }

            /// <summary>Returns the size of the render target in device pixels.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
            /// <para>The size of the render target in device pixels.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getpixelsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct2D.D2D_SIZE_U GetPixelSize()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->GetPixelSize_55(pThis);
            }

            /// <summary>Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target.</summary>
            /// <returns>
            /// <para>Type: <b>UINT32</b></para>
            /// <para>The maximum size, in pixels, of  any one bitmap dimension supported by the render target.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1rendertarget-getmaximumbitmapsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetMaximumBitmapSize()
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->GetMaximumBitmapSize_56(pThis);
            }

            /// <inheritdoc cref = "IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*)"/>
            internal unsafe win32.System.SystemServices.BOOL IsSupported(in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                {
                    win32.System.SystemServices.BOOL __result = this.IsSupported(renderTargetPropertiesLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.SystemServices.BOOL IsSupported(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties)
            {
                fixed (ID2D1RenderTarget*pThis = &this)
                    return lpVtbl->IsSupported_57(pThis, renderTargetProperties);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Factory**, void>GetFactory_4;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_U, void *, uint, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmap_5;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateBitmapFromWicBitmap_6;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, global::System.Guid*, void *, win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Bitmap**, win32.System.Com.HRESULT>CreateSharedBitmap_7;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1BitmapBrush**, win32.System.Com.HRESULT>CreateBitmapBrush_8;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_COLOR_F*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1SolidColorBrush**, win32.System.Com.HRESULT>CreateSolidColorBrush_9;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_GRADIENT_STOP*, uint, win32.Graphics.Direct2D.D2D1_GAMMA, win32.Graphics.Direct2D.D2D1_EXTEND_MODE, win32.Graphics.Direct2D.ID2D1GradientStopCollection**, win32.System.Com.HRESULT>CreateGradientStopCollection_10;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1LinearGradientBrush**, win32.System.Com.HRESULT>CreateLinearGradientBrush_11;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES*, win32.Graphics.Direct2D.ID2D1GradientStopCollection*, win32.Graphics.Direct2D.ID2D1RadialGradientBrush**, win32.System.Com.HRESULT>CreateRadialGradientBrush_12;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.D2D_SIZE_U*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT*, win32.Graphics.Direct2D.D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, win32.Graphics.Direct2D.ID2D1BitmapRenderTarget**, win32.System.Com.HRESULT>CreateCompatibleRenderTarget_13;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_F*, win32.Graphics.Direct2D.ID2D1Layer**, win32.System.Com.HRESULT>CreateLayer_14;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Mesh**, win32.System.Com.HRESULT>CreateMesh_15;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawLine_16;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRectangle_17;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRectangle_18;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawRoundedRectangle_19;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillRoundedRectangle_20;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawEllipse_21;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillEllipse_22;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, float, win32.Graphics.Direct2D.ID2D1StrokeStyle*, void>DrawGeometry_23;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillGeometry_24;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Mesh*, win32.Graphics.Direct2D.ID2D1Brush*, void>FillMesh_25;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_OPACITY_MASK_CONTENT, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D_RECT_F*, void>FillOpacityMask_26;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1Bitmap*, win32.Graphics.Direct2D.D2D_RECT_F*, float, win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE, win32.Graphics.Direct2D.D2D_RECT_F*, void>DrawBitmap_27;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.System.SystemServices.PCWSTR, uint, win32.Graphics.DirectWrite.IDWriteTextFormat*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawText_28;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.IDWriteTextLayout*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.Direct2D.D2D1_DRAW_TEXT_OPTIONS, void>DrawTextLayout_29;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN*, win32.Graphics.Direct2D.ID2D1Brush*, win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE, void>DrawGlyphRun_30;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>SetTransform_31;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, void>GetTransform_32;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>SetAntialiasMode_33;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE>GetAntialiasMode_34;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE, void>SetTextAntialiasMode_35;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE>GetTextAntialiasMode_36;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.DirectWrite.IDWriteRenderingParams*, void>SetTextRenderingParams_37;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.DirectWrite.IDWriteRenderingParams**, void>GetTextRenderingParams_38;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, ulong, ulong, void>SetTags_39;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, ulong *, ulong *, void>GetTags_40;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS*, win32.Graphics.Direct2D.ID2D1Layer*, void>PushLayer_41;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, void>PopLayer_42;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, ulong *, ulong *, win32.System.Com.HRESULT>Flush_43;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>SaveDrawingState_44;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock*, void>RestoreDrawingState_45;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE, void>PushAxisAlignedClip_46;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, void>PopAxisAlignedClip_47;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_COLOR_F*, void>Clear_48;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, void>BeginDraw_49;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, ulong *, ulong *, win32.System.Com.HRESULT>EndDraw_50;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_PIXEL_FORMAT>GetPixelFormat_51;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, float, float, void>SetDpi_52;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, float *, float *, void>GetDpi_53;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_F>GetSize_54;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D_SIZE_U>GetPixelSize_55;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, uint>GetMaximumBitmapSize_56;
                internal delegate *unmanaged[Stdcall]<ID2D1RenderTarget*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.System.SystemServices.BOOL>IsSupported_57;
            }

            private Vtbl*lpVtbl;
        }
    }
}