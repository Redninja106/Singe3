// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct2D
    {
        [Guid("06152247-6F50-465A-9245-118BFD3B6007")]
        internal unsafe struct ID2D1Factory
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Forces the factory to refresh any system defaults that it might have changed since factory creation.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-reloadsystemmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT ReloadSystemMetrics()
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->ReloadSystemMetrics_4(pThis);
            }

            /// <inheritdoc cref = "GetDesktopDpi(float *, float *)"/>
            internal unsafe void GetDesktopDpi(out float dpiX, out float dpiY)
            {
                fixed (float *dpiYLocal = &dpiY)
                {
                    fixed (float *dpiXLocal = &dpiX)
                    {
                        this.GetDesktopDpi(dpiXLocal, dpiYLocal);
                    }
                }
            }

            /// <summary>Retrieves the current desktop dots per inch (DPI). To refresh this value, call ReloadSystemMetrics.</summary>
            /// <param name = "dpiX">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the horizontal DPI of the desktop. You must allocate storage for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-getdesktopdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dpiY">
            /// <para>Type: <b>FLOAT*</b></para>
            /// <para>When this method returns, contains the vertical DPI of the desktop. You must allocate storage for this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-getdesktopdpi#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Use this method to obtain the system DPI when setting physical pixel values, such as when you specify the size of a window.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-getdesktopdpi#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetDesktopDpi(float *dpiX, float *dpiY)
            {
                fixed (ID2D1Factory*pThis = &this)
                    lpVtbl->GetDesktopDpi_5(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "CreateRectangleGeometry(win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1RectangleGeometry**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRectangleGeometry(in win32.Graphics.Direct2D.D2D_RECT_F rectangle, win32.Graphics.Direct2D.ID2D1RectangleGeometry**rectangleGeometry)
            {
                fixed (win32.Graphics.Direct2D.D2D_RECT_F*rectangleLocal = &rectangle)
                {
                    win32.System.Com.HRESULT __result = this.CreateRectangleGeometry(rectangleLocal, rectangleGeometry);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRectangleGeometry(win32.Graphics.Direct2D.D2D_RECT_F*rectangle, win32.Graphics.Direct2D.ID2D1RectangleGeometry**rectangleGeometry)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateRectangleGeometry_6(pThis, rectangle, rectangleGeometry);
            }

            /// <inheritdoc cref = "CreateRoundedRectangleGeometry(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1RoundedRectangleGeometry**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRoundedRectangleGeometry(in win32.Graphics.Direct2D.D2D1_ROUNDED_RECT roundedRectangle, win32.Graphics.Direct2D.ID2D1RoundedRectangleGeometry**roundedRectangleGeometry)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectangleLocal = &roundedRectangle)
                {
                    win32.System.Com.HRESULT __result = this.CreateRoundedRectangleGeometry(roundedRectangleLocal, roundedRectangleGeometry);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateRoundedRectangleGeometry(win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*roundedRectangle, win32.Graphics.Direct2D.ID2D1RoundedRectangleGeometry**roundedRectangleGeometry)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateRoundedRectangleGeometry_7(pThis, roundedRectangle, roundedRectangleGeometry);
            }

            /// <inheritdoc cref = "CreateEllipseGeometry(win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1EllipseGeometry**)"/>
            internal unsafe win32.System.Com.HRESULT CreateEllipseGeometry(in win32.Graphics.Direct2D.D2D1_ELLIPSE ellipse, win32.Graphics.Direct2D.ID2D1EllipseGeometry**ellipseGeometry)
            {
                fixed (win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipseLocal = &ellipse)
                {
                    win32.System.Com.HRESULT __result = this.CreateEllipseGeometry(ellipseLocal, ellipseGeometry);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateEllipseGeometry(win32.Graphics.Direct2D.D2D1_ELLIPSE*ellipse, win32.Graphics.Direct2D.ID2D1EllipseGeometry**ellipseGeometry)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateEllipseGeometry_8(pThis, ellipse, ellipseGeometry);
            }

            /// <summary>Creates an ID2D1GeometryGroup, which is an object that holds other geometries.</summary>
            /// <param name = "fillMode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_fill_mode">D2D1_FILL_MODE</a></b></para>
            /// <para>A value that specifies the rule that a composite shape uses to determine whether a given point is part of the geometry.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-creategeometrygroup#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "geometries">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometry">ID2D1Geometry</a>**</b></para>
            /// <para>An array containing the geometry objects to add to the geometry group. The number of elements in this array is indicated by the <i>geometriesCount</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-creategeometrygroup#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "geometriesCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of elements in <i>geometries</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-creategeometrygroup#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "geometryGroup">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1geometrygroup">ID2D1GeometryGroup</a>**</b></para>
            /// <para>When this method returns, contains the address of a pointer to the geometry group created by this method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-creategeometrygroup#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-creategeometrygroup">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGeometryGroup(win32.Graphics.Direct2D.D2D1_FILL_MODE fillMode, win32.Graphics.Direct2D.ID2D1Geometry**geometries, uint geometriesCount, win32.Graphics.Direct2D.ID2D1GeometryGroup**geometryGroup)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateGeometryGroup_9(pThis, fillMode, geometries, geometriesCount, geometryGroup);
            }

            /// <inheritdoc cref = "CreateTransformedGeometry(win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, win32.Graphics.Direct2D.ID2D1TransformedGeometry**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTransformedGeometry(win32.Graphics.Direct2D.ID2D1Geometry*sourceGeometry, in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F transform, win32.Graphics.Direct2D.ID2D1TransformedGeometry**transformedGeometry)
            {
                fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transformLocal = &transform)
                {
                    win32.System.Com.HRESULT __result = this.CreateTransformedGeometry(sourceGeometry, transformLocal, transformedGeometry);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateTransformedGeometry(win32.Graphics.Direct2D.ID2D1Geometry*sourceGeometry, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*transform, win32.Graphics.Direct2D.ID2D1TransformedGeometry**transformedGeometry)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateTransformedGeometry_10(pThis, sourceGeometry, transform, transformedGeometry);
            }

            /// <summary>Creates an empty ID2D1PathGeometry.</summary>
            /// <param name = "pathGeometry">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1pathgeometry">ID2D1PathGeometry</a>**</b></para>
            /// <para>When this method returns, contains the address to a pointer to the path geometry created by this method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-createpathgeometry#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-createpathgeometry">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePathGeometry(win32.Graphics.Direct2D.ID2D1PathGeometry**pathGeometry)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreatePathGeometry_11(pThis, pathGeometry);
            }

            /// <inheritdoc cref = "CreateStrokeStyle(win32.Graphics.Direct2D.D2D1_STROKE_STYLE_PROPERTIES*, float *, uint, win32.Graphics.Direct2D.ID2D1StrokeStyle**)"/>
            internal unsafe win32.System.Com.HRESULT CreateStrokeStyle(in win32.Graphics.Direct2D.D2D1_STROKE_STYLE_PROPERTIES strokeStyleProperties, ReadOnlySpan<float> dashes, win32.Graphics.Direct2D.ID2D1StrokeStyle**strokeStyle)
            {
                fixed (float *dashesLocal = dashes)
                {
                    fixed (win32.Graphics.Direct2D.D2D1_STROKE_STYLE_PROPERTIES*strokeStylePropertiesLocal = &strokeStyleProperties)
                    {
                        win32.System.Com.HRESULT __result = this.CreateStrokeStyle(strokeStylePropertiesLocal, dashesLocal, (uint)dashes.Length, strokeStyle);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateStrokeStyle(win32.Graphics.Direct2D.D2D1_STROKE_STYLE_PROPERTIES*strokeStyleProperties, [Optional] float *dashes, uint dashesCount, win32.Graphics.Direct2D.ID2D1StrokeStyle**strokeStyle)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateStrokeStyle_12(pThis, strokeStyleProperties, dashes, dashesCount, strokeStyle);
            }

            /// <inheritdoc cref = "CreateDrawingStateBlock(win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION*, win32.Graphics.DirectWrite.IDWriteRenderingParams*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDrawingStateBlock(win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION? drawingStateDescription, win32.Graphics.DirectWrite.IDWriteRenderingParams*textRenderingParams, win32.Graphics.Direct2D.ID2D1DrawingStateBlock**drawingStateBlock)
            {
                win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION drawingStateDescriptionLocal = drawingStateDescription.HasValue ? drawingStateDescription.Value : default(win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION);
                win32.System.Com.HRESULT __result = this.CreateDrawingStateBlock(drawingStateDescription.HasValue ? &drawingStateDescriptionLocal : null, textRenderingParams, drawingStateBlock);
                return __result;
            }

            internal unsafe win32.System.Com.HRESULT CreateDrawingStateBlock([Optional] win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION*drawingStateDescription, [Optional] win32.Graphics.DirectWrite.IDWriteRenderingParams*textRenderingParams, win32.Graphics.Direct2D.ID2D1DrawingStateBlock**drawingStateBlock)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateDrawingStateBlock_13(pThis, drawingStateDescription, textRenderingParams, drawingStateBlock);
            }

            /// <inheritdoc cref = "CreateWicBitmapRenderTarget(win32.Graphics.Imaging.IWICBitmap*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1RenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateWicBitmapRenderTarget(win32.Graphics.Imaging.IWICBitmap*target, in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, win32.Graphics.Direct2D.ID2D1RenderTarget**renderTarget)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateWicBitmapRenderTarget(target, renderTargetPropertiesLocal, renderTarget);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateWicBitmapRenderTarget(win32.Graphics.Imaging.IWICBitmap*target, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties, win32.Graphics.Direct2D.ID2D1RenderTarget**renderTarget)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateWicBitmapRenderTarget_14(pThis, target, renderTargetProperties, renderTarget);
            }

            /// <inheritdoc cref = "CreateHwndRenderTarget(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.D2D1_HWND_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1HwndRenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateHwndRenderTarget(in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, in win32.Graphics.Direct2D.D2D1_HWND_RENDER_TARGET_PROPERTIES hwndRenderTargetProperties, win32.Graphics.Direct2D.ID2D1HwndRenderTarget**hwndRenderTarget)
            {
                fixed (win32.Graphics.Direct2D.D2D1_HWND_RENDER_TARGET_PROPERTIES*hwndRenderTargetPropertiesLocal = &hwndRenderTargetProperties)
                {
                    fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                    {
                        win32.System.Com.HRESULT __result = this.CreateHwndRenderTarget(renderTargetPropertiesLocal, hwndRenderTargetPropertiesLocal, hwndRenderTarget);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateHwndRenderTarget(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties, win32.Graphics.Direct2D.D2D1_HWND_RENDER_TARGET_PROPERTIES*hwndRenderTargetProperties, win32.Graphics.Direct2D.ID2D1HwndRenderTarget**hwndRenderTarget)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateHwndRenderTarget_15(pThis, renderTargetProperties, hwndRenderTargetProperties, hwndRenderTarget);
            }

            /// <inheritdoc cref = "CreateDxgiSurfaceRenderTarget(win32.Graphics.Dxgi.IDXGISurface*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1RenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDxgiSurfaceRenderTarget(win32.Graphics.Dxgi.IDXGISurface*dxgiSurface, in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, win32.Graphics.Direct2D.ID2D1RenderTarget**renderTarget)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateDxgiSurfaceRenderTarget(dxgiSurface, renderTargetPropertiesLocal, renderTarget);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT CreateDxgiSurfaceRenderTarget(win32.Graphics.Dxgi.IDXGISurface*dxgiSurface, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties, win32.Graphics.Direct2D.ID2D1RenderTarget**renderTarget)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateDxgiSurfaceRenderTarget_16(pThis, dxgiSurface, renderTargetProperties, renderTarget);
            }

            /// <inheritdoc cref = "CreateDCRenderTarget(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1DCRenderTarget**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDCRenderTarget(in win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, win32.Graphics.Direct2D.ID2D1DCRenderTarget**dcRenderTarget)
            {
                fixed (win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetPropertiesLocal = &renderTargetProperties)
                {
                    win32.System.Com.HRESULT __result = this.CreateDCRenderTarget(renderTargetPropertiesLocal, dcRenderTarget);
                    return __result;
                }
            }

            /// <summary>Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.</summary>
            /// <param name = "renderTargetProperties">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ns-d2d1-d2d1_render_target_properties">D2D1_RENDER_TARGET_PROPERTIES</a>*</b></para>
            /// <para>The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.  To enable the device context (DC) render target to work with GDI, set the DXGI format to <a href = "https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_B8G8R8A8_UNORM</a> and the alpha mode to <a href = "https://docs.microsoft.com/windows/win32/api/dcommon/ne-dcommon-d2d1_alpha_mode">D2D1_ALPHA_MODE_PREMULTIPLIED</a> or <b>D2D1_ALPHA_MODE_IGNORE</b>. For more information about pixel formats, see  <a href = "https://docs.microsoft.com/windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel  Formats and Alpha Modes</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-createdcrendertarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dcRenderTarget">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1dcrendertarget">ID2D1DCRenderTarget</a>**</b></para>
            /// <para>When this method returns, <i>dcRenderTarget</i> contains the address of the pointer to the  <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1dcrendertarget">ID2D1DCRenderTarget</a> created by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-createdcrendertarget#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an [**HRESULT**](/windows/desktop/com/structure-of-com-error-codes) error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-id2d1factory-createdcrendertarget">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDCRenderTarget(win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*renderTargetProperties, win32.Graphics.Direct2D.ID2D1DCRenderTarget**dcRenderTarget)
            {
                fixed (ID2D1Factory*pThis = &this)
                    return lpVtbl->CreateDCRenderTarget_17(pThis, renderTargetProperties, dcRenderTarget);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.System.Com.HRESULT>ReloadSystemMetrics_4;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, float *, float *, void>GetDesktopDpi_5;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D_RECT_F*, win32.Graphics.Direct2D.ID2D1RectangleGeometry**, win32.System.Com.HRESULT>CreateRectangleGeometry_6;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D1_ROUNDED_RECT*, win32.Graphics.Direct2D.ID2D1RoundedRectangleGeometry**, win32.System.Com.HRESULT>CreateRoundedRectangleGeometry_7;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D1_ELLIPSE*, win32.Graphics.Direct2D.ID2D1EllipseGeometry**, win32.System.Com.HRESULT>CreateEllipseGeometry_8;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D1_FILL_MODE, win32.Graphics.Direct2D.ID2D1Geometry**, uint, win32.Graphics.Direct2D.ID2D1GeometryGroup**, win32.System.Com.HRESULT>CreateGeometryGroup_9;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.ID2D1Geometry*, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*, win32.Graphics.Direct2D.ID2D1TransformedGeometry**, win32.System.Com.HRESULT>CreateTransformedGeometry_10;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.ID2D1PathGeometry**, win32.System.Com.HRESULT>CreatePathGeometry_11;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D1_STROKE_STYLE_PROPERTIES*, float *, uint, win32.Graphics.Direct2D.ID2D1StrokeStyle**, win32.System.Com.HRESULT>CreateStrokeStyle_12;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION*, win32.Graphics.DirectWrite.IDWriteRenderingParams*, win32.Graphics.Direct2D.ID2D1DrawingStateBlock**, win32.System.Com.HRESULT>CreateDrawingStateBlock_13;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Imaging.IWICBitmap*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1RenderTarget**, win32.System.Com.HRESULT>CreateWicBitmapRenderTarget_14;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.D2D1_HWND_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1HwndRenderTarget**, win32.System.Com.HRESULT>CreateHwndRenderTarget_15;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Dxgi.IDXGISurface*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1RenderTarget**, win32.System.Com.HRESULT>CreateDxgiSurfaceRenderTarget_16;
                internal delegate *unmanaged[Stdcall]<ID2D1Factory*, win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES*, win32.Graphics.Direct2D.ID2D1DCRenderTarget**, win32.System.Com.HRESULT>CreateDCRenderTarget_17;
            }

            private Vtbl*lpVtbl;
        }
    }
}