// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("23BC3F0A-698B-4357-886B-F24D50671334")]
        internal unsafe struct IWICComponentInfo
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetComponentType(win32.Graphics.Imaging.WICComponentType*)"/>
            internal unsafe win32.System.Com.HRESULT GetComponentType(out win32.Graphics.Imaging.WICComponentType pType)
            {
                fixed (win32.Graphics.Imaging.WICComponentType*pTypeLocal = &pType)
                {
                    win32.System.Com.HRESULT __result = this.GetComponentType(pTypeLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the component's WICComponentType.</summary>
            /// <param name = "pType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wiccomponenttype">WICComponentType</a>*</b></para>
            /// <para>A pointer that receives the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wiccomponenttype">WICComponentType</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getcomponenttype#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getcomponenttype">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetComponentType(win32.Graphics.Imaging.WICComponentType*pType)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetComponentType_4(pThis, pType);
            }

            /// <inheritdoc cref = "GetCLSID(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetCLSID(out global::System.Guid pclsid)
            {
                fixed (global::System.Guid*pclsidLocal = &pclsid)
                {
                    win32.System.Com.HRESULT __result = this.GetCLSID(pclsidLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the component's class identifier (CLSID)</summary>
            /// <param name = "pclsid">
            /// <para>Type: <b>CLSID*</b></para>
            /// <para>A pointer that receives the component's CLSID.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getclsid#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getclsid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetCLSID(global::System.Guid*pclsid)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetCLSID_5(pThis, pclsid);
            }

            /// <inheritdoc cref = "GetSigningStatus(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSigningStatus(out uint pStatus)
            {
                fixed (uint *pStatusLocal = &pStatus)
                {
                    win32.System.Com.HRESULT __result = this.GetSigningStatus(pStatusLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the signing status of the component.</summary>
            /// <param name = "pStatus">
            /// <para>Type: <b>DWORD*</b></para>
            /// <para>A pointer that receives the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wiccomponentsigning">WICComponentSigning</a> status of the component.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getsigningstatus#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getsigningstatus">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSigningStatus(uint *pStatus)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetSigningStatus_6(pThis, pStatus);
            }

            /// <inheritdoc cref = "GetAuthor(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetAuthor(uint cchAuthor, win32.System.SystemServices.PWSTR wzAuthor, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetAuthor(cchAuthor, wzAuthor, pcchActualLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the name of component's author.</summary>
            /// <param name = "cchAuthor">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The size of the <i>wzAuthor</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getauthor#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "wzAuthor">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>A pointer that receives the name of the component's author. The locale of the string depends on the value that the codec wrote to the registry at install time. For built-in components, these strings are always in English.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getauthor#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcchActual">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the actual length of the component's authors name. The author name is optional; if an author name is not specified by the component, the length returned is 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getauthor#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getauthor">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetAuthor(uint cchAuthor, win32.System.SystemServices.PWSTR wzAuthor, uint *pcchActual)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetAuthor_7(pThis, cchAuthor, wzAuthor, pcchActual);
            }

            /// <inheritdoc cref = "GetVendorGUID(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetVendorGUID(out global::System.Guid pguidVendor)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    win32.System.Com.HRESULT __result = this.GetVendorGUID(pguidVendorLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the vendor GUID.</summary>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>GUID*</b></para>
            /// <para>A pointer that receives the component's vendor GUID.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getvendorguid#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getvendorguid">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVendorGUID(global::System.Guid*pguidVendor)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetVendorGUID_8(pThis, pguidVendor);
            }

            /// <inheritdoc cref = "GetVersion(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetVersion(uint cchVersion, win32.System.SystemServices.PWSTR wzVersion, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetVersion(cchVersion, wzVersion, pcchActualLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the component's version.</summary>
            /// <param name = "cchVersion">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The size of the <i>wzVersion</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getversion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "wzVersion">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>A pointer that receives a culture invariant string of the component's version.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getversion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcchActual">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the actual length of the component's version. The version is optional; if a value is not specified by the component, the length returned is 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getversion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getversion">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVersion(uint cchVersion, win32.System.SystemServices.PWSTR wzVersion, uint *pcchActual)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetVersion_9(pThis, cchVersion, wzVersion, pcchActual);
            }

            /// <inheritdoc cref = "GetSpecVersion(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSpecVersion(uint cchSpecVersion, win32.System.SystemServices.PWSTR wzSpecVersion, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetSpecVersion(cchSpecVersion, wzSpecVersion, pcchActualLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the component's specification version.</summary>
            /// <param name = "cchSpecVersion">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The size of the <i>wzSpecVersion</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getspecversion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "wzSpecVersion">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>When this method returns, contain a culture invarient string of the component's specification version. The version form is NN.NN.NN.NN.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getspecversion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcchActual">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the actual length of the component's specification version. The specification version is optional; if a value is not specified by the component, the length returned is 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getspecversion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getspecversion">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSpecVersion(uint cchSpecVersion, win32.System.SystemServices.PWSTR wzSpecVersion, uint *pcchActual)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetSpecVersion_10(pThis, cchSpecVersion, wzSpecVersion, pcchActual);
            }

            /// <inheritdoc cref = "GetFriendlyName(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetFriendlyName(uint cchFriendlyName, win32.System.SystemServices.PWSTR wzFriendlyName, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetFriendlyName(cchFriendlyName, wzFriendlyName, pcchActualLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the component's friendly name, which is a human-readable display name for the component.</summary>
            /// <param name = "cchFriendlyName">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The size of the <i>wzFriendlyName</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getfriendlyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "wzFriendlyName">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>A pointer that receives the friendly name of the component. The locale of the string depends on the value that the codec wrote to the registry at install time. For built-in components, these strings are always in English.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getfriendlyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcchActual">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the actual length of the component's friendly name.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getfriendlyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwiccomponentinfo-getfriendlyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFriendlyName(uint cchFriendlyName, win32.System.SystemServices.PWSTR wzFriendlyName, uint *pcchActual)
            {
                fixed (IWICComponentInfo*pThis = &this)
                    return lpVtbl->GetFriendlyName_11(pThis, cchFriendlyName, wzFriendlyName, pcchActual);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, win32.Graphics.Imaging.WICComponentType*, win32.System.Com.HRESULT>GetComponentType_4;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, global::System.Guid*, win32.System.Com.HRESULT>GetCLSID_5;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, uint *, win32.System.Com.HRESULT>GetSigningStatus_6;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetAuthor_7;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, global::System.Guid*, win32.System.Com.HRESULT>GetVendorGUID_8;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetVersion_9;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetSpecVersion_10;
                internal delegate *unmanaged[Stdcall]<IWICComponentInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetFriendlyName_11;
            }

            private Vtbl*lpVtbl;
        }
    }
}