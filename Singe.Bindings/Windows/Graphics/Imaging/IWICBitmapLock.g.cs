// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("00000123-A8F2-4877-BA0A-FD2B6645FB94")]
        internal unsafe struct IWICBitmapLock
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICBitmapLock*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICBitmapLock*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICBitmapLock*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetSize(uint *, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSize(out uint puiWidth, out uint puiHeight)
            {
                fixed (uint *puiHeightLocal = &puiHeight)
                {
                    fixed (uint *puiWidthLocal = &puiWidth)
                    {
                        win32.System.Com.HRESULT __result = this.GetSize(puiWidthLocal, puiHeightLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Retrieves the width and height, in pixels, of the locked rectangle.</summary>
            /// <param name = "puiWidth">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the width of the locked rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "puiHeight">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the height of the locked rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetSize(uint *puiWidth, uint *puiHeight)
            {
                fixed (IWICBitmapLock*pThis = &this)
                    return lpVtbl->GetSize_4(pThis, puiWidth, puiHeight);
            }

            /// <inheritdoc cref = "GetStride(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetStride(out uint pcbStride)
            {
                fixed (uint *pcbStrideLocal = &pcbStride)
                {
                    win32.System.Com.HRESULT __result = this.GetStride(pcbStrideLocal);
                    return __result;
                }
            }

            /// <summary>Provides access to the stride value for the memory.</summary>
            /// <param name = "pcbStride">Type: <b>UINT*</b></param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getstride">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetStride(uint *pcbStride)
            {
                fixed (IWICBitmapLock*pThis = &this)
                    return lpVtbl->GetStride_5(pThis, pcbStride);
            }

            /// <inheritdoc cref = "GetDataPointer(uint *, byte **)"/>
            internal unsafe win32.System.Com.HRESULT GetDataPointer(out uint pcbBufferSize, byte **ppbData)
            {
                fixed (uint *pcbBufferSizeLocal = &pcbBufferSize)
                {
                    win32.System.Com.HRESULT __result = this.GetDataPointer(pcbBufferSizeLocal, ppbData);
                    return __result;
                }
            }

            /// <summary>Gets the pointer to the top left pixel in the locked rectangle.</summary>
            /// <param name = "pcbBufferSize">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the size of the buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getdatapointer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppbData">
            /// <para>Type: <b>BYTE**</b></para>
            /// <para>A pointer that receives a pointer to the top left pixel in the locked rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getdatapointer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getdatapointer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDataPointer(uint *pcbBufferSize, byte **ppbData)
            {
                fixed (IWICBitmapLock*pThis = &this)
                    return lpVtbl->GetDataPointer_6(pThis, pcbBufferSize, ppbData);
            }

            /// <inheritdoc cref = "GetPixelFormat(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetPixelFormat(out global::System.Guid pPixelFormat)
            {
                fixed (global::System.Guid*pPixelFormatLocal = &pPixelFormat)
                {
                    win32.System.Com.HRESULT __result = this.GetPixelFormat(pPixelFormatLocal);
                    return __result;
                }
            }

            /// <summary>Gets the pixel format of for the locked area of pixels. This can be used to compute the number of bytes-per-pixel in the locked area.</summary>
            /// <param name = "pPixelFormat">
            /// <para>Type: <b>WICPixelFormatGUID*</b></para>
            /// <para>A pointer that receives the pixel format GUID of the locked area.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getpixelformat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmaplock-getpixelformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPixelFormat(global::System.Guid*pPixelFormat)
            {
                fixed (IWICBitmapLock*pThis = &this)
                    return lpVtbl->GetPixelFormat_7(pThis, pPixelFormat);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICBitmapLock*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICBitmapLock*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICBitmapLock*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICBitmapLock*, uint *, uint *, win32.System.Com.HRESULT>GetSize_4;
                internal delegate *unmanaged[Stdcall]<IWICBitmapLock*, uint *, win32.System.Com.HRESULT>GetStride_5;
                internal delegate *unmanaged[Stdcall]<IWICBitmapLock*, uint *, byte **, win32.System.Com.HRESULT>GetDataPointer_6;
                internal delegate *unmanaged[Stdcall]<IWICBitmapLock*, global::System.Guid*, win32.System.Com.HRESULT>GetPixelFormat_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}