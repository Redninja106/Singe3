// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("00000103-A8F2-4877-BA0A-FD2B6645FB94")]
        internal unsafe struct IWICBitmapEncoder
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Initializes the encoder with an IStream which tells the encoder where to encode the bits.</summary>
            /// <param name = "pIStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>*</b></para>
            /// <para>The output stream.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-initialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "cacheOption">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapencodercacheoption">WICBitmapEncoderCacheOption</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapencodercacheoption">WICBitmapEncoderCacheOption</a> used on initialization.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-initialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-initialize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Initialize(win32.Storage.StructuredStorage.IStream*pIStream, win32.Graphics.Imaging.WICBitmapEncoderCacheOption cacheOption)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->Initialize_4(pThis, pIStream, cacheOption);
            }

            /// <inheritdoc cref = "GetContainerFormat(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetContainerFormat(out global::System.Guid pguidContainerFormat)
            {
                fixed (global::System.Guid*pguidContainerFormatLocal = &pguidContainerFormat)
                {
                    win32.System.Com.HRESULT __result = this.GetContainerFormat(pguidContainerFormatLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the encoder's container format.</summary>
            /// <param name = "pguidContainerFormat">
            /// <para>Type: <b>GUID*</b></para>
            /// <para>A pointer that receives the encoder's container format GUID.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-getcontainerformat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-getcontainerformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetContainerFormat(global::System.Guid*pguidContainerFormat)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->GetContainerFormat_5(pThis, pguidContainerFormat);
            }

            /// <summary>Retrieves an IWICBitmapEncoderInfo for the encoder.</summary>
            /// <param name = "ppIEncoderInfo">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapencoderinfo">IWICBitmapEncoderInfo</a>**</b></para>
            /// <para>A pointer that receives a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapencoderinfo">IWICBitmapEncoderInfo</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-getencoderinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-getencoderinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetEncoderInfo(win32.Graphics.Imaging.IWICBitmapEncoderInfo**ppIEncoderInfo)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->GetEncoderInfo_6(pThis, ppIEncoderInfo);
            }

            /// <summary>Sets the IWICColorContext objects for the encoder.</summary>
            /// <param name = "cCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a> to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setcolorcontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIColorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>**</b></para>
            /// <para>A pointer an <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a> pointer containing the color contexts to set for the encoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setcolorcontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setcolorcontexts">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetColorContexts(uint cCount, win32.Graphics.Imaging.IWICColorContext**ppIColorContext)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->SetColorContexts_7(pThis, cCount, ppIColorContext);
            }

            /// <summary>Sets the global palette for the image.</summary>
            /// <param name = "pIPalette">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a> to use as the global palette.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setpalette#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise.</para>
            /// <para>Returns WINCODEC_ERR_UNSUPPORTEDOPERATION if the feature is not supported by the encoder.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setpalette">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPalette(win32.Graphics.Imaging.IWICPalette*pIPalette)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->SetPalette_8(pThis, pIPalette);
            }

            /// <summary>Sets the global thumbnail for the image.</summary>
            /// <param name = "pIThumbnail">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a> to set as the global thumbnail.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setthumbnail#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise.</para>
            /// <para>Returns WINCODEC_ERR_UNSUPPORTEDOPERATION if the feature is not supported by the encoder.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setthumbnail">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetThumbnail(win32.Graphics.Imaging.IWICBitmapSource*pIThumbnail)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->SetThumbnail_9(pThis, pIThumbnail);
            }

            /// <summary>Sets the global preview for the image.</summary>
            /// <param name = "pIPreview">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a> to use as the global preview.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setpreview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise.</para>
            /// <para>Returns WINCODEC_ERR_UNSUPPORTEDOPERATION if the feature is not supported by the encoder.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-setpreview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPreview(win32.Graphics.Imaging.IWICBitmapSource*pIPreview)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->SetPreview_10(pThis, pIPreview);
            }

            /// <summary>Creates a new IWICBitmapFrameEncode instance.</summary>
            /// <param name = "ppIFrameEncode">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframeencode">IWICBitmapFrameEncode</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new instance of an <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframeencode">IWICBitmapFrameEncode</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-createnewframe#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIEncoderOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa768192(v=vs.85)">IPropertyBag2</a>**</b></para>
            /// <para>Optional. Receives the named properties to use for subsequent frame initialization. See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-createnewframe#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-createnewframe">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateNewFrame(win32.Graphics.Imaging.IWICBitmapFrameEncode**ppIFrameEncode, win32.System.Com.IPropertyBag2**ppIEncoderOptions)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->CreateNewFrame_11(pThis, ppIFrameEncode, ppIEncoderOptions);
            }

            /// <summary>Commits all changes for the image and closes the stream.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-commit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Commit()
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->Commit_12(pThis);
            }

            /// <summary>Retrieves a metadata query writer for the encoder.</summary>
            /// <param name = "ppIMetadataQueryWriter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataquerywriter">IWICMetadataQueryWriter</a>**</b></para>
            /// <para>When this method returns, contains a pointer to the encoder's metadata query writer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-getmetadataquerywriter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapencoder-getmetadataquerywriter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMetadataQueryWriter(win32.Graphics.Imaging.IWICMetadataQueryWriter**ppIMetadataQueryWriter)
            {
                fixed (IWICBitmapEncoder*pThis = &this)
                    return lpVtbl->GetMetadataQueryWriter_13(pThis, ppIMetadataQueryWriter);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.Storage.StructuredStorage.IStream*, win32.Graphics.Imaging.WICBitmapEncoderCacheOption, win32.System.Com.HRESULT>Initialize_4;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, global::System.Guid*, win32.System.Com.HRESULT>GetContainerFormat_5;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.Graphics.Imaging.IWICBitmapEncoderInfo**, win32.System.Com.HRESULT>GetEncoderInfo_6;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, uint, win32.Graphics.Imaging.IWICColorContext**, win32.System.Com.HRESULT>SetColorContexts_7;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.Graphics.Imaging.IWICPalette*, win32.System.Com.HRESULT>SetPalette_8;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.Graphics.Imaging.IWICBitmapSource*, win32.System.Com.HRESULT>SetThumbnail_9;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.Graphics.Imaging.IWICBitmapSource*, win32.System.Com.HRESULT>SetPreview_10;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.Graphics.Imaging.IWICBitmapFrameEncode**, win32.System.Com.IPropertyBag2**, win32.System.Com.HRESULT>CreateNewFrame_11;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.System.Com.HRESULT>Commit_12;
                internal delegate *unmanaged[Stdcall]<IWICBitmapEncoder*, win32.Graphics.Imaging.IWICMetadataQueryWriter**, win32.System.Com.HRESULT>GetMetadataQueryWriter_13;
            }

            private Vtbl*lpVtbl;
        }
    }
}