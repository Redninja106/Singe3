// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("135FF860-22B7-4DDF-B0F6-218F4F299A43")]
        internal unsafe struct IWICStream
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe win32.System.Com.HRESULT Read(void *pv, uint cb, [Optional] uint *pcbRead)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Read_4(pThis, pv, cb, pcbRead);
            }

            internal unsafe win32.System.Com.HRESULT Write(void *pv, uint cb, [Optional] uint *pcbWritten)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Write_5(pThis, pv, cb, pcbWritten);
            }

            internal unsafe win32.System.Com.HRESULT Seek(long dlibMove, win32.Storage.StructuredStorage.STREAM_SEEK dwOrigin, [Optional] ulong *plibNewPosition)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Seek_6(pThis, dlibMove, dwOrigin, plibNewPosition);
            }

            internal win32.System.Com.HRESULT SetSize(ulong libNewSize)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->SetSize_7(pThis, libNewSize);
            }

            internal unsafe win32.System.Com.HRESULT CopyTo(win32.Storage.StructuredStorage.IStream*pstm, ulong cb, [Optional] ulong *pcbRead, [Optional] ulong *pcbWritten)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->CopyTo_8(pThis, pstm, cb, pcbRead, pcbWritten);
            }

            internal win32.System.Com.HRESULT Commit(uint grfCommitFlags)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Commit_9(pThis, grfCommitFlags);
            }

            internal win32.System.Com.HRESULT Revert()
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Revert_10(pThis);
            }

            internal win32.System.Com.HRESULT LockRegion(ulong libOffset, ulong cb, uint dwLockType)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->LockRegion_11(pThis, libOffset, cb, dwLockType);
            }

            internal win32.System.Com.HRESULT UnlockRegion(ulong libOffset, ulong cb, uint dwLockType)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->UnlockRegion_12(pThis, libOffset, cb, dwLockType);
            }

            /// <inheritdoc cref = "Stat(win32.Storage.StructuredStorage.STATSTG*, uint)"/>
            internal unsafe win32.System.Com.HRESULT Stat(out win32.Storage.StructuredStorage.STATSTG pstatstg, uint grfStatFlag)
            {
                fixed (win32.Storage.StructuredStorage.STATSTG*pstatstgLocal = &pstatstg)
                {
                    win32.System.Com.HRESULT __result = this.Stat(pstatstgLocal, grfStatFlag);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT Stat(win32.Storage.StructuredStorage.STATSTG*pstatstg, uint grfStatFlag)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Stat_13(pThis, pstatstg, grfStatFlag);
            }

            internal unsafe win32.System.Com.HRESULT Clone(win32.Storage.StructuredStorage.IStream**ppstm)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->Clone_14(pThis, ppstm);
            }

            /// <summary>Initializes a stream from another stream. Access rights are inherited from the underlying stream.</summary>
            /// <param name = "pIStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>*</b></para>
            /// <para>The initialize stream.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromistream#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromistream">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT InitializeFromIStream(win32.Storage.StructuredStorage.IStream*pIStream)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->InitializeFromIStream_15(pThis, pIStream);
            }

            /// <inheritdoc cref = "InitializeFromFilename(win32.System.SystemServices.PCWSTR, uint)"/>
            internal unsafe win32.System.Com.HRESULT InitializeFromFilename(string wzFileName, uint dwDesiredAccess)
            {
                fixed (char *wzFileNameLocal = wzFileName)
                {
                    win32.System.Com.HRESULT __result = this.InitializeFromFilename(wzFileNameLocal, dwDesiredAccess);
                    return __result;
                }
            }

            /// <summary>Initializes a stream from a particular file.</summary>
            /// <param name = "wzFileName">
            /// <para>Type: <b>LPCWSTR</b></para>
            /// <para>The file used to initialize the stream.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dwDesiredAccess">
            /// <para>Type: <b>DWORD</b></para>
            /// <para>The desired file access mode.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromfilename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT InitializeFromFilename(win32.System.SystemServices.PCWSTR wzFileName, uint dwDesiredAccess)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->InitializeFromFilename_16(pThis, wzFileName, dwDesiredAccess);
            }

            /// <inheritdoc cref = "InitializeFromMemory(byte *, uint)"/>
            internal unsafe win32.System.Com.HRESULT InitializeFromMemory(Span<byte> pbBuffer)
            {
                fixed (byte *pbBufferLocal = pbBuffer)
                {
                    win32.System.Com.HRESULT __result = this.InitializeFromMemory(pbBufferLocal, (uint)pbBuffer.Length);
                    return __result;
                }
            }

            /// <summary>Initializes a stream to treat a block of memory as a stream. The stream cannot grow beyond the buffer size.</summary>
            /// <param name = "pbBuffer">
            /// <para>Type: <b>BYTE*</b></para>
            /// <para>Pointer to the buffer used to initialize the stream.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "cbBufferSize">
            /// <para>Type: <b>DWORD</b></para>
            /// <para>The size of buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefrommemory">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT InitializeFromMemory(byte *pbBuffer, uint cbBufferSize)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->InitializeFromMemory_17(pThis, pbBuffer, cbBufferSize);
            }

            /// <summary>Initializes the stream as a substream of another stream.</summary>
            /// <param name = "pIStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>*</b></para>
            /// <para>Pointer to the input stream.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromistreamregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ulOffset">
            /// <para>Type: <b>ULARGE_INTEGER</b></para>
            /// <para>The stream offset used to create the new stream.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromistreamregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ulMaxSize">
            /// <para>Type: <b>ULARGE_INTEGER</b></para>
            /// <para>The maximum size of the stream.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromistreamregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicstream-initializefromistreamregion">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT InitializeFromIStreamRegion(win32.Storage.StructuredStorage.IStream*pIStream, ulong ulOffset, ulong ulMaxSize)
            {
                fixed (IWICStream*pThis = &this)
                    return lpVtbl->InitializeFromIStreamRegion_18(pThis, pIStream, ulOffset, ulMaxSize);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICStream*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICStream*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICStream*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICStream*, void *, uint, uint *, win32.System.Com.HRESULT>Read_4;
                internal delegate *unmanaged[Stdcall]<IWICStream*, void *, uint, uint *, win32.System.Com.HRESULT>Write_5;
                internal delegate *unmanaged[Stdcall]<IWICStream*, long, win32.Storage.StructuredStorage.STREAM_SEEK, ulong *, win32.System.Com.HRESULT>Seek_6;
                internal delegate *unmanaged[Stdcall]<IWICStream*, ulong, win32.System.Com.HRESULT>SetSize_7;
                internal delegate *unmanaged[Stdcall]<IWICStream*, win32.Storage.StructuredStorage.IStream*, ulong, ulong *, ulong *, win32.System.Com.HRESULT>CopyTo_8;
                internal delegate *unmanaged[Stdcall]<IWICStream*, uint, win32.System.Com.HRESULT>Commit_9;
                internal delegate *unmanaged[Stdcall]<IWICStream*, win32.System.Com.HRESULT>Revert_10;
                internal delegate *unmanaged[Stdcall]<IWICStream*, ulong, ulong, uint, win32.System.Com.HRESULT>LockRegion_11;
                internal delegate *unmanaged[Stdcall]<IWICStream*, ulong, ulong, uint, win32.System.Com.HRESULT>UnlockRegion_12;
                internal delegate *unmanaged[Stdcall]<IWICStream*, win32.Storage.StructuredStorage.STATSTG*, uint, win32.System.Com.HRESULT>Stat_13;
                internal delegate *unmanaged[Stdcall]<IWICStream*, win32.Storage.StructuredStorage.IStream**, win32.System.Com.HRESULT>Clone_14;
                internal delegate *unmanaged[Stdcall]<IWICStream*, win32.Storage.StructuredStorage.IStream*, win32.System.Com.HRESULT>InitializeFromIStream_15;
                internal delegate *unmanaged[Stdcall]<IWICStream*, win32.System.SystemServices.PCWSTR, uint, win32.System.Com.HRESULT>InitializeFromFilename_16;
                internal delegate *unmanaged[Stdcall]<IWICStream*, byte *, uint, win32.System.Com.HRESULT>InitializeFromMemory_17;
                internal delegate *unmanaged[Stdcall]<IWICStream*, win32.Storage.StructuredStorage.IStream*, ulong, ulong, win32.System.Com.HRESULT>InitializeFromIStreamRegion_18;
            }

            private Vtbl*lpVtbl;
        }
    }
}