// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("9EDDE9E7-8DEE-47EA-99DF-E6FAF2ED44BF")]
        internal unsafe struct IWICBitmapDecoder
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "QueryCapability(win32.Storage.StructuredStorage.IStream*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT QueryCapability(win32.Storage.StructuredStorage.IStream*pIStream, out uint pdwCapability)
            {
                fixed (uint *pdwCapabilityLocal = &pdwCapability)
                {
                    win32.System.Com.HRESULT __result = this.QueryCapability(pIStream, pdwCapabilityLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the capabilities of the decoder based on the specified stream.</summary>
            /// <param name = "pIStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>*</b></para>
            /// <para>The stream to retrieve the decoder capabilities from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-querycapability#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pdwCapability">
            /// <para>Type: <b>DWORD*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapdecodercapabilities">WICBitmapDecoderCapabilities</a> of the decoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-querycapability#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-querycapability">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT QueryCapability(win32.Storage.StructuredStorage.IStream*pIStream, uint *pdwCapability)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->QueryCapability_4(pThis, pIStream, pdwCapability);
            }

            /// <summary>Initializes the decoder with the provided stream.</summary>
            /// <param name = "pIStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>*</b></para>
            /// <para>The stream to use for initialization.</para>
            /// <para>The stream contains the encoded pixels which are decoded each time the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nf-wincodec-iwicbitmapsource-copypixels">CopyPixels</a> method on the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframedecode">IWICBitmapFrameDecode</a> interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nf-wincodec-iwicbitmapdecoder-getframe">GetFrame</a>) is invoked.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-initialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "cacheOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a> to use for initialization.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-initialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-initialize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Initialize(win32.Storage.StructuredStorage.IStream*pIStream, win32.Graphics.Imaging.WICDecodeOptions cacheOptions)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->Initialize_5(pThis, pIStream, cacheOptions);
            }

            /// <inheritdoc cref = "GetContainerFormat(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetContainerFormat(out global::System.Guid pguidContainerFormat)
            {
                fixed (global::System.Guid*pguidContainerFormatLocal = &pguidContainerFormat)
                {
                    win32.System.Com.HRESULT __result = this.GetContainerFormat(pguidContainerFormatLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the image's container format.</summary>
            /// <param name = "pguidContainerFormat">
            /// <para>Type: <b>GUID*</b></para>
            /// <para>A pointer that receives the image's container format GUID.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getcontainerformat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getcontainerformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetContainerFormat(global::System.Guid*pguidContainerFormat)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetContainerFormat_6(pThis, pguidContainerFormat);
            }

            /// <summary>Retrieves an IWICBitmapDecoderInfo for the image.</summary>
            /// <param name = "ppIDecoderInfo">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoderinfo">IWICBitmapDecoderInfo</a>**</b></para>
            /// <para>A pointer that receives a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoderinfo">IWICBitmapDecoderInfo</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getdecoderinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getdecoderinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetDecoderInfo(win32.Graphics.Imaging.IWICBitmapDecoderInfo**ppIDecoderInfo)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetDecoderInfo_7(pThis, ppIDecoderInfo);
            }

            /// <summary>Copies the decoder's IWICPalette .</summary>
            /// <param name = "pIPalette">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a>*</b></para>
            /// <para>An<a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a> to which the decoder's global palette is to be copied. Use <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nf-wincodec-iwicimagingfactory-createpalette">CreatePalette</a> to create the destination palette before calling <b>CopyPalette</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-copypalette#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-copypalette">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CopyPalette(win32.Graphics.Imaging.IWICPalette*pIPalette)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->CopyPalette_8(pThis, pIPalette);
            }

            /// <summary>Retrieves the metadata query reader from the decoder.</summary>
            /// <param name = "ppIMetadataQueryReader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataqueryreader">IWICMetadataQueryReader</a>**</b></para>
            /// <para>Receives a pointer to the decoder's <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataqueryreader">IWICMetadataQueryReader</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getmetadataqueryreader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getmetadataqueryreader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMetadataQueryReader(win32.Graphics.Imaging.IWICMetadataQueryReader**ppIMetadataQueryReader)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetMetadataQueryReader_9(pThis, ppIMetadataQueryReader);
            }

            /// <summary>Retrieves a preview image, if supported.</summary>
            /// <param name = "ppIBitmapSource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>**</b></para>
            /// <para>Receives a pointer to the preview bitmap if supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getpreview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getpreview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPreview(win32.Graphics.Imaging.IWICBitmapSource**ppIBitmapSource)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetPreview_10(pThis, ppIBitmapSource);
            }

            /// <inheritdoc cref = "GetColorContexts(uint, win32.Graphics.Imaging.IWICColorContext**, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetColorContexts(uint cCount, win32.Graphics.Imaging.IWICColorContext**ppIColorContexts, out uint pcActualCount)
            {
                fixed (uint *pcActualCountLocal = &pcActualCount)
                {
                    win32.System.Com.HRESULT __result = this.GetColorContexts(cCount, ppIColorContexts, pcActualCountLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the IWICColorContext objects of the image.</summary>
            /// <param name = "cCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of color contexts to retrieve.</para>
            /// <para>This value must be the size of, or smaller than, the size available to <i>ppIColorContexts</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getcolorcontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIColorContexts">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>**</b></para>
            /// <para>A pointer that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getcolorcontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcActualCount">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the number of color contexts contained in the image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getcolorcontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getcolorcontexts">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetColorContexts(uint cCount, win32.Graphics.Imaging.IWICColorContext**ppIColorContexts, uint *pcActualCount)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetColorContexts_11(pThis, cCount, ppIColorContexts, pcActualCount);
            }

            /// <summary>Retrieves a bitmap thumbnail of the image, if one exists</summary>
            /// <param name = "ppIThumbnail">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>**</b></para>
            /// <para>Receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a> of the thumbnail.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getthumbnail#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getthumbnail">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetThumbnail(win32.Graphics.Imaging.IWICBitmapSource**ppIThumbnail)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetThumbnail_12(pThis, ppIThumbnail);
            }

            /// <inheritdoc cref = "GetFrameCount(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetFrameCount(out uint pCount)
            {
                fixed (uint *pCountLocal = &pCount)
                {
                    win32.System.Com.HRESULT __result = this.GetFrameCount(pCountLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the total number of frames in the image.</summary>
            /// <param name = "pCount">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>A pointer that receives the total number of frames in the image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getframecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getframecount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFrameCount(uint *pCount)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetFrameCount_13(pThis, pCount);
            }

            /// <summary>Retrieves the specified frame of the image.</summary>
            /// <param name = "index">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The particular frame to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getframe#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIBitmapFrame">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframedecode">IWICBitmapFrameDecode</a>**</b></para>
            /// <para>A pointer that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframedecode">IWICBitmapFrameDecode</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getframe#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoder-getframe">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetFrame(uint index, win32.Graphics.Imaging.IWICBitmapFrameDecode**ppIBitmapFrame)
            {
                fixed (IWICBitmapDecoder*pThis = &this)
                    return lpVtbl->GetFrame_14(pThis, index, ppIBitmapFrame);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, win32.Storage.StructuredStorage.IStream*, uint *, win32.System.Com.HRESULT>QueryCapability_4;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, win32.Storage.StructuredStorage.IStream*, win32.Graphics.Imaging.WICDecodeOptions, win32.System.Com.HRESULT>Initialize_5;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, global::System.Guid*, win32.System.Com.HRESULT>GetContainerFormat_6;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, win32.Graphics.Imaging.IWICBitmapDecoderInfo**, win32.System.Com.HRESULT>GetDecoderInfo_7;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, win32.Graphics.Imaging.IWICPalette*, win32.System.Com.HRESULT>CopyPalette_8;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, win32.Graphics.Imaging.IWICMetadataQueryReader**, win32.System.Com.HRESULT>GetMetadataQueryReader_9;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, win32.Graphics.Imaging.IWICBitmapSource**, win32.System.Com.HRESULT>GetPreview_10;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, uint, win32.Graphics.Imaging.IWICColorContext**, uint *, win32.System.Com.HRESULT>GetColorContexts_11;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, win32.Graphics.Imaging.IWICBitmapSource**, win32.System.Com.HRESULT>GetThumbnail_12;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, uint *, win32.System.Com.HRESULT>GetFrameCount_13;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoder*, uint, win32.Graphics.Imaging.IWICBitmapFrameDecode**, win32.System.Com.HRESULT>GetFrame_14;
            }

            private Vtbl*lpVtbl;
        }
    }
}