// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("EC5EC8A9-C395-4314-9C77-54D7A935FF70")]
        internal unsafe struct IWICImagingFactory
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "CreateDecoderFromFilename(win32.System.SystemServices.PCWSTR, global::System.Guid*, uint, win32.Graphics.Imaging.WICDecodeOptions, win32.Graphics.Imaging.IWICBitmapDecoder**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDecoderFromFilename(string wzFilename, in global::System.Guid pguidVendor, uint dwDesiredAccess, win32.Graphics.Imaging.WICDecodeOptions metadataOptions, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    fixed (char *wzFilenameLocal = wzFilename)
                    {
                        win32.System.Com.HRESULT __result = this.CreateDecoderFromFilename(wzFilenameLocal, pguidVendorLocal, dwDesiredAccess, metadataOptions, ppIDecoder);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a new instance of the IWICBitmapDecoder class based on the given file.</summary>
            /// <param name = "wzFilename">
            /// <para>Type: <b>LPCWSTR</b></para>
            /// <para>A pointer to a null-terminated string that specifies the name of an object to create or open.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The GUID for the preferred decoder vendor. Use <b>NULL</b> if no preferred vendor.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dwDesiredAccess">
            /// <para>Type: <b>DWORD</b> The access to the object, which can be read, write, or both.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "metadataOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a> to use when creating the decoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIDecoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilename#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilename">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDecoderFromFilename(win32.System.SystemServices.PCWSTR wzFilename, global::System.Guid*pguidVendor, uint dwDesiredAccess, win32.Graphics.Imaging.WICDecodeOptions metadataOptions, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateDecoderFromFilename_4(pThis, wzFilename, pguidVendor, dwDesiredAccess, metadataOptions, ppIDecoder);
            }

            /// <inheritdoc cref = "CreateDecoderFromStream(win32.Storage.StructuredStorage.IStream*, global::System.Guid*, win32.Graphics.Imaging.WICDecodeOptions, win32.Graphics.Imaging.IWICBitmapDecoder**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDecoderFromStream(win32.Storage.StructuredStorage.IStream*pIStream, in global::System.Guid pguidVendor, win32.Graphics.Imaging.WICDecodeOptions metadataOptions, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    win32.System.Com.HRESULT __result = this.CreateDecoderFromStream(pIStream, pguidVendorLocal, metadataOptions, ppIDecoder);
                    return __result;
                }
            }

            /// <summary>Creates a new instance of the IWICBitmapDecoder class based on the given IStream.</summary>
            /// <param name = "pIStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>*</b></para>
            /// <para>The stream to create the decoder from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromstream#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The GUID for the preferred decoder vendor. Use <b>NULL</b> if no preferred vendor.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromstream#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "metadataOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a> to use when creating the decoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromstream#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIDecoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromstream#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromstream">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDecoderFromStream(win32.Storage.StructuredStorage.IStream*pIStream, global::System.Guid*pguidVendor, win32.Graphics.Imaging.WICDecodeOptions metadataOptions, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateDecoderFromStream_5(pThis, pIStream, pguidVendor, metadataOptions, ppIDecoder);
            }

            /// <inheritdoc cref = "CreateDecoderFromFileHandle(nuint, global::System.Guid*, win32.Graphics.Imaging.WICDecodeOptions, win32.Graphics.Imaging.IWICBitmapDecoder**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDecoderFromFileHandle(nuint hFile, in global::System.Guid pguidVendor, win32.Graphics.Imaging.WICDecodeOptions metadataOptions, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    win32.System.Com.HRESULT __result = this.CreateDecoderFromFileHandle(hFile, pguidVendorLocal, metadataOptions, ppIDecoder);
                    return __result;
                }
            }

            /// <summary>Creates a new instance of the IWICBitmapDecoder based on the given file handle.</summary>
            /// <param name = "hFile">
            /// <para>Type: <b>ULONG_PTR</b></para>
            /// <para>The file handle to create the decoder from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilehandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The GUID for the preferred decoder vendor. Use <b>NULL</b> if no preferred vendor.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilehandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "metadataOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicdecodeoptions">WICDecodeOptions</a> to use when creating the decoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilehandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIDecoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilehandle#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoderfromfilehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDecoderFromFileHandle(nuint hFile, global::System.Guid*pguidVendor, win32.Graphics.Imaging.WICDecodeOptions metadataOptions, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateDecoderFromFileHandle_6(pThis, hFile, pguidVendor, metadataOptions, ppIDecoder);
            }

            /// <inheritdoc cref = "CreateComponentInfo(global::System.Guid*, win32.Graphics.Imaging.IWICComponentInfo**)"/>
            internal unsafe win32.System.Com.HRESULT CreateComponentInfo(in global::System.Guid clsidComponent, win32.Graphics.Imaging.IWICComponentInfo**ppIInfo)
            {
                fixed (global::System.Guid*clsidComponentLocal = &clsidComponent)
                {
                    win32.System.Com.HRESULT __result = this.CreateComponentInfo(clsidComponentLocal, ppIInfo);
                    return __result;
                }
            }

            /// <summary>Creates a new instance of the IWICComponentInfo class for the given component class identifier (CLSID).</summary>
            /// <param name = "clsidComponent">
            /// <para>Type: <b>REFCLSID</b></para>
            /// <para>The CLSID for the desired component.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcomponentinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIInfo">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccomponentinfo">IWICComponentInfo</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccomponentinfo">IWICComponentInfo</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcomponentinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcomponentinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateComponentInfo(global::System.Guid*clsidComponent, win32.Graphics.Imaging.IWICComponentInfo**ppIInfo)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateComponentInfo_7(pThis, clsidComponent, ppIInfo);
            }

            /// <inheritdoc cref = "CreateDecoder(global::System.Guid*, global::System.Guid*, win32.Graphics.Imaging.IWICBitmapDecoder**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDecoder(in global::System.Guid guidContainerFormat, in global::System.Guid pguidVendor, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    fixed (global::System.Guid*guidContainerFormatLocal = &guidContainerFormat)
                    {
                        win32.System.Com.HRESULT __result = this.CreateDecoder(guidContainerFormatLocal, pguidVendorLocal, ppIDecoder);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a new instance of IWICBitmapDecoder.</summary>
            /// <param name = "guidContainerFormat">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The GUID for the desired container format.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The GUID for the preferred encoder vendor.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIDecoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>. You must initialize this <b>IWICBitmapDecoder</b> on a stream using the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nf-wincodec-iwicbitmapdecoder-initialize">Initialize</a> method later.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createdecoder">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDecoder(global::System.Guid*guidContainerFormat, global::System.Guid*pguidVendor, win32.Graphics.Imaging.IWICBitmapDecoder**ppIDecoder)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateDecoder_8(pThis, guidContainerFormat, pguidVendor, ppIDecoder);
            }

            /// <inheritdoc cref = "CreateEncoder(global::System.Guid*, global::System.Guid*, win32.Graphics.Imaging.IWICBitmapEncoder**)"/>
            internal unsafe win32.System.Com.HRESULT CreateEncoder(in global::System.Guid guidContainerFormat, in global::System.Guid pguidVendor, win32.Graphics.Imaging.IWICBitmapEncoder**ppIEncoder)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    fixed (global::System.Guid*guidContainerFormatLocal = &guidContainerFormat)
                    {
                        win32.System.Com.HRESULT __result = this.CreateEncoder(guidContainerFormatLocal, pguidVendorLocal, ppIEncoder);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a new instance of the IWICBitmapEncoder class.</summary>
            /// <param name = "guidContainerFormat">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The GUID for the desired container format.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createencoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The GUID for the preferred encoder vendor.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createencoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIEncoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapencoder">IWICBitmapEncoder</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapencoder">IWICBitmapEncoder</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createencoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createencoder">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateEncoder(global::System.Guid*guidContainerFormat, global::System.Guid*pguidVendor, win32.Graphics.Imaging.IWICBitmapEncoder**ppIEncoder)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateEncoder_9(pThis, guidContainerFormat, pguidVendor, ppIEncoder);
            }

            /// <summary>Creates a new instance of the IWICPalette class.</summary>
            /// <param name = "ppIPalette">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createpalette#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createpalette">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePalette(win32.Graphics.Imaging.IWICPalette**ppIPalette)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreatePalette_10(pThis, ppIPalette);
            }

            /// <summary>Creates a new instance of the IWICFormatConverter class.</summary>
            /// <param name = "ppIFormatConverter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicformatconverter">IWICFormatConverter</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicformatconverter">IWICFormatConverter</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createformatconverter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createformatconverter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateFormatConverter(win32.Graphics.Imaging.IWICFormatConverter**ppIFormatConverter)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateFormatConverter_11(pThis, ppIFormatConverter);
            }

            /// <summary>Creates a new instance of an IWICBitmapScaler.</summary>
            /// <param name = "ppIBitmapScaler">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapscaler">IWICBitmapScaler</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapscaler">IWICBitmapScaler</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapscaler#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapscaler">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapScaler(win32.Graphics.Imaging.IWICBitmapScaler**ppIBitmapScaler)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapScaler_12(pThis, ppIBitmapScaler);
            }

            /// <summary>Creates a new instance of an IWICBitmapClipper object.</summary>
            /// <param name = "ppIBitmapClipper">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapclipper">IWICBitmapClipper</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapclipper">IWICBitmapClipper</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapclipper#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapclipper">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapClipper(win32.Graphics.Imaging.IWICBitmapClipper**ppIBitmapClipper)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapClipper_13(pThis, ppIBitmapClipper);
            }

            /// <summary>Creates a new instance of an IWICBitmapFlipRotator object.</summary>
            /// <param name = "ppIBitmapFlipRotator">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapfliprotator">IWICBitmapFlipRotator</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapfliprotator">IWICBitmapFlipRotator</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfliprotator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfliprotator">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFlipRotator(win32.Graphics.Imaging.IWICBitmapFlipRotator**ppIBitmapFlipRotator)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapFlipRotator_14(pThis, ppIBitmapFlipRotator);
            }

            /// <summary>Creates a new instance of the IWICStream class.</summary>
            /// <param name = "ppIWICStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicstream">IWICStream</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicstream">IWICStream</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createstream#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createstream">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateStream(win32.Graphics.Imaging.IWICStream**ppIWICStream)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateStream_15(pThis, ppIWICStream);
            }

            /// <summary>Creates a new instance of the IWICColorContext class.</summary>
            /// <param name = "ppIWICColorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcolorcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcolorcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorContext(win32.Graphics.Imaging.IWICColorContext**ppIWICColorContext)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateColorContext_16(pThis, ppIWICColorContext);
            }

            /// <summary>Creates a new instance of the IWICColorTransform class.</summary>
            /// <param name = "ppIWICColorTransform">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolortransform">IWICColorTransform</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolortransform">IWICColorTransform</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcolortransformer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcolortransformer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateColorTransformer(win32.Graphics.Imaging.IWICColorTransform**ppIWICColorTransform)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateColorTransformer_17(pThis, ppIWICColorTransform);
            }

            /// <inheritdoc cref = "CreateBitmap(uint, uint, global::System.Guid*, win32.Graphics.Imaging.WICBitmapCreateCacheOption, win32.Graphics.Imaging.IWICBitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(uint uiWidth, uint uiHeight, in global::System.Guid pixelFormat, win32.Graphics.Imaging.WICBitmapCreateCacheOption option, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (global::System.Guid*pixelFormatLocal = &pixelFormat)
                {
                    win32.System.Com.HRESULT __result = this.CreateBitmap(uiWidth, uiHeight, pixelFormatLocal, option, ppIBitmap);
                    return __result;
                }
            }

            /// <summary>Creates an IWICBitmap object.</summary>
            /// <param name = "uiWidth">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The width of the new bitmap .</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "uiHeight">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The height of the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pixelFormat">
            /// <para>Type: <b>REFWICPixelFormatGUID</b></para>
            /// <para>The pixel format of the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "option">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapcreatecacheoption">WICBitmapCreateCacheOption</a></b></para>
            /// <para>The cache creation options of the new bitmap. This can be one of the values in the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapcreatecacheoption">WICBitmapCreateCacheOption</a> enumeration.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIBitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmap">IWICBitmap</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmap(uint uiWidth, uint uiHeight, global::System.Guid*pixelFormat, win32.Graphics.Imaging.WICBitmapCreateCacheOption option, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmap_18(pThis, uiWidth, uiHeight, pixelFormat, option, ppIBitmap);
            }

            /// <summary>Creates a IWICBitmap from a IWICBitmapSource.</summary>
            /// <param name = "pIBitmapSource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a> to create the bitmap from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "option">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapcreatecacheoption">WICBitmapCreateCacheOption</a></b></para>
            /// <para>The cache options of the new bitmap.  This can be one of the values in the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapcreatecacheoption">WICBitmapCreateCacheOption</a> enumeration.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIBitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmap">IWICBitmap</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromSource(win32.Graphics.Imaging.IWICBitmapSource*pIBitmapSource, win32.Graphics.Imaging.WICBitmapCreateCacheOption option, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapFromSource_19(pThis, pIBitmapSource, option, ppIBitmap);
            }

            /// <summary>Creates an IWICBitmap from a specified rectangle of an IWICBitmapSource.</summary>
            /// <param name = "pIBitmapSource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a> to create the bitmap from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "x">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The horizontal coordinate of the upper-left corner of the rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "y">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The vertical coordinate of the upper-left corner of the rectangle.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "width">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The width of the rectangle and the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "height">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The height of the rectangle and the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIBitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmap">IWICBitmap</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsourcerect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromsourcerect">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromSourceRect(win32.Graphics.Imaging.IWICBitmapSource*pIBitmapSource, uint x, uint y, uint width, uint height, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapFromSourceRect_20(pThis, pIBitmapSource, x, y, width, height, ppIBitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromMemory(uint, uint, global::System.Guid*, uint, uint, byte *, win32.Graphics.Imaging.IWICBitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromMemory(uint uiWidth, uint uiHeight, in global::System.Guid pixelFormat, uint cbStride, Span<byte> pbBuffer, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (byte *pbBufferLocal = pbBuffer)
                {
                    fixed (global::System.Guid*pixelFormatLocal = &pixelFormat)
                    {
                        win32.System.Com.HRESULT __result = this.CreateBitmapFromMemory(uiWidth, uiHeight, pixelFormatLocal, cbStride, (uint)pbBuffer.Length, pbBufferLocal, ppIBitmap);
                        return __result;
                    }
                }
            }

            /// <summary>Creates an IWICBitmap from a memory block.</summary>
            /// <param name = "uiWidth">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The width of the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "uiHeight">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The height of the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pixelFormat">
            /// <para>Type: <b>REFWICPixelFormatGUID</b></para>
            /// <para>The pixel format of the new bitmap.  For valid pixel formats, see <a href = "https://docs.microsoft.com/windows/desktop/wic/-wic-codec-native-pixel-formats">Native Pixel Formats</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "cbStride">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of bytes between successive scanlines in <i>pbBuffer</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "cbBufferSize">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The size of <i>pbBuffer</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pbBuffer">
            /// <para>Type: <b>BYTE*</b></para>
            /// <para>The buffer used to create the bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIBitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmap">IWICBitmap</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfrommemory">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromMemory(uint uiWidth, uint uiHeight, global::System.Guid*pixelFormat, uint cbStride, uint cbBufferSize, byte *pbBuffer, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapFromMemory_21(pThis, uiWidth, uiHeight, pixelFormat, cbStride, cbBufferSize, pbBuffer, ppIBitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromHBITMAP(win32.Graphics.Gdi.HBITMAP, win32.Graphics.Gdi.HPALETTE, win32.Graphics.Imaging.WICBitmapAlphaChannelOption, win32.Graphics.Imaging.IWICBitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromHBITMAP(SafeHandle hBitmap, SafeHandle hPalette, win32.Graphics.Imaging.WICBitmapAlphaChannelOption options, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                bool hBitmapAddRef = false;
                bool hPaletteAddRef = false;
                try
                {
                    win32.Graphics.Gdi.HBITMAP hBitmapLocal;
                    if (hBitmap is object)
                    {
                        hBitmap.DangerousAddRef(ref hBitmapAddRef);
                        hBitmapLocal = (win32.Graphics.Gdi.HBITMAP)hBitmap.DangerousGetHandle();
                    }
                    else
                        hBitmapLocal = default(win32.Graphics.Gdi.HBITMAP);
                    win32.Graphics.Gdi.HPALETTE hPaletteLocal;
                    if (hPalette is object)
                    {
                        hPalette.DangerousAddRef(ref hPaletteAddRef);
                        hPaletteLocal = (win32.Graphics.Gdi.HPALETTE)hPalette.DangerousGetHandle();
                    }
                    else
                        hPaletteLocal = default(win32.Graphics.Gdi.HPALETTE);
                    win32.System.Com.HRESULT __result = this.CreateBitmapFromHBITMAP(hBitmapLocal, hPaletteLocal, options, ppIBitmap);
                    return __result;
                }
                finally
                {
                    if (hBitmapAddRef)
                        hBitmap.DangerousRelease();
                    if (hPaletteAddRef)
                        hPalette.DangerousRelease();
                }
            }

            /// <summary>Creates an IWICBitmap from a bitmap handle.</summary>
            /// <param name = "hBitmap">
            /// <para>Type: <b>HBITMAP</b></para>
            /// <para>A bitmap handle to create the bitmap from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "hPalette">
            /// <para>Type: <b>HPALETTE</b></para>
            /// <para>A palette handle used to create the bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "options">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wicbitmapalphachanneloption">WICBitmapAlphaChannelOption</a></b></para>
            /// <para>The alpha channel options to create the bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIBitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmap">IWICBitmap</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhbitmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhbitmap">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromHBITMAP(win32.Graphics.Gdi.HBITMAP hBitmap, win32.Graphics.Gdi.HPALETTE hPalette, win32.Graphics.Imaging.WICBitmapAlphaChannelOption options, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapFromHBITMAP_22(pThis, hBitmap, hPalette, options, ppIBitmap);
            }

            /// <inheritdoc cref = "CreateBitmapFromHICON(win32.UI.MenusAndResources.HICON, win32.Graphics.Imaging.IWICBitmap**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromHICON(SafeHandle hIcon, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                bool hIconAddRef = false;
                try
                {
                    win32.UI.MenusAndResources.HICON hIconLocal;
                    if (hIcon is object)
                    {
                        hIcon.DangerousAddRef(ref hIconAddRef);
                        hIconLocal = (win32.UI.MenusAndResources.HICON)hIcon.DangerousGetHandle();
                    }
                    else
                        hIconLocal = default(win32.UI.MenusAndResources.HICON);
                    win32.System.Com.HRESULT __result = this.CreateBitmapFromHICON(hIconLocal, ppIBitmap);
                    return __result;
                }
                finally
                {
                    if (hIconAddRef)
                        hIcon.DangerousRelease();
                }
            }

            /// <summary>Creates an IWICBitmap from an icon handle.</summary>
            /// <param name = "hIcon">
            /// <para>Type: <b>HICON</b></para>
            /// <para>The icon handle to create the new bitmap from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhicon#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIBitmap">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmap">IWICBitmap</a>**</b></para>
            /// <para>A pointer that receives a pointer to the new bitmap.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhicon#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createbitmapfromhicon">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBitmapFromHICON(win32.UI.MenusAndResources.HICON hIcon, win32.Graphics.Imaging.IWICBitmap**ppIBitmap)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateBitmapFromHICON_23(pThis, hIcon, ppIBitmap);
            }

            /// <summary>Creates an IEnumUnknown object of the specified component types.</summary>
            /// <param name = "componentTypes">
            /// <para>Type: <b>DWORD</b></para>
            /// <para>The types of <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wiccomponenttype">WICComponentType</a> to enumerate.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcomponentenumerator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "options">
            /// <para>Type: <b>DWORD</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ne-wincodec-wiccomponentenumerateoptions">WICComponentEnumerateOptions</a> used to enumerate the given component types.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcomponentenumerator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIEnumUnknown">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumunknown">IEnumUnknown</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new component enumerator.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcomponentenumerator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createcomponentenumerator">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateComponentEnumerator(uint componentTypes, uint options, win32.System.Com.IEnumUnknown**ppIEnumUnknown)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateComponentEnumerator_24(pThis, componentTypes, options, ppIEnumUnknown);
            }

            /// <summary>Creates a new instance of the fast metadata encoder based on the given IWICBitmapDecoder.</summary>
            /// <param name = "pIDecoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>*</b></para>
            /// <para>The decoder to create the fast metadata encoder from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createfastmetadataencoderfromdecoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIFastEncoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicfastmetadataencoder">IWICFastMetadataEncoder</a>**</b></para>
            /// <para>When this method returns, contains a pointer to the new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicfastmetadataencoder">IWICFastMetadataEncoder</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createfastmetadataencoderfromdecoder#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createfastmetadataencoderfromdecoder">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateFastMetadataEncoderFromDecoder(win32.Graphics.Imaging.IWICBitmapDecoder*pIDecoder, win32.Graphics.Imaging.IWICFastMetadataEncoder**ppIFastEncoder)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateFastMetadataEncoderFromDecoder_25(pThis, pIDecoder, ppIFastEncoder);
            }

            /// <summary>Creates a new instance of the fast metadata encoder based on the given image frame.</summary>
            /// <param name = "pIFrameDecoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframedecode">IWICBitmapFrameDecode</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframedecode">IWICBitmapFrameDecode</a> to create the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicfastmetadataencoder">IWICFastMetadataEncoder</a> from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createfastmetadataencoderfromframedecode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIFastEncoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicfastmetadataencoder">IWICFastMetadataEncoder</a>**</b></para>
            /// <para>When this method returns, contains a pointer to a new fast metadata encoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createfastmetadataencoderfromframedecode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createfastmetadataencoderfromframedecode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateFastMetadataEncoderFromFrameDecode(win32.Graphics.Imaging.IWICBitmapFrameDecode*pIFrameDecoder, win32.Graphics.Imaging.IWICFastMetadataEncoder**ppIFastEncoder)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateFastMetadataEncoderFromFrameDecode_26(pThis, pIFrameDecoder, ppIFastEncoder);
            }

            /// <inheritdoc cref = "CreateQueryWriter(global::System.Guid*, global::System.Guid*, win32.Graphics.Imaging.IWICMetadataQueryWriter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateQueryWriter(in global::System.Guid guidMetadataFormat, in global::System.Guid pguidVendor, win32.Graphics.Imaging.IWICMetadataQueryWriter**ppIQueryWriter)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    fixed (global::System.Guid*guidMetadataFormatLocal = &guidMetadataFormat)
                    {
                        win32.System.Com.HRESULT __result = this.CreateQueryWriter(guidMetadataFormatLocal, pguidVendorLocal, ppIQueryWriter);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a new instance of a query writer.</summary>
            /// <param name = "guidMetadataFormat">
            /// <para>Type: <b>REFGUID</b></para>
            /// <para>The GUID for the desired metadata format.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The GUID for the preferred metadata writer vendor. Use <b>NULL</b> if no preferred vendor.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIQueryWriter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataquerywriter">IWICMetadataQueryWriter</a>**</b></para>
            /// <para>When this method returns, contains a pointer to a new <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataquerywriter">IWICMetadataQueryWriter</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateQueryWriter(global::System.Guid*guidMetadataFormat, global::System.Guid*pguidVendor, win32.Graphics.Imaging.IWICMetadataQueryWriter**ppIQueryWriter)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateQueryWriter_27(pThis, guidMetadataFormat, pguidVendor, ppIQueryWriter);
            }

            /// <inheritdoc cref = "CreateQueryWriterFromReader(win32.Graphics.Imaging.IWICMetadataQueryReader*, global::System.Guid*, win32.Graphics.Imaging.IWICMetadataQueryWriter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateQueryWriterFromReader(win32.Graphics.Imaging.IWICMetadataQueryReader*pIQueryReader, in global::System.Guid pguidVendor, win32.Graphics.Imaging.IWICMetadataQueryWriter**ppIQueryWriter)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    win32.System.Com.HRESULT __result = this.CreateQueryWriterFromReader(pIQueryReader, pguidVendorLocal, ppIQueryWriter);
                    return __result;
                }
            }

            /// <summary>Creates a new instance of a query writer based on the given query reader. The query writer will be pre-populated with metadata from the query reader.</summary>
            /// <param name = "pIQueryReader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataqueryreader">IWICMetadataQueryReader</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataqueryreader">IWICMetadataQueryReader</a> to create the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataquerywriter">IWICMetadataQueryWriter</a> from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriterfromreader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pguidVendor">
            /// <para>Type: <b>const GUID*</b></para>
            /// <para>The GUID for the preferred metadata writer vendor. Use <b>NULL</b> if no preferred vendor.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriterfromreader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIQueryWriter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataquerywriter">IWICMetadataQueryWriter</a>**</b></para>
            /// <para>When this method returns, contains a pointer to a new metadata writer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriterfromreader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicimagingfactory-createquerywriterfromreader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateQueryWriterFromReader(win32.Graphics.Imaging.IWICMetadataQueryReader*pIQueryReader, global::System.Guid*pguidVendor, win32.Graphics.Imaging.IWICMetadataQueryWriter**ppIQueryWriter)
            {
                fixed (IWICImagingFactory*pThis = &this)
                    return lpVtbl->CreateQueryWriterFromReader_28(pThis, pIQueryReader, pguidVendor, ppIQueryWriter);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.System.SystemServices.PCWSTR, global::System.Guid*, uint, win32.Graphics.Imaging.WICDecodeOptions, win32.Graphics.Imaging.IWICBitmapDecoder**, win32.System.Com.HRESULT>CreateDecoderFromFilename_4;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Storage.StructuredStorage.IStream*, global::System.Guid*, win32.Graphics.Imaging.WICDecodeOptions, win32.Graphics.Imaging.IWICBitmapDecoder**, win32.System.Com.HRESULT>CreateDecoderFromStream_5;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, nuint, global::System.Guid*, win32.Graphics.Imaging.WICDecodeOptions, win32.Graphics.Imaging.IWICBitmapDecoder**, win32.System.Com.HRESULT>CreateDecoderFromFileHandle_6;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, global::System.Guid*, win32.Graphics.Imaging.IWICComponentInfo**, win32.System.Com.HRESULT>CreateComponentInfo_7;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, global::System.Guid*, global::System.Guid*, win32.Graphics.Imaging.IWICBitmapDecoder**, win32.System.Com.HRESULT>CreateDecoder_8;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, global::System.Guid*, global::System.Guid*, win32.Graphics.Imaging.IWICBitmapEncoder**, win32.System.Com.HRESULT>CreateEncoder_9;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICPalette**, win32.System.Com.HRESULT>CreatePalette_10;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICFormatConverter**, win32.System.Com.HRESULT>CreateFormatConverter_11;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICBitmapScaler**, win32.System.Com.HRESULT>CreateBitmapScaler_12;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICBitmapClipper**, win32.System.Com.HRESULT>CreateBitmapClipper_13;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICBitmapFlipRotator**, win32.System.Com.HRESULT>CreateBitmapFlipRotator_14;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICStream**, win32.System.Com.HRESULT>CreateStream_15;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICColorContext**, win32.System.Com.HRESULT>CreateColorContext_16;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICColorTransform**, win32.System.Com.HRESULT>CreateColorTransformer_17;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, uint, uint, global::System.Guid*, win32.Graphics.Imaging.WICBitmapCreateCacheOption, win32.Graphics.Imaging.IWICBitmap**, win32.System.Com.HRESULT>CreateBitmap_18;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Imaging.WICBitmapCreateCacheOption, win32.Graphics.Imaging.IWICBitmap**, win32.System.Com.HRESULT>CreateBitmapFromSource_19;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICBitmapSource*, uint, uint, uint, uint, win32.Graphics.Imaging.IWICBitmap**, win32.System.Com.HRESULT>CreateBitmapFromSourceRect_20;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, uint, uint, global::System.Guid*, uint, uint, byte *, win32.Graphics.Imaging.IWICBitmap**, win32.System.Com.HRESULT>CreateBitmapFromMemory_21;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Gdi.HBITMAP, win32.Graphics.Gdi.HPALETTE, win32.Graphics.Imaging.WICBitmapAlphaChannelOption, win32.Graphics.Imaging.IWICBitmap**, win32.System.Com.HRESULT>CreateBitmapFromHBITMAP_22;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.UI.MenusAndResources.HICON, win32.Graphics.Imaging.IWICBitmap**, win32.System.Com.HRESULT>CreateBitmapFromHICON_23;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, uint, uint, win32.System.Com.IEnumUnknown**, win32.System.Com.HRESULT>CreateComponentEnumerator_24;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICBitmapDecoder*, win32.Graphics.Imaging.IWICFastMetadataEncoder**, win32.System.Com.HRESULT>CreateFastMetadataEncoderFromDecoder_25;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICBitmapFrameDecode*, win32.Graphics.Imaging.IWICFastMetadataEncoder**, win32.System.Com.HRESULT>CreateFastMetadataEncoderFromFrameDecode_26;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, global::System.Guid*, global::System.Guid*, win32.Graphics.Imaging.IWICMetadataQueryWriter**, win32.System.Com.HRESULT>CreateQueryWriter_27;
                internal delegate *unmanaged[Stdcall]<IWICImagingFactory*, win32.Graphics.Imaging.IWICMetadataQueryReader*, global::System.Guid*, win32.Graphics.Imaging.IWICMetadataQueryWriter**, win32.System.Com.HRESULT>CreateQueryWriterFromReader_28;
            }

            private Vtbl*lpVtbl;
        }
    }
}