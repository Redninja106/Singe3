// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("30989668-E1C9-4597-B395-458EEDB808DF")]
        internal unsafe struct IWICMetadataQueryReader
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICMetadataQueryReader*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICMetadataQueryReader*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICMetadataQueryReader*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetContainerFormat(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetContainerFormat(out global::System.Guid pguidContainerFormat)
            {
                fixed (global::System.Guid*pguidContainerFormatLocal = &pguidContainerFormat)
                {
                    win32.System.Com.HRESULT __result = this.GetContainerFormat(pguidContainerFormatLocal);
                    return __result;
                }
            }

            /// <summary>Gets the metadata query readers container format.</summary>
            /// <param name = "pguidContainerFormat">
            /// <para>Type: <b>GUID*</b></para>
            /// <para>Pointer that receives the cointainer format GUID.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getcontainerformat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getcontainerformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetContainerFormat(global::System.Guid*pguidContainerFormat)
            {
                fixed (IWICMetadataQueryReader*pThis = &this)
                    return lpVtbl->GetContainerFormat_4(pThis, pguidContainerFormat);
            }

            /// <inheritdoc cref = "GetLocation(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetLocation(uint cchMaxLength, win32.System.SystemServices.PWSTR wzNamespace, out uint pcchActualLength)
            {
                fixed (uint *pcchActualLengthLocal = &pcchActualLength)
                {
                    win32.System.Com.HRESULT __result = this.GetLocation(cchMaxLength, wzNamespace, pcchActualLengthLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the current path relative to the root metadata block.</summary>
            /// <param name = "cchMaxLength">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The length of the <i>wzNamespace</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getlocation#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "wzNamespace">
            /// <para>Type: <b>WCHAR*</b></para>
            /// <para>Pointer that receives the current namespace location.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getlocation#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcchActualLength">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>The actual buffer length that was needed to retrieve the current namespace location.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getlocation#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getlocation">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetLocation(uint cchMaxLength, win32.System.SystemServices.PWSTR wzNamespace, uint *pcchActualLength)
            {
                fixed (IWICMetadataQueryReader*pThis = &this)
                    return lpVtbl->GetLocation_5(pThis, cchMaxLength, wzNamespace, pcchActualLength);
            }

            /// <inheritdoc cref = "GetMetadataByName(win32.System.SystemServices.PCWSTR, win32.Storage.StructuredStorage.PROPVARIANT*)"/>
            internal unsafe win32.System.Com.HRESULT GetMetadataByName(string wzName, ref win32.Storage.StructuredStorage.PROPVARIANT pvarValue)
            {
                fixed (win32.Storage.StructuredStorage.PROPVARIANT*pvarValueLocal = &pvarValue)
                {
                    fixed (char *wzNameLocal = wzName)
                    {
                        win32.System.Com.HRESULT __result = this.GetMetadataByName(wzNameLocal, pvarValueLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Retrieves the metadata block or item identified by a metadata query expression.</summary>
            /// <param name = "wzName">
            /// <para>Type: <b>LPCWSTR</b></para>
            /// <para>The query expression to the requested metadata block or item.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getmetadatabyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pvarValue">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/propidl/ns-propidl-propvariant">PROPVARIANT</a>*</b></para>
            /// <para>When this method returns, contains the metadata block or item requested.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getmetadatabyname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getmetadatabyname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMetadataByName(win32.System.SystemServices.PCWSTR wzName, win32.Storage.StructuredStorage.PROPVARIANT*pvarValue)
            {
                fixed (IWICMetadataQueryReader*pThis = &this)
                    return lpVtbl->GetMetadataByName_6(pThis, wzName, pvarValue);
            }

            /// <summary>Gets an enumerator of all metadata items at the current relative location within the metadata hierarchy.</summary>
            /// <param name = "ppIEnumString">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstring">IEnumString</a>**</b></para>
            /// <para>A pointer to a variable that receives a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstring">IEnumString</a> interface for the enumerator that contains query strings that can be used in the current <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataqueryreader">IWICMetadataQueryReader</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getenumerator#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicmetadataqueryreader-getenumerator">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetEnumerator(win32.System.Com.IEnumString**ppIEnumString)
            {
                fixed (IWICMetadataQueryReader*pThis = &this)
                    return lpVtbl->GetEnumerator_7(pThis, ppIEnumString);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICMetadataQueryReader*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICMetadataQueryReader*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICMetadataQueryReader*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICMetadataQueryReader*, global::System.Guid*, win32.System.Com.HRESULT>GetContainerFormat_4;
                internal delegate *unmanaged[Stdcall]<IWICMetadataQueryReader*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetLocation_5;
                internal delegate *unmanaged[Stdcall]<IWICMetadataQueryReader*, win32.System.SystemServices.PCWSTR, win32.Storage.StructuredStorage.PROPVARIANT*, win32.System.Com.HRESULT>GetMetadataByName_6;
                internal delegate *unmanaged[Stdcall]<IWICMetadataQueryReader*, win32.System.Com.IEnumString**, win32.System.Com.HRESULT>GetEnumerator_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}