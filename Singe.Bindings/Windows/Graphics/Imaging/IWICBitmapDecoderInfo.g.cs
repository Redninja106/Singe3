// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("D8CD007F-D08F-4191-9BFC-236EA7F0E4B5")]
        internal unsafe struct IWICBitmapDecoderInfo
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetComponentType(win32.Graphics.Imaging.WICComponentType*)"/>
            internal unsafe win32.System.Com.HRESULT GetComponentType(out win32.Graphics.Imaging.WICComponentType pType)
            {
                fixed (win32.Graphics.Imaging.WICComponentType*pTypeLocal = &pType)
                {
                    win32.System.Com.HRESULT __result = this.GetComponentType(pTypeLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetComponentType(win32.Graphics.Imaging.WICComponentType*pType)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetComponentType_4(pThis, pType);
            }

            /// <inheritdoc cref = "GetCLSID(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetCLSID(out global::System.Guid pclsid)
            {
                fixed (global::System.Guid*pclsidLocal = &pclsid)
                {
                    win32.System.Com.HRESULT __result = this.GetCLSID(pclsidLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetCLSID(global::System.Guid*pclsid)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetCLSID_5(pThis, pclsid);
            }

            /// <inheritdoc cref = "GetSigningStatus(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSigningStatus(out uint pStatus)
            {
                fixed (uint *pStatusLocal = &pStatus)
                {
                    win32.System.Com.HRESULT __result = this.GetSigningStatus(pStatusLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetSigningStatus(uint *pStatus)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetSigningStatus_6(pThis, pStatus);
            }

            /// <inheritdoc cref = "GetAuthor(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetAuthor(uint cchAuthor, win32.System.SystemServices.PWSTR wzAuthor, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetAuthor(cchAuthor, wzAuthor, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetAuthor(uint cchAuthor, win32.System.SystemServices.PWSTR wzAuthor, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetAuthor_7(pThis, cchAuthor, wzAuthor, pcchActual);
            }

            /// <inheritdoc cref = "GetVendorGUID(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetVendorGUID(out global::System.Guid pguidVendor)
            {
                fixed (global::System.Guid*pguidVendorLocal = &pguidVendor)
                {
                    win32.System.Com.HRESULT __result = this.GetVendorGUID(pguidVendorLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetVendorGUID(global::System.Guid*pguidVendor)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetVendorGUID_8(pThis, pguidVendor);
            }

            /// <inheritdoc cref = "GetVersion(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetVersion(uint cchVersion, win32.System.SystemServices.PWSTR wzVersion, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetVersion(cchVersion, wzVersion, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetVersion(uint cchVersion, win32.System.SystemServices.PWSTR wzVersion, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetVersion_9(pThis, cchVersion, wzVersion, pcchActual);
            }

            /// <inheritdoc cref = "GetSpecVersion(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetSpecVersion(uint cchSpecVersion, win32.System.SystemServices.PWSTR wzSpecVersion, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetSpecVersion(cchSpecVersion, wzSpecVersion, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetSpecVersion(uint cchSpecVersion, win32.System.SystemServices.PWSTR wzSpecVersion, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetSpecVersion_10(pThis, cchSpecVersion, wzSpecVersion, pcchActual);
            }

            /// <inheritdoc cref = "GetFriendlyName(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetFriendlyName(uint cchFriendlyName, win32.System.SystemServices.PWSTR wzFriendlyName, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetFriendlyName(cchFriendlyName, wzFriendlyName, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFriendlyName(uint cchFriendlyName, win32.System.SystemServices.PWSTR wzFriendlyName, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetFriendlyName_11(pThis, cchFriendlyName, wzFriendlyName, pcchActual);
            }

            /// <inheritdoc cref = "GetContainerFormat(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT GetContainerFormat(out global::System.Guid pguidContainerFormat)
            {
                fixed (global::System.Guid*pguidContainerFormatLocal = &pguidContainerFormat)
                {
                    win32.System.Com.HRESULT __result = this.GetContainerFormat(pguidContainerFormatLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetContainerFormat(global::System.Guid*pguidContainerFormat)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetContainerFormat_12(pThis, pguidContainerFormat);
            }

            /// <inheritdoc cref = "GetPixelFormats(uint, global::System.Guid*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetPixelFormats(Span<global::System.Guid> pguidPixelFormats, out uint pcActual)
            {
                fixed (uint *pcActualLocal = &pcActual)
                {
                    fixed (global::System.Guid*pguidPixelFormatsLocal = pguidPixelFormats)
                    {
                        win32.System.Com.HRESULT __result = this.GetPixelFormats((uint)pguidPixelFormats.Length, pguidPixelFormatsLocal, pcActualLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPixelFormats(uint cFormats, global::System.Guid*pguidPixelFormats, uint *pcActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetPixelFormats_13(pThis, cFormats, pguidPixelFormats, pcActual);
            }

            /// <inheritdoc cref = "GetColorManagementVersion(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetColorManagementVersion(uint cchColorManagementVersion, win32.System.SystemServices.PWSTR wzColorManagementVersion, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetColorManagementVersion(cchColorManagementVersion, wzColorManagementVersion, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetColorManagementVersion(uint cchColorManagementVersion, win32.System.SystemServices.PWSTR wzColorManagementVersion, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetColorManagementVersion_14(pThis, cchColorManagementVersion, wzColorManagementVersion, pcchActual);
            }

            /// <inheritdoc cref = "GetDeviceManufacturer(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetDeviceManufacturer(uint cchDeviceManufacturer, win32.System.SystemServices.PWSTR wzDeviceManufacturer, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetDeviceManufacturer(cchDeviceManufacturer, wzDeviceManufacturer, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDeviceManufacturer(uint cchDeviceManufacturer, win32.System.SystemServices.PWSTR wzDeviceManufacturer, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetDeviceManufacturer_15(pThis, cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
            }

            /// <inheritdoc cref = "GetDeviceModels(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetDeviceModels(uint cchDeviceModels, win32.System.SystemServices.PWSTR wzDeviceModels, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetDeviceModels(cchDeviceModels, wzDeviceModels, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetDeviceModels(uint cchDeviceModels, win32.System.SystemServices.PWSTR wzDeviceModels, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetDeviceModels_16(pThis, cchDeviceModels, wzDeviceModels, pcchActual);
            }

            /// <inheritdoc cref = "GetMimeTypes(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetMimeTypes(uint cchMimeTypes, win32.System.SystemServices.PWSTR wzMimeTypes, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetMimeTypes(cchMimeTypes, wzMimeTypes, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetMimeTypes(uint cchMimeTypes, win32.System.SystemServices.PWSTR wzMimeTypes, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetMimeTypes_17(pThis, cchMimeTypes, wzMimeTypes, pcchActual);
            }

            /// <inheritdoc cref = "GetFileExtensions(uint, win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetFileExtensions(uint cchFileExtensions, win32.System.SystemServices.PWSTR wzFileExtensions, out uint pcchActual)
            {
                fixed (uint *pcchActualLocal = &pcchActual)
                {
                    win32.System.Com.HRESULT __result = this.GetFileExtensions(cchFileExtensions, wzFileExtensions, pcchActualLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT GetFileExtensions(uint cchFileExtensions, win32.System.SystemServices.PWSTR wzFileExtensions, uint *pcchActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetFileExtensions_18(pThis, cchFileExtensions, wzFileExtensions, pcchActual);
            }

            /// <inheritdoc cref = "DoesSupportAnimation(win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT DoesSupportAnimation(out win32.System.SystemServices.BOOL pfSupportAnimation)
            {
                fixed (win32.System.SystemServices.BOOL*pfSupportAnimationLocal = &pfSupportAnimation)
                {
                    win32.System.Com.HRESULT __result = this.DoesSupportAnimation(pfSupportAnimationLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT DoesSupportAnimation(win32.System.SystemServices.BOOL*pfSupportAnimation)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->DoesSupportAnimation_19(pThis, pfSupportAnimation);
            }

            /// <inheritdoc cref = "DoesSupportChromakey(win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT DoesSupportChromakey(out win32.System.SystemServices.BOOL pfSupportChromakey)
            {
                fixed (win32.System.SystemServices.BOOL*pfSupportChromakeyLocal = &pfSupportChromakey)
                {
                    win32.System.Com.HRESULT __result = this.DoesSupportChromakey(pfSupportChromakeyLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT DoesSupportChromakey(win32.System.SystemServices.BOOL*pfSupportChromakey)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->DoesSupportChromakey_20(pThis, pfSupportChromakey);
            }

            /// <inheritdoc cref = "DoesSupportLossless(win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT DoesSupportLossless(out win32.System.SystemServices.BOOL pfSupportLossless)
            {
                fixed (win32.System.SystemServices.BOOL*pfSupportLosslessLocal = &pfSupportLossless)
                {
                    win32.System.Com.HRESULT __result = this.DoesSupportLossless(pfSupportLosslessLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT DoesSupportLossless(win32.System.SystemServices.BOOL*pfSupportLossless)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->DoesSupportLossless_21(pThis, pfSupportLossless);
            }

            /// <inheritdoc cref = "DoesSupportMultiframe(win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT DoesSupportMultiframe(out win32.System.SystemServices.BOOL pfSupportMultiframe)
            {
                fixed (win32.System.SystemServices.BOOL*pfSupportMultiframeLocal = &pfSupportMultiframe)
                {
                    win32.System.Com.HRESULT __result = this.DoesSupportMultiframe(pfSupportMultiframeLocal);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT DoesSupportMultiframe(win32.System.SystemServices.BOOL*pfSupportMultiframe)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->DoesSupportMultiframe_22(pThis, pfSupportMultiframe);
            }

            /// <inheritdoc cref = "MatchesMimeType(win32.System.SystemServices.PCWSTR, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT MatchesMimeType(string wzMimeType, out win32.System.SystemServices.BOOL pfMatches)
            {
                fixed (win32.System.SystemServices.BOOL*pfMatchesLocal = &pfMatches)
                {
                    fixed (char *wzMimeTypeLocal = wzMimeType)
                    {
                        win32.System.Com.HRESULT __result = this.MatchesMimeType(wzMimeTypeLocal, pfMatchesLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT MatchesMimeType(win32.System.SystemServices.PCWSTR wzMimeType, win32.System.SystemServices.BOOL*pfMatches)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->MatchesMimeType_23(pThis, wzMimeType, pfMatches);
            }

            /// <inheritdoc cref = "GetPatterns(uint, win32.Graphics.Imaging.WICBitmapPattern*, uint *, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetPatterns(uint cbSizePatterns, win32.Graphics.Imaging.WICBitmapPattern*pPatterns, uint *pcPatterns, out uint pcbPatternsActual)
            {
                fixed (uint *pcbPatternsActualLocal = &pcbPatternsActual)
                {
                    win32.System.Com.HRESULT __result = this.GetPatterns(cbSizePatterns, pPatterns, pcPatterns, pcbPatternsActualLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the file pattern signatures supported by the decoder.</summary>
            /// <param name = "cbSizePatterns">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The array size of the <i>pPatterns</i> array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-getpatterns#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pPatterns">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ns-wincodec-wicbitmappattern">WICBitmapPattern</a>*</b></para>
            /// <para>Receives a list of <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ns-wincodec-wicbitmappattern">WICBitmapPattern</a> objects supported by the decoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-getpatterns#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcPatterns">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>Receives the number of patterns the decoder supports.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-getpatterns#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcbPatternsActual">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>Receives the actual buffer size needed to retrieve all pattern signatures supported by the decoder.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-getpatterns#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-getpatterns">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPatterns(uint cbSizePatterns, [Optional] win32.Graphics.Imaging.WICBitmapPattern*pPatterns, [Optional] uint *pcPatterns, uint *pcbPatternsActual)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->GetPatterns_24(pThis, cbSizePatterns, pPatterns, pcPatterns, pcbPatternsActual);
            }

            /// <inheritdoc cref = "MatchesPattern(win32.Storage.StructuredStorage.IStream*, win32.System.SystemServices.BOOL*)"/>
            internal unsafe win32.System.Com.HRESULT MatchesPattern(win32.Storage.StructuredStorage.IStream*pIStream, out win32.System.SystemServices.BOOL pfMatches)
            {
                fixed (win32.System.SystemServices.BOOL*pfMatchesLocal = &pfMatches)
                {
                    win32.System.Com.HRESULT __result = this.MatchesPattern(pIStream, pfMatchesLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves a value that indicates whether the codec recognizes the pattern within a specified stream.</summary>
            /// <param name = "pIStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>*</b></para>
            /// <para>The stream to pattern match within.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-matchespattern#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pfMatches">
            /// <para>Type: <b>BOOL*</b></para>
            /// <para>A pointer that receives <b>TRUE</b> if the patterns match; otherwise, <b>FALSE</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-matchespattern#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-matchespattern">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT MatchesPattern(win32.Storage.StructuredStorage.IStream*pIStream, win32.System.SystemServices.BOOL*pfMatches)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->MatchesPattern_25(pThis, pIStream, pfMatches);
            }

            /// <summary>Creates a new IWICBitmapDecoder instance.</summary>
            /// <param name = "ppIBitmapDecoder">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>**</b></para>
            /// <para>A pointer that receives a pointer to a new instance of the <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapdecoder">IWICBitmapDecoder</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-createinstance#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapdecoderinfo-createinstance">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateInstance(win32.Graphics.Imaging.IWICBitmapDecoder**ppIBitmapDecoder)
            {
                fixed (IWICBitmapDecoderInfo*pThis = &this)
                    return lpVtbl->CreateInstance_26(pThis, ppIBitmapDecoder);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.Graphics.Imaging.WICComponentType*, win32.System.Com.HRESULT>GetComponentType_4;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, global::System.Guid*, win32.System.Com.HRESULT>GetCLSID_5;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint *, win32.System.Com.HRESULT>GetSigningStatus_6;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetAuthor_7;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, global::System.Guid*, win32.System.Com.HRESULT>GetVendorGUID_8;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetVersion_9;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetSpecVersion_10;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetFriendlyName_11;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, global::System.Guid*, win32.System.Com.HRESULT>GetContainerFormat_12;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, global::System.Guid*, uint *, win32.System.Com.HRESULT>GetPixelFormats_13;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetColorManagementVersion_14;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetDeviceManufacturer_15;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetDeviceModels_16;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetMimeTypes_17;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetFileExtensions_18;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>DoesSupportAnimation_19;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>DoesSupportChromakey_20;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>DoesSupportLossless_21;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>DoesSupportMultiframe_22;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>MatchesMimeType_23;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, uint, win32.Graphics.Imaging.WICBitmapPattern*, uint *, uint *, win32.System.Com.HRESULT>GetPatterns_24;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.Storage.StructuredStorage.IStream*, win32.System.SystemServices.BOOL*, win32.System.Com.HRESULT>MatchesPattern_25;
                internal delegate *unmanaged[Stdcall]<IWICBitmapDecoderInfo*, win32.Graphics.Imaging.IWICBitmapDecoder**, win32.System.Com.HRESULT>CreateInstance_26;
            }

            private Vtbl*lpVtbl;
        }
    }
}