// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Imaging
    {
        [Guid("00000105-A8F2-4877-BA0A-FD2B6645FB94")]
        internal unsafe struct IWICBitmapFrameEncode
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Initializes the frame encoder using the given properties.</summary>
            /// <param name = "pIEncoderOptions">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa768192(v=vs.85)">IPropertyBag2</a>*</b></para>
            /// <para>The set of properties to use for <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapframeencode">IWICBitmapFrameEncode</a> initialization.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-initialize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-initialize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Initialize(win32.System.Com.IPropertyBag2*pIEncoderOptions)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->Initialize_4(pThis, pIEncoderOptions);
            }

            /// <summary>Sets the output image dimensions for the frame.</summary>
            /// <param name = "uiWidth">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The width of the output image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "uiHeight">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The height of the output image.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setsize#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setsize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetSize(uint uiWidth, uint uiHeight)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->SetSize_5(pThis, uiWidth, uiHeight);
            }

            /// <summary>Sets the physical resolution of the output image.</summary>
            /// <param name = "dpiX">
            /// <para>Type: <b>double</b></para>
            /// <para>The horizontal resolution value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setresolution#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "dpiY">
            /// <para>Type: <b>double</b></para>
            /// <para>The vertical resolution value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setresolution#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setresolution">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetResolution(double dpiX, double dpiY)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->SetResolution_6(pThis, dpiX, dpiY);
            }

            /// <inheritdoc cref = "SetPixelFormat(global::System.Guid*)"/>
            internal unsafe win32.System.Com.HRESULT SetPixelFormat(ref global::System.Guid pPixelFormat)
            {
                fixed (global::System.Guid*pPixelFormatLocal = &pPixelFormat)
                {
                    win32.System.Com.HRESULT __result = this.SetPixelFormat(pPixelFormatLocal);
                    return __result;
                }
            }

            /// <summary>Requests that the encoder use the specified pixel format.</summary>
            /// <param name = "pPixelFormat">
            /// <para>Type: <b>WICPixelFormatGUID*</b></para>
            /// <para>On input, the requested pixel format GUID. On output, the closest pixel format GUID supported by the encoder; this may be different than the requested format. For a list of pixel format GUIDs, see <a href = "https://docs.microsoft.com/windows/desktop/wic/-wic-codec-native-pixel-formats">Native Pixel Formats</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setpixelformat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>Possible return values include the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setpixelformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPixelFormat(global::System.Guid*pPixelFormat)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->SetPixelFormat_7(pThis, pPixelFormat);
            }

            /// <summary>Sets a given number IWICColorContext profiles to the frame.</summary>
            /// <param name = "cCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a> profiles to set.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setcolorcontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppIColorContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a>**</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwiccolorcontext">IWICColorContext</a> pointer containing the color contexts profiles to set to the frame.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setcolorcontexts#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setcolorcontexts">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetColorContexts(uint cCount, win32.Graphics.Imaging.IWICColorContext**ppIColorContext)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->SetColorContexts_8(pThis, cCount, ppIColorContext);
            }

            /// <summary>Sets the IWICPalette for indexed pixel formats.</summary>
            /// <param name = "pIPalette">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicpalette">IWICPalette</a> to use for indexed pixel formats.</para>
            /// <para>The encoder may change the palette to reflect the pixel formats the encoder supports.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setpalette#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setpalette">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPalette(win32.Graphics.Imaging.IWICPalette*pIPalette)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->SetPalette_9(pThis, pIPalette);
            }

            /// <summary>Sets the frame thumbnail if supported by the codec.</summary>
            /// <param name = "pIThumbnail">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>*</b></para>
            /// <para>The bitmap source to use as the thumbnail.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setthumbnail#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise.</para>
            /// <para>Returns WINCODEC_ERR_UNSUPPORTEDOPERATION if the feature is not supported by the encoder.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-setthumbnail">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetThumbnail(win32.Graphics.Imaging.IWICBitmapSource*pIThumbnail)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->SetThumbnail_10(pThis, pIThumbnail);
            }

            /// <inheritdoc cref = "WritePixels(uint, uint, uint, byte *)"/>
            internal unsafe win32.System.Com.HRESULT WritePixels(uint lineCount, uint cbStride, Span<byte> pbPixels)
            {
                fixed (byte *pbPixelsLocal = pbPixels)
                {
                    win32.System.Com.HRESULT __result = this.WritePixels(lineCount, cbStride, (uint)pbPixels.Length, pbPixelsLocal);
                    return __result;
                }
            }

            /// <summary>Copies scan-line data from a caller-supplied buffer to the IWICBitmapFrameEncode object.</summary>
            /// <param name = "lineCount">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The number of lines to encode.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writepixels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "cbStride">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/">stride</a> of the image pixels.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writepixels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "cbBufferSize">
            /// <para>Type: <b>UINT</b></para>
            /// <para>The size of the pixel buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writepixels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pbPixels">
            /// <para>Type: <b>BYTE*</b></para>
            /// <para>A pointer to the pixel buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writepixels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>Possible return values include the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writepixels">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT WritePixels(uint lineCount, uint cbStride, uint cbBufferSize, byte *pbPixels)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->WritePixels_11(pThis, lineCount, cbStride, cbBufferSize, pbPixels);
            }

            /// <inheritdoc cref = "WriteSource(win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Imaging.WICRect*)"/>
            internal unsafe win32.System.Com.HRESULT WriteSource(win32.Graphics.Imaging.IWICBitmapSource*pIBitmapSource, in win32.Graphics.Imaging.WICRect prc)
            {
                fixed (win32.Graphics.Imaging.WICRect*prcLocal = &prc)
                {
                    win32.System.Com.HRESULT __result = this.WriteSource(pIBitmapSource, prcLocal);
                    return __result;
                }
            }

            /// <summary>Encodes a bitmap source.</summary>
            /// <param name = "pIBitmapSource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicbitmapsource">IWICBitmapSource</a>*</b></para>
            /// <para>The bitmap source to encode.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "prc">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/ns-wincodec-wicrect">WICRect</a>*</b></para>
            /// <para>The size rectangle of the bitmap source.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writesource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-writesource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT WriteSource(win32.Graphics.Imaging.IWICBitmapSource*pIBitmapSource, win32.Graphics.Imaging.WICRect*prc)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->WriteSource_12(pThis, pIBitmapSource, prc);
            }

            /// <summary>Commits the frame to the image.</summary>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-commit">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Commit()
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->Commit_13(pThis);
            }

            /// <summary>Gets the metadata query writer for the encoder frame.</summary>
            /// <param name = "ppIMetadataQueryWriter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/wincodec/nn-wincodec-iwicmetadataquerywriter">IWICMetadataQueryWriter</a>**</b></para>
            /// <para>When this method returns, contains a pointer to metadata query writer for the encoder frame.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-getmetadataquerywriter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wincodec/nf-wincodec-iwicbitmapframeencode-getmetadataquerywriter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetMetadataQueryWriter(win32.Graphics.Imaging.IWICMetadataQueryWriter**ppIMetadataQueryWriter)
            {
                fixed (IWICBitmapFrameEncode*pThis = &this)
                    return lpVtbl->GetMetadataQueryWriter_14(pThis, ppIMetadataQueryWriter);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, win32.System.Com.IPropertyBag2*, win32.System.Com.HRESULT>Initialize_4;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint, uint, win32.System.Com.HRESULT>SetSize_5;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, double, double, win32.System.Com.HRESULT>SetResolution_6;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, global::System.Guid*, win32.System.Com.HRESULT>SetPixelFormat_7;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint, win32.Graphics.Imaging.IWICColorContext**, win32.System.Com.HRESULT>SetColorContexts_8;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, win32.Graphics.Imaging.IWICPalette*, win32.System.Com.HRESULT>SetPalette_9;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, win32.Graphics.Imaging.IWICBitmapSource*, win32.System.Com.HRESULT>SetThumbnail_10;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, uint, uint, uint, byte *, win32.System.Com.HRESULT>WritePixels_11;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, win32.Graphics.Imaging.IWICBitmapSource*, win32.Graphics.Imaging.WICRect*, win32.System.Com.HRESULT>WriteSource_12;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, win32.System.Com.HRESULT>Commit_13;
                internal delegate *unmanaged[Stdcall]<IWICBitmapFrameEncode*, win32.Graphics.Imaging.IWICMetadataQueryWriter**, win32.System.Com.HRESULT>GetMetadataQueryWriter_14;
            }

            private Vtbl*lpVtbl;
        }
    }
}