// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        [Guid("DB6F6DDB-AC77-4E88-8253-819DF9BBF140")]
        internal unsafe struct ID3D11Device
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "CreateBuffer(win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Buffer**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBuffer(in win32.Graphics.Direct3D11.D3D11_BUFFER_DESC pDesc, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D11.ID3D11Buffer**ppBuffer)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateBuffer(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppBuffer);
                    return __result;
                }
            }

            /// <summary>Creates a buffer (vertex buffer, index buffer, or shader-constant buffer).</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> structure that describes the buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b> A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structure that describes  the initialization data; use <b>NULL</b> to allocate space only (with the exception that it cannot be <b>NULL</b> if the usage flag is <b>D3D11_USAGE_IMMUTABLE</b>).</para>
            /// <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the buffer is undefined. In this case, you need to write the buffer content some other way before the resource is read.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>Address of a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> interface for the buffer object created. Set this parameter to <b>NULL</b> to validate the other input parameters (<b>S_FALSE</b> indicates a pass).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the buffer. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBuffer(win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*pInitialData, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppBuffer)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateBuffer_4(pThis, pDesc, pInitialData, ppBuffer);
            }

            /// <inheritdoc cref = "CreateTexture1D(win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Texture1D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture1D(in win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC pDesc, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D11.ID3D11Texture1D**ppTexture1D)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture1D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture1D);
                    return __result;
                }
            }

            /// <summary>Creates an array of 1D textures.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a> structure that describes a 1D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b></para>
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures that describe subresources for the 1D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
            /// <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
            /// <para>You can determine the size of this array from values in the <b>MipLevels</b> and <b>ArraySize</b> members of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a> structure to which <i>pDesc</i> points by using the following calculation:</para>
            /// <para>MipLevels * ArraySize</para>
            /// <para>For more information about this array size, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppTexture1D">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture1d">ID3D11Texture1D</a>**</b></para>
            /// <para>A pointer to a buffer that receives a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture1d">ID3D11Texture1D</a> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture1d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture1d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTexture1D(win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*pInitialData, [Optional] win32.Graphics.Direct3D11.ID3D11Texture1D**ppTexture1D)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateTexture1D_5(pThis, pDesc, pInitialData, ppTexture1D);
            }

            /// <inheritdoc cref = "CreateTexture2D(win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Texture2D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture2D(in win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC pDesc, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D11.ID3D11Texture2D**ppTexture2D)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture2D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture2D);
                    return __result;
                }
            }

            /// <summary>Create an array of 2D textures.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a> structure that describes a 2D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b></para>
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures that describe subresources for the 2D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
            /// <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
            /// <para>You can determine the size of this array from values in the <b>MipLevels</b> and <b>ArraySize</b> members of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture2d_desc">D3D11_TEXTURE2D_DESC</a> structure to which <i>pDesc</i> points by using the following calculation:</para>
            /// <para>MipLevels * ArraySize</para>
            /// <para>For more information about this array size, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppTexture2D">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture2d">ID3D11Texture2D</a>**</b></para>
            /// <para>A pointer to a buffer that receives a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture2d">ID3D11Texture2D</a> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture2d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture2d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTexture2D(win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*pInitialData, [Optional] win32.Graphics.Direct3D11.ID3D11Texture2D**ppTexture2D)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateTexture2D_6(pThis, pDesc, pInitialData, ppTexture2D);
            }

            /// <inheritdoc cref = "CreateTexture3D(win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Texture3D**)"/>
            internal unsafe win32.System.Com.HRESULT CreateTexture3D(in win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC pDesc, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA? pInitialData, win32.Graphics.Direct3D11.ID3D11Texture3D**ppTexture3D)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*pDescLocal = &pDesc)
                {
                    win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA pInitialDataLocal = pInitialData.HasValue ? pInitialData.Value : default(win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA);
                    win32.System.Com.HRESULT __result = this.CreateTexture3D(pDescLocal, pInitialData.HasValue ? &pInitialDataLocal : null, ppTexture3D);
                    return __result;
                }
            }

            /// <summary>Create a single 3D texture.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a> structure that describes a 3D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pInitialData">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a>*</b></para>
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_subresource_data">D3D11_SUBRESOURCE_DATA</a> structures that describe subresources for the 3D texture resource. Applications cannot specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE</a>). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
            /// <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
            /// <para>You can determine the size of this array from the value in the <b>MipLevels</b> member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture3d_desc">D3D11_TEXTURE3D_DESC</a> structure to which <i>pDesc</i> points. Arrays of 3D volume textures are not supported.</para>
            /// <para>For more information about this array size, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppTexture3D">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture3d">ID3D11Texture3D</a>**</b></para>
            /// <para>A pointer to a buffer that receives a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11texture3d">ID3D11Texture3D</a> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture3d#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createtexture3d">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateTexture3D(win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*pInitialData, [Optional] win32.Graphics.Direct3D11.ID3D11Texture3D**ppTexture3D)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateTexture3D_7(pThis, pDesc, pInitialData, ppTexture3D);
            }

            /// <inheritdoc cref = "CreateShaderResourceView(win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC? pDesc, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppSRView)
            {
                win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateShaderResourceView(pResource, pDesc.HasValue ? &pDescLocal : null, ppSRView);
                return __result;
            }

            /// <summary>Create a shader-resource view for accessing data in a resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>Pointer to the resource that will serve as input to a shader. This resource must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_SHADER_RESOURCE </a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>*</b></para>
            /// <para>Pointer to a shader-resource view description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_shader_resource_view_desc">D3D11_SHADER_RESOURCE_VIEW_DESC</a>). Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSRView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createshaderresourceview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createshaderresourceview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateShaderResourceView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, [Optional] win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppSRView)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateShaderResourceView_8(pThis, pResource, pDesc, ppSRView);
            }

            /// <inheritdoc cref = "CreateUnorderedAccessView(win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateUnorderedAccessView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC? pDesc, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUAView)
            {
                win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateUnorderedAccessView(pResource, pDesc.HasValue ? &pDescLocal : null, ppUAView);
                return __result;
            }

            /// <summary>Creates a view for accessing an unordered access resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>Pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> that represents a resources that will serve as an input to a shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a>*</b></para>
            /// <para>Pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_unordered_access_view_desc">D3D11_UNORDERED_ACCESS_VIEW_DESC</a> that represents a shader-resource view description. Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppUAView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> that represents an unordered-access view. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createunorderedaccessview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createunorderedaccessview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateUnorderedAccessView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, [Optional] win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUAView)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateUnorderedAccessView_9(pThis, pResource, pDesc, ppUAView);
            }

            /// <inheritdoc cref = "CreateRenderTargetView(win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11RenderTargetView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRenderTargetView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC? pDesc, win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRTView)
            {
                win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateRenderTargetView(pResource, pDesc.HasValue ? &pDescLocal : null, ppRTView);
                return __result;
            }

            /// <summary>Creates a render-target view for accessing resource data.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> that represents a render target. This resource must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_RENDER_TARGET</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_render_target_view_desc">D3D11_RENDER_TARGET_VIEW_DESC</a> that represents a render-target view description. Set this parameter to <b>NULL</b> to create a view that accesses all of the subresources in mipmap level 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRTView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createrendertargetview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateRenderTargetView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, [Optional] win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRTView)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateRenderTargetView_10(pThis, pResource, pDesc, ppRTView);
            }

            /// <inheritdoc cref = "CreateDepthStencilView(win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11DepthStencilView**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC? pDesc, win32.Graphics.Direct3D11.ID3D11DepthStencilView**ppDepthStencilView)
            {
                win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC pDescLocal = pDesc.HasValue ? pDesc.Value : default(win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC);
                win32.System.Com.HRESULT __result = this.CreateDepthStencilView(pResource, pDesc.HasValue ? &pDescLocal : null, ppDepthStencilView);
                return __result;
            }

            /// <summary>Create a depth-stencil view for accessing resource data.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>Pointer to the resource that will serve as the depth-stencil surface. This resource must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_DEPTH_STENCIL</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>*</b></para>
            /// <para>Pointer to a depth-stencil-view description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_view_desc">D3D11_DEPTH_STENCIL_VIEW_DESC</a>). Set this parameter to <b>NULL</b> to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdepthstencilview">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilView(win32.Graphics.Direct3D11.ID3D11Resource*pResource, [Optional] win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC*pDesc, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView**ppDepthStencilView)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateDepthStencilView_11(pThis, pResource, pDesc, ppDepthStencilView);
            }

            /// <inheritdoc cref = "CreateInputLayout(win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC*, uint, void *, nuint, win32.Graphics.Direct3D11.ID3D11InputLayout**)"/>
            internal unsafe win32.System.Com.HRESULT CreateInputLayout(ReadOnlySpan<win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC> pInputElementDescs, void *pShaderBytecodeWithInputSignature, nuint BytecodeLength, win32.Graphics.Direct3D11.ID3D11InputLayout**ppInputLayout)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC*pInputElementDescsLocal = pInputElementDescs)
                {
                    win32.System.Com.HRESULT __result = this.CreateInputLayout(pInputElementDescsLocal, (uint)pInputElementDescs.Length, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
                    return __result;
                }
            }

            /// <summary>Create an input-layout object to describe the input-buffer data for the input-assembler stage.</summary>
            /// <param name = "pInputElementDescs">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_input_element_desc">D3D11_INPUT_ELEMENT_DESC</a>*</b></para>
            /// <para>An array of the input-assembler stage input data types; each type is described by an element description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_input_element_desc">D3D11_INPUT_ELEMENT_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumElements">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of input-data types in the array of input-elements.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pShaderBytecodeWithInputSignature">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader.  The compiled shader code contains a input signature which is validated against the array of elements. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppInputLayout">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>**</b></para>
            /// <para>A pointer to the input-layout object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>). To validate the other input parameters, set this pointer to be <b>NULL</b> and verify that the method returns S_FALSE.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If the method succeeds, the return code is S_OK. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createinputlayout">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateInputLayout(win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC*pInputElementDescs, uint NumElements, void *pShaderBytecodeWithInputSignature, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.ID3D11InputLayout**ppInputLayout)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateInputLayout_12(pThis, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
            }

            /// <summary>Create a vertex-shader object from a compiled shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled vertex shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClassLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b></para>
            /// <para>A pointer to a class linkage interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppVertexShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>**</b></para>
            /// <para>Address of a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return <b>S_FALSE</b> instead of <b>S_OK</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createvertexshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createvertexshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateVertexShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, [Optional] win32.Graphics.Direct3D11.ID3D11VertexShader**ppVertexShader)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateVertexShader_13(pThis, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
            }

            /// <summary>Create a geometry shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled geometry shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClassLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b></para>
            /// <para>A pointer to a class linkage interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppGeometryShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>**</b></para>
            /// <para>Address of a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGeometryShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, [Optional] win32.Graphics.Direct3D11.ID3D11GeometryShader**ppGeometryShader)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateGeometryShader_14(pThis, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
            }

            /// <inheritdoc cref = "CreateGeometryShaderWithStreamOutput(void *, nuint, win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY*, uint, uint *, uint, uint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11GeometryShader**)"/>
            internal unsafe win32.System.Com.HRESULT CreateGeometryShaderWithStreamOutput(void *pShaderBytecode, nuint BytecodeLength, ReadOnlySpan<win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY> pSODeclaration, ReadOnlySpan<uint> pBufferStrides, uint RasterizedStream, win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, win32.Graphics.Direct3D11.ID3D11GeometryShader**ppGeometryShader)
            {
                fixed (uint *pBufferStridesLocal = pBufferStrides)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY*pSODeclarationLocal = pSODeclaration)
                    {
                        win32.System.Com.HRESULT __result = this.CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclarationLocal, (uint)pSODeclaration.Length, pBufferStridesLocal, (uint)pBufferStrides.Length, RasterizedStream, pClassLinkage, ppGeometryShader);
                        return __result;
                    }
                }
            }

            /// <summary>Creates a geometry shader that can write to streaming output buffers.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled geometry shader for a standard geometry shader plus stream output. For info on how to get this pointer, see <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</para>
            /// <para>To create the stream output without using a geometry shader, pass a pointer to the output signature for the prior stage. To obtain this output signature, call the <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3dgetoutputsignatureblob">D3DGetOutputSignatureBlob</a> compiler function. You can also pass a pointer to the compiled shader for the prior stage (for example, the <a href = "https://docs.microsoft.com/previous-versions/bb205146(v=vs.85)">vertex-shader stage</a> or <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">domain-shader stage</a>). This compiled shader provides the output signature for the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled geometry shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSODeclaration">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_so_declaration_entry">D3D11_SO_DECLARATION_ENTRY</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_so_declaration_entry">D3D11_SO_DECLARATION_ENTRY</a> array. Cannot be <b>NULL</b> if NumEntries &gt; 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumEntries">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of entries in the stream output declaration ( ranges from 0 to D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT ).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pBufferStrides">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>An array of buffer strides; each stride is the size of an element for that buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumStrides">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of strides (or buffers) in <i>pBufferStrides</i> (ranges from 0 to D3D11_SO_BUFFER_SLOT_COUNT).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "RasterizedStream">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The index number of the stream to be sent to the rasterizer stage (ranges from 0 to D3D11_SO_STREAM_COUNT - 1). Set to D3D11_SO_NO_RASTERIZED_STREAM if no stream is to be rasterized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClassLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b></para>
            /// <para>A pointer to a class linkage interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppGeometryShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a> interface, representing the geometry shader that was created. Set this to <b>NULL</b> to validate the other parameters; if validation passes, the method will return S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-creategeometryshaderwithstreamoutput">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateGeometryShaderWithStreamOutput(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY*pSODeclaration, uint NumEntries, [Optional] uint *pBufferStrides, uint NumStrides, uint RasterizedStream, [Optional] win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, [Optional] win32.Graphics.Direct3D11.ID3D11GeometryShader**ppGeometryShader)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateGeometryShaderWithStreamOutput_15(pThis, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }

            /// <summary>Create a pixel shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled pixel shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClassLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b></para>
            /// <para>A pointer to a class linkage interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPixelShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>**</b></para>
            /// <para>Address of a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpixelshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpixelshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePixelShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, [Optional] win32.Graphics.Direct3D11.ID3D11PixelShader**ppPixelShader)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreatePixelShader_16(pThis, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
            }

            /// <summary>Create a hull shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to a compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClassLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b></para>
            /// <para>A pointer to a class linkage interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppHullShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>**</b></para>
            /// <para>Address of a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a> interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createhullshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createhullshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateHullShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, [Optional] win32.Graphics.Direct3D11.ID3D11HullShader**ppHullShader)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateHullShader_17(pThis, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
            }

            /// <summary>Create a domain shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to a compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClassLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b></para>
            /// <para>A pointer to a class linkage interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>); the value can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDomainShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>**</b></para>
            /// <para>Address of a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return <b>S_FALSE</b> instead of <b>S_OK</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdomainshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdomainshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDomainShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, [Optional] win32.Graphics.Direct3D11.ID3D11DomainShader**ppDomainShader)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateDomainShader_18(pThis, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
            }

            /// <summary>Create a compute shader.</summary>
            /// <param name = "pShaderBytecode">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to a compiled shader.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BytecodeLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
            /// <para>Size of the compiled shader in <i>pShaderBytecode</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pClassLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>, which represents  class linkage interface; the value can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppComputeShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>**</b></para>
            /// <para>Address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a> interface. If this is <b>NULL</b>, all other parameters will be validated; if validation passes, CreateComputeShader returns S_FALSE instead of S_OK.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcomputeshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcomputeshader">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateComputeShader(void *pShaderBytecode, nuint BytecodeLength, [Optional] win32.Graphics.Direct3D11.ID3D11ClassLinkage*pClassLinkage, [Optional] win32.Graphics.Direct3D11.ID3D11ComputeShader**ppComputeShader)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateComputeShader_19(pThis, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
            }

            /// <summary>Creates class linkage libraries to enable dynamic shader linkage.</summary>
            /// <param name = "ppLinkage">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>**</b></para>
            /// <para>A pointer to a class-linkage interface pointer (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classlinkage">ID3D11ClassLinkage</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createclasslinkage#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createclasslinkage">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateClassLinkage(win32.Graphics.Direct3D11.ID3D11ClassLinkage**ppLinkage)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateClassLinkage_20(pThis, ppLinkage);
            }

            /// <inheritdoc cref = "CreateBlendState(win32.Graphics.Direct3D11.D3D11_BLEND_DESC*, win32.Graphics.Direct3D11.ID3D11BlendState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateBlendState(in win32.Graphics.Direct3D11.D3D11_BLEND_DESC pBlendStateDesc, win32.Graphics.Direct3D11.ID3D11BlendState**ppBlendState)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_BLEND_DESC*pBlendStateDescLocal = &pBlendStateDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateBlendState(pBlendStateDescLocal, ppBlendState);
                    return __result;
                }
            }

            /// <summary>Create a blend-state object that encapsules blend state for the output-merger stage.</summary>
            /// <param name = "pBlendStateDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">D3D11_BLEND_DESC</a>*</b></para>
            /// <para>Pointer to a blend-state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_blend_desc">D3D11_BLEND_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppBlendState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>**</b></para>
            /// <para>Address of a pointer to the blend-state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns E_OUTOFMEMORY if there is insufficient memory to create the blend-state object. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createblendstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateBlendState(win32.Graphics.Direct3D11.D3D11_BLEND_DESC*pBlendStateDesc, [Optional] win32.Graphics.Direct3D11.ID3D11BlendState**ppBlendState)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateBlendState_21(pThis, pBlendStateDesc, ppBlendState);
            }

            /// <inheritdoc cref = "CreateDepthStencilState(win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D11.ID3D11DepthStencilState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilState(in win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC pDepthStencilDesc, win32.Graphics.Direct3D11.ID3D11DepthStencilState**ppDepthStencilState)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*pDepthStencilDescLocal = &pDepthStencilDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateDepthStencilState(pDepthStencilDescLocal, ppDepthStencilState);
                    return __result;
                }
            }

            /// <summary>Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.</summary>
            /// <param name = "pDepthStencilDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>*</b></para>
            /// <para>Pointer to a depth-stencil state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDepthStencilState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>**</b></para>
            /// <para>Address of a pointer to the depth-stencil state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdepthstencilstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDepthStencilState(win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*pDepthStencilDesc, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilState**ppDepthStencilState)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateDepthStencilState_22(pThis, pDepthStencilDesc, ppDepthStencilState);
            }

            /// <inheritdoc cref = "CreateRasterizerState(win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*, win32.Graphics.Direct3D11.ID3D11RasterizerState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateRasterizerState(in win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC pRasterizerDesc, win32.Graphics.Direct3D11.ID3D11RasterizerState**ppRasterizerState)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*pRasterizerDescLocal = &pRasterizerDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateRasterizerState(pRasterizerDescLocal, ppRasterizerState);
                    return __result;
                }
            }

            /// <summary>Create a rasterizer state object that tells the rasterizer stage how to behave.</summary>
            /// <param name = "pRasterizerDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>*</b></para>
            /// <para>Pointer to a rasterizer state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createrasterizerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRasterizerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>**</b></para>
            /// <para>Address of a pointer to the rasterizer state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createrasterizerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader.  See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createrasterizerstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateRasterizerState(win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*pRasterizerDesc, [Optional] win32.Graphics.Direct3D11.ID3D11RasterizerState**ppRasterizerState)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateRasterizerState_23(pThis, pRasterizerDesc, ppRasterizerState);
            }

            /// <inheritdoc cref = "CreateSamplerState(win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*, win32.Graphics.Direct3D11.ID3D11SamplerState**)"/>
            internal unsafe win32.System.Com.HRESULT CreateSamplerState(in win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC pSamplerDesc, win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplerState)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*pSamplerDescLocal = &pSamplerDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateSamplerState(pSamplerDescLocal, ppSamplerState);
                    return __result;
                }
            }

            /// <summary>Create a sampler-state object that encapsulates sampling information for a texture.</summary>
            /// <param name = "pSamplerDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a>*</b></para>
            /// <para>Pointer to a sampler state description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_sampler_desc">D3D11_SAMPLER_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createsamplerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b></para>
            /// <para>Address of a pointer to the sampler state object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createsamplerstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createsamplerstate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateSamplerState(win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*pSamplerDesc, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplerState)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateSamplerState_24(pThis, pSamplerDesc, ppSamplerState);
            }

            /// <inheritdoc cref = "CreateQuery(win32.Graphics.Direct3D11.D3D11_QUERY_DESC*, win32.Graphics.Direct3D11.ID3D11Query**)"/>
            internal unsafe win32.System.Com.HRESULT CreateQuery(in win32.Graphics.Direct3D11.D3D11_QUERY_DESC pQueryDesc, win32.Graphics.Direct3D11.ID3D11Query**ppQuery)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_QUERY_DESC*pQueryDescLocal = &pQueryDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateQuery(pQueryDescLocal, ppQuery);
                    return __result;
                }
            }

            /// <summary>This interface encapsulates methods for querying information from the GPU.</summary>
            /// <param name = "pQueryDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>*</b></para>
            /// <para>Pointer to a query description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppQuery">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11query">ID3D11Query</a>**</b></para>
            /// <para>Address of a pointer to the query object created (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11query">ID3D11Query</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createquery#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns E_OUTOFMEMORY if there is insufficient memory to create the query object. See <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createquery">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateQuery(win32.Graphics.Direct3D11.D3D11_QUERY_DESC*pQueryDesc, [Optional] win32.Graphics.Direct3D11.ID3D11Query**ppQuery)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateQuery_25(pThis, pQueryDesc, ppQuery);
            }

            /// <inheritdoc cref = "CreatePredicate(win32.Graphics.Direct3D11.D3D11_QUERY_DESC*, win32.Graphics.Direct3D11.ID3D11Predicate**)"/>
            internal unsafe win32.System.Com.HRESULT CreatePredicate(in win32.Graphics.Direct3D11.D3D11_QUERY_DESC pPredicateDesc, win32.Graphics.Direct3D11.ID3D11Predicate**ppPredicate)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_QUERY_DESC*pPredicateDescLocal = &pPredicateDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreatePredicate(pPredicateDescLocal, ppPredicate);
                    return __result;
                }
            }

            /// <summary>Creates a predicate.</summary>
            /// <param name = "pPredicateDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>*</b></para>
            /// <para>Pointer to a query description where the type of query must be a D3D11_QUERY_SO_OVERFLOW_PREDICATE or D3D11_QUERY_OCCLUSION_PREDICATE (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_query_desc">D3D11_QUERY_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpredicate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPredicate">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>**</b></para>
            /// <para>Address of a pointer to a predicate (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpredicate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createpredicate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreatePredicate(win32.Graphics.Direct3D11.D3D11_QUERY_DESC*pPredicateDesc, [Optional] win32.Graphics.Direct3D11.ID3D11Predicate**ppPredicate)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreatePredicate_26(pThis, pPredicateDesc, ppPredicate);
            }

            /// <inheritdoc cref = "CreateCounter(win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*, win32.Graphics.Direct3D11.ID3D11Counter**)"/>
            internal unsafe win32.System.Com.HRESULT CreateCounter(in win32.Graphics.Direct3D11.D3D11_COUNTER_DESC pCounterDesc, win32.Graphics.Direct3D11.ID3D11Counter**ppCounter)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*pCounterDescLocal = &pCounterDesc)
                {
                    win32.System.Com.HRESULT __result = this.CreateCounter(pCounterDescLocal, ppCounter);
                    return __result;
                }
            }

            /// <summary>Create a counter object for measuring GPU performance.</summary>
            /// <param name = "pCounterDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>*</b></para>
            /// <para>Pointer to a counter description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppCounter">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11counter">ID3D11Counter</a>**</b></para>
            /// <para>Address of a pointer to a counter (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11counter">ID3D11Counter</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>If this function succeeds, it will return S_OK. If it fails, possible return values are: S_FALSE, E_OUTOFMEMORY, DXGI_ERROR_UNSUPPORTED, DXGI_ERROR_NONEXCLUSIVE, or E_INVALIDARG.</para>
            /// <para>DXGI_ERROR_UNSUPPORTED is returned whenever the application requests to create a well-known counter, but the current device does not support it.</para>
            /// <para>DXGI_ERROR_NONEXCLUSIVE indicates that another device object is currently using the counters, so they cannot be used by this device at the moment.</para>
            /// <para>E_INVALIDARG is returned whenever an out-of-range well-known or device-dependent counter is requested, or when the simulataneously active counters have been exhausted.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createcounter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateCounter(win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*pCounterDesc, [Optional] win32.Graphics.Direct3D11.ID3D11Counter**ppCounter)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateCounter_27(pThis, pCounterDesc, ppCounter);
            }

            /// <summary>Creates a deferred context, which can record command lists.</summary>
            /// <param name = "ContextFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Reserved for future use. Pass 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdeferredcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDeferredContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>**</b></para>
            /// <para>Upon completion of the method, the passed pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> interface pointer is initialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdeferredcontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> Returns S_OK if successful; otherwise, returns one of the following:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-createdeferredcontext">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CreateDeferredContext(uint ContextFlags, [Optional] win32.Graphics.Direct3D11.ID3D11DeviceContext**ppDeferredContext)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CreateDeferredContext_28(pThis, ContextFlags, ppDeferredContext);
            }

            /// <inheritdoc cref = "OpenSharedResource(win32.System.SystemServices.HANDLE, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT OpenSharedResource(SafeHandle hResource, in global::System.Guid ReturnedInterface, void **ppResource)
            {
                bool hResourceAddRef = false;
                try
                {
                    fixed (global::System.Guid*ReturnedInterfaceLocal = &ReturnedInterface)
                    {
                        win32.System.SystemServices.HANDLE hResourceLocal;
                        if (hResource is object)
                        {
                            hResource.DangerousAddRef(ref hResourceAddRef);
                            hResourceLocal = (win32.System.SystemServices.HANDLE)hResource.DangerousGetHandle();
                        }
                        else
                            hResourceLocal = default(win32.System.SystemServices.HANDLE);
                        win32.System.Com.HRESULT __result = this.OpenSharedResource(hResourceLocal, ReturnedInterfaceLocal, ppResource);
                        return __result;
                    }
                }
                finally
                {
                    if (hResourceAddRef)
                        hResource.DangerousRelease();
                }
            }

            /// <summary>Give a device access to a shared resource created on a different device.</summary>
            /// <param name = "hResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HANDLE</a></b></para>
            /// <para>A resource handle. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ReturnedInterface">
            /// <para>Type: <b>REFIID</b></para>
            /// <para>The globally unique identifier (GUID) for the resource interface. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppResource">
            /// <para>Type: <b>void**</b></para>
            /// <para>Address of a pointer to the resource we are gaining access to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-opensharedresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-opensharedresource">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT OpenSharedResource(win32.System.SystemServices.HANDLE hResource, global::System.Guid*ReturnedInterface, [Optional] void **ppResource)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->OpenSharedResource_29(pThis, hResource, ReturnedInterface, ppResource);
            }

            /// <inheritdoc cref = "CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, out uint pFormatSupport)
            {
                fixed (uint *pFormatSupportLocal = &pFormatSupport)
                {
                    win32.System.Com.HRESULT __result = this.CheckFormatSupport(Format, pFormatSupportLocal);
                    return __result;
                }
            }

            /// <summary>Get the support of a given format on the installed video device.</summary>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumeration that describes a format for which to check for support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkformatsupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFormatSupport">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A bitfield of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_format_support">D3D11_FORMAT_SUPPORT</a> enumeration values describing how the specified format is supported on the installed device. The values are ORed together.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkformatsupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns E_INVALIDARG if the <i>Format</i> parameter is <b>NULL</b>, or returns E_FAIL if the described format does not exist.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkformatsupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckFormatSupport(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint *pFormatSupport)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CheckFormatSupport_30(pThis, Format, pFormatSupport);
            }

            /// <inheritdoc cref = "CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SampleCount, out uint pNumQualityLevels)
            {
                fixed (uint *pNumQualityLevelsLocal = &pNumQualityLevels)
                {
                    win32.System.Com.HRESULT __result = this.CheckMultisampleQualityLevels(Format, SampleCount, pNumQualityLevelsLocal);
                    return __result;
                }
            }

            /// <summary>Get the number of quality levels available during multisampling.</summary>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>The texture format. See <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SampleCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of samples during multisampling.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumQualityLevels">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Number of quality levels supported by the adapter. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkmultisamplequalitylevels">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckMultisampleQualityLevels(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint SampleCount, uint *pNumQualityLevels)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CheckMultisampleQualityLevels_31(pThis, Format, SampleCount, pNumQualityLevels);
            }

            /// <inheritdoc cref = "CheckCounterInfo(win32.Graphics.Direct3D11.D3D11_COUNTER_INFO*)"/>
            internal unsafe void CheckCounterInfo(out win32.Graphics.Direct3D11.D3D11_COUNTER_INFO pCounterInfo)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_COUNTER_INFO*pCounterInfoLocal = &pCounterInfo)
                {
                    this.CheckCounterInfo(pCounterInfoLocal);
                }
            }

            /// <summary>Get a counter's information.</summary>
            /// <param name = "pCounterInfo">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_info">D3D11_COUNTER_INFO</a>*</b></para>
            /// <para>Pointer to counter information (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_info">D3D11_COUNTER_INFO</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounterinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounterinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CheckCounterInfo(win32.Graphics.Direct3D11.D3D11_COUNTER_INFO*pCounterInfo)
            {
                fixed (ID3D11Device*pThis = &this)
                    lpVtbl->CheckCounterInfo_32(pThis, pCounterInfo);
            }

            /// <inheritdoc cref = "CheckCounter(win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*, win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE*, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckCounter(in win32.Graphics.Direct3D11.D3D11_COUNTER_DESC pDesc, out win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE pType, out uint pActiveCounters, win32.System.SystemServices.PSTR szName, uint *pNameLength, win32.System.SystemServices.PSTR szUnits, uint *pUnitsLength, win32.System.SystemServices.PSTR szDescription, uint *pDescriptionLength)
            {
                fixed (uint *pActiveCountersLocal = &pActiveCounters)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE*pTypeLocal = &pType)
                    {
                        fixed (win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*pDescLocal = &pDesc)
                        {
                            win32.System.Com.HRESULT __result = this.CheckCounter(pDescLocal, pTypeLocal, pActiveCountersLocal, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Get the type, name, units of measure, and a description of an existing counter.</summary>
            /// <param name = "pDesc">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>*</b></para>
            /// <para>Pointer to a counter description (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_counter_desc">D3D11_COUNTER_DESC</a>). Specifies which counter information is to be retrieved about.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter_type">D3D11_COUNTER_TYPE</a>*</b></para>
            /// <para>Pointer to the data type of a counter (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_counter_type">D3D11_COUNTER_TYPE</a>). Specifies the data type of the counter being retrieved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pActiveCounters">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "szName">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b></para>
            /// <para>String to be filled with a brief name for the counter. May be <b>NULL</b> if the application is not interested in the name of the counter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNameLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Length of the string returned to szName. Can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "szUnits">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b></para>
            /// <para>Name of the units a counter measures, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pUnitsLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Length of the string returned to szUnits. Can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "szDescription">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPSTR</a></b></para>
            /// <para>A description of the counter, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDescriptionLength">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Length of the string returned to szDescription. Can be <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkcounter">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckCounter(win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*pDesc, win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE*pType, uint *pActiveCounters, win32.System.SystemServices.PSTR szName, [Optional] uint *pNameLength, win32.System.SystemServices.PSTR szUnits, [Optional] uint *pUnitsLength, win32.System.SystemServices.PSTR szDescription, [Optional] uint *pDescriptionLength)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CheckCounter_33(pThis, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }

            /// <summary>Gets information about the features that are supported by the current graphics driver.</summary>
            /// <param name = "Feature">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_feature">D3D11_FEATURE</a></b></para>
            /// <para>A member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_feature">D3D11_FEATURE</a> enumerated type that describes which feature to query for support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pFeatureSupportData">
            /// <para>Type: <b>void*</b></para>
            /// <para>Upon completion of the method, the passed structure is filled with data that describes the feature support.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "FeatureSupportDataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The size of the structure passed to the <i>pFeatureSupportData</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkfeaturesupport#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns E_INVALIDARG if an unsupported data type is passed to the <i>pFeatureSupportData</i> parameter or a size mismatch is detected for the <i>FeatureSupportDataSize</i> parameter.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-checkfeaturesupport">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckFeatureSupport(win32.Graphics.Direct3D11.D3D11_FEATURE Feature, void *pFeatureSupportData, uint FeatureSupportDataSize)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->CheckFeatureSupport_34(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            /// <summary>Get application-defined data from a device.</summary>
            /// <param name = "guid">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
            /// <para>Guid associated with the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A pointer to a variable that on input contains the size, in bytes, of the buffer that <i>pData</i> points to, and on output contains the size, in bytes, of the amount of data that <b>GetPrivateData</b> retrieved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>void*</b></para>
            /// <para>A pointer to a buffer that <b>GetPrivateData</b>  fills with data from the device if <i>pDataSize</i> points to a value that specifies a buffer large enough to hold the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the codes described in the topic <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getprivatedata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->GetPrivateData_35(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            /// <summary>Set data to a device and associate that data with a guid.</summary>
            /// <param name = "guid">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
            /// <para>Guid associated with the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Size of the data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>Pointer to the data to be stored with this device. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the guid will be destroyed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setprivatedata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setprivatedata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->SetPrivateData_36(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            /// <summary>Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.</summary>
            /// <param name = "guid">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
            /// <para>Guid associated with the interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>const IUnknown*</b></para>
            /// <para>Pointer to an IUnknown-derived interface to be associated with the device child.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setprivatedatainterface#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setprivatedatainterface">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_37(pThis, guid, pData);
            }

            /// <summary>Gets the feature level of the hardware device.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a></b></para>
            /// <para>A member of the <a href = "/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a> enumerated type that describes the feature level of the hardware device.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getfeaturelevel">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL GetFeatureLevel()
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->GetFeatureLevel_38(pThis);
            }

            /// <summary>Get the flags used during the call to create the device with D3D11CreateDevice.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A bitfield containing the flags used to create the device. See <a href = "/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_FLAG</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getcreationflags">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetCreationFlags()
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->GetCreationFlags_39(pThis);
            }

            /// <summary>Get the reason why the device was removed.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Possible return values include:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getdeviceremovedreason">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT GetDeviceRemovedReason()
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->GetDeviceRemovedReason_40(pThis);
            }

            /// <summary>Gets an immediate context, which can play back command lists.</summary>
            /// <param name = "ppImmediateContext">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>**</b></para>
            /// <para>Upon completion of the method, the passed pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> interface pointer is initialized.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getimmediatecontext#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The <b>GetImmediateContext</b> method returns an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> object that represents an immediate context which is used to perform rendering that you want immediately submitted to a device. For most applications, an immediate context is the primary object that is used to draw your scene.</para>
            /// <para>The <b>GetImmediateContext</b> method increments the reference count of the immediate context by one. Therefore, you must call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> on the returned interface pointer when you are done with it to avoid a memory leak.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getimmediatecontext#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetImmediateContext(win32.Graphics.Direct3D11.ID3D11DeviceContext**ppImmediateContext)
            {
                fixed (ID3D11Device*pThis = &this)
                    lpVtbl->GetImmediateContext_41(pThis, ppImmediateContext);
            }

            /// <summary>Get the exception-mode flags.</summary>
            /// <param name = "RaiseFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_raise_flag">D3D11_RAISE_FLAG</a>. A default value of 0 means there are no flags.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setexceptionmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the following <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-setexceptionmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetExceptionMode(uint RaiseFlags)
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->SetExceptionMode_42(pThis, RaiseFlags);
            }

            /// <summary>Get the exception-mode flags.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <a href = "/windows/desktop/api/d3d11/ne-d3d11-d3d11_raise_flag">D3D11_RAISE_FLAG</a>. A default value of 0 means there are no flags.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11device-getexceptionmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetExceptionMode()
            {
                fixed (ID3D11Device*pThis = &this)
                    return lpVtbl->GetExceptionMode_43(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_BUFFER_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Buffer**, win32.System.Com.HRESULT>CreateBuffer_4;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Texture1D**, win32.System.Com.HRESULT>CreateTexture1D_5;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Texture2D**, win32.System.Com.HRESULT>CreateTexture2D_6;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC*, win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA*, win32.Graphics.Direct3D11.ID3D11Texture3D**, win32.System.Com.HRESULT>CreateTexture3D_7;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, win32.System.Com.HRESULT>CreateShaderResourceView_8;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, win32.System.Com.HRESULT>CreateUnorderedAccessView_9;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.System.Com.HRESULT>CreateRenderTargetView_10;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC*, win32.Graphics.Direct3D11.ID3D11DepthStencilView**, win32.System.Com.HRESULT>CreateDepthStencilView_11;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC*, uint, void *, nuint, win32.Graphics.Direct3D11.ID3D11InputLayout**, win32.System.Com.HRESULT>CreateInputLayout_12;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, void *, nuint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11VertexShader**, win32.System.Com.HRESULT>CreateVertexShader_13;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, void *, nuint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11GeometryShader**, win32.System.Com.HRESULT>CreateGeometryShader_14;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, void *, nuint, win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY*, uint, uint *, uint, uint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11GeometryShader**, win32.System.Com.HRESULT>CreateGeometryShaderWithStreamOutput_15;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, void *, nuint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11PixelShader**, win32.System.Com.HRESULT>CreatePixelShader_16;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, void *, nuint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11HullShader**, win32.System.Com.HRESULT>CreateHullShader_17;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, void *, nuint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11DomainShader**, win32.System.Com.HRESULT>CreateDomainShader_18;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, void *, nuint, win32.Graphics.Direct3D11.ID3D11ClassLinkage*, win32.Graphics.Direct3D11.ID3D11ComputeShader**, win32.System.Com.HRESULT>CreateComputeShader_19;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.ID3D11ClassLinkage**, win32.System.Com.HRESULT>CreateClassLinkage_20;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_BLEND_DESC*, win32.Graphics.Direct3D11.ID3D11BlendState**, win32.System.Com.HRESULT>CreateBlendState_21;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC*, win32.Graphics.Direct3D11.ID3D11DepthStencilState**, win32.System.Com.HRESULT>CreateDepthStencilState_22;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC*, win32.Graphics.Direct3D11.ID3D11RasterizerState**, win32.System.Com.HRESULT>CreateRasterizerState_23;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC*, win32.Graphics.Direct3D11.ID3D11SamplerState**, win32.System.Com.HRESULT>CreateSamplerState_24;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_QUERY_DESC*, win32.Graphics.Direct3D11.ID3D11Query**, win32.System.Com.HRESULT>CreateQuery_25;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_QUERY_DESC*, win32.Graphics.Direct3D11.ID3D11Predicate**, win32.System.Com.HRESULT>CreatePredicate_26;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*, win32.Graphics.Direct3D11.ID3D11Counter**, win32.System.Com.HRESULT>CreateCounter_27;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, uint, win32.Graphics.Direct3D11.ID3D11DeviceContext**, win32.System.Com.HRESULT>CreateDeferredContext_28;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.System.SystemServices.HANDLE, global::System.Guid*, void **, win32.System.Com.HRESULT>OpenSharedResource_29;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Dxgi.DXGI_FORMAT, uint *, win32.System.Com.HRESULT>CheckFormatSupport_30;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, uint *, win32.System.Com.HRESULT>CheckMultisampleQualityLevels_31;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_COUNTER_INFO*, void>CheckCounterInfo_32;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_COUNTER_DESC*, win32.Graphics.Direct3D11.D3D11_COUNTER_TYPE*, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.SystemServices.PSTR, uint *, win32.System.Com.HRESULT>CheckCounter_33;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D11_FEATURE, void *, uint, win32.System.Com.HRESULT>CheckFeatureSupport_34;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_35;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_36;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_37;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL>GetFeatureLevel_38;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, uint>GetCreationFlags_39;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.System.Com.HRESULT>GetDeviceRemovedReason_40;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, win32.Graphics.Direct3D11.ID3D11DeviceContext**, void>GetImmediateContext_41;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, uint, win32.System.Com.HRESULT>SetExceptionMode_42;
                internal delegate *unmanaged[Stdcall]<ID3D11Device*, uint>GetExceptionMode_43;
            }

            private Vtbl*lpVtbl;
        }
    }
}