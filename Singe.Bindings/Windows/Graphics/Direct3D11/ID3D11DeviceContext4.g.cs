// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        [Guid("917600DA-F58C-4C33-98D8-3E15B390FA24")]
        internal unsafe struct ID3D11DeviceContext4
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetDevice(win32.Graphics.Direct3D11.ID3D11Device**ppDevice)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GetDevice_4(pThis, ppDevice);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->GetPrivateData_5(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->SetPrivateData_6(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_7(pThis, guid, pData);
            }

            internal unsafe void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSSetConstantBuffers_8(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void PSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSSetShaderResources_9(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void PSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11PixelShader*pPixelShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSSetShader_10(pThis, pPixelShader, ppClassInstances, NumClassInstances);
            }

            internal unsafe void PSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSSetSamplers_11(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void VSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11VertexShader*pVertexShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSSetShader_12(pThis, pVertexShader, ppClassInstances, NumClassInstances);
            }

            internal void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DrawIndexed_13(pThis, IndexCount, StartIndexLocation, BaseVertexLocation);
            }

            internal void Draw(uint VertexCount, uint StartVertexLocation)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->Draw_14(pThis, VertexCount, StartVertexLocation);
            }

            internal unsafe win32.System.Com.HRESULT Map(win32.Graphics.Direct3D11.ID3D11Resource*pResource, uint Subresource, win32.Graphics.Direct3D11.D3D11_MAP MapType, uint MapFlags, [Optional] win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE*pMappedResource)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->Map_15(pThis, pResource, Subresource, MapType, MapFlags, pMappedResource);
            }

            internal unsafe void Unmap(win32.Graphics.Direct3D11.ID3D11Resource*pResource, uint Subresource)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->Unmap_16(pThis, pResource, Subresource);
            }

            internal unsafe void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSSetConstantBuffers_17(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void IASetInputLayout([Optional] win32.Graphics.Direct3D11.ID3D11InputLayout*pInputLayout)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IASetInputLayout_18(pThis, pInputLayout);
            }

            /// <inheritdoc cref = "IASetVertexBuffers(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void IASetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, ReadOnlySpan<uint> pStrides, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IASetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            internal unsafe void IASetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IASetVertexBuffers_19(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            internal unsafe void IASetIndexBuffer([Optional] win32.Graphics.Direct3D11.ID3D11Buffer*pIndexBuffer, win32.Graphics.Dxgi.DXGI_FORMAT Format, uint Offset)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IASetIndexBuffer_20(pThis, pIndexBuffer, Format, Offset);
            }

            internal void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DrawIndexedInstanced_21(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }

            internal void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DrawInstanced_22(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }

            internal unsafe void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSSetConstantBuffers_23(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void GSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11GeometryShader*pShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSSetShader_24(pThis, pShader, ppClassInstances, NumClassInstances);
            }

            internal void IASetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY Topology)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IASetPrimitiveTopology_25(pThis, Topology);
            }

            internal unsafe void VSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSSetShaderResources_26(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void VSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSSetSamplers_27(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void Begin(win32.Graphics.Direct3D11.ID3D11Asynchronous*pAsync)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->Begin_28(pThis, pAsync);
            }

            internal unsafe void End(win32.Graphics.Direct3D11.ID3D11Asynchronous*pAsync)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->End_29(pThis, pAsync);
            }

            internal unsafe win32.System.Com.HRESULT GetData(win32.Graphics.Direct3D11.ID3D11Asynchronous*pAsync, [Optional] void *pData, uint DataSize, uint GetDataFlags)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->GetData_30(pThis, pAsync, pData, DataSize, GetDataFlags);
            }

            internal unsafe void SetPredication([Optional] win32.Graphics.Direct3D11.ID3D11Predicate*pPredicate, win32.System.SystemServices.BOOL PredicateValue)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->SetPredication_31(pThis, pPredicate, PredicateValue);
            }

            internal unsafe void GSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSSetShaderResources_32(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void GSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSSetSamplers_33(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void OMSetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMSetRenderTargets_34(pThis, NumViews, ppRenderTargetViews, pDepthStencilView);
            }

            /// <inheritdoc cref = "OMSetRenderTargetsAndUnorderedAccessViews(uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *)"/>
            internal unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView, uint UAVStartSlot, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, ReadOnlySpan<uint> pUAVInitialCounts)
            {
                fixed (uint *pUAVInitialCountsLocal = pUAVInitialCounts)
                {
                    this.OMSetRenderTargetsAndUnorderedAccessViews(NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, (uint)pUAVInitialCounts.Length, ppUnorderedAccessViews, pUAVInitialCountsLocal);
                }
            }

            internal unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView, uint UAVStartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, [Optional] uint *pUAVInitialCounts)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMSetRenderTargetsAndUnorderedAccessViews_35(pThis, NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
            }

            /// <inheritdoc cref = "OMSetBlendState(win32.Graphics.Direct3D11.ID3D11BlendState*, float *, uint)"/>
            internal unsafe void OMSetBlendState(win32.Graphics.Direct3D11.ID3D11BlendState*pBlendState, float? BlendFactor, uint SampleMask)
            {
                float BlendFactorLocal = BlendFactor.HasValue ? BlendFactor.Value : default(float);
                this.OMSetBlendState(pBlendState, BlendFactor.HasValue ? &BlendFactorLocal : null, SampleMask);
            }

            internal unsafe void OMSetBlendState([Optional] win32.Graphics.Direct3D11.ID3D11BlendState*pBlendState, [Optional] float *BlendFactor, uint SampleMask)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMSetBlendState_36(pThis, pBlendState, BlendFactor, SampleMask);
            }

            internal unsafe void OMSetDepthStencilState([Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilState*pDepthStencilState, uint StencilRef)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMSetDepthStencilState_37(pThis, pDepthStencilState, StencilRef);
            }

            /// <inheritdoc cref = "SOSetTargets(uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *)"/>
            internal unsafe void SOSetTargets(win32.Graphics.Direct3D11.ID3D11Buffer**ppSOTargets, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    this.SOSetTargets((uint)pOffsets.Length, ppSOTargets, pOffsetsLocal);
                }
            }

            internal unsafe void SOSetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppSOTargets, [Optional] uint *pOffsets)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->SOSetTargets_38(pThis, NumBuffers, ppSOTargets, pOffsets);
            }

            internal void DrawAuto()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DrawAuto_39(pThis);
            }

            internal unsafe void DrawIndexedInstancedIndirect(win32.Graphics.Direct3D11.ID3D11Buffer*pBufferForArgs, uint AlignedByteOffsetForArgs)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DrawIndexedInstancedIndirect_40(pThis, pBufferForArgs, AlignedByteOffsetForArgs);
            }

            internal unsafe void DrawInstancedIndirect(win32.Graphics.Direct3D11.ID3D11Buffer*pBufferForArgs, uint AlignedByteOffsetForArgs)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DrawInstancedIndirect_41(pThis, pBufferForArgs, AlignedByteOffsetForArgs);
            }

            internal void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->Dispatch_42(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }

            internal unsafe void DispatchIndirect(win32.Graphics.Direct3D11.ID3D11Buffer*pBufferForArgs, uint AlignedByteOffsetForArgs)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DispatchIndirect_43(pThis, pBufferForArgs, AlignedByteOffsetForArgs);
            }

            internal unsafe void RSSetState([Optional] win32.Graphics.Direct3D11.ID3D11RasterizerState*pRasterizerState)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->RSSetState_44(pThis, pRasterizerState);
            }

            /// <inheritdoc cref = "RSSetViewports(uint, win32.Graphics.Direct3D11.D3D11_VIEWPORT*)"/>
            internal unsafe void RSSetViewports(ReadOnlySpan<win32.Graphics.Direct3D11.D3D11_VIEWPORT> pViewports)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewportsLocal = pViewports)
                {
                    this.RSSetViewports((uint)pViewports.Length, pViewportsLocal);
                }
            }

            internal unsafe void RSSetViewports(uint NumViewports, [Optional] win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewports)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->RSSetViewports_45(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSSetScissorRects(uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSSetScissorRects(ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.RSSetScissorRects((uint)pRects.Length, pRectsLocal);
                }
            }

            internal unsafe void RSSetScissorRects(uint NumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->RSSetScissorRects_46(pThis, NumRects, pRects);
            }

            /// <inheritdoc cref = "CopySubresourceRegion(win32.Graphics.Direct3D11.ID3D11Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*)"/>
            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Direct3D11.D3D11_BOX? pSrcBox)
            {
                win32.Graphics.Direct3D11.D3D11_BOX pSrcBoxLocal = pSrcBox.HasValue ? pSrcBox.Value : default(win32.Graphics.Direct3D11.D3D11_BOX);
                this.CopySubresourceRegion(pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox.HasValue ? &pSrcBoxLocal : null);
            }

            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, [Optional] win32.Graphics.Direct3D11.D3D11_BOX*pSrcBox)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CopySubresourceRegion_47(pThis, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
            }

            internal unsafe void CopyResource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CopyResource_48(pThis, pDstResource, pSrcResource);
            }

            /// <inheritdoc cref = "UpdateSubresource(win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void *, uint, uint)"/>
            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D11.D3D11_BOX? pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                win32.Graphics.Direct3D11.D3D11_BOX pDstBoxLocal = pDstBox.HasValue ? pDstBox.Value : default(win32.Graphics.Direct3D11.D3D11_BOX);
                this.UpdateSubresource(pDstResource, DstSubresource, pDstBox.HasValue ? &pDstBoxLocal : null, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, [Optional] win32.Graphics.Direct3D11.D3D11_BOX*pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->UpdateSubresource_49(pThis, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            internal unsafe void CopyStructureCount(win32.Graphics.Direct3D11.ID3D11Buffer*pDstBuffer, uint DstAlignedByteOffset, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pSrcView)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CopyStructureCount_50(pThis, pDstBuffer, DstAlignedByteOffset, pSrcView);
            }

            /// <inheritdoc cref = "ClearRenderTargetView(win32.Graphics.Direct3D11.ID3D11RenderTargetView*, float *)"/>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D11.ID3D11RenderTargetView*pRenderTargetView, in float ColorRGBA)
            {
                fixed (float *ColorRGBALocal = &ColorRGBA)
                {
                    this.ClearRenderTargetView(pRenderTargetView, ColorRGBALocal);
                }
            }

            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D11.ID3D11RenderTargetView*pRenderTargetView, float *ColorRGBA)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ClearRenderTargetView_51(pThis, pRenderTargetView, ColorRGBA);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewUint(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, uint *)"/>
            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, in uint Values)
            {
                fixed (uint *ValuesLocal = &Values)
                {
                    this.ClearUnorderedAccessViewUint(pUnorderedAccessView, ValuesLocal);
                }
            }

            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, uint *Values)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewUint_52(pThis, pUnorderedAccessView, Values);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, float *)"/>
            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, in float Values)
            {
                fixed (float *ValuesLocal = &Values)
                {
                    this.ClearUnorderedAccessViewFloat(pUnorderedAccessView, ValuesLocal);
                }
            }

            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, float *Values)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewFloat_53(pThis, pUnorderedAccessView, Values);
            }

            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView, uint ClearFlags, float Depth, byte Stencil)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ClearDepthStencilView_54(pThis, pDepthStencilView, ClearFlags, Depth, Stencil);
            }

            internal unsafe void GenerateMips(win32.Graphics.Direct3D11.ID3D11ShaderResourceView*pShaderResourceView)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GenerateMips_55(pThis, pShaderResourceView);
            }

            internal unsafe void SetResourceMinLOD(win32.Graphics.Direct3D11.ID3D11Resource*pResource, float MinLOD)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->SetResourceMinLOD_56(pThis, pResource, MinLOD);
            }

            internal unsafe float GetResourceMinLOD(win32.Graphics.Direct3D11.ID3D11Resource*pResource)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->GetResourceMinLOD_57(pThis, pResource);
            }

            internal unsafe void ResolveSubresource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Dxgi.DXGI_FORMAT Format)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ResolveSubresource_58(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }

            internal unsafe void ExecuteCommandList(win32.Graphics.Direct3D11.ID3D11CommandList*pCommandList, win32.System.SystemServices.BOOL RestoreContextState)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ExecuteCommandList_59(pThis, pCommandList, RestoreContextState);
            }

            internal unsafe void HSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSSetShaderResources_60(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void HSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11HullShader*pHullShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSSetShader_61(pThis, pHullShader, ppClassInstances, NumClassInstances);
            }

            internal unsafe void HSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSSetSamplers_62(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void HSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSSetConstantBuffers_63(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void DSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSSetShaderResources_64(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void DSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11DomainShader*pDomainShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSSetShader_65(pThis, pDomainShader, ppClassInstances, NumClassInstances);
            }

            internal unsafe void DSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSSetSamplers_66(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void DSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSSetConstantBuffers_67(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void CSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSSetShaderResources_68(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <inheritdoc cref = "CSSetUnorderedAccessViews(uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *)"/>
            internal unsafe void CSSetUnorderedAccessViews(uint StartSlot, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, ReadOnlySpan<uint> pUAVInitialCounts)
            {
                fixed (uint *pUAVInitialCountsLocal = pUAVInitialCounts)
                {
                    this.CSSetUnorderedAccessViews(StartSlot, (uint)pUAVInitialCounts.Length, ppUnorderedAccessViews, pUAVInitialCountsLocal);
                }
            }

            internal unsafe void CSSetUnorderedAccessViews(uint StartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, [Optional] uint *pUAVInitialCounts)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSSetUnorderedAccessViews_69(pThis, StartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
            }

            internal unsafe void CSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11ComputeShader*pComputeShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSSetShader_70(pThis, pComputeShader, ppClassInstances, NumClassInstances);
            }

            internal unsafe void CSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSSetSamplers_71(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void CSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSSetConstantBuffers_72(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSGetConstantBuffers_73(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void PSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSGetShaderResources_74(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void PSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11PixelShader**ppPixelShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSGetShader_75(pThis, ppPixelShader, ppClassInstances, pNumClassInstances);
            }

            internal unsafe void PSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSGetSamplers_76(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void VSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11VertexShader**ppVertexShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSGetShader_77(pThis, ppVertexShader, ppClassInstances, pNumClassInstances);
            }

            internal unsafe void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSGetConstantBuffers_78(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void IAGetInputLayout([Optional] win32.Graphics.Direct3D11.ID3D11InputLayout**ppInputLayout)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IAGetInputLayout_79(pThis, ppInputLayout);
            }

            /// <inheritdoc cref = "IAGetVertexBuffers(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void IAGetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, Span<uint> pStrides, Span<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IAGetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            internal unsafe void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IAGetVertexBuffers_80(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            internal unsafe void IAGetIndexBuffer([Optional] win32.Graphics.Direct3D11.ID3D11Buffer**pIndexBuffer, [Optional] win32.Graphics.Dxgi.DXGI_FORMAT*Format, [Optional] uint *Offset)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IAGetIndexBuffer_81(pThis, pIndexBuffer, Format, Offset);
            }

            internal unsafe void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSGetConstantBuffers_82(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void GSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11GeometryShader**ppGeometryShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSGetShader_83(pThis, ppGeometryShader, ppClassInstances, pNumClassInstances);
            }

            /// <inheritdoc cref = "IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*)"/>
            internal unsafe void IAGetPrimitiveTopology(out win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY pTopology)
            {
                fixed (win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopologyLocal = &pTopology)
                {
                    this.IAGetPrimitiveTopology(pTopologyLocal);
                }
            }

            internal unsafe void IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopology)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->IAGetPrimitiveTopology_84(pThis, pTopology);
            }

            internal unsafe void VSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSGetShaderResources_85(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void VSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSGetSamplers_86(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void GetPredication([Optional] win32.Graphics.Direct3D11.ID3D11Predicate**ppPredicate, [Optional] win32.System.SystemServices.BOOL*pPredicateValue)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GetPredication_87(pThis, ppPredicate, pPredicateValue);
            }

            internal unsafe void GSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSGetShaderResources_88(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void GSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSGetSamplers_89(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void OMGetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView**ppDepthStencilView)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMGetRenderTargets_90(pThis, NumViews, ppRenderTargetViews, ppDepthStencilView);
            }

            internal unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView**ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMGetRenderTargetsAndUnorderedAccessViews_91(pThis, NumRTVs, ppRenderTargetViews, ppDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews);
            }

            internal unsafe void OMGetBlendState([Optional] win32.Graphics.Direct3D11.ID3D11BlendState**ppBlendState, [Optional] float *BlendFactor, [Optional] uint *pSampleMask)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMGetBlendState_92(pThis, ppBlendState, BlendFactor, pSampleMask);
            }

            internal unsafe void OMGetDepthStencilState([Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilState**ppDepthStencilState, [Optional] uint *pStencilRef)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->OMGetDepthStencilState_93(pThis, ppDepthStencilState, pStencilRef);
            }

            internal unsafe void SOGetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppSOTargets)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->SOGetTargets_94(pThis, NumBuffers, ppSOTargets);
            }

            internal unsafe void RSGetState([Optional] win32.Graphics.Direct3D11.ID3D11RasterizerState**ppRasterizerState)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->RSGetState_95(pThis, ppRasterizerState);
            }

            /// <inheritdoc cref = "RSGetViewports(uint *, win32.Graphics.Direct3D11.D3D11_VIEWPORT*)"/>
            internal unsafe void RSGetViewports(ref uint pNumViewports, win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewports)
            {
                fixed (uint *pNumViewportsLocal = &pNumViewports)
                {
                    this.RSGetViewports(pNumViewportsLocal, pViewports);
                }
            }

            internal unsafe void RSGetViewports(uint *pNumViewports, [Optional] win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewports)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->RSGetViewports_96(pThis, pNumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSGetScissorRects(uint *, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSGetScissorRects(ref uint pNumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (uint *pNumRectsLocal = &pNumRects)
                {
                    this.RSGetScissorRects(pNumRectsLocal, pRects);
                }
            }

            internal unsafe void RSGetScissorRects(uint *pNumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->RSGetScissorRects_97(pThis, pNumRects, pRects);
            }

            internal unsafe void HSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSGetShaderResources_98(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void HSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11HullShader**ppHullShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSGetShader_99(pThis, ppHullShader, ppClassInstances, pNumClassInstances);
            }

            internal unsafe void HSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSGetSamplers_100(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void HSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSGetConstantBuffers_101(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void DSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSGetShaderResources_102(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void DSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11DomainShader**ppDomainShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSGetShader_103(pThis, ppDomainShader, ppClassInstances, pNumClassInstances);
            }

            internal unsafe void DSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSGetSamplers_104(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void DSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSGetConstantBuffers_105(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal unsafe void CSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSGetShaderResources_106(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            internal unsafe void CSGetUnorderedAccessViews(uint StartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSGetUnorderedAccessViews_107(pThis, StartSlot, NumUAVs, ppUnorderedAccessViews);
            }

            internal unsafe void CSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11ComputeShader**ppComputeShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSGetShader_108(pThis, ppComputeShader, ppClassInstances, pNumClassInstances);
            }

            internal unsafe void CSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSGetSamplers_109(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            internal unsafe void CSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSGetConstantBuffers_110(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            internal void ClearState()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ClearState_111(pThis);
            }

            internal void Flush()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->Flush_112(pThis);
            }

            internal new win32.Graphics.Direct3D11.D3D11_DEVICE_CONTEXT_TYPE GetType()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->GetType_113(pThis);
            }

            internal uint GetContextFlags()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->GetContextFlags_114(pThis);
            }

            internal unsafe win32.System.Com.HRESULT FinishCommandList(win32.System.SystemServices.BOOL RestoreDeferredContextState, [Optional] win32.Graphics.Direct3D11.ID3D11CommandList**ppCommandList)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->FinishCommandList_115(pThis, RestoreDeferredContextState, ppCommandList);
            }

            /// <inheritdoc cref = "CopySubresourceRegion1(win32.Graphics.Direct3D11.ID3D11Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, uint)"/>
            internal unsafe void CopySubresourceRegion1(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Direct3D11.D3D11_BOX? pSrcBox, uint CopyFlags)
            {
                win32.Graphics.Direct3D11.D3D11_BOX pSrcBoxLocal = pSrcBox.HasValue ? pSrcBox.Value : default(win32.Graphics.Direct3D11.D3D11_BOX);
                this.CopySubresourceRegion1(pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox.HasValue ? &pSrcBoxLocal : null, CopyFlags);
            }

            internal unsafe void CopySubresourceRegion1(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, [Optional] win32.Graphics.Direct3D11.D3D11_BOX*pSrcBox, uint CopyFlags)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CopySubresourceRegion1_116(pThis, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox, CopyFlags);
            }

            /// <inheritdoc cref = "UpdateSubresource1(win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void *, uint, uint, uint)"/>
            internal unsafe void UpdateSubresource1(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D11.D3D11_BOX? pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch, uint CopyFlags)
            {
                win32.Graphics.Direct3D11.D3D11_BOX pDstBoxLocal = pDstBox.HasValue ? pDstBox.Value : default(win32.Graphics.Direct3D11.D3D11_BOX);
                this.UpdateSubresource1(pDstResource, DstSubresource, pDstBox.HasValue ? &pDstBoxLocal : null, pSrcData, SrcRowPitch, SrcDepthPitch, CopyFlags);
            }

            internal unsafe void UpdateSubresource1(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, [Optional] win32.Graphics.Direct3D11.D3D11_BOX*pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch, uint CopyFlags)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->UpdateSubresource1_117(pThis, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch, CopyFlags);
            }

            internal unsafe void DiscardResource(win32.Graphics.Direct3D11.ID3D11Resource*pResource)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DiscardResource_118(pThis, pResource);
            }

            internal unsafe void DiscardView(win32.Graphics.Direct3D11.ID3D11View*pResourceView)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DiscardView_119(pThis, pResourceView);
            }

            /// <inheritdoc cref = "VSSetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void VSSetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, ReadOnlySpan<uint> pFirstConstant, ReadOnlySpan<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.VSSetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void VSSetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSSetConstantBuffers1_120(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "HSSetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void HSSetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, ReadOnlySpan<uint> pFirstConstant, ReadOnlySpan<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.HSSetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void HSSetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSSetConstantBuffers1_121(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "DSSetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void DSSetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, ReadOnlySpan<uint> pFirstConstant, ReadOnlySpan<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.DSSetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void DSSetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSSetConstantBuffers1_122(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "GSSetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void GSSetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, ReadOnlySpan<uint> pFirstConstant, ReadOnlySpan<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.GSSetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void GSSetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSSetConstantBuffers1_123(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "PSSetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void PSSetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, ReadOnlySpan<uint> pFirstConstant, ReadOnlySpan<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.PSSetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void PSSetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSSetConstantBuffers1_124(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "CSSetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void CSSetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, ReadOnlySpan<uint> pFirstConstant, ReadOnlySpan<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.CSSetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void CSSetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSSetConstantBuffers1_125(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "VSGetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void VSGetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, Span<uint> pFirstConstant, Span<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.VSGetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void VSGetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->VSGetConstantBuffers1_126(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "HSGetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void HSGetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, Span<uint> pFirstConstant, Span<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.HSGetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void HSGetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->HSGetConstantBuffers1_127(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "DSGetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void DSGetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, Span<uint> pFirstConstant, Span<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.DSGetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void DSGetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DSGetConstantBuffers1_128(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "GSGetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void GSGetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, Span<uint> pFirstConstant, Span<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.GSGetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void GSGetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GSGetConstantBuffers1_129(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "PSGetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void PSGetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, Span<uint> pFirstConstant, Span<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.PSGetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void PSGetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->PSGetConstantBuffers1_130(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            /// <inheritdoc cref = "CSGetConstantBuffers1(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void CSGetConstantBuffers1(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, Span<uint> pFirstConstant, Span<uint> pNumConstants)
            {
                fixed (uint *pNumConstantsLocal = pNumConstants)
                {
                    fixed (uint *pFirstConstantLocal = pFirstConstant)
                    {
                        if (pFirstConstant.Length != pNumConstants.Length)
                            throw new ArgumentException();
                        this.CSGetConstantBuffers1(StartSlot, (uint)pNumConstants.Length, ppConstantBuffers, pFirstConstantLocal, pNumConstantsLocal);
                    }
                }
            }

            internal unsafe void CSGetConstantBuffers1(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers, [Optional] uint *pFirstConstant, [Optional] uint *pNumConstants)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CSGetConstantBuffers1_131(pThis, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
            }

            internal unsafe void SwapDeviceContextState(win32.Graphics.Direct3D11.ID3DDeviceContextState*pState, [Optional] win32.Graphics.Direct3D11.ID3DDeviceContextState**ppPreviousState)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->SwapDeviceContextState_132(pThis, pState, ppPreviousState);
            }

            /// <inheritdoc cref = "ClearView(win32.Graphics.Direct3D11.ID3D11View*, float *, win32.UI.DisplayDevices.RECT*, uint)"/>
            internal unsafe void ClearView(win32.Graphics.Direct3D11.ID3D11View*pView, in float Color, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRect)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectLocal = pRect)
                {
                    fixed (float *ColorLocal = &Color)
                    {
                        this.ClearView(pView, ColorLocal, pRectLocal, (uint)pRect.Length);
                    }
                }
            }

            internal unsafe void ClearView(win32.Graphics.Direct3D11.ID3D11View*pView, float *Color, [Optional] win32.UI.DisplayDevices.RECT*pRect, uint NumRects)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->ClearView_133(pThis, pView, Color, pRect, NumRects);
            }

            /// <inheritdoc cref = "DiscardView1(win32.Graphics.Direct3D11.ID3D11View*, win32.UI.DisplayDevices.RECT*, uint)"/>
            internal unsafe void DiscardView1(win32.Graphics.Direct3D11.ID3D11View*pResourceView, ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.DiscardView1(pResourceView, pRectsLocal, (uint)pRects.Length);
                }
            }

            internal unsafe void DiscardView1(win32.Graphics.Direct3D11.ID3D11View*pResourceView, [Optional] win32.UI.DisplayDevices.RECT*pRects, uint NumRects)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->DiscardView1_134(pThis, pResourceView, pRects, NumRects);
            }

            /// <inheritdoc cref = "UpdateTileMappings(win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, uint *, uint *, uint *, uint)"/>
            internal unsafe win32.System.Com.HRESULT UpdateTileMappings(win32.Graphics.Direct3D11.ID3D11Resource*pTiledResource, ReadOnlySpan<win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE> pTiledResourceRegionStartCoordinates, ReadOnlySpan<win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE> pTiledResourceRegionSizes, win32.Graphics.Direct3D11.ID3D11Buffer*pTilePool, ReadOnlySpan<uint> pRangeFlags, ReadOnlySpan<uint> pTilePoolStartOffsets, ReadOnlySpan<uint> pRangeTileCounts, uint Flags)
            {
                fixed (uint *pRangeTileCountsLocal = pRangeTileCounts)
                {
                    fixed (uint *pTilePoolStartOffsetsLocal = pTilePoolStartOffsets)
                    {
                        fixed (uint *pRangeFlagsLocal = pRangeFlags)
                        {
                            fixed (win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pTiledResourceRegionSizesLocal = pTiledResourceRegionSizes)
                            {
                                fixed (win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pTiledResourceRegionStartCoordinatesLocal = pTiledResourceRegionStartCoordinates)
                                {
                                    if (pTiledResourceRegionStartCoordinates.Length != pTiledResourceRegionSizes.Length)
                                        throw new ArgumentException();
                                    if (pRangeFlags.Length != pTilePoolStartOffsets.Length)
                                        throw new ArgumentException();
                                    if (pRangeFlags.Length != pRangeTileCounts.Length)
                                        throw new ArgumentException();
                                    win32.System.Com.HRESULT __result = this.UpdateTileMappings(pTiledResource, (uint)pTiledResourceRegionSizes.Length, pTiledResourceRegionStartCoordinatesLocal, pTiledResourceRegionSizesLocal, pTilePool, (uint)pRangeTileCounts.Length, pRangeFlagsLocal, pTilePoolStartOffsetsLocal, pRangeTileCountsLocal, Flags);
                                    return __result;
                                }
                            }
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT UpdateTileMappings(win32.Graphics.Direct3D11.ID3D11Resource*pTiledResource, uint NumTiledResourceRegions, [Optional] win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pTiledResourceRegionStartCoordinates, [Optional] win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pTiledResourceRegionSizes, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer*pTilePool, uint NumRanges, [Optional] uint *pRangeFlags, [Optional] uint *pTilePoolStartOffsets, [Optional] uint *pRangeTileCounts, uint Flags)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->UpdateTileMappings_135(pThis, pTiledResource, NumTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, NumRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, Flags);
            }

            /// <inheritdoc cref = "CopyTileMappings(win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, uint)"/>
            internal unsafe win32.System.Com.HRESULT CopyTileMappings(win32.Graphics.Direct3D11.ID3D11Resource*pDestTiledResource, in win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE pDestRegionStartCoordinate, win32.Graphics.Direct3D11.ID3D11Resource*pSourceTiledResource, in win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE pSourceRegionStartCoordinate, in win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE pTileRegionSize, uint Flags)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pTileRegionSizeLocal = &pTileRegionSize)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pSourceRegionStartCoordinateLocal = &pSourceRegionStartCoordinate)
                    {
                        fixed (win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pDestRegionStartCoordinateLocal = &pDestRegionStartCoordinate)
                        {
                            win32.System.Com.HRESULT __result = this.CopyTileMappings(pDestTiledResource, pDestRegionStartCoordinateLocal, pSourceTiledResource, pSourceRegionStartCoordinateLocal, pTileRegionSizeLocal, Flags);
                            return __result;
                        }
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT CopyTileMappings(win32.Graphics.Direct3D11.ID3D11Resource*pDestTiledResource, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pDestRegionStartCoordinate, win32.Graphics.Direct3D11.ID3D11Resource*pSourceTiledResource, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pSourceRegionStartCoordinate, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pTileRegionSize, uint Flags)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->CopyTileMappings_136(pThis, pDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, Flags);
            }

            /// <inheritdoc cref = "CopyTiles(win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, win32.Graphics.Direct3D11.ID3D11Buffer*, ulong, uint)"/>
            internal unsafe void CopyTiles(win32.Graphics.Direct3D11.ID3D11Resource*pTiledResource, in win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE pTileRegionStartCoordinate, in win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE pTileRegionSize, win32.Graphics.Direct3D11.ID3D11Buffer*pBuffer, ulong BufferStartOffsetInBytes, uint Flags)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pTileRegionSizeLocal = &pTileRegionSize)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pTileRegionStartCoordinateLocal = &pTileRegionStartCoordinate)
                    {
                        this.CopyTiles(pTiledResource, pTileRegionStartCoordinateLocal, pTileRegionSizeLocal, pBuffer, BufferStartOffsetInBytes, Flags);
                    }
                }
            }

            internal unsafe void CopyTiles(win32.Graphics.Direct3D11.ID3D11Resource*pTiledResource, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pTileRegionStartCoordinate, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pTileRegionSize, win32.Graphics.Direct3D11.ID3D11Buffer*pBuffer, ulong BufferStartOffsetInBytes, uint Flags)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->CopyTiles_137(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }

            /// <inheritdoc cref = "UpdateTiles(win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, void *, uint)"/>
            internal unsafe void UpdateTiles(win32.Graphics.Direct3D11.ID3D11Resource*pDestTiledResource, in win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE pDestTileRegionStartCoordinate, in win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE pDestTileRegionSize, void *pSourceTileData, uint Flags)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pDestTileRegionSizeLocal = &pDestTileRegionSize)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pDestTileRegionStartCoordinateLocal = &pDestTileRegionStartCoordinate)
                    {
                        this.UpdateTiles(pDestTiledResource, pDestTileRegionStartCoordinateLocal, pDestTileRegionSizeLocal, pSourceTileData, Flags);
                    }
                }
            }

            internal unsafe void UpdateTiles(win32.Graphics.Direct3D11.ID3D11Resource*pDestTiledResource, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*pDestTileRegionStartCoordinate, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*pDestTileRegionSize, void *pSourceTileData, uint Flags)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->UpdateTiles_138(pThis, pDestTiledResource, pDestTileRegionStartCoordinate, pDestTileRegionSize, pSourceTileData, Flags);
            }

            internal unsafe win32.System.Com.HRESULT ResizeTilePool(win32.Graphics.Direct3D11.ID3D11Buffer*pTilePool, ulong NewSizeInBytes)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->ResizeTilePool_139(pThis, pTilePool, NewSizeInBytes);
            }

            internal unsafe void TiledResourceBarrier([Optional] win32.Graphics.Direct3D11.ID3D11DeviceChild*pTiledResourceOrViewAccessBeforeBarrier, [Optional] win32.Graphics.Direct3D11.ID3D11DeviceChild*pTiledResourceOrViewAccessAfterBarrier)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->TiledResourceBarrier_140(pThis, pTiledResourceOrViewAccessBeforeBarrier, pTiledResourceOrViewAccessAfterBarrier);
            }

            internal win32.System.SystemServices.BOOL IsAnnotationEnabled()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->IsAnnotationEnabled_141(pThis);
            }

            /// <inheritdoc cref = "SetMarkerInt(win32.System.SystemServices.PCWSTR, int)"/>
            internal unsafe void SetMarkerInt(string pLabel, int Data)
            {
                fixed (char *pLabelLocal = pLabel)
                {
                    this.SetMarkerInt(pLabelLocal, Data);
                }
            }

            internal void SetMarkerInt(win32.System.SystemServices.PCWSTR pLabel, int Data)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->SetMarkerInt_142(pThis, pLabel, Data);
            }

            /// <inheritdoc cref = "BeginEventInt(win32.System.SystemServices.PCWSTR, int)"/>
            internal unsafe void BeginEventInt(string pLabel, int Data)
            {
                fixed (char *pLabelLocal = pLabel)
                {
                    this.BeginEventInt(pLabelLocal, Data);
                }
            }

            internal void BeginEventInt(win32.System.SystemServices.PCWSTR pLabel, int Data)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->BeginEventInt_143(pThis, pLabel, Data);
            }

            internal void EndEvent()
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->EndEvent_144(pThis);
            }

            /// <inheritdoc cref = "Flush1(win32.Graphics.Direct3D11.D3D11_CONTEXT_TYPE, win32.System.SystemServices.HANDLE)"/>
            internal unsafe void Flush1(win32.Graphics.Direct3D11.D3D11_CONTEXT_TYPE ContextType, SafeHandle hEvent)
            {
                bool hEventAddRef = false;
                try
                {
                    win32.System.SystemServices.HANDLE hEventLocal;
                    if (hEvent is object)
                    {
                        hEvent.DangerousAddRef(ref hEventAddRef);
                        hEventLocal = (win32.System.SystemServices.HANDLE)hEvent.DangerousGetHandle();
                    }
                    else
                        hEventLocal = default(win32.System.SystemServices.HANDLE);
                    this.Flush1(ContextType, hEventLocal);
                }
                finally
                {
                    if (hEventAddRef)
                        hEvent.DangerousRelease();
                }
            }

            internal void Flush1(win32.Graphics.Direct3D11.D3D11_CONTEXT_TYPE ContextType, win32.System.SystemServices.HANDLE hEvent)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->Flush1_145(pThis, ContextType, hEvent);
            }

            internal void SetHardwareProtectionState(win32.System.SystemServices.BOOL HwProtectionEnable)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->SetHardwareProtectionState_146(pThis, HwProtectionEnable);
            }

            /// <inheritdoc cref = "GetHardwareProtectionState(win32.System.SystemServices.BOOL*)"/>
            internal unsafe void GetHardwareProtectionState(out win32.System.SystemServices.BOOL pHwProtectionEnable)
            {
                fixed (win32.System.SystemServices.BOOL*pHwProtectionEnableLocal = &pHwProtectionEnable)
                {
                    this.GetHardwareProtectionState(pHwProtectionEnableLocal);
                }
            }

            internal unsafe void GetHardwareProtectionState(win32.System.SystemServices.BOOL*pHwProtectionEnable)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    lpVtbl->GetHardwareProtectionState_147(pThis, pHwProtectionEnable);
            }

            /// <summary>Updates a fence to a specified value after all previous work has completed.</summary>
            /// <param name = "pFence">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d11_3/nn-d3d11_3-id3d11fence">ID3D11Fence</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/win32/api/d3d11_3/nn-d3d11_3-id3d11fence">ID3D11Fence</a> object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_3/nf-d3d11_3-id3d11devicecontext4-signal#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Value">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">UINT64</a></b></para>
            /// <para>The value to set the fence to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_3/nf-d3d11_3-id3d11devicecontext4-signal#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/win32/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_3/nf-d3d11_3-id3d11devicecontext4-signal">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Signal(win32.Graphics.Direct3D11.ID3D11Fence*pFence, ulong Value)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->Signal_148(pThis, pFence, Value);
            }

            /// <summary>Waits until the specified fence reaches or exceeds the specified value before future work can begin.</summary>
            /// <param name = "pFence">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d3d11_3/nn-d3d11_3-id3d11fence">ID3D11Fence</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/win32/api/d3d11_3/nn-d3d11_3-id3d11fence">ID3D11Fence</a> object.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_3/nf-d3d11_3-id3d11devicecontext4-wait#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Value">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">UINT64</a></b></para>
            /// <para>The value that the device context is waiting for the fence to reach or exceed.  So when  <a href = "https://docs.microsoft.com/windows/win32/api/d3d11_3/nf-d3d11_3-id3d11fence-getcompletedvalue">ID3D11Fence::GetCompletedValue</a> is greater than or equal to <i>Value</i>, the wait is terminated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_3/nf-d3d11_3-id3d11devicecontext4-wait#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/win32/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_3/nf-d3d11_3-id3d11devicecontext4-wait">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Wait(win32.Graphics.Direct3D11.ID3D11Fence*pFence, ulong Value)
            {
                fixed (ID3D11DeviceContext4*pThis = &this)
                    return lpVtbl->Wait_149(pThis, pFence, Value);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Device**, void>GetDevice_4;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_7;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>VSSetConstantBuffers_8;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>PSSetShaderResources_9;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11PixelShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>PSSetShader_10;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>PSSetSamplers_11;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11VertexShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>VSSetShader_12;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, int, void>DrawIndexed_13;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, void>Draw_14;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_MAP, uint, win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE*, win32.System.Com.HRESULT>Map_15;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, void>Unmap_16;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>PSSetConstantBuffers_17;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11InputLayout*, void>IASetInputLayout_18;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>IASetVertexBuffers_19;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Buffer*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, void>IASetIndexBuffer_20;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, uint, int, uint, void>DrawIndexedInstanced_21;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, uint, uint, void>DrawInstanced_22;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>GSSetConstantBuffers_23;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11GeometryShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>GSSetShader_24;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY, void>IASetPrimitiveTopology_25;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>VSSetShaderResources_26;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>VSSetSamplers_27;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Asynchronous*, void>Begin_28;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Asynchronous*, void>End_29;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Asynchronous*, void *, uint, uint, win32.System.Com.HRESULT>GetData_30;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Predicate*, win32.System.SystemServices.BOOL, void>SetPredication_31;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>GSSetShaderResources_32;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>GSSetSamplers_33;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, void>OMSetRenderTargets_34;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *, void>OMSetRenderTargetsAndUnorderedAccessViews_35;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11BlendState*, float *, uint, void>OMSetBlendState_36;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11DepthStencilState*, uint, void>OMSetDepthStencilState_37;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, void>SOSetTargets_38;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, void>DrawAuto_39;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, void>DrawIndexedInstancedIndirect_40;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, void>DrawInstancedIndirect_41;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, uint, void>Dispatch_42;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, void>DispatchIndirect_43;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11RasterizerState*, void>RSSetState_44;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.Graphics.Direct3D11.D3D11_VIEWPORT*, void>RSSetViewports_45;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.UI.DisplayDevices.RECT*, void>RSSetScissorRects_46;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void>CopySubresourceRegion_47;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.ID3D11Resource*, void>CopyResource_48;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void *, uint, uint, void>UpdateSubresource_49;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, void>CopyStructureCount_50;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11RenderTargetView*, float *, void>ClearRenderTargetView_51;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, uint *, void>ClearUnorderedAccessViewUint_52;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, float *, void>ClearUnorderedAccessViewFloat_53;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, uint, float, byte, void>ClearDepthStencilView_54;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11ShaderResourceView*, void>GenerateMips_55;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, float, void>SetResourceMinLOD_56;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, float>GetResourceMinLOD_57;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Dxgi.DXGI_FORMAT, void>ResolveSubresource_58;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11CommandList*, win32.System.SystemServices.BOOL, void>ExecuteCommandList_59;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>HSSetShaderResources_60;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11HullShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>HSSetShader_61;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>HSSetSamplers_62;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>HSSetConstantBuffers_63;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>DSSetShaderResources_64;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11DomainShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>DSSetShader_65;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>DSSetSamplers_66;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>DSSetConstantBuffers_67;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>CSSetShaderResources_68;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *, void>CSSetUnorderedAccessViews_69;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11ComputeShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>CSSetShader_70;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>CSSetSamplers_71;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>CSSetConstantBuffers_72;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>VSGetConstantBuffers_73;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>PSGetShaderResources_74;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11PixelShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>PSGetShader_75;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>PSGetSamplers_76;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11VertexShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>VSGetShader_77;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>PSGetConstantBuffers_78;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11InputLayout**, void>IAGetInputLayout_79;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>IAGetVertexBuffers_80;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Buffer**, win32.Graphics.Dxgi.DXGI_FORMAT*, uint *, void>IAGetIndexBuffer_81;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>GSGetConstantBuffers_82;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11GeometryShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>GSGetShader_83;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*, void>IAGetPrimitiveTopology_84;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>VSGetShaderResources_85;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>VSGetSamplers_86;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Predicate**, win32.System.SystemServices.BOOL*, void>GetPredication_87;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>GSGetShaderResources_88;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>GSGetSamplers_89;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView**, void>OMGetRenderTargets_90;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView**, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, void>OMGetRenderTargetsAndUnorderedAccessViews_91;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11BlendState**, float *, uint *, void>OMGetBlendState_92;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11DepthStencilState**, uint *, void>OMGetDepthStencilState_93;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>SOGetTargets_94;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11RasterizerState**, void>RSGetState_95;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint *, win32.Graphics.Direct3D11.D3D11_VIEWPORT*, void>RSGetViewports_96;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint *, win32.UI.DisplayDevices.RECT*, void>RSGetScissorRects_97;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>HSGetShaderResources_98;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11HullShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>HSGetShader_99;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>HSGetSamplers_100;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>HSGetConstantBuffers_101;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>DSGetShaderResources_102;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11DomainShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>DSGetShader_103;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>DSGetSamplers_104;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>DSGetConstantBuffers_105;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>CSGetShaderResources_106;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, void>CSGetUnorderedAccessViews_107;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11ComputeShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>CSGetShader_108;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>CSGetSamplers_109;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>CSGetConstantBuffers_110;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, void>ClearState_111;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, void>Flush_112;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.D3D11_DEVICE_CONTEXT_TYPE>GetType_113;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint>GetContextFlags_114;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.System.SystemServices.BOOL, win32.Graphics.Direct3D11.ID3D11CommandList**, win32.System.Com.HRESULT>FinishCommandList_115;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, uint, void>CopySubresourceRegion1_116;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void *, uint, uint, uint, void>UpdateSubresource1_117;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, void>DiscardResource_118;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11View*, void>DiscardView_119;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>VSSetConstantBuffers1_120;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>HSSetConstantBuffers1_121;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>DSSetConstantBuffers1_122;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>GSSetConstantBuffers1_123;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>PSSetConstantBuffers1_124;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>CSSetConstantBuffers1_125;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>VSGetConstantBuffers1_126;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>HSGetConstantBuffers1_127;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>DSGetConstantBuffers1_128;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>GSGetConstantBuffers1_129;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>PSGetConstantBuffers1_130;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>CSGetConstantBuffers1_131;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3DDeviceContextState*, win32.Graphics.Direct3D11.ID3DDeviceContextState**, void>SwapDeviceContextState_132;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11View*, float *, win32.UI.DisplayDevices.RECT*, uint, void>ClearView_133;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11View*, win32.UI.DisplayDevices.RECT*, uint, void>DiscardView1_134;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, uint *, uint *, uint *, uint, win32.System.Com.HRESULT>UpdateTileMappings_135;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, uint, win32.System.Com.HRESULT>CopyTileMappings_136;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, win32.Graphics.Direct3D11.ID3D11Buffer*, ulong, uint, void>CopyTiles_137;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE*, win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE*, void *, uint, void>UpdateTiles_138;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Buffer*, ulong, win32.System.Com.HRESULT>ResizeTilePool_139;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11DeviceChild*, win32.Graphics.Direct3D11.ID3D11DeviceChild*, void>TiledResourceBarrier_140;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.System.SystemServices.BOOL>IsAnnotationEnabled_141;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.System.SystemServices.PCWSTR, int, void>SetMarkerInt_142;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.System.SystemServices.PCWSTR, int, void>BeginEventInt_143;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, void>EndEvent_144;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.D3D11_CONTEXT_TYPE, win32.System.SystemServices.HANDLE, void>Flush1_145;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.System.SystemServices.BOOL, void>SetHardwareProtectionState_146;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.System.SystemServices.BOOL*, void>GetHardwareProtectionState_147;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Fence*, ulong, win32.System.Com.HRESULT>Signal_148;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext4*, win32.Graphics.Direct3D11.ID3D11Fence*, ulong, win32.System.Com.HRESULT>Wait_149;
            }

            private Vtbl*lpVtbl;
        }
    }
}