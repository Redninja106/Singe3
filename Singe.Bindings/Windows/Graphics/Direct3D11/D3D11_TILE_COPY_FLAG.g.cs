// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        /// <summary>Identifies how to copy a tile.</summary>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_2/ne-d3d11_2-d3d11_tile_copy_flag">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        internal enum D3D11_TILE_COPY_FLAG
        {
            /// <summary>
            /// <para>Indicates that the GPU isn't currently referencing any of the portions of destination memory being written.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_2/ne-d3d11_2-d3d11_tile_copy_flag#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            D3D11_TILE_COPY_NO_OVERWRITE = 1,
            /// <summary>
            /// <para>Indicates that the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_2/nf-d3d11_2-id3d11devicecontext2-copytiles">ID3D11DeviceContext2::CopyTiles</a> operation involves copying a linear buffer to a swizzled tiled resource. This means to copy tile data from the specified buffer location, reading tiles sequentially, to the specified tile region (in x,y,z order if the region is a box), swizzling to optimal hardware memory layout as needed. In this <b>ID3D11DeviceContext2::CopyTiles</b> call, you specify the source data with the  <i>pBuffer</i> parameter and the destination with the <i>pTiledResource</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_2/ne-d3d11_2-d3d11_tile_copy_flag#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2,
            /// <summary>
            /// <para>Indicates that the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_2/nf-d3d11_2-id3d11devicecontext2-copytiles">ID3D11DeviceContext2::CopyTiles</a> operation involves copying a swizzled tiled resource to a linear buffer. This means to copy tile data from the tile region, reading tiles sequentially (in x,y,z order if the region is a box), to the specified buffer location, deswizzling to linear memory layout as needed. In this <b>ID3D11DeviceContext2::CopyTiles</b> call, you specify the source data with the <i>pTiledResource</i> parameter and the destination with the  <i>pBuffer</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_2/ne-d3d11_2-d3d11_tile_copy_flag#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4,
        }
    }
}