// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        [Guid("59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E")]
        internal unsafe struct ID3D11Linker
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11Linker*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11Linker*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11Linker*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Links the shader and produces a shader blob that the Direct3D runtime can use.</summary>
            /// <param name = "pEntry">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11moduleinstance">ID3D11ModuleInstance</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11moduleinstance">ID3D11ModuleInstance</a> interface for the shader module instance to link from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-link#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pEntryName">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The name of the shader module instance to link from.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-link#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pTargetName">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
            /// <para>The name for the shader blob that is produced.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-link#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "uFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Reserved.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-link#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderBlob">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a>**</b></para>
            /// <para>A pointer to a variable that receives a pointer to the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the compiled shader code.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-link#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppErrorBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a>**</b></para>
            /// <para>A pointer to a variable that receives a pointer to the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access compiler error messages.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-link#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-link">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Link(win32.Graphics.Direct3D11.ID3D11ModuleInstance*pEntry, win32.System.SystemServices.PCSTR pEntryName, win32.System.SystemServices.PCSTR pTargetName, uint uFlags, win32.Graphics.Direct3D11.ID3DBlob**ppShaderBlob, [Optional] win32.Graphics.Direct3D11.ID3DBlob**ppErrorBuffer)
            {
                fixed (ID3D11Linker*pThis = &this)
                    return lpVtbl->Link_4(pThis, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
            }

            /// <summary>Adds an instance of a library module to be used for linking.</summary>
            /// <param name = "pLibraryMI">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11moduleinstance">ID3D11ModuleInstance</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11moduleinstance">ID3D11ModuleInstance</a> interface for the library module instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-uselibrary#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-uselibrary">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT UseLibrary(win32.Graphics.Direct3D11.ID3D11ModuleInstance*pLibraryMI)
            {
                fixed (ID3D11Linker*pThis = &this)
                    return lpVtbl->UseLibrary_5(pThis, pLibraryMI);
            }

            /// <summary>Adds a clip plane with the plane coefficients taken from a cbuffer entry for 10Level9 shaders.</summary>
            /// <param name = "uCBufferSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-constants">cbuffer</a> slot number.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-addclipplanefromcbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "uCBufferEntry">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-constants">cbuffer</a> entry number.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-addclipplanefromcbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shader/nf-d3d11shader-id3d11linker-addclipplanefromcbuffer">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT AddClipPlaneFromCBuffer(uint uCBufferSlot, uint uCBufferEntry)
            {
                fixed (ID3D11Linker*pThis = &this)
                    return lpVtbl->AddClipPlaneFromCBuffer_6(pThis, uCBufferSlot, uCBufferEntry);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11Linker*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11Linker*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11Linker*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11Linker*, win32.Graphics.Direct3D11.ID3D11ModuleInstance*, win32.System.SystemServices.PCSTR, win32.System.SystemServices.PCSTR, uint, win32.Graphics.Direct3D11.ID3DBlob**, win32.Graphics.Direct3D11.ID3DBlob**, win32.System.Com.HRESULT>Link_4;
                internal delegate *unmanaged[Stdcall]<ID3D11Linker*, win32.Graphics.Direct3D11.ID3D11ModuleInstance*, win32.System.Com.HRESULT>UseLibrary_5;
                internal delegate *unmanaged[Stdcall]<ID3D11Linker*, uint, uint, win32.System.Com.HRESULT>AddClipPlaneFromCBuffer_6;
            }

            private Vtbl*lpVtbl;
        }
    }
}