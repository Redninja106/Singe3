// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        /// <summary>Describes a trace step, which is an instruction.</summary>
        /// <remarks>
        /// <para>This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_step#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct D3D11_TRACE_STEP
        {
            /// <summary>
            /// <para>A number that identifies the instruction, as an offset into the executable instructions that are present in the shader.</para>
            /// <para>HLSL debugging information uses the same convention. Therefore, HLSL instructions are matched to a set of IDs. You can then map an ID to a disassembled string that can be displayed to the user.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_step#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint ID;
            /// <summary>A value that specifies whether the instruction is active. This value is TRUE if something happened; therefore, you should parse other data in this structure. Otherwise, nothing happened; for example, if an instruction is disabled due to flow control even though other pixels in the stamp execute it.</summary>
            internal win32.System.SystemServices.BOOL InstructionActive;
            /// <summary>The number of registers for the instruction that are written to. The range of registers is [0...NumRegistersWritten-1]. You can pass a register number to the <i>writtenRegisterIndex</i> parameter of  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-getwrittenregister">ID3D11ShaderTrace::GetWrittenRegister</a> to retrieve individual write-register information.</summary>
            internal byte NumRegistersWritten;
            /// <summary>The number of registers for the instruction that are read from. The range of registers is [0...NumRegistersRead-1]. You can pass a register number to the <i>readRegisterIndex</i> parameter of  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-getreadregister">ID3D11ShaderTrace::GetReadRegister</a> to retrieve individual read-register information.</summary>
            internal byte NumRegistersRead;
            /// <summary></summary>
            internal ushort MiscOperations;
            /// <summary>A number that specifies the type of instruction (for example, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/add---vs">add</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-mul">mul</a>, and so on). You can ignore this member if you do not know the number for the instruction type. This member offers a minor convenience at the cost of bloating the trace slightly.  You can use the <b>ID</b> member and map back to the original shader code to retrieve the full information about the instruction.</summary>
            internal uint OpcodeType;
            /// <summary>
            /// <para>The global cycle count for this step.  You can use this member to correlate parallel thread execution via multiple simultaneous traces, for example, for the compute shader.</para>
            /// <para><div class = "alert"><b>Note</b>  Multiple threads at the same point in execution might log the same <b>CurrentGlobalCycle</b>. </div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_step#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal ulong CurrentGlobalCycle;
        }
    }
}