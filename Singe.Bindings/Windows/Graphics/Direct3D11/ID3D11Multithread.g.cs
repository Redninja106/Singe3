// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        [Guid("9B7E4E00-342C-4106-A19F-4F2704F689F0")]
        internal unsafe struct ID3D11Multithread
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11Multithread*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11Multithread*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11Multithread*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Enter a device's critical section.</summary>
            /// <remarks>
            /// <para>If <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_4/nf-d3d11_4-id3d11multithread-setmultithreadprotected">SetMultithreadProtected</a> is set to true, then entering a device's critical section prevents other threads from simultaneously calling that device's methods, calling DXGI methods, and calling the methods of all resource, view, shader, state, and asynchronous interfaces.</para>
            /// <para>This function should be used in multithreaded applications when there is a series of graphics commands that must happen in order. This function is typically called at the beginning of the series of graphics commands, and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_4/nf-d3d11_4-id3d11multithread-leave">Leave</a> is typically called after those graphics commands.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_4/nf-d3d11_4-id3d11multithread-enter#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Enter()
            {
                fixed (ID3D11Multithread*pThis = &this)
                    lpVtbl->Enter_4(pThis);
            }

            /// <summary>Leave a device's critical section.</summary>
            /// <remarks>
            /// <para>This function is typically used in multithreaded applications when there is a series of graphics commands that must happen in order. <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_4/nf-d3d11_4-id3d11multithread-enter">Enter</a> is typically called at the beginning of a series of graphics commands, and this function is typically called after those graphics commands.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_4/nf-d3d11_4-id3d11multithread-leave#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Leave()
            {
                fixed (ID3D11Multithread*pThis = &this)
                    lpVtbl->Leave_5(pThis);
            }

            /// <summary>Turns multithread protection on or off.</summary>
            /// <param name = "bMTProtect">
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Set to true to turn multithread protection on, false to turn it off.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_4/nf-d3d11_4-id3d11multithread-setmultithreadprotected#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>True if multithread protection was already turned on prior to calling this method, false otherwise.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_4/nf-d3d11_4-id3d11multithread-setmultithreadprotected">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL SetMultithreadProtected(win32.System.SystemServices.BOOL bMTProtect)
            {
                fixed (ID3D11Multithread*pThis = &this)
                    return lpVtbl->SetMultithreadProtected_6(pThis, bMTProtect);
            }

            /// <summary>Find out if multithread protection is turned on or not.</summary>
            /// <returns>
            /// <para>Type: <b>BOOL</b></para>
            /// <para>Returns true if multithread protection is turned on, false otherwise.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11_4/nf-d3d11_4-id3d11multithread-getmultithreadprotected">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.SystemServices.BOOL GetMultithreadProtected()
            {
                fixed (ID3D11Multithread*pThis = &this)
                    return lpVtbl->GetMultithreadProtected_7(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11Multithread*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11Multithread*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11Multithread*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11Multithread*, void>Enter_4;
                internal delegate *unmanaged[Stdcall]<ID3D11Multithread*, void>Leave_5;
                internal delegate *unmanaged[Stdcall]<ID3D11Multithread*, win32.System.SystemServices.BOOL, win32.System.SystemServices.BOOL>SetMultithreadProtected_6;
                internal delegate *unmanaged[Stdcall]<ID3D11Multithread*, win32.System.SystemServices.BOOL>GetMultithreadProtected_7;
            }

            private Vtbl*lpVtbl;
        }
    }
}