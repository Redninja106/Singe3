// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        [Guid("C0BFA96C-E089-44FB-8EAF-26F8796190DA")]
        internal unsafe struct ID3D11DeviceContext
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetDevice(win32.Graphics.Direct3D11.ID3D11Device**ppDevice)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GetDevice_4(pThis, ppDevice);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->GetPrivateData_5(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->SetPrivateData_6(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_7(pThis, guid, pData);
            }

            /// <summary>Sets the constant buffers used by the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The Direct3D 11.1 runtime, which is available starting with Windows 8, can bind a larger number of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants – 4\*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4\*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            /// <para>If the application wants the shader to access other parts of the buffer, it must call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-vssetconstantbuffers1">VSSetConstantBuffers1</a> method instead.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSSetConstantBuffers_8(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Bind an array of shader resources to the pixel shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with <b>NULL</b>.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSSetShaderResources_9(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Sets a pixel shader to the device.</summary>
            /// <param name = "pPixelShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>*</b></para>
            /// <para>Pointer to a pixel shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b></para>
            /// <para>A pointer to an array of class-instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of class-instance interfaces in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The maximum number of instances a shader can have is 256. Set ppClassInstances to <b>NULL</b> if no interfaces are used in the shader. If it is not <b>NULL</b>, the number of class instances must match the number of interfaces used in the shader. Furthermore, each interface pointer must have a corresponding class instance or the assigned shader will be disabled.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11PixelShader*pPixelShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSSetShader_10(pThis, pPixelShader, ppClassInstances, NumClassInstances);
            }

            /// <summary>Set an array of sampler states to the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSSetSamplers_11(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Set a vertex shader to the device.</summary>
            /// <param name = "pVertexShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>*</b></para>
            /// <para>Pointer to a vertex shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b></para>
            /// <para>A pointer to an array of class-instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of class-instance interfaces in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The maximum number of instances a shader can have is 256.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11VertexShader*pVertexShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSSetShader_12(pThis, pVertexShader, ppClassInstances, NumClassInstances);
            }

            /// <summary>Draw indexed, non-instanced primitives.</summary>
            /// <param name = "IndexCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of indices to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartIndexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The location of the first index read by the GPU from the index buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">INT</a></b></para>
            /// <para>A value added to each index before reading a vertex from the vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexed#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A draw API submits work to the rendering pipeline.</para>
            /// <para>If the sum of both indices is negative, the result of the function call is undefined.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexed#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DrawIndexed_13(pThis, IndexCount, StartIndexLocation, BaseVertexLocation);
            }

            /// <summary>Draw non-indexed, non-instanced primitives.</summary>
            /// <param name = "VertexCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of vertices to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first vertex, which is usually an offset in a vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-draw#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>Draw</b> submits work to the rendering pipeline.</para>
            /// <para>The vertex data for a draw call normally comes from a vertex buffer that is bound to the pipeline.</para>
            /// <para>Even without any vertex buffer bound to the pipeline, you can generate your own vertex data in your vertex shader by using the <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">SV_VertexID</a> system-value semantic to determine the current vertex that the runtime is processing.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-draw#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Draw(uint VertexCount, uint StartVertexLocation)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->Draw_14(pThis, VertexCount, StartVertexLocation);
            }

            /// <summary>Gets a pointer to the data contained in a subresource, and denies the GPU access to that subresource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Subresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index number of the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-subresources">subresource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "MapType">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_map">D3D11_MAP</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_map">D3D11_MAP</a>-typed value that specifies the CPU's read and write permissions for a resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "MapFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_map_flag">Flag</a> that specifies what the CPU does when the GPU is busy. This flag is optional.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pMappedResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_mapped_subresource">D3D11_MAPPED_SUBRESOURCE</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_mapped_subresource">D3D11_MAPPED_SUBRESOURCE</a> structure for the mapped subresource. See the Remarks section regarding NULL pointers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-map#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// <para>This method also returns <b>DXGI_ERROR_WAS_STILL_DRAWING</b> if <i>MapFlags</i> specifies <b>D3D11_MAP_FLAG_DO_NOT_WAIT</b> and the GPU is not yet finished with the resource.</para>
            /// <para>This method also returns <b>DXGI_ERROR_DEVICE_REMOVED</b> if <i>MapType</i> allows any CPU read access and the video card has been removed.</para>
            /// <para>For more information about these error codes, see <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-map">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT Map(win32.Graphics.Direct3D11.ID3D11Resource*pResource, uint Subresource, win32.Graphics.Direct3D11.D3D11_MAP MapType, uint MapFlags, [Optional] win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE*pMappedResource)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->Map_15(pThis, pResource, Subresource, MapType, MapFlags, pMappedResource);
            }

            /// <summary>Invalidate the pointer to a resource and reenable the GPU's access to that resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-unmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Subresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A subresource to be unmapped.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-unmap#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For info about how to use <b>Unmap</b>, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/how-to--use-dynamic-resources">How to: Use dynamic resources</a>.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-unmap#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void Unmap(win32.Graphics.Direct3D11.ID3D11Resource*pResource, uint Subresource)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->Unmap_16(pThis, pResource, Subresource);
            }

            /// <summary>Sets the constant buffers used by the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The Direct3D 11.1 runtime, which is available on Windows 8 and later operating systems, can bind a larger number of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants – 4*32-bit components each). When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            /// <para>To enable the shader to access other parts of the buffer, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-pssetconstantbuffers1">PSSetConstantBuffers1</a> instead of <b>PSSetConstantBuffers</b>. <b>PSSetConstantBuffers1</b> has additional parameters <i>pFirstConstant</i> and <i>pNumConstants</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-pssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSSetConstantBuffers_17(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Bind an input-layout object to the input-assembler stage.</summary>
            /// <param name = "pInputLayout">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>*</b></para>
            /// <para>A pointer to the input-layout object (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>), which describes the input buffers that will be read by the IA stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Input-layout objects describe how vertex buffer data is streamed into the IA pipeline stage. To create an input-layout object, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createinputlayout">ID3D11Device::CreateInputLayout</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetinputlayout#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetInputLayout([Optional] win32.Graphics.Direct3D11.ID3D11InputLayout*pInputLayout)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IASetInputLayout_18(pThis, pInputLayout);
            }

            /// <inheritdoc cref = "IASetVertexBuffers(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void IASetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, ReadOnlySpan<uint> pStrides, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IASetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            /// <summary>Bind an array of vertex buffers to the input-assembler stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The first input slot for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. The maximum of 16 or 32 input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of vertex buffers in the array. The number of buffers (plus the starting slot) can't exceed the total number of IA-stage input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppVertexBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>A pointer to an array of vertex buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>). The vertex buffers must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_VERTEX_BUFFER</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pStrides">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of stride values; one stride value for each buffer in the vertex-buffer array. Each stride is the size (in bytes) of the elements that are to be used from that vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOffsets">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of offset values; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For info about creating vertex buffers, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-vertex-how-to">How to: Create a Vertex Buffer</a>.</para>
            /// <para>Calling this method using a buffer that is currently bound for writing (that is, bound to the stream output pipeline stage) will effectively bind <b>NULL</b> instead because a buffer can't be bound as both an input and an output at the same time.</para>
            /// <para>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetvertexbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IASetVertexBuffers_19(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            /// <summary>Bind an index buffer to the input-assembler stage.</summary>
            /// <param name = "pIndexBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> object, that contains indices. The index buffer must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_INDEX_BUFFER</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> that specifies the format of the data in the index buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Offset">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Offset (in bytes) from the start of the index buffer to the first index to use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For information about creating index buffers, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-buffers-index-how-to">How to: Create an Index Buffer</a>.</para>
            /// <para>Calling this method using a buffer that is currently bound for writing (i.e. bound to the stream output pipeline stage) will effectively bind <b>NULL</b> instead because a buffer cannot be bound as both an input and an output at the same time.</para>
            /// <para>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetindexbuffer#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IASetIndexBuffer([Optional] win32.Graphics.Direct3D11.ID3D11Buffer*pIndexBuffer, win32.Graphics.Dxgi.DXGI_FORMAT Format, uint Offset)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IASetIndexBuffer_20(pThis, pIndexBuffer, Format, Offset);
            }

            /// <summary>Draw indexed, instanced primitives.</summary>
            /// <param name = "IndexCountPerInstance">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b></para>
            /// <para>Number of indices read from the index buffer for each instance.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InstanceCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b></para>
            /// <para>Number of instances to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartIndexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b></para>
            /// <para>The location of the first index read by the GPU from the index buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BaseVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">INT</a></b></para>
            /// <para>A value added to each index before reading a vertex from the vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartInstanceLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/winprog/windows-data-types">UINT</a></b></para>
            /// <para>A value added to each index before reading per-instance data from a vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A draw API submits work to the rendering pipeline.</para>
            /// <para>Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors. Instancing requires multiple vertex buffers: at least one for per-vertex data and a second buffer for per-instance data.</para>
            /// <para>The second buffer is needed only if the input layout that you use has elements that use [D3D11_INPUT_PER_INSTANCE_DATA](./ne-d3d11-d3d11_input_classification.md) as the input element classification.uffer for per-instance data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstanced#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DrawIndexedInstanced_21(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }

            /// <summary>Draw non-indexed, instanced primitives.</summary>
            /// <param name = "VertexCountPerInstance">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of vertices to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "InstanceCount">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of instances to draw.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartVertexLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first vertex.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StartInstanceLocation">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A value added to each index before reading per-instance data from a vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A draw API submits work to the rendering pipeline.</para>
            /// <para>Instancing may extend performance by reusing the same geometry to draw multiple objects in a scene. One example of instancing could be to draw the same object with different positions and colors.</para>
            /// <para>The vertex data for an instanced draw call normally comes from a vertex buffer that is bound to the pipeline. However, you could also provide the vertex data from a shader that has instanced data identified with a system-value semantic (SV_InstanceID).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstanced#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DrawInstanced_22(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }

            /// <summary>Sets the constant buffers used by the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>You can't use the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11shaderreflectionconstantbuffer">ID3D11ShaderReflectionConstantBuffer</a> interface to get information about what is currently bound to the pipeline in the device context. But you can use <b>ID3D11ShaderReflectionConstantBuffer</b> to get information from a compiled shader. For example, you can use <b>ID3D11ShaderReflectionConstantBuffer</b> and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11shaderreflectionvariable">ID3D11ShaderReflectionVariable</a> to determine the slot in which a geometry shader expects a constant buffer. You can then pass this slot number to <b>GSSetConstantBuffers</b> to set the constant buffer. You can call the <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3d11reflect">D3D11Reflect</a> function to retrieve the address of a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nn-d3d11shader-id3d11shaderreflection">ID3D11ShaderReflection</a> interface and then call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shader/nf-d3d11shader-id3d11shaderreflection-getconstantbufferbyname">ID3D11ShaderReflection::GetConstantBufferByName</a> to get a pointer to <b>ID3D11ShaderReflectionConstantBuffer</b>.</para>
            /// <para>The Direct3D 11.1 runtime, which is available starting with Windows 8, can bind a larger number of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants – 4*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            /// <para>If the application wants the shader to access other parts of the buffer, it must call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-gssetconstantbuffers1">GSSetConstantBuffers1</a> method instead.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSSetConstantBuffers_23(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Set a geometry shader to the device.</summary>
            /// <param name = "pShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>*</b></para>
            /// <para>Pointer to a geometry shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b></para>
            /// <para>A pointer to an array of class-instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of class-instance interfaces in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The maximum number of instances a shader can have is 256.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11GeometryShader*pShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSSetShader_24(pThis, pShader, ppClassInstances, NumClassInstances);
            }

            /// <summary>Bind information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
            /// <param name = "Topology">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a></b></para>
            /// <para>The type of primitive and ordering of the primitive data (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetprimitivetopology#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iasetprimitivetopology#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void IASetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY Topology)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IASetPrimitiveTopology_25(pThis, Topology);
            }

            /// <summary>Bind an array of shader resources to the vertex-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If an overlapping resource view is already bound to an output slot, such as a rendertarget, then this API will fill the destination shader resource slot with <b>NULL</b>.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSSetShaderResources_26(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Set an array of sampler states to the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSSetSamplers_27(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Mark the beginning of a series of commands.</summary>
            /// <param name = "pAsync">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a> interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-begin#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Use <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a> to mark the ending of the series of commands.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-begin#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void Begin(win32.Graphics.Direct3D11.ID3D11Asynchronous*pAsync)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->Begin_28(pThis, pAsync);
            }

            /// <summary>Mark the end of a series of commands.</summary>
            /// <param name = "pAsync">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a> interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-end#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Use <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> to mark the beginning of the series of commands.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-end#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void End(win32.Graphics.Direct3D11.ID3D11Asynchronous*pAsync)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->End_29(pThis, pAsync);
            }

            /// <summary>Get data from the graphics processing unit (GPU) asynchronously.</summary>
            /// <param name = "pAsync">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11asynchronous">ID3D11Asynchronous</a> interface for the object about which <b>GetData</b> retrieves data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pData">
            /// <para>Type: <b>void*</b></para>
            /// <para>Address of memory that will receive the data. If <b>NULL</b>, <b>GetData</b> will be used only to check status. The type of data output depends on the type of asynchronous interface.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DataSize">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Size of the data to retrieve or 0. Must be 0 when <i>pData</i> is <b>NULL</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "GetDataFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Optional flags. Can be 0 or any combination of the flags enumerated by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_async_getdata_flag">D3D11_ASYNC_GETDATA_FLAG</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getdata#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>This method returns one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>. A return value of S_OK indicates that the data at <i>pData</i> is available for the calling application to access. A return value of S_FALSE indicates that the data is not yet available. If the data is not yet available, the application must call <b>GetData</b> until the data is available.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getdata">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetData(win32.Graphics.Direct3D11.ID3D11Asynchronous*pAsync, [Optional] void *pData, uint DataSize, uint GetDataFlags)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->GetData_30(pThis, pAsync, pData, DataSize, GetDataFlags);
            }

            /// <summary>Set a rendering predicate.</summary>
            /// <param name = "pPredicate">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a> interface that represents the rendering predicate. A <b>NULL</b> value indicates "no" predication; in this case, the value of <i>PredicateValue</i> is irrelevant but will be preserved for <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getpredication">ID3D11DeviceContext::GetPredication</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "PredicateValue">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para>If <b>TRUE</b>, rendering will be affected by when the predicate's conditions are met. If <b>FALSE</b>, rendering will be affected when the conditions are not met.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-setpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The predicate must be in the "issued" or "signaled" state to be used for predication. While the predicate is set for predication, calls to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-begin">ID3D11DeviceContext::Begin</a> and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-end">ID3D11DeviceContext::End</a> are invalid.</para>
            /// <para>Use this method to denote that subsequent rendering and resource manipulation commands are not actually performed if the resulting predicate data of the predicate is equal to the <i>PredicateValue</i>. However, some predicates are only hints, so they may not actually prevent operations from being performed.</para>
            /// <para>The primary usefulness of predication is to allow an application to issue rendering and resource manipulation commands without taking the performance hit of spinning, waiting for <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> to return. So, predication can occur while <b>ID3D11DeviceContext::GetData</b> returns <b>S_FALSE</b>. Another way to think of it: an application can also use predication as a fallback, if it is possible that <b>ID3D11DeviceContext::GetData</b> returns <b>S_FALSE</b>. If <b>ID3D11DeviceContext::GetData</b> returns <b>S_OK</b>, the application can skip calling the rendering and resource manipulation commands manually with it's own application logic.</para>
            /// <para>Rendering and resource manipulation commands for Direct3D 11 include these Draw, Dispatch, Copy, Update, Clear, Generate, and Resolve operations.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-setpredication#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetPredication([Optional] win32.Graphics.Direct3D11.ID3D11Predicate*pPredicate, win32.System.SystemServices.BOOL PredicateValue)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->SetPredication_31(pThis, pPredicate, PredicateValue);
            }

            /// <summary>Bind an array of shader resources to the geometry shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSSetShaderResources_32(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Set an array of sampler states to the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSSetSamplers_33(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage.</summary>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of render targets to bind (ranges between 0 and <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which <i>ppRenderTargetViews</i> points must equal the number in this parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRenderTargetViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>*</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a> that represent the render targets to bind to the device. If this parameter is <b>NULL</b> and <i>NumViews</i> is 0, no render targets are bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a> that represents the depth-stencil view to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil view is not bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The maximum number of active render targets a device can have active at any given time is set by a #define in D3D11.h called <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>. It is invalid to try to set the same subresource to multiple render target slots. Any render targets not defined by this call are set to <b>NULL</b>. If any subresources are also currently bound for reading in a different stage or writing (perhaps in a different part of the pipeline), those bind points will be set to <b>NULL</b>, in order to prevent the same subresource from being read and written simultaneously in a single rendering operation. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>If the render-target views were created from an array resource type, all of the render-target views must have the same array size. This restriction also applies to the depth-stencil view, its array size must match that of the render-target views being bound. The pixel shader must be able to simultaneously render to at least eight separate render targets. All of these render targets must access the same type of resource: <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-buffer">Buffer</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture1d">Texture1D</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture1darray">Texture1DArray</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2d">Texture2D</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture2darray">Texture2DArray</a>, <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/sm5-object-texture3d">Texture3D</a>, or <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-type">TextureCube</a>. All render targets must have the same size in all dimensions (width and height, and depth for 3D or array size for *Array types). If render targets use multisample anti-aliasing, all bound render targets and depth buffer must be the same form of multisample resource (that is, the sample counts must be the same). Each render target can have a different data format. These render target formats are not required to have identical bit-per-element counts. Any combination of the eight slots for render targets can have a render target set or not set. The same resource view cannot be bound to multiple render target slots simultaneously. However, you can set multiple non-overlapping resource views of a single resource as simultaneous multiple render targets.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMSetRenderTargets_34(pThis, NumViews, ppRenderTargetViews, pDepthStencilView);
            }

            /// <inheritdoc cref = "OMSetRenderTargetsAndUnorderedAccessViews(uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *)"/>
            internal unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView, uint UAVStartSlot, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, ReadOnlySpan<uint> pUAVInitialCounts)
            {
                fixed (uint *pUAVInitialCountsLocal = pUAVInitialCounts)
                {
                    this.OMSetRenderTargetsAndUnorderedAccessViews(NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, (uint)pUAVInitialCounts.Length, ppUnorderedAccessViews, pUAVInitialCountsLocal);
                }
            }

            /// <summary>Binds resources to the output-merger stage.</summary>
            /// <param name = "NumRTVs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of render targets to bind (ranges between 0 and <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which <i>ppRenderTargetViews</i> points must equal the number in this parameter. If you set <i>NumRTVs</i> to D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL (0xffffffff), this method does not modify the currently bound render-target views (RTVs) and also does not modify depth-stencil view (DSV).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRenderTargetViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>*</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>s that represent the render targets to bind to the device. If this parameter is <b>NULL</b> and <i>NumRTVs</i> is 0, no render targets are bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a> that represents the depth-stencil view to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil view is not bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "UAVStartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Index into a zero-based array to begin setting unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). For the Direct3D 11.1 runtime, which is available starting with Windows 8, this value can range from 0 to D3D11_1_UAV_SLOT_COUNT - 1. D3D11_1_UAV_SLOT_COUNT is defined as 64.</para>
            /// <para>For pixel shaders, <i>UAVStartSlot</i> should be equal to the number of render-target views being bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumUAVs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b> Number of unordered-access views (UAVs) in <i>ppUnorderedAccessViews</i>. If you set <i>NumUAVs</i> to D3D11_KEEP_UNORDERED_ACCESS_VIEWS (0xffffffff), this method does not modify the currently bound unordered-access views.</para>
            /// <para>For the Direct3D 11.1 runtime, which is available starting with Windows 8, this value can range from 0 to D3D11_1_UAV_SLOT_COUNT - <i>UAVStartSlot</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppUnorderedAccessViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>s that represent the unordered-access views to bind to the device. If this parameter is <b>NULL</b> and <i>NumUAVs</i> is 0, no unordered-access views are bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pUAVInitialCounts">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. Any other values set the hidden counter for that appendable and consumable UAV. <i>pUAVInitialCounts</i> is  relevant only for UAVs that were created with either <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_buffer_uav_flag">D3D11_BUFFER_UAV_FLAG_APPEND</a> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created; otherwise, the argument is ignored.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For pixel shaders, the render targets and unordered-access views share the same resource slots when being written out. This means that UAVs must be given an offset so that they are placed in the slots after the render target views that are being bound.</para>
            /// <para><div class = "alert"><b>Note</b>  RTVs, DSV, and UAVs cannot be set independently; they all need to be set at the same time.</div> <div> </div> Two RTVs conflict if they share a subresource (and therefore share the same resource). Two UAVs conflict if they share a subresource (and therefore share the same resource). An RTV conflicts with a UAV if they share a subresource or share a bind point. <b>OMSetRenderTargetsAndUnorderedAccessViews</b> operates properly in the following situations:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetrendertargetsandunorderedaccessviews#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView, uint UAVStartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, [Optional] uint *pUAVInitialCounts)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMSetRenderTargetsAndUnorderedAccessViews_35(pThis, NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
            }

            /// <inheritdoc cref = "OMSetBlendState(win32.Graphics.Direct3D11.ID3D11BlendState*, float *, uint)"/>
            internal unsafe void OMSetBlendState(win32.Graphics.Direct3D11.ID3D11BlendState*pBlendState, float? BlendFactor, uint SampleMask)
            {
                float BlendFactorLocal = BlendFactor.HasValue ? BlendFactor.Value : default(float);
                this.OMSetBlendState(pBlendState, BlendFactor.HasValue ? &BlendFactorLocal : null, SampleMask);
            }

            /// <summary>Set the blend state of the output-merger stage.</summary>
            /// <param name = "pBlendState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>*</b></para>
            /// <para>Pointer to a blend-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>). Pass <b>NULL</b> for a default blend state. For more info about default blend state, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BlendFactor">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>[4]</b></para>
            /// <para>Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both. If you created  the blend-state object with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND_BLEND_FACTOR</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">D3D11_BLEND_INV_BLEND_FACTOR</a>, the blending stage uses the non-NULL array of blend factors. If you didn't create the blend-state object with <b>D3D11_BLEND_BLEND_FACTOR</b> or <b>D3D11_BLEND_INV_BLEND_FACTOR</b>, the blending stage does not use the non-NULL array of blend factors; the runtime stores the blend factors, and you can later call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate">ID3D11DeviceContext::OMGetBlendState</a> to retrieve the blend factors. If you pass <b>NULL</b>, the runtime uses or stores a blend factor equal to { 1, 1, 1, 1 }.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SampleMask">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>32-bit sample coverage. The default value is 0xffffffff. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Blend state is used by the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a> to determine how to blend together two RGB pixel values and two alpha values. The two RGB pixel values and two alpha values are the RGB pixel value and alpha value that the pixel shader outputs and the RGB pixel value and alpha value already in the output render target. The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend">blend option</a> controls the data source that the blending stage uses to modulate values for the pixel shader, render target, or both. The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_blend_op">blend operation</a> controls how the blending stage mathematically combines these modulated values.</para>
            /// <para>To create a blend-state interface, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createblendstate">ID3D11Device::CreateBlendState</a>.</para>
            /// <para>Passing in <b>NULL</b> for the blend-state interface indicates to the runtime to set a default blending state.  The following table indicates the default blending parameters.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetBlendState([Optional] win32.Graphics.Direct3D11.ID3D11BlendState*pBlendState, [Optional] float *BlendFactor, uint SampleMask)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMSetBlendState_36(pThis, pBlendState, BlendFactor, SampleMask);
            }

            /// <summary>Sets the depth-stencil state of the output-merger stage.</summary>
            /// <param name = "pDepthStencilState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>*</b></para>
            /// <para>Pointer to a depth-stencil state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>) to bind to the device. Set this to <b>NULL</b> to use the default state listed in <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_depth_stencil_desc">D3D11_DEPTH_STENCIL_DESC</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "StencilRef">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Reference value to perform against when doing a depth-stencil test. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To create a depth-stencil state interface, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createdepthstencilstate">ID3D11Device::CreateDepthStencilState</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omsetdepthstencilstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMSetDepthStencilState([Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilState*pDepthStencilState, uint StencilRef)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMSetDepthStencilState_37(pThis, pDepthStencilState, StencilRef);
            }

            /// <inheritdoc cref = "SOSetTargets(uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *)"/>
            internal unsafe void SOSetTargets(win32.Graphics.Direct3D11.ID3D11Buffer**ppSOTargets, ReadOnlySpan<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    this.SOSetTargets((uint)pOffsets.Length, ppSOTargets, pOffsetsLocal);
                }
            }

            /// <summary>Set the target output buffers for the stream-output stage of the pipeline.</summary>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of buffer to bind to the device. A maximum of four output buffers can be set. If less than four are defined by the call, the remaining buffer slots are set to <b>NULL</b>. See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSOTargets">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>The array of output buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to bind to the device. The buffers must have been created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_STREAM_OUTPUT</a> flag.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOffsets">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Array of offsets to the output buffers from <i>ppSOTargets</i>, one offset for each buffer. The offset values must be in bytes.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-sosettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>An offset of -1 will cause the stream output buffer to be appended, continuing after the last location written to the buffer in a previous stream output pass. Calling this method using a buffer that is currently bound for writing will effectively bind <b>NULL</b> instead because a buffer cannot be bound as both an input and an output at the same time.</para>
            /// <para>The debug layer will generate a warning whenever a resource is prevented from being bound simultaneously as an input and an output, but this will not prevent invalid data from being used by the runtime. The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-sosettargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SOSetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppSOTargets, [Optional] uint *pOffsets)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->SOSetTargets_38(pThis, NumBuffers, ppSOTargets, pOffsets);
            }

            /// <summary>Draw geometry of an unknown size.</summary>
            /// <remarks>
            /// <para>A draw API submits work to the rendering pipeline. This API submits work of an unknown size that was processed by the input assembler, vertex shader, and stream-output stages;  the work may or may not have gone through the geometry-shader stage.</para>
            /// <para>After data has been streamed out to stream-output stage buffers, those buffers can be again bound to the Input Assembler stage at input slot 0 and DrawAuto will draw them without the application needing to know the amount of data that was written to the buffers. A measurement of the amount of data written to the SO stage buffers is maintained internally when the data is streamed out. This means that the CPU does not need to fetch the measurement before re-binding the data that was streamed as input data. Although this amount is tracked internally, it is still the responsibility of applications to use input layouts to describe the format of the data in the SO stage buffers so that the layouts are available when the buffers are again bound to the input assembler.</para>
            /// <para>The following diagram shows the DrawAuto process.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawauto#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void DrawAuto()
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DrawAuto_39(pThis);
            }

            /// <summary>Draw indexed, instanced, GPU-generated primitives.</summary>
            /// <param name = "pBufferForArgs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>, which is a buffer containing the GPU generated primitives.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "AlignedByteOffsetForArgs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Offset in <i>pBufferForArgs</i> to the start of the GPU generated primitives.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>When an application creates a buffer that is associated with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> interface that  <i>pBufferForArgs</i> points to, the application must set the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</a> flag in the <b>MiscFlags</b> member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> structure that describes the buffer. To create the buffer, the application calls the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createbuffer">ID3D11Device::CreateBuffer</a> method and in this call passes a pointer to <b>D3D11_BUFFER_DESC</b> in the <i>pDesc</i> parameter.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawindexedinstancedindirect#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawIndexedInstancedIndirect(win32.Graphics.Direct3D11.ID3D11Buffer*pBufferForArgs, uint AlignedByteOffsetForArgs)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DrawIndexedInstancedIndirect_40(pThis, pBufferForArgs, AlignedByteOffsetForArgs);
            }

            /// <summary>Draw instanced, GPU-generated primitives.</summary>
            /// <param name = "pBufferForArgs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>, which is a buffer containing the GPU generated primitives.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "AlignedByteOffsetForArgs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Offset in <i>pBufferForArgs</i> to the start of the GPU generated primitives.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstancedindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>When an application creates a buffer that is associated with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> interface that  <i>pBufferForArgs</i> points to, the application must set the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</a> flag in the <b>MiscFlags</b> member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> structure that describes the buffer. To create the buffer, the application calls the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createbuffer">ID3D11Device::CreateBuffer</a> method and in this call passes a pointer to <b>D3D11_BUFFER_DESC</b> in the <i>pDesc</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-drawinstancedindirect#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DrawInstancedIndirect(win32.Graphics.Direct3D11.ID3D11Buffer*pBufferForArgs, uint AlignedByteOffsetForArgs)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DrawInstancedIndirect_41(pThis, pBufferForArgs, AlignedByteOffsetForArgs);
            }

            /// <summary>Execute a command list from a thread group.</summary>
            /// <param name = "ThreadGroupCountX">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of groups dispatched in the x direction. <i>ThreadGroupCountX</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ThreadGroupCountY">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of groups dispatched in the y direction. <i>ThreadGroupCountY</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ThreadGroupCountZ">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of groups dispatched in the z direction.  <i>ThreadGroupCountZ</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535). In feature level 10 the value for <i>ThreadGroupCountZ</i> must be 1.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dispatch#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>You call the <b>Dispatch</b> method to execute commands in a <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-compute-shader">compute shader</a>. A compute shader can be run on many threads in parallel, within a thread group. Index a particular thread, within a thread group using a 3D vector given by (x,y,z).</para>
            /// <para>In the following illustration, assume a thread group with 50 threads where the size of the group is given by (5,5,2). A single thread is identified from a thread group with 50 threads in it, using the vector (4,1,1).</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dispatch#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->Dispatch_42(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }

            /// <summary>Execute a command list over one or more thread groups.</summary>
            /// <param name = "pBufferForArgs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>, which must be loaded with data that matches the argument list for <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-dispatch">ID3D11DeviceContext::Dispatch</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dispatchindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "AlignedByteOffsetForArgs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A byte-aligned offset between the start of the buffer and the arguments.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dispatchindirect#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>You call the <b>DispatchIndirect</b> method to execute commands in a <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/direct3d-11-advanced-stages-compute-shader">compute shader</a>.</para>
            /// <para>When an application creates a buffer that is associated with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> interface that  <i>pBufferForArgs</i> points to, the application must set the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS</a> flag in the <b>MiscFlags</b> member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_buffer_desc">D3D11_BUFFER_DESC</a> structure that describes the buffer. To create the buffer, the application calls the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createbuffer">ID3D11Device::CreateBuffer</a> method and in this call passes a pointer to <b>D3D11_BUFFER_DESC</b> in the <i>pDesc</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dispatchindirect#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DispatchIndirect(win32.Graphics.Direct3D11.ID3D11Buffer*pBufferForArgs, uint AlignedByteOffsetForArgs)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DispatchIndirect_43(pThis, pBufferForArgs, AlignedByteOffsetForArgs);
            }

            /// <summary>Set the rasterizer state for the rasterizer stage of the pipeline.</summary>
            /// <param name = "pRasterizerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>*</b></para>
            /// <para>Pointer to a rasterizer-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>) to bind to the pipeline.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To create a rasterizer state interface, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createrasterizerstate">ID3D11Device::CreateRasterizerState</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetState([Optional] win32.Graphics.Direct3D11.ID3D11RasterizerState*pRasterizerState)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->RSSetState_44(pThis, pRasterizerState);
            }

            /// <inheritdoc cref = "RSSetViewports(uint, win32.Graphics.Direct3D11.D3D11_VIEWPORT*)"/>
            internal unsafe void RSSetViewports(ReadOnlySpan<win32.Graphics.Direct3D11.D3D11_VIEWPORT> pViewports)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewportsLocal = pViewports)
                {
                    this.RSSetViewports((uint)pViewports.Length, pViewportsLocal);
                }
            }

            /// <summary>Bind an array of viewports to the rasterizer stage of the pipeline.</summary>
            /// <param name = "NumViewports">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of viewports to bind.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pViewports">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a>*</b></para>
            /// <para>An array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a> structures to bind to the device. See the structure page for details about how the viewport size is dependent on the device feature level which has changed between Direct3D 11 and Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>All viewports must be set atomically as one operation. Any viewports not defined by the call are disabled.</para>
            /// <para>Which viewport to use is determined by the <a href = "https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">SV_ViewportArrayIndex</a> semantic output by a geometry shader; if a geometry shader does not specify the semantic, Direct3D will use the first viewport in the array.</para>
            /// <para><div class = "alert"><b>Note</b>  Even though you specify float values to the members of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a> structure for the <i>pViewports</i> array in a call to  <b>ID3D11DeviceContext::RSSetViewports</b> for <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature levels</a> 9_x, <b>RSSetViewports</b> uses DWORDs internally. Because of this behavior, when you use a negative top left corner for the viewport, the call to  <b>RSSetViewports</b> for feature levels 9_x fails. This failure occurs because <b>RSSetViewports</b> for 9_x casts the floating point values into unsigned integers without validation, which results in integer overflow. </div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetviewports#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetViewports(uint NumViewports, [Optional] win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewports)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->RSSetViewports_45(pThis, NumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSSetScissorRects(uint, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSSetScissorRects(ReadOnlySpan<win32.UI.DisplayDevices.RECT> pRects)
            {
                fixed (win32.UI.DisplayDevices.RECT*pRectsLocal = pRects)
                {
                    this.RSSetScissorRects((uint)pRects.Length, pRectsLocal);
                }
            }

            /// <summary>Bind an array of scissor rectangles to the rasterizer stage.</summary>
            /// <param name = "NumRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of scissor rectangles to bind.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>*</b></para>
            /// <para>An array of scissor rectangles (see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>All scissor rects must be set atomically as one operation. Any scissor rects not defined by the call are disabled. The scissor rectangles will only be used if ScissorEnable is set to true in the rasterizer state (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_rasterizer_desc">D3D11_RASTERIZER_DESC</a>).</para>
            /// <para>Which scissor rectangle to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader (see shader semantic syntax). If a geometry shader does not make use of the SV_ViewportArrayIndex semantic then Direct3D will use the first scissor rectangle in the array. Each scissor rectangle in the array corresponds to a viewport in an array of viewports (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-rssetviewports">ID3D11DeviceContext::RSSetViewports</a>).</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rssetscissorrects#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSSetScissorRects(uint NumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->RSSetScissorRects_46(pThis, NumRects, pRects);
            }

            /// <inheritdoc cref = "CopySubresourceRegion(win32.Graphics.Direct3D11.ID3D11Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*)"/>
            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Direct3D11.D3D11_BOX? pSrcBox)
            {
                win32.Graphics.Direct3D11.D3D11_BOX pSrcBoxLocal = pSrcBox.HasValue ? pSrcBox.Value : default(win32.Graphics.Direct3D11.D3D11_BOX);
                this.CopySubresourceRegion(pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox.HasValue ? &pSrcBoxLocal : null);
            }

            /// <summary>Copy a region from a source resource to a destination resource.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to the destination resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Destination subresource index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstX">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The x-coordinate of the upper left corner of the destination region.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstY">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstZ">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to the source resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Source subresource index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcBox">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>*</b></para>
            /// <para>A pointer to a 3D box (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>) that defines the source subresource that can be copied. If <b>NULL</b>, the entire source subresource is copied. The box must fit within the source resource.</para>
            /// <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>CopySubresourceRegion</b> doesn't perform a copy operation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The source box must be within the size of the source resource. The destination offsets, (x, y, and z), allow the source box to be offset when writing into the destination resource; however, the dimensions of the source box and the offsets must be within the size of the resource. If you try and copy outside the destination resource or specify a source box that is larger than the source resource, the behavior of <b>CopySubresourceRegion</b> is undefined. If you created a device that supports the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a>, the debug output reports an error on this invalid <b>CopySubresourceRegion</b> call. Invalid parameters to <b>CopySubresourceRegion</b> cause undefined behavior and might result in incorrect rendering, clipping, no copy, or even the removal of the rendering device. If the resources are buffers, all coordinates are in bytes; if the resources are textures, all coordinates are in texels. <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11calcsubresource">D3D11CalcSubresource</a> is a helper function for calculating subresource indexes. <b>CopySubresourceRegion</b> performs the copy on the GPU (similar to a memcpy by the CPU). As a consequence, the source and destination resources: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopySubresourceRegion(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, [Optional] win32.Graphics.Direct3D11.D3D11_BOX*pSrcBox)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CopySubresourceRegion_47(pThis, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
            }

            /// <summary>Copy the entire contents of the source resource to the destination resource using the GPU.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> interface that represents the destination resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> interface that represents the source resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copyresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This method is unusual in that it causes the GPU to perform the copy operation (similar to a memcpy by the CPU). As a result, it has a few restrictions designed for improving performance. For instance, the source and destination resources:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copyresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyResource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CopyResource_48(pThis, pDstResource, pSrcResource);
            }

            /// <inheritdoc cref = "UpdateSubresource(win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void *, uint, uint)"/>
            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D11.D3D11_BOX? pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                win32.Graphics.Direct3D11.D3D11_BOX pDstBoxLocal = pDstBox.HasValue ? pDstBox.Value : default(win32.Graphics.Direct3D11.D3D11_BOX);
                this.UpdateSubresource(pDstResource, DstSubresource, pDstBox.HasValue ? &pDstBoxLocal : null, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            /// <summary>The CPU copies data from memory to a subresource created in non-mappable memory.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to the destination resource (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based index, that identifies the destination subresource. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11calcsubresource">D3D11CalcSubresource</a> for more details.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pDstBox">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>*</b></para>
            /// <para>A pointer to a box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If <b>NULL</b>, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_box">D3D11_BOX</a>).</para>
            /// <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>UpdateSubresource</b> doesn't perform an update operation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcData">
            /// <para>Type: <b>const void*</b></para>
            /// <para>A pointer to the source data in memory.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcRowPitch">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The size of one row of the source data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcDepthPitch">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The size of one depth slice of source data.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For a shader-constant buffer; set <i>pDstBox</i> to <b>NULL</b>. It is not possible to use this method to partially update a shader-constant buffer.</para>
            /// <para>A resource cannot be used as a destination if:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-updatesubresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void UpdateSubresource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, [Optional] win32.Graphics.Direct3D11.D3D11_BOX*pDstBox, void *pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->UpdateSubresource_49(pThis, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }

            /// <summary>Copies data from a buffer holding variable length data.</summary>
            /// <param name = "pDstBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>Pointer to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>.  This can be any buffer resource that other copy commands, such as <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-copyresource">ID3D11DeviceContext::CopyResource</a> or <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-copysubresourceregion">ID3D11DeviceContext::CopySubresourceRegion</a>, are able to write to.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copystructurecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstAlignedByteOffset">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Offset from the start of <i>pDstBuffer</i> to write 32-bit UINT structure (vertex) count from <i>pSrcView</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copystructurecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>Pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> of a Structured Buffer resource created with either <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_buffer_uav_flag">D3D11_BUFFER_UAV_FLAG_APPEND</a> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created.   These types of resources have hidden counters tracking "how many" records have been written.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copystructurecount#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-copystructurecount">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CopyStructureCount(win32.Graphics.Direct3D11.ID3D11Buffer*pDstBuffer, uint DstAlignedByteOffset, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pSrcView)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CopyStructureCount_50(pThis, pDstBuffer, DstAlignedByteOffset, pSrcView);
            }

            /// <inheritdoc cref = "ClearRenderTargetView(win32.Graphics.Direct3D11.ID3D11RenderTargetView*, float *)"/>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D11.ID3D11RenderTargetView*pRenderTargetView, in float ColorRGBA)
            {
                fixed (float *ColorRGBALocal = &ColorRGBA)
                {
                    this.ClearRenderTargetView(pRenderTargetView, ColorRGBALocal);
                }
            }

            /// <summary>Set all the elements in a render target to one value.</summary>
            /// <param name = "pRenderTargetView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>*</b></para>
            /// <para>Pointer to the render target.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ColorRGBA">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>[4]</b></para>
            /// <para>A 4-component array that represents the color to fill the render target with.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearrendertargetview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Applications that wish to clear a render target to a specific integer value bit pattern should render a screen-aligned quad instead of using this method.  The reason for this is because this method accepts as input a floating point value, which may not have the same bit pattern as the original integer.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearrendertargetview#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearRenderTargetView(win32.Graphics.Direct3D11.ID3D11RenderTargetView*pRenderTargetView, float *ColorRGBA)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->ClearRenderTargetView_51(pThis, pRenderTargetView, ColorRGBA);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewUint(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, uint *)"/>
            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, in uint Values)
            {
                fixed (uint *ValuesLocal = &Values)
                {
                    this.ClearUnorderedAccessViewUint(pUnorderedAccessView, ValuesLocal);
                }
            }

            /// <summary>Clears an unordered access resource with bit-precise values.</summary>
            /// <param name = "pUnorderedAccessView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> to clear.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Values">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>[4]</b></para>
            /// <para>Values to copy to corresponding channels, see remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewuint#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This API copies the lower n<sub>i</sub> bits from each array element i to the corresponding channel, where n<sub>i</sub> is the number of bits in the ith channel of the resource format (for example, R8G8B8_FLOAT has 8 bits for the first 3 channels). This works on any UAV with no format conversion. For a raw or structured buffer view, only the first array element value is used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewuint#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearUnorderedAccessViewUint(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, uint *Values)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewUint_52(pThis, pUnorderedAccessView, Values);
            }

            /// <inheritdoc cref = "ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, float *)"/>
            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, in float Values)
            {
                fixed (float *ValuesLocal = &Values)
                {
                    this.ClearUnorderedAccessViewFloat(pUnorderedAccessView, ValuesLocal);
                }
            }

            /// <summary>Clears an unordered access resource with a float value.</summary>
            /// <param name = "pUnorderedAccessView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> to clear.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Values">
            /// <para>Type: <b>const FLOAT[4]</b></para>
            /// <para>Values to copy to corresponding channels, see remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewfloat#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This API works on FLOAT, UNORM, and SNORM unordered access views (UAVs), with format conversion from FLOAT to *NORM where appropriate. On other UAVs, the operation is invalid and the call will not reach the driver.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearunorderedaccessviewfloat#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearUnorderedAccessViewFloat(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pUnorderedAccessView, float *Values)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->ClearUnorderedAccessViewFloat_53(pThis, pUnorderedAccessView, Values);
            }

            /// <summary>Clears the depth-stencil resource.</summary>
            /// <param name = "pDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>*</b></para>
            /// <para>Pointer to the depth stencil to be cleared.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ClearFlags">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Identify the type of data to clear (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_clear_flag">D3D11_CLEAR_FLAG</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Depth">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>Clear the depth buffer with this value. This value will be clamped between 0 and 1.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Stencil">
            /// <para>Type: <b>UINT8</b></para>
            /// <para>Clear the stencil buffer with this value.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cleardepthstencilview#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ClearDepthStencilView(win32.Graphics.Direct3D11.ID3D11DepthStencilView*pDepthStencilView, uint ClearFlags, float Depth, byte Stencil)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->ClearDepthStencilView_54(pThis, pDepthStencilView, ClearFlags, Depth, Stencil);
            }

            /// <summary>Generates mipmaps for the given shader resource.</summary>
            /// <param name = "pShaderResourceView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a> interface that represents the shader resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-generatemips#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>You can call <b>GenerateMips</b> on any shader-resource view to generate the lower mipmap levels for the shader resource. <b>GenerateMips</b> uses the largest mipmap level of the view to recursively generate the lower levels of the mip and stops with the smallest level that is specified by the view. If the base resource wasn't created with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_RENDER_TARGET</a>, <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_bind_flag">D3D11_BIND_SHADER_RESOURCE</a>, and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_GENERATE_MIPS</a>, the call to <b>GenerateMips</b> has no effect.</para>
            /// <para><a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">Feature levels</a> 9.1, 9.2, and 9.3 can't support automatic generation of mipmaps for 3D (volume) textures.</para>
            /// <para>Video adapters that support <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9.1 and higher support generating mipmaps if you use any of these formats:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-generatemips#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GenerateMips(win32.Graphics.Direct3D11.ID3D11ShaderResourceView*pShaderResourceView)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GenerateMips_55(pThis, pShaderResourceView);
            }

            /// <summary>Sets the minimum level-of-detail (LOD) for a resource.</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> that represents the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-setresourceminlod#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "MinLOD">
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>The level-of-detail, which ranges between 0 and the maximum number of mipmap levels of the resource. For example, the maximum number of mipmap levels of a 1D texture is specified in the  <b>MipLevels</b> member of the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_texture1d_desc">D3D11_TEXTURE1D_DESC</a> structure.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-setresourceminlod#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>To use a resource with <b>SetResourceMinLOD</b>, you must set the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_resource_misc_flag">D3D11_RESOURCE_MISC_RESOURCE_CLAMP</a> flag when you create that resource.</para>
            /// <para>For Direct3D 10 and Direct3D 10.1, when sampling from a texture resource in a shader, the sampler can define a minimum LOD clamp to force sampling from less detailed mip levels.  For Direct3D 11, this functionality is extended from the sampler to the entire resource. Therefore, the application can specify the highest-resolution mip level of a resource that is available for access. This restricts the set of mip levels that are required to be resident in GPU memory, thereby saving memory.</para>
            /// <para>The set of mip levels resident per-resource in GPU memory can be specified by the user.</para>
            /// <para>Minimum LOD affects all of the resident mip levels. Therefore, only the resident mip levels can be updated and read from.</para>
            /// <para>All methods that access texture resources must adhere to minimum LOD clamps.</para>
            /// <para>Empty-set accesses are handled as out-of-bounds cases.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-setresourceminlod#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SetResourceMinLOD(win32.Graphics.Direct3D11.ID3D11Resource*pResource, float MinLOD)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->SetResourceMinLOD_56(pThis, pResource, MinLOD);
            }

            /// <summary>Gets the minimum level-of-detail (LOD).</summary>
            /// <param name = "pResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a> which represents the resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getresourceminlod#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>FLOAT</b></para>
            /// <para>Returns the minimum LOD.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getresourceminlod">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe float GetResourceMinLOD(win32.Graphics.Direct3D11.ID3D11Resource*pResource)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->GetResourceMinLOD_57(pThis, pResource);
            }

            /// <summary>Copy a multisampled resource into a non-multisampled resource.</summary>
            /// <param name = "pDstResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>Destination resource. Must be a created with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_usage">D3D11_USAGE_DEFAULT</a> flag and be single-sampled. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "DstSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>A zero-based index, that identifies the destination subresource. Use <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11calcsubresource">D3D11CalcSubresource</a> to calculate the index.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSrcResource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11resource">ID3D11Resource</a>*</b></para>
            /// <para>Source resource. Must be multisampled.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "SrcSubresource">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The source subresource of the source resource.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b></para>
            /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass.</para>
            /// <para>The source and destination resources must be the same resource type and have the same dimensions. In addition, they must have compatible formats. There are three scenarios for this:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-resolvesubresource#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ResolveSubresource(win32.Graphics.Direct3D11.ID3D11Resource*pDstResource, uint DstSubresource, win32.Graphics.Direct3D11.ID3D11Resource*pSrcResource, uint SrcSubresource, win32.Graphics.Dxgi.DXGI_FORMAT Format)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->ResolveSubresource_58(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }

            /// <summary>Queues commands from a command list onto a device.</summary>
            /// <param name = "pCommandList">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a>*</b></para>
            /// <para>A pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a> interface that encapsulates a command list.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-executecommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "RestoreContextState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
            /// <para>A Boolean flag that determines whether the target context state is saved prior to and restored after the execution of a command list. Use <b>TRUE</b> to indicate that the runtime needs to save and restore the state. Use <b>FALSE</b> to indicate that no state shall be saved or restored, which causes the target context to  return to its default state after the command list executes. Applications should typically use <b>FALSE</b> unless they will restore the state to be nearly equivalent to the state that the runtime would restore if <b>TRUE</b> were passed. When applications use <b>FALSE</b>, they can avoid unnecessary and inefficient state transitions.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-executecommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Use this method to play back a command list that was recorded by a deferred context on any thread. A call to <b>ExecuteCommandList</b> of a command list from a deferred context onto the immediate context is required for the recorded commands to be executed on the graphics processing unit (GPU). A call to <b>ExecuteCommandList</b> of a command list from a deferred context onto another deferred context can be used to merge recorded lists. But to run the commands from the merged deferred command list on the GPU, you need to execute them on the immediate context.</para>
            /// <para>This method performs some runtime validation related to queries. Queries that are begun in a device context cannot be manipulated indirectly by executing a command list (that is, Begin or End was invoked against the same query by the deferred context which generated the command list). If such a condition occurs, the ExecuteCommandList method does not execute the command list. However, the state of the device context is still maintained, as would be expected (<a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a> is performed, unless the application indicates to preserve the device context state).</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-executecommandlist#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void ExecuteCommandList(win32.Graphics.Direct3D11.ID3D11CommandList*pCommandList, win32.System.SystemServices.BOOL RestoreContextState)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->ExecuteCommandList_59(pThis, pCommandList, RestoreContextState);
            }

            /// <summary>Bind an array of shader resources to the hull-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSSetShaderResources_60(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Set a hull shader to the device.</summary>
            /// <param name = "pHullShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>*</b></para>
            /// <para>Pointer to a hull shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b></para>
            /// <para>A pointer to an array of class-instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of class-instance interfaces in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The maximum number of instances a shader can have is 256.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11HullShader*pHullShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSSetShader_61(pThis, pHullShader, ppClassInstances, NumClassInstances);
            }

            /// <summary>Set an array of sampler states to the hull-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSSetSamplers_62(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Set the constant buffers used by the hull-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The Direct3D 11.1 runtime, which is available starting with Windows 8, can bind a larger number of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants – 4*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            /// <para>If the application wants the shader to access other parts of the buffer, it must call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-hssetconstantbuffers1">HSSetConstantBuffers1</a> method instead.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSSetConstantBuffers_63(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Bind an array of shader resources to the domain-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSSetShaderResources_64(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Set a domain shader to the device.</summary>
            /// <param name = "pDomainShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>*</b></para>
            /// <para>Pointer to a domain shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b></para>
            /// <para>A pointer to an array of class-instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of class-instance interfaces in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The maximum number of instances a shader can have is 256. <b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11DomainShader*pDomainShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSSetShader_65(pThis, pDomainShader, ppClassInstances, NumClassInstances);
            }

            /// <summary>Set an array of sampler states to the domain-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSSetSamplers_66(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Sets the constant buffers used by the domain-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The Direct3D 11.1 runtime, which is available starting with Windows 8, can bind a larger number of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants – 4*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            /// <para>If the application wants the shader to access other parts of the buffer, it must call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-dssetconstantbuffers1">DSSetConstantBuffers1</a> method instead.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSSetConstantBuffers_67(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Bind an array of shader resources to the compute-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>*</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to set to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>If an overlapping resource view is already bound to an output slot, such as a render target, then the method will fill the destination shader resource slot with <b>NULL</b>.</para>
            /// <para>For information about creating shader-resource views, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createshaderresourceview">ID3D11Device::CreateShaderResourceView</a>.</para>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSSetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSSetShaderResources_68(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <inheritdoc cref = "CSSetUnorderedAccessViews(uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *)"/>
            internal unsafe void CSSetUnorderedAccessViews(uint StartSlot, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, ReadOnlySpan<uint> pUAVInitialCounts)
            {
                fixed (uint *pUAVInitialCountsLocal = pUAVInitialCounts)
                {
                    this.CSSetUnorderedAccessViews(StartSlot, (uint)pUAVInitialCounts.Length, ppUnorderedAccessViews, pUAVInitialCountsLocal);
                }
            }

            /// <summary>Sets an array of views for an unordered resource.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first element in the zero-based array to begin setting  (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - 1). D3D11_1_UAV_SLOT_COUNT is defined as 64.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumUAVs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of views to set (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - <i>StartSlot</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppUnorderedAccessViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> pointers to be set by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pUAVInitialCounts">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. Any other values set the hidden counter for that appendable and consumable UAV. <i>pUAVInitialCounts</i> is only relevant for UAVs that were created with either <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_buffer_uav_flag">D3D11_BUFFER_UAV_FLAG_APPEND</a> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created; otherwise, the argument is ignored.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetunorderedaccessviews#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSSetUnorderedAccessViews(uint StartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews, [Optional] uint *pUAVInitialCounts)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSSetUnorderedAccessViews_69(pThis, StartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
            }

            /// <summary>Set a compute shader to the device.</summary>
            /// <param name = "pComputeShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>*</b></para>
            /// <para>Pointer to a compute shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>). Passing in <b>NULL</b> disables the shader for this pipeline stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>*</b></para>
            /// <para>A pointer to an array of class-instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of class-instance interfaces in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The maximum number of instances a shader can have is 256.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSSetShader([Optional] win32.Graphics.Direct3D11.ID3D11ComputeShader*pComputeShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, uint NumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSSetShader_70(pThis, pComputeShader, ppClassInstances, NumClassInstances);
            }

            /// <summary>Set an array of sampler states to the compute-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>*</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>). See Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any sampler may be set to <b>NULL</b>; this invokes the default state, which is defined to be the following.</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSSetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSSetSamplers_71(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Sets the constant buffers used by the compute-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>*</b></para>
            /// <para>Array of constant buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) being given to the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The method will hold a reference to the interfaces passed in. This differs from the device state behavior in Direct3D 10.</para>
            /// <para>The Direct3D 11.1 runtime, which is available starting with Windows 8, can bind a larger number of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a> resources to the shader than the maximum constant buffer size that is supported by shaders (4096 constants – 4*32-bit components each).  When you bind such a large buffer, the shader can access only the first 4096 4*32-bit component constants in the buffer, as if 4096 constants is the full size of the buffer.</para>
            /// <para>If the application wants the shader to access other parts of the buffer, it must call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11_1/nf-d3d11_1-id3d11devicecontext1-cssetconstantbuffers1">CSSetConstantBuffers1</a> method instead.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-cssetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSSetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSSetConstantBuffers_72(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get the constant buffers used by the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSGetConstantBuffers_73(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get the pixel shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSGetShaderResources_74(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get the pixel shader currently set on the device.</summary>
            /// <param name = "ppPixelShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>**</b></para>
            /// <para>Address of a pointer to a pixel shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11pixelshader">ID3D11PixelShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b></para>
            /// <para>Pointer to an array of class instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>The number of class-instance elements in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed, to avoid memory leaks.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11PixelShader**ppPixelShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSGetShader_75(pThis, ppPixelShader, ppClassInstances, pNumClassInstances);
            }

            /// <summary>Get an array of sampler states from the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b></para>
            /// <para>Arry of sampler-state interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>) to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSGetSamplers_76(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get the vertex shader currently set on the device.</summary>
            /// <param name = "ppVertexShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>**</b></para>
            /// <para>Address of a pointer to a vertex shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11vertexshader">ID3D11VertexShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b></para>
            /// <para>Pointer to an array of class instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>The number of class-instance elements in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11VertexShader**ppVertexShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSGetShader_77(pThis, ppVertexShader, ppClassInstances, pNumClassInstances);
            }

            /// <summary>Get the constant buffers used by the pixel shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-psgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->PSGetConstantBuffers_78(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get a pointer to the input-layout object that is bound to the input-assembler stage.</summary>
            /// <param name = "ppInputLayout">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>**</b></para>
            /// <para>A pointer to the input-layout object (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11inputlayout">ID3D11InputLayout</a>), which describes the input buffers that will be read by the IA stage.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetinputlayout#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>For information about creating an input-layout object, see Creating the Input-Layout Object.</para>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetinputlayout#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetInputLayout([Optional] win32.Graphics.Direct3D11.ID3D11InputLayout**ppInputLayout)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IAGetInputLayout_79(pThis, ppInputLayout);
            }

            /// <inheritdoc cref = "IAGetVertexBuffers(uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *)"/>
            internal unsafe void IAGetVertexBuffers(uint StartSlot, win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, Span<uint> pStrides, Span<uint> pOffsets)
            {
                fixed (uint *pOffsetsLocal = pOffsets)
                {
                    fixed (uint *pStridesLocal = pStrides)
                    {
                        if (pStrides.Length != pOffsets.Length)
                            throw new ArgumentException();
                        this.IAGetVertexBuffers(StartSlot, (uint)pOffsets.Length, ppVertexBuffers, pStridesLocal, pOffsetsLocal);
                    }
                }
            }

            /// <summary>Get the vertex buffers bound to the input-assembler stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The input slot of the first vertex buffer to get. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. The maximum of 16 or 32 input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of vertex buffers to get starting at the offset. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppVertexBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>A pointer to an array of vertex buffers returned by the method (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pStrides">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of stride values returned by the method; one stride value for each buffer in the vertex-buffer array. Each stride value is the size (in bytes) of the elements that are to be used from that vertex buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pOffsets">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to an array of offset values returned by the method; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetvertexbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppVertexBuffers, [Optional] uint *pStrides, [Optional] uint *pOffsets)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IAGetVertexBuffers_80(pThis, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }

            /// <summary>Get a pointer to the index buffer that is bound to the input-assembler stage.</summary>
            /// <param name = "pIndexBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>A pointer to an index buffer returned by the method (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Format">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>*</b></para>
            /// <para>Specifies format of the data in the index buffer (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>). These formats provide the size and type of the data in the buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "Offset">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Offset (in bytes) from the start of the index buffer, to the first index to use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetindexbuffer#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetIndexBuffer([Optional] win32.Graphics.Direct3D11.ID3D11Buffer**pIndexBuffer, [Optional] win32.Graphics.Dxgi.DXGI_FORMAT*Format, [Optional] uint *Offset)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IAGetIndexBuffer_81(pThis, pIndexBuffer, Format, Offset);
            }

            /// <summary>Get the constant buffers used by the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSGetConstantBuffers_82(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get the geometry shader currently set on the device.</summary>
            /// <param name = "ppGeometryShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>**</b></para>
            /// <para>Address of a pointer to a geometry shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11geometryshader">ID3D11GeometryShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b></para>
            /// <para>Pointer to an array of class instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>The number of class-instance elements in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11GeometryShader**ppGeometryShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSGetShader_83(pThis, ppGeometryShader, ppClassInstances, pNumClassInstances);
            }

            /// <inheritdoc cref = "IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*)"/>
            internal unsafe void IAGetPrimitiveTopology(out win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY pTopology)
            {
                fixed (win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopologyLocal = &pTopology)
                {
                    this.IAGetPrimitiveTopology(pTopologyLocal);
                }
            }

            /// <summary>Get information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
            /// <param name = "pTopology">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>*</b></para>
            /// <para>A pointer to the type of primitive, and ordering of the primitive data (see <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetprimitivetopology#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-iagetprimitivetopology">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void IAGetPrimitiveTopology(win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*pTopology)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->IAGetPrimitiveTopology_84(pThis, pTopology);
            }

            /// <summary>Get the vertex shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSGetShaderResources_85(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get an array of sampler states from the vertex shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b></para>
            /// <para>Arry of sampler-state interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>) to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-vsgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void VSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->VSGetSamplers_86(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get the rendering predicate state.</summary>
            /// <param name = "ppPredicate">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>**</b></para>
            /// <para>Address of a pointer to a predicate (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11predicate">ID3D11Predicate</a>). Value stored here will be <b>NULL</b> upon device creation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pPredicateValue">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a>*</b></para>
            /// <para>Address of a boolean to fill with the predicate comparison value. <b>FALSE</b> upon device creation.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getpredication#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getpredication#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetPredication([Optional] win32.Graphics.Direct3D11.ID3D11Predicate**ppPredicate, [Optional] win32.System.SystemServices.BOOL*pPredicateValue)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GetPredication_87(pThis, ppPredicate, pPredicateValue);
            }

            /// <summary>Get the geometry shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSGetShaderResources_88(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get an array of sampler state interfaces from the geometry shader pipeline stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gsgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->GSGetSamplers_89(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get pointers to the resources bound to the output-merger stage.</summary>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of render targets to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRenderTargetViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>**</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>s which represent render target views. Specify <b>NULL</b> for this parameter when retrieval of a render target is not needed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>**</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>, which represents a depth-stencil view. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not needed.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMGetRenderTargets(uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView**ppDepthStencilView)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMGetRenderTargets_90(pThis, NumViews, ppRenderTargetViews, ppDepthStencilView);
            }

            /// <summary>Get pointers to the resources bound to the output-merger stage.</summary>
            /// <param name = "NumRTVs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of render-target views to retrieve.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppRenderTargetViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>**</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rendertargetview">ID3D11RenderTargetView</a>s, which represent render-target views. Specify <b>NULL</b> for this parameter when retrieval of render-target views is not required.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppDepthStencilView">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>**</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilview">ID3D11DepthStencilView</a>, which represents a depth-stencil view. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not required.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "UAVStartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into a zero-based array to begin retrieving unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). For pixel shaders <i>UAVStartSlot</i> should be equal to the number of render-target views that are bound.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumUAVs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of unordered-access views to return in <i>ppUnorderedAccessViews</i>. This number ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - <i>UAVStartSlot</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppUnorderedAccessViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b></para>
            /// <para>Pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>s, which represent unordered-access views that are retrieved. Specify <b>NULL</b> for this parameter when retrieval of unordered-access views is not required.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <a href = "https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">IUnknown::Release</a> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetrendertargetsandunorderedaccessviews#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMGetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, [Optional] win32.Graphics.Direct3D11.ID3D11RenderTargetView**ppRenderTargetViews, [Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilView**ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMGetRenderTargetsAndUnorderedAccessViews_91(pThis, NumRTVs, ppRenderTargetViews, ppDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews);
            }

            /// <summary>Get the blend state of the output-merger stage.</summary>
            /// <param name = "ppBlendState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>**</b></para>
            /// <para>Address of a pointer to a blend-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11blendstate">ID3D11BlendState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "BlendFactor">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>[4]</b></para>
            /// <para>Array of blend factors, one for each RGBA component.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pSampleMask">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-omsetblendstate">sample mask</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>The reference count of the returned interface will be incremented by one when the blend state is retrieved. Applications must release returned pointer(s) when they are no longer needed, or else there will be a memory leak.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetblendstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMGetBlendState([Optional] win32.Graphics.Direct3D11.ID3D11BlendState**ppBlendState, [Optional] float *BlendFactor, [Optional] uint *pSampleMask)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMGetBlendState_92(pThis, ppBlendState, BlendFactor, pSampleMask);
            }

            /// <summary>Gets the depth-stencil state of the output-merger stage.</summary>
            /// <param name = "ppDepthStencilState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>**</b></para>
            /// <para>Address of a pointer to a depth-stencil state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11depthstencilstate">ID3D11DepthStencilState</a>) to be filled with information from the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pStencilRef">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>Pointer to the stencil reference value used in the depth-stencil test.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetdepthstencilstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-omgetdepthstencilstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void OMGetDepthStencilState([Optional] win32.Graphics.Direct3D11.ID3D11DepthStencilState**ppDepthStencilState, [Optional] uint *pStencilRef)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->OMGetDepthStencilState_93(pThis, ppDepthStencilState, pStencilRef);
            }

            /// <summary>Get the target output buffers for the stream-output stage of the pipeline.</summary>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to get.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-sogettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSOTargets">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>An array of output buffers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be retrieved from the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-sogettargets#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>A maximum of four output buffers can be retrieved. The offsets to the output buffers pointed to in the returned <i>ppSOTargets</i> array may be assumed to be -1 (append), as defined for use in <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-sosettargets">ID3D11DeviceContext::SOSetTargets</a>.</para>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks. <b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-sogettargets#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void SOGetTargets(uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppSOTargets)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->SOGetTargets_94(pThis, NumBuffers, ppSOTargets);
            }

            /// <summary>Get the rasterizer state from the rasterizer stage of the pipeline.</summary>
            /// <param name = "ppRasterizerState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>**</b></para>
            /// <para>Address of a pointer to a rasterizer-state interface (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11rasterizerstate">ID3D11RasterizerState</a>) to fill with information from the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetstate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSGetState([Optional] win32.Graphics.Direct3D11.ID3D11RasterizerState**ppRasterizerState)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->RSGetState_95(pThis, ppRasterizerState);
            }

            /// <inheritdoc cref = "RSGetViewports(uint *, win32.Graphics.Direct3D11.D3D11_VIEWPORT*)"/>
            internal unsafe void RSGetViewports(ref uint pNumViewports, win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewports)
            {
                fixed (uint *pNumViewportsLocal = &pNumViewports)
                {
                    this.RSGetViewports(pNumViewportsLocal, pViewports);
                }
            }

            /// <summary>Gets the array of viewports bound to the rasterizer stage.</summary>
            /// <param name = "pNumViewports">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>A pointer to a variable that, on input, specifies the number of viewports (ranges from 0 to <b>D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE</b>) in the <i>pViewports</i> array; on output, the variable contains the actual number of viewports that are bound to the rasterizer stage. If <i>pViewports</i> is <b>NULL</b>, <b>RSGetViewports</b> fills the variable with the number of viewports currently bound.</para>
            /// <para><div class = "alert"><b>Note</b>  In some versions of the Windows SDK, a <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug device</a> will raise an exception if the input value in the variable to which <i>pNumViewports</i> points is greater than <b>D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE</b> even if <i>pViewports</i> is <b>NULL</b>.  The regular runtime ignores the value in the variable to which <i>pNumViewports</i> points when <i>pViewports</i> is <b>NULL</b>.  This behavior of a debug device might be corrected in a future release of the Windows SDK. </div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pViewports">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a>*</b></para>
            /// <para>An array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_viewport">D3D11_VIEWPORT</a> structures for the viewports that are bound to the rasterizer stage. If the number of viewports (in the variable to which <i>pNumViewports</i> points) is greater than the actual number of viewports currently bound, unused elements of the array contain 0. For info about how the viewport size depends on the device <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a>, which has changed between Direct3D 11 and Direct3D 10, see <b>D3D11_VIEWPORT</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetviewports#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><b>Windows Phone 8: </b> This API is supported.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetviewports#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSGetViewports(uint *pNumViewports, [Optional] win32.Graphics.Direct3D11.D3D11_VIEWPORT*pViewports)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->RSGetViewports_96(pThis, pNumViewports, pViewports);
            }

            /// <inheritdoc cref = "RSGetScissorRects(uint *, win32.UI.DisplayDevices.RECT*)"/>
            internal unsafe void RSGetScissorRects(ref uint pNumRects, win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (uint *pNumRectsLocal = &pNumRects)
                {
                    this.RSGetScissorRects(pNumRectsLocal, pRects);
                }
            }

            /// <summary>Get the array of scissor rectangles bound to the rasterizer stage.</summary>
            /// <param name = "pNumRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>The number of scissor rectangles (ranges between 0 and D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE) bound; set <i>pRects</i> to <b>NULL</b> to use <i>pNumRects</i> to see how many rectangles would be returned.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRects">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>*</b></para>
            /// <para>An array of scissor rectangles (see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>). If NumRects is greater than the number of scissor rects currently bound, then unused members of the array will contain 0.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetscissorrects#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-rsgetscissorrects">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void RSGetScissorRects(uint *pNumRects, [Optional] win32.UI.DisplayDevices.RECT*pRects)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->RSGetScissorRects_97(pThis, pNumRects, pRects);
            }

            /// <summary>Get the hull-shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSGetShaderResources_98(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get the hull shader currently set on the device.</summary>
            /// <param name = "ppHullShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>**</b></para>
            /// <para>Address of a pointer to a hull shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11hullshader">ID3D11HullShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b></para>
            /// <para>Pointer to an array of class instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>The number of class-instance elements in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11HullShader**ppHullShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSGetShader_99(pThis, ppHullShader, ppClassInstances, pNumClassInstances);
            }

            /// <summary>Get an array of sampler state interfaces from the hull-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSGetSamplers_100(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get the constant buffers used by the hull-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-hsgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void HSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->HSGetConstantBuffers_101(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get the domain-shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSGetShaderResources_102(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Get the domain shader currently set on the device.</summary>
            /// <param name = "ppDomainShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>**</b></para>
            /// <para>Address of a pointer to a domain shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11domainshader">ID3D11DomainShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b></para>
            /// <para>Pointer to an array of class instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>The number of class-instance elements in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11DomainShader**ppDomainShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSGetShader_103(pThis, ppDomainShader, ppClassInstances, pNumClassInstances);
            }

            /// <summary>Get an array of sampler state interfaces from the domain-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSGetSamplers_104(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get the constant buffers used by the domain-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-dsgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void DSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->DSGetConstantBuffers_105(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Get the compute-shader resources.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppShaderResourceViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">ID3D11ShaderResourceView</a>**</b></para>
            /// <para>Array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11shaderresourceview">shader resource view</a> interfaces to be returned by the device.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshaderresources#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshaderresources#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSGetShaderResources(uint StartSlot, uint NumViews, [Optional] win32.Graphics.Direct3D11.ID3D11ShaderResourceView**ppShaderResourceViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSGetShaderResources_106(pThis, StartSlot, NumViews, ppShaderResourceViews);
            }

            /// <summary>Gets an array of views for an unordered resource.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index of the first element in the zero-based array to return (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumUAVs">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of views to get (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppUnorderedAccessViews">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b></para>
            /// <para>A pointer to an array of interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>) to get.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetunorderedaccessviews#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call <b>IUnknown::Release</b> on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetunorderedaccessviews#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSGetUnorderedAccessViews(uint StartSlot, uint NumUAVs, [Optional] win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppUnorderedAccessViews)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSGetUnorderedAccessViews_107(pThis, StartSlot, NumUAVs, ppUnorderedAccessViews);
            }

            /// <summary>Get the compute shader currently set on the device.</summary>
            /// <param name = "ppComputeShader">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>**</b></para>
            /// <para>Address of a pointer to a Compute shader (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11computeshader">ID3D11ComputeShader</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>**</b></para>
            /// <para>Pointer to an array of class instance interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11classinstance">ID3D11ClassInstance</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pNumClassInstances">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
            /// <para>The number of class-instance elements in the array.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshader#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetshader#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSGetShader([Optional] win32.Graphics.Direct3D11.ID3D11ComputeShader**ppComputeShader, [Optional] win32.Graphics.Direct3D11.ID3D11ClassInstance**ppClassInstances, [Optional] uint *pNumClassInstances)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSGetShader_108(pThis, ppComputeShader, ppClassInstances, pNumClassInstances);
            }

            /// <summary>Get an array of sampler state interfaces from the compute-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppSamplers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>**</b></para>
            /// <para>Pointer to an array of sampler-state interfaces (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11samplerstate">ID3D11SamplerState</a>).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetsamplers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetsamplers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSGetSamplers(uint StartSlot, uint NumSamplers, [Optional] win32.Graphics.Direct3D11.ID3D11SamplerState**ppSamplers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSGetSamplers_109(pThis, StartSlot, NumSamplers, ppSamplers);
            }

            /// <summary>Get the constant buffers used by the compute-shader stage.</summary>
            /// <param name = "StartSlot">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppConstantBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>**</b></para>
            /// <para>Array of constant buffer interface pointers (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11buffer">ID3D11Buffer</a>) to be returned by the method.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetconstantbuffers#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <remarks>
            /// <para>Any returned interfaces will have their reference count incremented by one. Applications should call IUnknown::Release on the returned interfaces when they are no longer needed to avoid memory leaks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-csgetconstantbuffers#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void CSGetConstantBuffers(uint StartSlot, uint NumBuffers, [Optional] win32.Graphics.Direct3D11.ID3D11Buffer**ppConstantBuffers)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->CSGetConstantBuffers_110(pThis, StartSlot, NumBuffers, ppConstantBuffers);
            }

            /// <summary>Restore all default settings.</summary>
            /// <remarks>
            /// <para>This method resets any device context to the default settings. This sets all input/output resource slots, shaders, input layouts, predications, scissor rectangles, depth-stencil state, rasterizer state, blend state, sampler state, and viewports to <b>NULL</b>. The primitive topology is set to UNDEFINED.</para>
            /// <para>For a scenario where you would like to clear a list of commands recorded so far, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist">ID3D11DeviceContext::FinishCommandList</a> and throw away the resulting <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-clearstate#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ClearState()
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->ClearState_111(pThis);
            }

            /// <summary>Sends queued-up commands in the command buffer to the graphics processing unit (GPU).</summary>
            /// <remarks>
            /// <para>Most applications don't need to call this method. If an application calls this method when not necessary, it incurs a performance penalty. Each call to <b>Flush</b> incurs a significant amount of overhead.</para>
            /// <para>When Microsoft Direct3D state-setting, present, or draw commands are called by an application, those commands are queued into an internal command buffer. <b>Flush</b> sends those commands to the GPU for processing. Typically, the Direct3D runtime sends these commands to the GPU automatically whenever the runtime determines that they need to be sent, such as when the command buffer is full or when an application maps a resource. <b>Flush</b> sends the commands manually.</para>
            /// <para>We recommend that you use <b>Flush</b> when the CPU waits for an arbitrary amount of time (such as when you call the <a href = "https://docs.microsoft.com/windows/desktop/api/synchapi/nf-synchapi-sleep">Sleep</a> function).</para>
            /// <para>Because <b>Flush</b> operates asynchronously,  it can return either before or after the GPU finishes executing the queued graphics commands. However, the graphics commands eventually always complete. You can call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createquery">ID3D11Device::CreateQuery</a> method with the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_query">D3D11_QUERY_EVENT</a> value to create an event query; you can then use that event query in a call to the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-getdata">ID3D11DeviceContext::GetData</a> method to determine when the GPU is finished processing the graphics commands.</para>
            /// <para>Microsoft Direct3D 11 defers the destruction of objects. Therefore, an application can't rely upon objects immediately being destroyed. By calling <b>Flush</b>, you destroy any objects whose destruction was deferred.  If an application requires synchronous destruction of an object, we recommend that the application release all its references, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a>, and then call <b>Flush</b>.</para>
            /// <para><h3><a id = "Defer_Issues_with_Flip"></a><a id = "defer_issues_with_flip"></a><a id = "DEFER_ISSUES_WITH_FLIP"></a>Deferred Destruction Issues with Flip Presentation Swap Chains</h3> Direct3D 11 defers the destruction of objects like views and resources until it can efficiently destroy them. This deferred destruction can cause problems with flip presentation model swap chains. Flip presentation model swap chains have the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ne-dxgi-dxgi_swap_effect">DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</a> flag set. When you create a flip presentation model swap chain, you can associate only one swap chain at a time with an <a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HWND</a>, <b>IWindow</b>, or composition surface. If an application attempts to destroy a flip presentation model swap chain and replace it with another swap chain, the original swap chain is not destroyed when the application immediately frees all of the original swap chain's references.</para>
            /// <para>Most applications typically use the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgiswapchain-resizebuffers">IDXGISwapChain::ResizeBuffers</a> method for the majority of scenarios where they replace new swap chain buffers for old swap chain buffers. However, if an application must actually destroy an old swap chain and create a new swap chain, the application must force the destruction of all objects that the application freed. To force the destruction, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a> (or otherwise ensure no views are bound to pipeline state), and then call <b>Flush</b> on the immediate context. You must force destruction before you call <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforhwnd">IDXGIFactory2::CreateSwapChainForHwnd</a>, <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcorewindow">IDXGIFactory2::CreateSwapChainForCoreWindow</a>, or <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi1_2/nf-dxgi1_2-idxgifactory2-createswapchainforcomposition">IDXGIFactory2::CreateSwapChainForComposition</a> again to create a new swap chain.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-flush#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void Flush()
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    lpVtbl->Flush_112(pThis);
            }

            /// <summary>Gets the type of device context.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/api/d3d11/ne-d3d11-d3d11_device_context_type">D3D11_DEVICE_CONTEXT_TYPE</a></b></para>
            /// <para>A member of <a href = "/windows/desktop/api/d3d11/ne-d3d11-d3d11_device_context_type">D3D11_DEVICE_CONTEXT_TYPE</a> that indicates the type of device context.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-gettype">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal new win32.Graphics.Direct3D11.D3D11_DEVICE_CONTEXT_TYPE GetType()
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->GetType_113(pThis);
            }

            /// <summary>Gets the initialization flags associated with the current deferred context.</summary>
            /// <remarks>
            /// <para>The GetContextFlags method gets the flags that were supplied to the <i>ContextFlags</i> parameter of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11device-createdeferredcontext">ID3D11Device::CreateDeferredContext</a>; however, the context flag is reserved for future use.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-getcontextflags#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal uint GetContextFlags()
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->GetContextFlags_114(pThis);
            }

            /// <summary>Create a command list and record graphics commands into it.</summary>
            /// <param name = "RestoreDeferredContextState">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">BOOL</a></b> A Boolean flag that determines whether the runtime saves deferred context state before it executes  <b>FinishCommandList</b> and restores it afterwards. Use <b>TRUE</b> to indicate that the runtime needs to save and restore the state. Use <b>FALSE</b> to indicate that the runtime will not save or restore any state. In this case, the deferred context will  return to its default state after the call to  <b>FinishCommandList</b> completes. For information about default state, see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-clearstate">ID3D11DeviceContext::ClearState</a>. Typically, use <b>FALSE</b> unless you restore the state to be nearly equivalent to the state that the runtime would restore if you passed <b>TRUE</b>. When you use <b>FALSE</b>, you can avoid unnecessary and inefficient state transitions.</para>
            /// <para><div class = "alert"><b>Note</b>  This parameter does not affect the command list that the current call to <b>FinishCommandList</b> returns. However, this parameter affects the command list of the next call to <b>FinishCommandList</b> on the same deferred context. </div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppCommandList">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a>**</b></para>
            /// <para>Upon completion of the method, the passed pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11commandlist">ID3D11CommandList</a> interface pointer is initialized with the recorded command list information. The resulting <b>ID3D11CommandList</b> object is immutable and can only be used with <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-executecommandlist">ID3D11DeviceContext::ExecuteCommandList</a>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
            /// <para></para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11devicecontext-finishcommandlist">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT FinishCommandList(win32.System.SystemServices.BOOL RestoreDeferredContextState, [Optional] win32.Graphics.Direct3D11.ID3D11CommandList**ppCommandList)
            {
                fixed (ID3D11DeviceContext*pThis = &this)
                    return lpVtbl->FinishCommandList_115(pThis, RestoreDeferredContextState, ppCommandList);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Device**, void>GetDevice_4;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_7;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>VSSetConstantBuffers_8;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>PSSetShaderResources_9;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11PixelShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>PSSetShader_10;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>PSSetSamplers_11;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11VertexShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>VSSetShader_12;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, int, void>DrawIndexed_13;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, void>Draw_14;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_MAP, uint, win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE*, win32.System.Com.HRESULT>Map_15;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, void>Unmap_16;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>PSSetConstantBuffers_17;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11InputLayout*, void>IASetInputLayout_18;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>IASetVertexBuffers_19;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Buffer*, win32.Graphics.Dxgi.DXGI_FORMAT, uint, void>IASetIndexBuffer_20;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, uint, int, uint, void>DrawIndexedInstanced_21;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, uint, uint, void>DrawInstanced_22;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>GSSetConstantBuffers_23;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11GeometryShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>GSSetShader_24;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY, void>IASetPrimitiveTopology_25;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>VSSetShaderResources_26;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>VSSetSamplers_27;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Asynchronous*, void>Begin_28;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Asynchronous*, void>End_29;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Asynchronous*, void *, uint, uint, win32.System.Com.HRESULT>GetData_30;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Predicate*, win32.System.SystemServices.BOOL, void>SetPredication_31;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>GSSetShaderResources_32;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>GSSetSamplers_33;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, void>OMSetRenderTargets_34;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *, void>OMSetRenderTargetsAndUnorderedAccessViews_35;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11BlendState*, float *, uint, void>OMSetBlendState_36;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11DepthStencilState*, uint, void>OMSetDepthStencilState_37;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, void>SOSetTargets_38;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, void>DrawAuto_39;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, void>DrawIndexedInstancedIndirect_40;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, void>DrawInstancedIndirect_41;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, uint, void>Dispatch_42;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, void>DispatchIndirect_43;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11RasterizerState*, void>RSSetState_44;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.Graphics.Direct3D11.D3D11_VIEWPORT*, void>RSSetViewports_45;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.UI.DisplayDevices.RECT*, void>RSSetScissorRects_46;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, uint, uint, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void>CopySubresourceRegion_47;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, win32.Graphics.Direct3D11.ID3D11Resource*, void>CopyResource_48;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.D3D11_BOX*, void *, uint, uint, void>UpdateSubresource_49;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Buffer*, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, void>CopyStructureCount_50;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11RenderTargetView*, float *, void>ClearRenderTargetView_51;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, uint *, void>ClearUnorderedAccessViewUint_52;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, float *, void>ClearUnorderedAccessViewFloat_53;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11DepthStencilView*, uint, float, byte, void>ClearDepthStencilView_54;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11ShaderResourceView*, void>GenerateMips_55;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, float, void>SetResourceMinLOD_56;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, float>GetResourceMinLOD_57;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Direct3D11.ID3D11Resource*, uint, win32.Graphics.Dxgi.DXGI_FORMAT, void>ResolveSubresource_58;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11CommandList*, win32.System.SystemServices.BOOL, void>ExecuteCommandList_59;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>HSSetShaderResources_60;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11HullShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>HSSetShader_61;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>HSSetSamplers_62;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>HSSetConstantBuffers_63;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>DSSetShaderResources_64;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11DomainShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>DSSetShader_65;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>DSSetSamplers_66;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>DSSetConstantBuffers_67;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>CSSetShaderResources_68;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint *, void>CSSetUnorderedAccessViews_69;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11ComputeShader*, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint, void>CSSetShader_70;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>CSSetSamplers_71;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>CSSetConstantBuffers_72;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>VSGetConstantBuffers_73;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>PSGetShaderResources_74;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11PixelShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>PSGetShader_75;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>PSGetSamplers_76;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11VertexShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>VSGetShader_77;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>PSGetConstantBuffers_78;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11InputLayout**, void>IAGetInputLayout_79;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, uint *, uint *, void>IAGetVertexBuffers_80;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Buffer**, win32.Graphics.Dxgi.DXGI_FORMAT*, uint *, void>IAGetIndexBuffer_81;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>GSGetConstantBuffers_82;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11GeometryShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>GSGetShader_83;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.D3D_PRIMITIVE_TOPOLOGY*, void>IAGetPrimitiveTopology_84;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>VSGetShaderResources_85;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>VSGetSamplers_86;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11Predicate**, win32.System.SystemServices.BOOL*, void>GetPredication_87;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>GSGetShaderResources_88;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>GSGetSamplers_89;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView**, void>OMGetRenderTargets_90;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.Graphics.Direct3D11.ID3D11RenderTargetView**, win32.Graphics.Direct3D11.ID3D11DepthStencilView**, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, void>OMGetRenderTargetsAndUnorderedAccessViews_91;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11BlendState**, float *, uint *, void>OMGetBlendState_92;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11DepthStencilState**, uint *, void>OMGetDepthStencilState_93;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>SOGetTargets_94;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11RasterizerState**, void>RSGetState_95;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint *, win32.Graphics.Direct3D11.D3D11_VIEWPORT*, void>RSGetViewports_96;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint *, win32.UI.DisplayDevices.RECT*, void>RSGetScissorRects_97;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>HSGetShaderResources_98;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11HullShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>HSGetShader_99;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>HSGetSamplers_100;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>HSGetConstantBuffers_101;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>DSGetShaderResources_102;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11DomainShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>DSGetShader_103;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>DSGetSamplers_104;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>DSGetConstantBuffers_105;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11ShaderResourceView**, void>CSGetShaderResources_106;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, void>CSGetUnorderedAccessViews_107;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.ID3D11ComputeShader**, win32.Graphics.Direct3D11.ID3D11ClassInstance**, uint *, void>CSGetShader_108;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11SamplerState**, void>CSGetSamplers_109;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint, uint, win32.Graphics.Direct3D11.ID3D11Buffer**, void>CSGetConstantBuffers_110;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, void>ClearState_111;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, void>Flush_112;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.Graphics.Direct3D11.D3D11_DEVICE_CONTEXT_TYPE>GetType_113;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, uint>GetContextFlags_114;
                internal delegate *unmanaged[Stdcall]<ID3D11DeviceContext*, win32.System.SystemServices.BOOL, win32.Graphics.Direct3D11.ID3D11CommandList**, win32.System.Com.HRESULT>FinishCommandList_115;
            }

            private Vtbl*lpVtbl;
        }
    }
}