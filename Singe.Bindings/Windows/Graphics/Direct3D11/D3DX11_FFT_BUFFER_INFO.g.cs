// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        /// <summary>Describes buffer requirements for an FFT.</summary>
        /// <remarks>
        /// <para>The <b>D3DX11_FFT_BUFFER_INFO</b> structure is initialized by a call to one of the create-FFT functions (for example, <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcsx/nf-d3dcsx-d3dx11createfft">D3DX11CreateFFT</a>). For more create-FFT functions, see <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/d3d11-graphics-reference-d3dcsx11-functions">D3DCSX 11 Functions</a>.</para>
        /// <para>Use the info in <b>D3DX11_FFT_BUFFER_INFO</b> to allocate raw buffers of the specified (or larger) sizes and then call the <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcsx/nf-d3dcsx-id3dx11fft-attachbuffersandprecompute">ID3DX11FFT::AttachBuffersAndPrecompute</a> method to register the buffers with the FFT object.</para>
        /// <para>Some FFT algorithms benefit from precomputing sin and cos. The FFT object might store precomputed data in the user-supplied buffers.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/ns-d3dcsx-d3dx11_fft_buffer_info#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct D3DX11_FFT_BUFFER_INFO
        {
            /// <summary>
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of temporary buffers needed. Allowed range is 0 to <b>D3DX11_FFT_MAX_TEMP_BUFFERS</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/ns-d3dcsx-d3dx11_fft_buffer_info#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint NumTempBufferSizes;
            /// <summary>
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>[D3DX11_FFT_MAX_TEMP_BUFFERS]</b></para>
            /// <para>Minimum sizes (in FLOATs) of temporary buffers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/ns-d3dcsx-d3dx11_fft_buffer_info#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal __uint_4 TempBufferFloatSizes;
            /// <summary>
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of precompute buffers required. Allowed range is 0 to <b>D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS</b>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/ns-d3dcsx-d3dx11_fft_buffer_info#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal uint NumPrecomputeBufferSizes;
            /// <summary>
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a>[D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS]</b></para>
            /// <para>Minimum sizes (in FLOATs) for precompute buffers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/ns-d3dcsx-d3dx11_fft_buffer_info#members">Read more on docs.microsoft.com</see>.</para>
            /// </summary>
            internal __uint_4 PrecomputeBufferFloatSizes;
            internal struct __uint_4
            {
                internal uint _0, _1, _2, _3;
                /// <summary>Always <c>4</c>.</summary>
                internal int Length => 4;
            }
        }
    }
}