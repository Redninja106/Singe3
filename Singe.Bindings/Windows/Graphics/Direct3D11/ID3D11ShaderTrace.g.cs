// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        [Guid("36B013E6-2811-4845-BAA7-D623FE0DF104")]
        internal unsafe struct ID3D11ShaderTrace
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Specifies that the shader trace recorded and is ready to use.</summary>
            /// <param name = "pTestCount">
            /// <para>An optional pointer to a variable that receives the number of times that a matching invocation for the trace occurred. If not used, set to NULL. For more information about this number, see Remarks.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-traceready#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para><b>TraceReady</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-traceready">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT TraceReady([Optional] ulong *pTestCount)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->TraceReady_4(pThis, pTestCount);
            }

            /// <summary>Resets the shader-trace object.</summary>
            /// <remarks>
            /// <para>After you call <b>ResetTrace</b>, the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/nn-d3d11shadertracing-id3d11shadertrace">ID3D11ShaderTrace</a> object behaves as if it had just been created. Thereafter, shader invocations for the trace start from 0 again; calls to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-traceready">ID3D11ShaderTrace::TraceReady</a> return <b>S_FALSE</b> until the selected shader invocation number is reached, and <b>TraceReady</b> records a new trace.</para>
            /// <para><div class = "alert"><b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</div> <div> </div></para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-resettrace#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            internal void ResetTrace()
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    lpVtbl->ResetTrace_5(pThis);
            }

            /// <inheritdoc cref = "GetTraceStats(win32.Graphics.Direct3D11.D3D11_TRACE_STATS*)"/>
            internal unsafe win32.System.Com.HRESULT GetTraceStats(out win32.Graphics.Direct3D11.D3D11_TRACE_STATS pTraceStats)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TRACE_STATS*pTraceStatsLocal = &pTraceStats)
                {
                    win32.System.Com.HRESULT __result = this.GetTraceStats(pTraceStatsLocal);
                    return __result;
                }
            }

            /// <summary>Returns statistics about the trace.</summary>
            /// <param name = "pTraceStats">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_stats">D3D11_TRACE_STATS</a> structure. <b>GetTraceStats</b> fills the members of this structure with statistics about the trace.</param>
            /// <returns>
            /// <para><b>GetTraceStats</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-gettracestats">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetTraceStats(win32.Graphics.Direct3D11.D3D11_TRACE_STATS*pTraceStats)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->GetTraceStats_6(pThis, pTraceStats);
            }

            /// <summary>Sets the specified pixel-shader stamp.</summary>
            /// <param name = "stampIndex">The index of the stamp to select.</param>
            /// <returns>
            /// <para><b>PSSelectStamp</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-psselectstamp">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT PSSelectStamp(uint stampIndex)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->PSSelectStamp_7(pThis, stampIndex);
            }

            /// <inheritdoc cref = "GetInitialRegisterContents(win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*)"/>
            internal unsafe win32.System.Com.HRESULT GetInitialRegisterContents(in win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER pRegister, out win32.Graphics.Direct3D11.D3D11_TRACE_VALUE pValue)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*pValueLocal = &pValue)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*pRegisterLocal = &pRegister)
                    {
                        win32.System.Com.HRESULT __result = this.GetInitialRegisterContents(pRegisterLocal, pValueLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Retrieves the initial contents of the specified input register.</summary>
            /// <param name = "pRegister"></param>
            /// <param name = "pValue">A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_value">D3D11_TRACE_VALUE</a> structure. <b>GetInitialRegisterContents</b> fills the members of this structure with information about the initial contents.</param>
            /// <returns>
            /// <para><b>GetInitialRegisterContents</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-getinitialregistercontents">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetInitialRegisterContents(win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*pRegister, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*pValue)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->GetInitialRegisterContents_8(pThis, pRegister, pValue);
            }

            /// <inheritdoc cref = "GetStep(uint, win32.Graphics.Direct3D11.D3D11_TRACE_STEP*)"/>
            internal unsafe win32.System.Com.HRESULT GetStep(uint stepIndex, out win32.Graphics.Direct3D11.D3D11_TRACE_STEP pTraceStep)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TRACE_STEP*pTraceStepLocal = &pTraceStep)
                {
                    win32.System.Com.HRESULT __result = this.GetStep(stepIndex, pTraceStepLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves information about the specified step in the trace.</summary>
            /// <param name = "stepIndex">The index of the step within the trace. The range of the index is [0...NumTraceSteps-1], where <b>NumTraceSteps</b> is a member of the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_stats">D3D11_TRACE_STATS</a> structure. You can retrieve information about a step in any step order.</param>
            /// <param name = "pTraceStep">A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_step">D3D11_TRACE_STEP</a> structure. <b>GetStep</b> fills the members of this structure with information about the trace step that is specified by the <i>stepIndex</i>  parameter.</param>
            /// <returns>
            /// <para><b>GetStep</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-getstep">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetStep(uint stepIndex, win32.Graphics.Direct3D11.D3D11_TRACE_STEP*pTraceStep)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->GetStep_9(pThis, stepIndex, pTraceStep);
            }

            /// <inheritdoc cref = "GetWrittenRegister(uint, uint, win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*)"/>
            internal unsafe win32.System.Com.HRESULT GetWrittenRegister(uint stepIndex, uint writtenRegisterIndex, out win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER pRegister, out win32.Graphics.Direct3D11.D3D11_TRACE_VALUE pValue)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*pValueLocal = &pValue)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*pRegisterLocal = &pRegister)
                    {
                        win32.System.Com.HRESULT __result = this.GetWrittenRegister(stepIndex, writtenRegisterIndex, pRegisterLocal, pValueLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Retrieves information about a register that was written by a step in the trace.</summary>
            /// <param name = "stepIndex">The index of the step within the trace. The range of the index is [0...NumTraceSteps-1], where <b>NumTraceSteps</b> is a member of the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_stats">D3D11_TRACE_STATS</a> structure. You can retrieve information in any step order.</param>
            /// <param name = "writtenRegisterIndex">The index of the register within  the trace step. The range of the index is [0...NumRegistersWritten-1], where <b>NumRegistersWritten</b> is a member of the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_step">D3D11_TRACE_STEP</a> structure.</param>
            /// <param name = "pRegister">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_register">D3D11_TRACE_REGISTER</a> structure. <b>GetWrittenRegister</b> fills the members of this structure with information about the register that was written by the step in the trace.</param>
            /// <param name = "pValue">A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_value">D3D11_TRACE_VALUE</a> structure. <b>GetWrittenRegister</b> fills the members of this structure with information about the value that was written to the register.</param>
            /// <returns>
            /// <para><b>GetWrittenRegister</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-getwrittenregister">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetWrittenRegister(uint stepIndex, uint writtenRegisterIndex, win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*pRegister, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*pValue)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->GetWrittenRegister_10(pThis, stepIndex, writtenRegisterIndex, pRegister, pValue);
            }

            /// <inheritdoc cref = "GetReadRegister(uint, uint, win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*)"/>
            internal unsafe win32.System.Com.HRESULT GetReadRegister(uint stepIndex, uint readRegisterIndex, out win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER pRegister, out win32.Graphics.Direct3D11.D3D11_TRACE_VALUE pValue)
            {
                fixed (win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*pValueLocal = &pValue)
                {
                    fixed (win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*pRegisterLocal = &pRegister)
                    {
                        win32.System.Com.HRESULT __result = this.GetReadRegister(stepIndex, readRegisterIndex, pRegisterLocal, pValueLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Retrieves information about a register that was read by a step in the trace.</summary>
            /// <param name = "stepIndex">The index of the step within the trace. The range of the index is [0...NumTraceSteps-1], where <b>NumTraceSteps</b> is a member of the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_stats">D3D11_TRACE_STATS</a> structure. You can retrieve information in any step order.</param>
            /// <param name = "readRegisterIndex">The index of the register within  the trace step. The range of the index is [0...NumRegistersRead-1], where <b>NumRegistersRead</b> is a member of the  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_step">D3D11_TRACE_STEP</a> structure.</param>
            /// <param name = "pRegister">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_register">D3D11_TRACE_REGISTER</a> structure. <b>GetReadRegister</b> fills the members of this structure with information about the register that was read by the step in the trace.</param>
            /// <param name = "pValue">A pointer to a  <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11shadertracing/ns-d3d11shadertracing-d3d11_trace_value">D3D11_TRACE_VALUE</a> structure. <b>GetReadRegister</b> fills the members of this structure with information about the value that was read from the register.</param>
            /// <returns>
            /// <para><b>GetReadRegister</b> returns: </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11shadertracing/nf-d3d11shadertracing-id3d11shadertrace-getreadregister">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetReadRegister(uint stepIndex, uint readRegisterIndex, win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*pRegister, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*pValue)
            {
                fixed (ID3D11ShaderTrace*pThis = &this)
                    return lpVtbl->GetReadRegister_11(pThis, stepIndex, readRegisterIndex, pRegister, pValue);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, ulong *, win32.System.Com.HRESULT>TraceReady_4;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, void>ResetTrace_5;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, win32.Graphics.Direct3D11.D3D11_TRACE_STATS*, win32.System.Com.HRESULT>GetTraceStats_6;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, win32.System.Com.HRESULT>PSSelectStamp_7;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*, win32.System.Com.HRESULT>GetInitialRegisterContents_8;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, win32.Graphics.Direct3D11.D3D11_TRACE_STEP*, win32.System.Com.HRESULT>GetStep_9;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*, win32.System.Com.HRESULT>GetWrittenRegister_10;
                internal delegate *unmanaged[Stdcall]<ID3D11ShaderTrace*, uint, uint, win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER*, win32.Graphics.Direct3D11.D3D11_TRACE_VALUE*, win32.System.Com.HRESULT>GetReadRegister_11;
            }

            private Vtbl*lpVtbl;
        }
    }
}