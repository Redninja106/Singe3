// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        [Guid("B3F7A938-4C93-4310-A675-B30D6DE50553")]
        internal unsafe struct ID3DX11FFT
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <summary>Sets the scale used for forward transforms.</summary>
            /// <param name = "ForwardScale">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>The scale to use for forward transforms.  Setting <i>ForwardScale</i> to 0 causes the default values of 1 to be used.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-setforwardscale#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the return codes described in the topic <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-setforwardscale">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetForwardScale(float ForwardScale)
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->SetForwardScale_4(pThis, ForwardScale);
            }

            /// <summary>Gets the scale for forward transforms.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>Scale for forward transforms.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-getforwardscale">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetForwardScale()
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->GetForwardScale_5(pThis);
            }

            /// <summary>Sets the scale used for inverse transforms.</summary>
            /// <param name = "InverseScale">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>Scale used for inverse transforms.  Setting <i>InverseScale</i> to 0 causes the default value of 1/N to be used, where N is the product of the transformed dimension lengths.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-setinversescale#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the return codes described in the topic <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-setinversescale">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT SetInverseScale(float InverseScale)
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->SetInverseScale_6(pThis, InverseScale);
            }

            /// <summary>Get the scale for inverse transforms.</summary>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/desktop/WinProg/windows-data-types">FLOAT</a></b></para>
            /// <para>Scale for inverse transforms.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-getinversescale">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal float GetInverseScale()
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->GetInverseScale_7(pThis);
            }

            /// <summary>Attaches buffers to an FFT context and performs any required precomputations.</summary>
            /// <param name = "NumTempBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers in <i>ppTempBuffers</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-attachbuffersandprecompute#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppTempBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> pointers for the temporary buffers to attach. The FFT object might use these temporary buffers for its algorithm.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-attachbuffersandprecompute#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "NumPrecomputeBuffers">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
            /// <para>Number of buffers in <i>ppPrecomputeBuffers</i>.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-attachbuffersandprecompute#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppPrecomputeBufferSizes">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> pointers for the precompute buffers to attach. The FFT object might store precomputed data  in these buffers.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-attachbuffersandprecompute#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the return codes described in the topic <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-attachbuffersandprecompute">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT AttachBuffersAndPrecompute(uint NumTempBuffers, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppTempBuffers, uint NumPrecomputeBuffers, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppPrecomputeBufferSizes)
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->AttachBuffersAndPrecompute_8(pThis, NumTempBuffers, ppTempBuffers, NumPrecomputeBuffers, ppPrecomputeBufferSizes);
            }

            /// <summary>Performs a forward FFT.</summary>
            /// <param name = "pInputBuffer">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>Pointer to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> onto the input buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-forwardtransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppOutputBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> pointer.  If *<i>ppOutputBuffer</i> is <b>NULL</b>, the computation will switch between temp buffers; in addition, the last buffer written to is stored at *<i>ppOutputBuffer</i>. Otherwise, *<i>ppOutputBuffer</i> is used as the output buffer (which might incur an extra copy).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-forwardtransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the return codes described in the topic <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-forwardtransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT ForwardTransform(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pInputBuffer, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppOutputBuffer)
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->ForwardTransform_9(pThis, pInputBuffer, ppOutputBuffer);
            }

            /// <summary>Performs an inverse FFT.</summary>
            /// <param name = "pInputBuffer">
            /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>*</b></para>
            /// <para>Pointer to <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> onto the input buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-inversetransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "ppOutputBuffer">
            /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a>**</b></para>
            /// <para>Pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11unorderedaccessview">ID3D11UnorderedAccessView</a> pointer.  If *<i>ppOutput</i> is <b>NULL</b>, then the computation will switch between temp buffers; in addition, the last buffer written to is stored at *<i>ppOutput</i>. Otherwise, *<i>ppOutput</i> is used as the output buffer (which might incur an extra copy).</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-inversetransform#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
            /// <para>Returns one of the return codes described in the topic <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3dcsx/nf-d3dcsx-id3dx11fft-inversetransform">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT InverseTransform(win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*pInputBuffer, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**ppOutputBuffer)
            {
                fixed (ID3DX11FFT*pThis = &this)
                    return lpVtbl->InverseTransform_10(pThis, pInputBuffer, ppOutputBuffer);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, float, win32.System.Com.HRESULT>SetForwardScale_4;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, float>GetForwardScale_5;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, float, win32.System.Com.HRESULT>SetInverseScale_6;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, float>GetInverseScale_7;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, uint, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, win32.System.Com.HRESULT>AttachBuffersAndPrecompute_8;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, win32.System.Com.HRESULT>ForwardTransform_9;
                internal delegate *unmanaged[Stdcall]<ID3DX11FFT*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView*, win32.Graphics.Direct3D11.ID3D11UnorderedAccessView**, win32.System.Com.HRESULT>InverseTransform_10;
            }

            private Vtbl*lpVtbl;
        }
    }
}