// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Graphics.Direct3D11
    {
        /// <summary>Options that specify how to perform shader debug tracking.</summary>
        /// <remarks>
        /// <para>This enumeration is used by the following methods:</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11sdklayers/ne-d3d11sdklayers-d3d11_shader_tracking_options#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal enum D3D11_SHADER_TRACKING_OPTIONS
        {
            /// <summary>No debug tracking is performed.</summary>
            D3D11_SHADER_TRACKING_OPTION_IGNORE = 0,
            /// <summary>Track the reading of uninitialized data.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = 1,
            /// <summary>Track read-after-write hazards.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_RAW = 2,
            /// <summary>Track write-after-read hazards.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_WAR = 4,
            /// <summary>Track write-after-write hazards.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_WAW = 8,
            /// <summary>Track that hazards are allowed in which data is written but the value does not change.</summary>
            D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME = 16,
            /// <summary>Track that only one type of atomic operation is used on an address.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = 32,
            /// <summary>Track read-after-write hazards across thread groups.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = 64,
            /// <summary>Track write-after-read hazards across thread groups.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = 128,
            /// <summary>Track write-after-write hazards across thread groups.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = 256,
            /// <summary>Track that only one type of atomic operation is used on an address across thread groups.</summary>
            D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 512,
            /// <summary>Track hazards that are specific to unordered access views (UAVs).</summary>
            D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = 960,
            /// <summary>Track all hazards.</summary>
            D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS = 1006,
            /// <summary>Track all hazards and track that hazards are allowed in which data is written but the value does not change.</summary>
            D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = 1022,
            /// <summary>All of the preceding tracking options are set except <b>D3D11_SHADER_TRACKING_OPTION_IGNORE</b>.</summary>
            D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS = 1023,
        }
    }
}