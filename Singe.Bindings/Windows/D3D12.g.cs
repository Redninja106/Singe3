// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    internal static partial class D3D12
    {
        /// <inheritdoc cref = "D3D12SerializeRootSignature(win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC*, win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION, win32.Graphics.Direct3D11.ID3DBlob**, win32.Graphics.Direct3D11.ID3DBlob**)"/>
        internal static unsafe win32.System.Com.HRESULT D3D12SerializeRootSignature(in win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC pRootSignature, win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION Version, win32.Graphics.Direct3D11.ID3DBlob**ppBlob, win32.Graphics.Direct3D11.ID3DBlob**ppErrorBlob)
        {
            fixed (win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC*pRootSignatureLocal = &pRootSignature)
            {
                win32.System.Com.HRESULT __result = D3D12.D3D12SerializeRootSignature(pRootSignatureLocal, Version, ppBlob, ppErrorBlob);
                return __result;
            }
        }

        /// <summary>Serializes a root signature version 1.0 that can be passed to ID3D12Device::CreateRootSignature.</summary>
        /// <param name = "pRootSignature">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_signature_desc">D3D12_ROOT_SIGNATURE_DESC</a>*</b></para>
        /// <para>The description of the root signature, as a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_signature_desc">D3D12_ROOT_SIGNATURE_DESC</a> structure.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializerootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Version">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d_root_signature_version">D3D_ROOT_SIGNATURE_VERSION</a></b></para>
        /// <para>A <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d_root_signature_version">D3D_ROOT_SIGNATURE_VERSION</a>-typed value that specifies the version of root signature.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializerootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppBlob">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a>**</b></para>
        /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the serialized root signature.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializerootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppErrorBlob">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a>**</b></para>
        /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access serializer error messages, or <b>NULL</b> if there are no errors.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializerootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
        /// <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializerootsignature">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D12", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D12SerializeRootSignature(win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC*pRootSignature, win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION Version, win32.Graphics.Direct3D11.ID3DBlob**ppBlob, [Optional] win32.Graphics.Direct3D11.ID3DBlob**ppErrorBlob);
        /// <inheritdoc cref = "D3D12CreateRootSignatureDeserializer(void *, nuint, global::System.Guid*, void **)"/>
        internal static unsafe win32.System.Com.HRESULT D3D12CreateRootSignatureDeserializer(void *pSrcData, nuint SrcDataSizeInBytes, in global::System.Guid pRootSignatureDeserializerInterface, out void *ppRootSignatureDeserializer)
        {
            fixed (void **ppRootSignatureDeserializerLocal = &ppRootSignatureDeserializer)
            {
                fixed (global::System.Guid*pRootSignatureDeserializerInterfaceLocal = &pRootSignatureDeserializerInterface)
                {
                    win32.System.Com.HRESULT __result = D3D12.D3D12CreateRootSignatureDeserializer(pSrcData, SrcDataSizeInBytes, pRootSignatureDeserializerInterfaceLocal, ppRootSignatureDeserializerLocal);
                    return __result;
                }
            }
        }

        /// <summary>Deserializes a root signature so you can determine the layout definition (D3D12_ROOT_SIGNATURE_DESC).</summary>
        /// <param name = "pSrcData">
        /// <para>Type: <b>LPCVOID</b></para>
        /// <para>A pointer to the source data for the serialized root signature.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "SrcDataSizeInBytes">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
        /// <para>The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pRootSignatureDeserializerInterface">
        /// <para>Type: <b><b>REFIID</b></b></para>
        /// <para>The globally unique identifier (<b>GUID</b>) for the root signature deserializer interface. See remarks.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppRootSignatureDeserializer">
        /// <para>Type: <b><b>void</b>**</b></para>
        /// <para>A pointer to a memory block that receives a pointer to the root signature deserializer.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
        /// <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createrootsignaturedeserializer">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D12", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D12CreateRootSignatureDeserializer(void *pSrcData, nuint SrcDataSizeInBytes, global::System.Guid*pRootSignatureDeserializerInterface, void **ppRootSignatureDeserializer);
        /// <inheritdoc cref = "D3D12SerializeVersionedRootSignature(win32.Graphics.Direct3D12.D3D12_VERSIONED_ROOT_SIGNATURE_DESC*, win32.Graphics.Direct3D11.ID3DBlob**, win32.Graphics.Direct3D11.ID3DBlob**)"/>
        internal static unsafe win32.System.Com.HRESULT D3D12SerializeVersionedRootSignature(in win32.Graphics.Direct3D12.D3D12_VERSIONED_ROOT_SIGNATURE_DESC pRootSignature, win32.Graphics.Direct3D11.ID3DBlob**ppBlob, win32.Graphics.Direct3D11.ID3DBlob**ppErrorBlob)
        {
            fixed (win32.Graphics.Direct3D12.D3D12_VERSIONED_ROOT_SIGNATURE_DESC*pRootSignatureLocal = &pRootSignature)
            {
                win32.System.Com.HRESULT __result = D3D12.D3D12SerializeVersionedRootSignature(pRootSignatureLocal, ppBlob, ppErrorBlob);
                return __result;
            }
        }

        /// <summary>Serializes a root signature of any version that can be passed to ID3D12Device::CreateRootSignature.</summary>
        /// <param name = "pRootSignature">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_versioned_root_signature_desc">D3D12_VERSIONED_ROOT_SIGNATURE_DESC</a>*</b></para>
        /// <para>Specifies a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_versioned_root_signature_desc">D3D12_VERSIONED_ROOT_SIGNATURE_DESC</a> that contains a description of any version of a root signature.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializeversionedrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppBlob">
        /// <para>Type: <b>ID3DBlob**</b></para>
        /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the serialized root signature.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializeversionedrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppErrorBlob">
        /// <para>Type: <b>ID3DBlob**</b></para>
        /// <para>A pointer to a memory block that receives a pointer to the <a href = "https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access serializer error messages, or <b>NULL</b> if there are no errors.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializeversionedrootsignature#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
        /// <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializeversionedrootsignature">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D12", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D12SerializeVersionedRootSignature(win32.Graphics.Direct3D12.D3D12_VERSIONED_ROOT_SIGNATURE_DESC*pRootSignature, win32.Graphics.Direct3D11.ID3DBlob**ppBlob, [Optional] win32.Graphics.Direct3D11.ID3DBlob**ppErrorBlob);
        /// <inheritdoc cref = "D3D12CreateVersionedRootSignatureDeserializer(void *, nuint, global::System.Guid*, void **)"/>
        internal static unsafe win32.System.Com.HRESULT D3D12CreateVersionedRootSignatureDeserializer(void *pSrcData, nuint SrcDataSizeInBytes, in global::System.Guid pRootSignatureDeserializerInterface, out void *ppRootSignatureDeserializer)
        {
            fixed (void **ppRootSignatureDeserializerLocal = &ppRootSignatureDeserializer)
            {
                fixed (global::System.Guid*pRootSignatureDeserializerInterfaceLocal = &pRootSignatureDeserializerInterface)
                {
                    win32.System.Com.HRESULT __result = D3D12.D3D12CreateVersionedRootSignatureDeserializer(pSrcData, SrcDataSizeInBytes, pRootSignatureDeserializerInterfaceLocal, ppRootSignatureDeserializerLocal);
                    return __result;
                }
            }
        }

        /// <summary>Generates an interface that can return the deserialized data structure, via GetUnconvertedRootSignatureDesc.</summary>
        /// <param name = "pSrcData">
        /// <para>Type: <b>LPCVOID</b></para>
        /// <para>A pointer to the source data for the serialized root signature.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createversionedrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "SrcDataSizeInBytes">
        /// <para>Type: <b>SIZE_T</b></para>
        /// <para>The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createversionedrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pRootSignatureDeserializerInterface">
        /// <para>Type: <b>REFIID</b></para>
        /// <para>The globally unique identifier (<b>GUID</b>) for the root signature deserializer interface. See remarks.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createversionedrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppRootSignatureDeserializer">
        /// <para>Type: <b>void**</b></para>
        /// <para>A pointer to a memory block that receives a pointer to the root signature deserializer.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createversionedrootsignaturedeserializer#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
        /// <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createversionedrootsignaturedeserializer">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D12", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D12CreateVersionedRootSignatureDeserializer(void *pSrcData, nuint SrcDataSizeInBytes, global::System.Guid*pRootSignatureDeserializerInterface, void **ppRootSignatureDeserializer);
        /// <inheritdoc cref = "D3D12CreateDevice(win32.System.Com.IUnknown*, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL, global::System.Guid*, void **)"/>
        internal static unsafe win32.System.Com.HRESULT D3D12CreateDevice(win32.System.Com.IUnknown*pAdapter, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL MinimumFeatureLevel, in global::System.Guid riid, void **ppDevice)
        {
            fixed (global::System.Guid*riidLocal = &riid)
            {
                win32.System.Com.HRESULT __result = D3D12.D3D12CreateDevice(pAdapter, MinimumFeatureLevel, riidLocal, ppDevice);
                return __result;
            }
        }

        /// <summary>Creates a device that represents the display adapter.</summary>
        /// <param name = "pAdapter">
        /// <para>Type: <b>IUnknown*</b> A pointer to the video adapter to use when creating a <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>. Pass <b>NULL</b> to use the default adapter, which is the first adapter that is enumerated by <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgifactory-enumadapters">IDXGIFactory1::EnumAdapters</a>.</para>
        /// <para><div class = "alert"><b>Note</b>  Don't mix the use of DXGI 1.0 (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory">IDXGIFactory</a>) and DXGI 1.1 (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory1">IDXGIFactory1</a>) in an application. Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application. </div> <div> </div></para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "MinimumFeatureLevel">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a></b></para>
        /// <para>The minimum <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a> required for successful device creation.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "riid">
        /// <para>Type: <b><b>REFIID</b></b></para>
        /// <para>The globally unique identifier (<b>GUID</b>) for the device interface. This parameter, and <i>ppDevice</i>, can be addressed with the single macro <a href = "https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-iid_ppv_args">IID_PPV_ARGS</a>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppDevice">
        /// <para>Type: <b><b>void</b>**</b></para>
        /// <para>A pointer to a memory block that receives a pointer to the device. Pass **NULL** to test if device creation would succeed, but to not actually create the device. If **NULL** is passed and device creation would succeed, **S_FALSE** is returned.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method can return one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
        /// <para>Possible return values include those documented for <a href = "/windows/desktop/api/dxgi/nf-dxgi-createdxgifactory1">CreateDXGIFactory1</a> and  <a href = "/windows/desktop/api/dxgi/nf-dxgi-idxgifactory-enumadapters">IDXGIFactory::EnumAdapters</a>. If **ppDevice** is **NULL** and the function succeeds, **S_FALSE** is returned, rather than **S_OK**.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createdevice">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D12", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D12CreateDevice([Optional] win32.System.Com.IUnknown*pAdapter, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL MinimumFeatureLevel, global::System.Guid*riid, [Optional] void **ppDevice);
        /// <inheritdoc cref = "D3D12GetDebugInterface(global::System.Guid*, void **)"/>
        internal static unsafe win32.System.Com.HRESULT D3D12GetDebugInterface(in global::System.Guid riid, void **ppvDebug)
        {
            fixed (global::System.Guid*riidLocal = &riid)
            {
                win32.System.Com.HRESULT __result = D3D12.D3D12GetDebugInterface(riidLocal, ppvDebug);
                return __result;
            }
        }

        /// <summary>Gets a debug interface.</summary>
        /// <param name = "riid">
        /// <para>Type: <b>REFIID</b></para>
        /// <para>The globally unique identifier (<b>GUID</b>) for the debug interface. The <b>REFIID</b>, or <b>GUID</b>, of the debug interface can be obtained by using the __uuidof() macro. For example, __uuidof(<a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nn-d3d12sdklayers-id3d12debug">ID3D12Debug</a>) will get the <b>GUID</b> of the debug interface.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12getdebuginterface#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppvDebug">
        /// <para>Type: <b>void**</b></para>
        /// <para>The debug interface, as a pointer to pointer to void. See <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nn-d3d12sdklayers-id3d12debug">ID3D12Debug</a>and <a href = "https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nn-d3d12sdklayers-id3d12debugdevice">ID3D12DebugDevice</a>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12getdebuginterface#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
        /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12getdebuginterface">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D12", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D12GetDebugInterface(global::System.Guid*riid, [Optional] void **ppvDebug);
        /// <inheritdoc cref = "D3D12EnableExperimentalFeatures(uint, global::System.Guid*, void *, uint *)"/>
        internal static unsafe win32.System.Com.HRESULT D3D12EnableExperimentalFeatures(ReadOnlySpan<global::System.Guid> pIIDs, void *pConfigurationStructs, Span<uint> pConfigurationStructSizes)
        {
            fixed (uint *pConfigurationStructSizesLocal = pConfigurationStructSizes)
            {
                fixed (global::System.Guid*pIIDsLocal = pIIDs)
                {
                    if (pIIDs.Length != pConfigurationStructSizes.Length)
                        throw new ArgumentException();
                    win32.System.Com.HRESULT __result = D3D12.D3D12EnableExperimentalFeatures((uint)pConfigurationStructSizes.Length, pIIDsLocal, pConfigurationStructs, pConfigurationStructSizesLocal);
                    return __result;
                }
            }
        }

        /// <summary>Enables a list of experimental features.</summary>
        /// <param name = "NumFeatures">
        /// <para>Type: <b>UINT</b></para>
        /// <para>The number of experimental features to enable.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12enableexperimentalfeatures#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pIIDs">
        /// <para>Type: <b>const IID*</b></para>
        /// <para><a href = "https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>__in_ecount(NumFeatures)</c></para>
        /// <para>A pointer to an array of IDs that specify which of the available experimental features to enable.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12enableexperimentalfeatures#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pConfigurationStructs">
        /// <para>Type: <b>void*</b></para>
        /// <para><a href = "https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>__in_ecount(NumFeatures)</c></para>
        /// <para>Structures that contain additional configuration details that some experimental features might need to be enabled.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12enableexperimentalfeatures#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pConfigurationStructSizes">
        /// <para>Type: <b>UINT*</b></para>
        /// <para><a href = "https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>__in_ecount(NumFeatures)</c></para>
        /// <para>The sizes of any configuration structs passed in pConfigurationStructs parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12enableexperimentalfeatures#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
        /// <para>This method returns an HRESULT success or error code that can include E_NOINTERFACE if an unrecognized feature is specified or Developer Mode is not enabled, or E_INVALIDARG if the configuration of a feature is in correct, the experimental features specified are not compatible, or other errors.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12enableexperimentalfeatures">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D12", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D12EnableExperimentalFeatures(uint NumFeatures, global::System.Guid*pIIDs, [Optional] void *pConfigurationStructs, [Optional] uint *pConfigurationStructSizes);
    }
}