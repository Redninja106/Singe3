// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    internal static partial class MrmSupport
    {
        /// <inheritdoc cref = "CreateResourceIndexer(win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, void **)"/>
        internal static unsafe win32.System.Com.HRESULT CreateResourceIndexer(string projectRoot, string extensionDllPath, out void *ppResourceIndexer)
        {
            fixed (void **ppResourceIndexerLocal = &ppResourceIndexer)
            {
                fixed (char *extensionDllPathLocal = extensionDllPath)
                {
                    fixed (char *projectRootLocal = projectRoot)
                    {
                        win32.System.Com.HRESULT __result = MrmSupport.CreateResourceIndexer(projectRootLocal, extensionDllPathLocal, ppResourceIndexerLocal);
                        return __result;
                    }
                }
            }
        }

        /// <summary>Creates a new resource indexer for the specified paths of the root of the project files and the extension DLL.</summary>
        /// <param name = "projectRoot">The path of the root folder to use for the project for the files to be produced, in string form. This path is used to determine file paths relative to the package that contains them. This path must be an absolute path with the drive letter specified. Long file paths are not supported.</param>
        /// <param name = "extensionDllPath">The full path to an extension dynamic-link library (DLL) that is Microsoft-signed and implements the ext-ms-win-mrmcorer-environment-l1 API set. This path determines the file path from where the extension DLL for the modern resource technology (MRT) environment is loaded. This path must be an absolute path with the drive letter specified. Long file paths are not supported.</param>
        /// <param name = "ppResourceIndexer">The newly created resource indexer.</param>
        /// <returns>If this function succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//resourceindexer/nf-resourceindexer-createresourceindexer">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT CreateResourceIndexer(win32.System.SystemServices.PCWSTR projectRoot, win32.System.SystemServices.PCWSTR extensionDllPath, void **ppResourceIndexer);
        /// <summary>Frees the computational resources associated with the specified resource indexer.</summary>
        /// <param name = "resourceIndexer">The resource indexer for which you want to free the computational resources.</param>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//resourceindexer/nf-resourceindexer-destroyresourceindexer">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe void DestroyResourceIndexer([Optional] void *resourceIndexer);
        /// <inheritdoc cref = "IndexFilePath(void *, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PWSTR*, uint *, win32.UI.WindowsAndMessaging.IndexedResourceQualifier**)"/>
        internal static unsafe win32.System.Com.HRESULT IndexFilePath(void *resourceIndexer, string filePath, out win32.System.SystemServices.PWSTR ppResourceUri, out uint pQualifierCount, win32.UI.WindowsAndMessaging.IndexedResourceQualifier**ppQualifiers)
        {
            fixed (uint *pQualifierCountLocal = &pQualifierCount)
            {
                fixed (win32.System.SystemServices.PWSTR*ppResourceUriLocal = &ppResourceUri)
                {
                    fixed (char *filePathLocal = filePath)
                    {
                        win32.System.Com.HRESULT __result = MrmSupport.IndexFilePath(resourceIndexer, filePathLocal, ppResourceUriLocal, pQualifierCountLocal, ppQualifiers);
                        return __result;
                    }
                }
            }
        }

        /// <summary>Indexes a file path for file and folder naming conventions.</summary>
        /// <param name = "resourceIndexer">The resource indexer object that you created by calling the <a href = "https://docs.microsoft.com/windows/desktop/api/resourceindexer/nf-resourceindexer-createresourceindexer">CreateResourceIndexer</a> function.</param>
        /// <param name = "filePath">The path for the folder that you want to index. The path must be an absolute path with the drive letter specified. Long file paths are not supported.</param>
        /// <param name = "ppResourceUri">A uniform resource indicator (URI) that uses the ms-resource URI scheme and represents the named resource for the candidate, where the authority of the URI or the resource map is empty. For example, ms-resource:///Resources/String1 or ms-resource:///Files/images/logo.png.</param>
        /// <param name = "pQualifierCount">The number of indexed resource qualifiers that the list in the <i>ppQualifiers</i> parameter contains.</param>
        /// <param name = "ppQualifiers">A list of indexed resource qualifiers that declare the context under which the resources are appropriate.</param>
        /// <returns>If this function succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//resourceindexer/nf-resourceindexer-indexfilepath">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT IndexFilePath(void *resourceIndexer, win32.System.SystemServices.PCWSTR filePath, win32.System.SystemServices.PWSTR*ppResourceUri, uint *pQualifierCount, win32.UI.WindowsAndMessaging.IndexedResourceQualifier**ppQualifiers);
        /// <inheritdoc cref = "DestroyIndexedResults(win32.System.SystemServices.PWSTR, uint, win32.UI.WindowsAndMessaging.IndexedResourceQualifier*)"/>
        internal static unsafe void DestroyIndexedResults(win32.System.SystemServices.PWSTR resourceUri, Span<win32.UI.WindowsAndMessaging.IndexedResourceQualifier> qualifiers)
        {
            fixed (win32.UI.WindowsAndMessaging.IndexedResourceQualifier*qualifiersLocal = qualifiers)
            {
                MrmSupport.DestroyIndexedResults(resourceUri, (uint)qualifiers.Length, qualifiersLocal);
            }
        }

        /// <summary>Frees the parameters that the IndexFilePath method returned.</summary>
        /// <param name = "resourceUri">A uniform resource indicator (URI) that uses the ms-resource URI scheme and represents the named resource for the candidate, where the authority of the URI or the resource map is empty. For example, ms-resource:///Resources/String1 or ms-resource:///Files/images/logo.png.</param>
        /// <param name = "qualifierCount">The number of indexed resource qualifiers that the list in the <i>ppQualifiers</i> parameter contains.</param>
        /// <param name = "qualifiers">A list of indexed resource qualifiers that declare the context under which the resources are appropriate.</param>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//resourceindexer/nf-resourceindexer-destroyindexedresults">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe void DestroyIndexedResults(win32.System.SystemServices.PWSTR resourceUri, uint qualifierCount, [Optional] win32.UI.WindowsAndMessaging.IndexedResourceQualifier*qualifiers);
        /// <inheritdoc cref = "MrmCreateResourceIndexer(win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmPlatformVersion, win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateResourceIndexer(string packageFamilyName, string projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, string defaultQualifiers, ref win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer)
        {
            fixed (win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexerLocal = &indexer)
            {
                fixed (char *defaultQualifiersLocal = defaultQualifiers)
                {
                    fixed (char *projectRootLocal = projectRoot)
                    {
                        fixed (char *packageFamilyNameLocal = packageFamilyName)
                        {
                            win32.System.Com.HRESULT __result = MrmSupport.MrmCreateResourceIndexer(packageFamilyNameLocal, projectRootLocal, platformVersion, defaultQualifiersLocal, indexerLocal);
                            return __result;
                        }
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmCreateResourceIndexer(win32.System.SystemServices.PCWSTR packageFamilyName, win32.System.SystemServices.PCWSTR projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, win32.System.SystemServices.PCWSTR defaultQualifiers, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexer);
        /// <inheritdoc cref = "MrmCreateResourceIndexerFromPreviousSchemaFile(win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmPlatformVersion, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousSchemaFile(string projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, string defaultQualifiers, string schemaFile, ref win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer)
        {
            fixed (win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexerLocal = &indexer)
            {
                fixed (char *schemaFileLocal = schemaFile)
                {
                    fixed (char *defaultQualifiersLocal = defaultQualifiers)
                    {
                        fixed (char *projectRootLocal = projectRoot)
                        {
                            win32.System.Com.HRESULT __result = MrmSupport.MrmCreateResourceIndexerFromPreviousSchemaFile(projectRootLocal, platformVersion, defaultQualifiersLocal, schemaFileLocal, indexerLocal);
                            return __result;
                        }
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousSchemaFile(win32.System.SystemServices.PCWSTR projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, win32.System.SystemServices.PCWSTR defaultQualifiers, win32.System.SystemServices.PCWSTR schemaFile, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexer);
        /// <inheritdoc cref = "MrmCreateResourceIndexerFromPreviousPriFile(win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmPlatformVersion, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousPriFile(string projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, string defaultQualifiers, string priFile, ref win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer)
        {
            fixed (win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexerLocal = &indexer)
            {
                fixed (char *priFileLocal = priFile)
                {
                    fixed (char *defaultQualifiersLocal = defaultQualifiers)
                    {
                        fixed (char *projectRootLocal = projectRoot)
                        {
                            win32.System.Com.HRESULT __result = MrmSupport.MrmCreateResourceIndexerFromPreviousPriFile(projectRootLocal, platformVersion, defaultQualifiersLocal, priFileLocal, indexerLocal);
                            return __result;
                        }
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousPriFile(win32.System.SystemServices.PCWSTR projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, win32.System.SystemServices.PCWSTR defaultQualifiers, win32.System.SystemServices.PCWSTR priFile, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexer);
        /// <inheritdoc cref = "MrmCreateResourceIndexerFromPreviousSchemaData(win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmPlatformVersion, win32.System.SystemServices.PCWSTR, byte *, uint, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousSchemaData(string projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, string defaultQualifiers, in byte schemaXmlData, uint schemaXmlSize, ref win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer)
        {
            fixed (win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexerLocal = &indexer)
            {
                fixed (byte *schemaXmlDataLocal = &schemaXmlData)
                {
                    fixed (char *defaultQualifiersLocal = defaultQualifiers)
                    {
                        fixed (char *projectRootLocal = projectRoot)
                        {
                            win32.System.Com.HRESULT __result = MrmSupport.MrmCreateResourceIndexerFromPreviousSchemaData(projectRootLocal, platformVersion, defaultQualifiersLocal, schemaXmlDataLocal, schemaXmlSize, indexerLocal);
                            return __result;
                        }
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousSchemaData(win32.System.SystemServices.PCWSTR projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, win32.System.SystemServices.PCWSTR defaultQualifiers, byte *schemaXmlData, uint schemaXmlSize, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexer);
        /// <inheritdoc cref = "MrmCreateResourceIndexerFromPreviousPriData(win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmPlatformVersion, win32.System.SystemServices.PCWSTR, byte *, uint, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousPriData(string projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, string defaultQualifiers, in byte priData, uint priSize, ref win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer)
        {
            fixed (win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexerLocal = &indexer)
            {
                fixed (byte *priDataLocal = &priData)
                {
                    fixed (char *defaultQualifiersLocal = defaultQualifiers)
                    {
                        fixed (char *projectRootLocal = projectRoot)
                        {
                            win32.System.Com.HRESULT __result = MrmSupport.MrmCreateResourceIndexerFromPreviousPriData(projectRootLocal, platformVersion, defaultQualifiersLocal, priDataLocal, priSize, indexerLocal);
                            return __result;
                        }
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmCreateResourceIndexerFromPreviousPriData(win32.System.SystemServices.PCWSTR projectRoot, win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, win32.System.SystemServices.PCWSTR defaultQualifiers, byte *priData, uint priSize, win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle*indexer);
        /// <inheritdoc cref = "MrmIndexString(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmIndexString(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, string resourceUri, string resourceString, string qualifiers)
        {
            fixed (char *qualifiersLocal = qualifiers)
            {
                fixed (char *resourceStringLocal = resourceString)
                {
                    fixed (char *resourceUriLocal = resourceUri)
                    {
                        win32.System.Com.HRESULT __result = MrmSupport.MrmIndexString(indexer, resourceUriLocal, resourceStringLocal, qualifiersLocal);
                        return __result;
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmIndexString(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.System.SystemServices.PCWSTR resourceUri, win32.System.SystemServices.PCWSTR resourceString, win32.System.SystemServices.PCWSTR qualifiers);
        /// <inheritdoc cref = "MrmIndexEmbeddedData(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.System.SystemServices.PCWSTR, byte *, uint, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmIndexEmbeddedData(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, string resourceUri, in byte embeddedData, uint embeddedDataSize, string qualifiers)
        {
            fixed (char *qualifiersLocal = qualifiers)
            {
                fixed (byte *embeddedDataLocal = &embeddedData)
                {
                    fixed (char *resourceUriLocal = resourceUri)
                    {
                        win32.System.Com.HRESULT __result = MrmSupport.MrmIndexEmbeddedData(indexer, resourceUriLocal, embeddedDataLocal, embeddedDataSize, qualifiersLocal);
                        return __result;
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmIndexEmbeddedData(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.System.SystemServices.PCWSTR resourceUri, byte *embeddedData, uint embeddedDataSize, win32.System.SystemServices.PCWSTR qualifiers);
        /// <inheritdoc cref = "MrmIndexFile(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmIndexFile(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, string resourceUri, string filePath, string qualifiers)
        {
            fixed (char *qualifiersLocal = qualifiers)
            {
                fixed (char *filePathLocal = filePath)
                {
                    fixed (char *resourceUriLocal = resourceUri)
                    {
                        win32.System.Com.HRESULT __result = MrmSupport.MrmIndexFile(indexer, resourceUriLocal, filePathLocal, qualifiersLocal);
                        return __result;
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmIndexFile(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.System.SystemServices.PCWSTR resourceUri, win32.System.SystemServices.PCWSTR filePath, win32.System.SystemServices.PCWSTR qualifiers);
        /// <inheritdoc cref = "MrmIndexFileAutoQualifiers(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmIndexFileAutoQualifiers(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, string filePath)
        {
            fixed (char *filePathLocal = filePath)
            {
                win32.System.Com.HRESULT __result = MrmSupport.MrmIndexFileAutoQualifiers(indexer, filePathLocal);
                return __result;
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmIndexFileAutoQualifiers(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.System.SystemServices.PCWSTR filePath);
        /// <inheritdoc cref = "MrmIndexResourceContainerAutoQualifiers(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmIndexResourceContainerAutoQualifiers(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, string containerPath)
        {
            fixed (char *containerPathLocal = containerPath)
            {
                win32.System.Com.HRESULT __result = MrmSupport.MrmIndexResourceContainerAutoQualifiers(indexer, containerPathLocal);
                return __result;
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmIndexResourceContainerAutoQualifiers(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.System.SystemServices.PCWSTR containerPath);
        /// <inheritdoc cref = "MrmCreateResourceFile(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.UI.WindowsAndMessaging.MrmPackagingMode, win32.UI.WindowsAndMessaging.MrmPackagingOptions, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateResourceFile(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.UI.WindowsAndMessaging.MrmPackagingMode packagingMode, win32.UI.WindowsAndMessaging.MrmPackagingOptions packagingOptions, string outputDirectory)
        {
            fixed (char *outputDirectoryLocal = outputDirectory)
            {
                win32.System.Com.HRESULT __result = MrmSupport.MrmCreateResourceFile(indexer, packagingMode, packagingOptions, outputDirectoryLocal);
                return __result;
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmCreateResourceFile(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.UI.WindowsAndMessaging.MrmPackagingMode packagingMode, win32.UI.WindowsAndMessaging.MrmPackagingOptions packagingOptions, win32.System.SystemServices.PCWSTR outputDirectory);
        /// <inheritdoc cref = "MrmCreateResourceFileInMemory(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.UI.WindowsAndMessaging.MrmPackagingMode, win32.UI.WindowsAndMessaging.MrmPackagingOptions, byte **, uint *)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateResourceFileInMemory(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.UI.WindowsAndMessaging.MrmPackagingMode packagingMode, win32.UI.WindowsAndMessaging.MrmPackagingOptions packagingOptions, out byte *outputPriData, out uint outputPriSize)
        {
            fixed (uint *outputPriSizeLocal = &outputPriSize)
            {
                fixed (byte **outputPriDataLocal = &outputPriData)
                {
                    win32.System.Com.HRESULT __result = MrmSupport.MrmCreateResourceFileInMemory(indexer, packagingMode, packagingOptions, outputPriDataLocal, outputPriSizeLocal);
                    return __result;
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmCreateResourceFileInMemory(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer, win32.UI.WindowsAndMessaging.MrmPackagingMode packagingMode, win32.UI.WindowsAndMessaging.MrmPackagingOptions packagingOptions, byte **outputPriData, uint *outputPriSize);
        /// <inheritdoc cref = "MrmPeekResourceIndexerMessages(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle, win32.UI.WindowsAndMessaging.MrmResourceIndexerMessage**, uint *)"/>
        internal static unsafe win32.System.Com.HRESULT MrmPeekResourceIndexerMessages(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle handle, win32.UI.WindowsAndMessaging.MrmResourceIndexerMessage**messages, out uint numMsgs)
        {
            fixed (uint *numMsgsLocal = &numMsgs)
            {
                win32.System.Com.HRESULT __result = MrmSupport.MrmPeekResourceIndexerMessages(handle, messages, numMsgsLocal);
                return __result;
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmPeekResourceIndexerMessages(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle handle, win32.UI.WindowsAndMessaging.MrmResourceIndexerMessage**messages, uint *numMsgs);
        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmDestroyIndexerAndMessages(win32.UI.WindowsAndMessaging.MrmResourceIndexerHandle indexer);
        /// <inheritdoc cref = "MrmFreeMemory(byte *)"/>
        internal static unsafe win32.System.Com.HRESULT MrmFreeMemory(in byte data)
        {
            fixed (byte *dataLocal = &data)
            {
                win32.System.Com.HRESULT __result = MrmSupport.MrmFreeMemory(dataLocal);
                return __result;
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmFreeMemory(byte *data);
        /// <inheritdoc cref = "MrmDumpPriFile(win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmDumpType, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmDumpPriFile(string indexFileName, string schemaPriFile, win32.UI.WindowsAndMessaging.MrmDumpType dumpType, string outputXmlFile)
        {
            fixed (char *outputXmlFileLocal = outputXmlFile)
            {
                fixed (char *schemaPriFileLocal = schemaPriFile)
                {
                    fixed (char *indexFileNameLocal = indexFileName)
                    {
                        win32.System.Com.HRESULT __result = MrmSupport.MrmDumpPriFile(indexFileNameLocal, schemaPriFileLocal, dumpType, outputXmlFileLocal);
                        return __result;
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmDumpPriFile(win32.System.SystemServices.PCWSTR indexFileName, win32.System.SystemServices.PCWSTR schemaPriFile, win32.UI.WindowsAndMessaging.MrmDumpType dumpType, win32.System.SystemServices.PCWSTR outputXmlFile);
        /// <inheritdoc cref = "MrmDumpPriFileInMemory(win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR, win32.UI.WindowsAndMessaging.MrmDumpType, byte **, uint *)"/>
        internal static unsafe win32.System.Com.HRESULT MrmDumpPriFileInMemory(string indexFileName, string schemaPriFile, win32.UI.WindowsAndMessaging.MrmDumpType dumpType, out byte *outputXmlData, out uint outputXmlSize)
        {
            fixed (uint *outputXmlSizeLocal = &outputXmlSize)
            {
                fixed (byte **outputXmlDataLocal = &outputXmlData)
                {
                    fixed (char *schemaPriFileLocal = schemaPriFile)
                    {
                        fixed (char *indexFileNameLocal = indexFileName)
                        {
                            win32.System.Com.HRESULT __result = MrmSupport.MrmDumpPriFileInMemory(indexFileNameLocal, schemaPriFileLocal, dumpType, outputXmlDataLocal, outputXmlSizeLocal);
                            return __result;
                        }
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmDumpPriFileInMemory(win32.System.SystemServices.PCWSTR indexFileName, win32.System.SystemServices.PCWSTR schemaPriFile, win32.UI.WindowsAndMessaging.MrmDumpType dumpType, byte **outputXmlData, uint *outputXmlSize);
        /// <inheritdoc cref = "MrmDumpPriDataInMemory(byte *, uint, byte *, uint, win32.UI.WindowsAndMessaging.MrmDumpType, byte **, uint *)"/>
        internal static unsafe win32.System.Com.HRESULT MrmDumpPriDataInMemory(in byte inputPriData, uint inputPriSize, byte? schemaPriData, uint schemaPriSize, win32.UI.WindowsAndMessaging.MrmDumpType dumpType, out byte *outputXmlData, out uint outputXmlSize)
        {
            fixed (uint *outputXmlSizeLocal = &outputXmlSize)
            {
                fixed (byte **outputXmlDataLocal = &outputXmlData)
                {
                    fixed (byte *inputPriDataLocal = &inputPriData)
                    {
                        byte schemaPriDataLocal = schemaPriData.HasValue ? schemaPriData.Value : default(byte);
                        win32.System.Com.HRESULT __result = MrmSupport.MrmDumpPriDataInMemory(inputPriDataLocal, inputPriSize, schemaPriData.HasValue ? &schemaPriDataLocal : null, schemaPriSize, dumpType, outputXmlDataLocal, outputXmlSizeLocal);
                        return __result;
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmDumpPriDataInMemory(byte *inputPriData, uint inputPriSize, [Optional] byte *schemaPriData, uint schemaPriSize, win32.UI.WindowsAndMessaging.MrmDumpType dumpType, byte **outputXmlData, uint *outputXmlSize);
        /// <inheritdoc cref = "MrmCreateConfig(win32.UI.WindowsAndMessaging.MrmPlatformVersion, win32.System.SystemServices.PCWSTR, win32.System.SystemServices.PCWSTR)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateConfig(win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, string defaultQualifiers, string outputXmlFile)
        {
            fixed (char *outputXmlFileLocal = outputXmlFile)
            {
                fixed (char *defaultQualifiersLocal = defaultQualifiers)
                {
                    win32.System.Com.HRESULT __result = MrmSupport.MrmCreateConfig(platformVersion, defaultQualifiersLocal, outputXmlFileLocal);
                    return __result;
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT MrmCreateConfig(win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, win32.System.SystemServices.PCWSTR defaultQualifiers, win32.System.SystemServices.PCWSTR outputXmlFile);
        /// <inheritdoc cref = "MrmCreateConfigInMemory(win32.UI.WindowsAndMessaging.MrmPlatformVersion, win32.System.SystemServices.PCWSTR, byte **, uint *)"/>
        internal static unsafe win32.System.Com.HRESULT MrmCreateConfigInMemory(win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, string defaultQualifiers, out byte *outputXmlData, out uint outputXmlSize)
        {
            fixed (uint *outputXmlSizeLocal = &outputXmlSize)
            {
                fixed (byte **outputXmlDataLocal = &outputXmlData)
                {
                    fixed (char *defaultQualifiersLocal = defaultQualifiers)
                    {
                        win32.System.Com.HRESULT __result = MrmSupport.MrmCreateConfigInMemory(platformVersion, defaultQualifiersLocal, outputXmlDataLocal, outputXmlSizeLocal);
                        return __result;
                    }
                }
            }
        }

        [DllImport("MrmSupport", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT MrmCreateConfigInMemory(win32.UI.WindowsAndMessaging.MrmPlatformVersion platformVersion, win32.System.SystemServices.PCWSTR defaultQualifiers, byte **outputXmlData, uint *outputXmlSize);
    }
}