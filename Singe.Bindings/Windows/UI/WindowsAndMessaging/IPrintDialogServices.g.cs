// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace UI.WindowsAndMessaging
    {
        [Guid("509AAEDA-5639-11D1-B6A1-0000F8757BF9")]
        internal unsafe struct IPrintDialogServices
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IPrintDialogServices*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IPrintDialogServices*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IPrintDialogServices*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetCurrentDevMode(win32.UI.DisplayDevices.DEVMODEA*, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetCurrentDevMode(ref win32.UI.DisplayDevices.DEVMODEA pDevMode, ref uint pcbSize)
            {
                fixed (uint *pcbSizeLocal = &pcbSize)
                {
                    fixed (win32.UI.DisplayDevices.DEVMODEA*pDevModeLocal = &pDevMode)
                    {
                        win32.System.Com.HRESULT __result = this.GetCurrentDevMode(pDevModeLocal, pcbSizeLocal);
                        return __result;
                    }
                }
            }

            /// <summary>Fills a DEVMODE structure with information about the currently selected printer for use with PrintDlgEx.</summary>
            /// <param name = "pDevMode">
            /// <para>Type: <b>LPDEVMODE</b></para>
            /// <para>A pointer to a buffer that receives a <a href = "https://docs.microsoft.com/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODE</a> structure containing information about the currently selected printer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentdevmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcbSize">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>On input, the variable specifies the size, in bytes, of the buffer pointed to by the <i>lpDevMode</i> parameter. On output, the variable contains the number of bytes written to <i>lpDevMode</i>.</para>
            /// <para>If the size is zero on input, the function returns the required buffer size (in bytes) in <i>pcbSize</i> and does not use the <i>lpDevMode</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentdevmode#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method is successful, the return value is <b>S_OK</b>. If no printer is currently selected, the return value is <b>S_OK</b>, the value returned in <i>pcbSize</i> is zero, and the <i>lpDevMode</i> buffer is unchanged.</para>
            /// <para>If an error occurs, the return value is a COM error code. For more information, see <a href = "/windows/desktop/SetupApi/error-handling">Error Handling</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentdevmode">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetCurrentDevMode(win32.UI.DisplayDevices.DEVMODEA*pDevMode, uint *pcbSize)
            {
                fixed (IPrintDialogServices*pThis = &this)
                    return lpVtbl->GetCurrentDevMode_4(pThis, pDevMode, pcbSize);
            }

            /// <inheritdoc cref = "GetCurrentPrinterName(win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetCurrentPrinterName(win32.System.SystemServices.PWSTR pPrinterName, ref uint pcchSize)
            {
                fixed (uint *pcchSizeLocal = &pcchSize)
                {
                    win32.System.Com.HRESULT __result = this.GetCurrentPrinterName(pPrinterName, pcchSizeLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the name of the currently selected printer, for use with PrintDlgEx.</summary>
            /// <param name = "pPrinterName">
            /// <para>Type: <b>LPTSTR</b></para>
            /// <para>The name of the currently selected printer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentprintername#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcchSize">
            /// <para>Type: <b>UINT*</b> On input, the variable specifies the size, in characters, of the buffer pointed to by the <i>lpPrinterName</i> parameter. On output, the variable contains the number of bytes (ANSI) or characters (Unicode), including the terminating null character, written to the buffer.</para>
            /// <para>If the size is zero on input, the function returns the required buffer size (in bytes or characters) in <i>pcchSize</i> and does not use the <i>lpPrinterName</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentprintername#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b> If the method is successful, the return value is <b>S_OK</b>. If no printer is currently selected, the return value is <b>S_OK</b>, the value returned in <i>pcchSize</i> is zero, and the <i>lpPrinterName</i> buffer is unchanged.</para>
            /// <para>If an error occurs, the return value is a COM error code. For more information, see <a href = "/windows/desktop/SetupApi/error-handling">Error Handling</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentprintername">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetCurrentPrinterName(win32.System.SystemServices.PWSTR pPrinterName, uint *pcchSize)
            {
                fixed (IPrintDialogServices*pThis = &this)
                    return lpVtbl->GetCurrentPrinterName_5(pThis, pPrinterName, pcchSize);
            }

            /// <inheritdoc cref = "GetCurrentPortName(win32.System.SystemServices.PWSTR, uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetCurrentPortName(win32.System.SystemServices.PWSTR pPortName, ref uint pcchSize)
            {
                fixed (uint *pcchSizeLocal = &pcchSize)
                {
                    win32.System.Com.HRESULT __result = this.GetCurrentPortName(pPortName, pcchSizeLocal);
                    return __result;
                }
            }

            /// <summary>Retrieves the name of the current port for use with PrintDlgEx.</summary>
            /// <param name = "pPortName">
            /// <para>Type: <b>LPTSTR</b></para>
            /// <para>The name of the current port.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentportname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pcchSize">
            /// <para>Type: <b>UINT*</b></para>
            /// <para>On input, the variable specifies the size, in characters, of the buffer pointed to by the <i>lpPortName</i> parameter. On output, the variable contains the number of bytes (ANSI) or characters (Unicode), including the terminating null character, written to the buffer.</para>
            /// <para>If the size is zero on input, the function returns the required buffer size (in bytes or characters) in <i>pcchSize</i> and does not use the <i>lpPortName</i> buffer.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentportname#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>Type: <b>HRESULT</b></para>
            /// <para>If the method is successful, the return value is <b>S_OK</b>. If there is no current port, the return value is <b>S_OK</b>, the value returned in <i>pcchSize</i> is zero, and the <i>lpPortName</i> buffer is unchanged.</para>
            /// <para>If an error occurs, the return value is a COM error code. For more information, see <a href = "/windows/desktop/SetupApi/error-handling">Error Handling</a>.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//commdlg/nf-commdlg-iprintdialogservices-getcurrentportname">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetCurrentPortName(win32.System.SystemServices.PWSTR pPortName, uint *pcchSize)
            {
                fixed (IPrintDialogServices*pThis = &this)
                    return lpVtbl->GetCurrentPortName_6(pThis, pPortName, pcchSize);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IPrintDialogServices*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IPrintDialogServices*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IPrintDialogServices*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IPrintDialogServices*, win32.UI.DisplayDevices.DEVMODEA*, uint *, win32.System.Com.HRESULT>GetCurrentDevMode_4;
                internal delegate *unmanaged[Stdcall]<IPrintDialogServices*, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetCurrentPrinterName_5;
                internal delegate *unmanaged[Stdcall]<IPrintDialogServices*, win32.System.SystemServices.PWSTR, uint *, win32.System.Com.HRESULT>GetCurrentPortName_6;
            }

            private Vtbl*lpVtbl;
        }
    }
}