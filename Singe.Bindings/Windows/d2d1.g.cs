// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    internal static partial class d2d1
    {
        /// <inheritdoc cref = "D2D1CreateFactory(win32.Graphics.Direct2D.D2D1_FACTORY_TYPE, global::System.Guid*, win32.Graphics.Direct2D.D2D1_FACTORY_OPTIONS*, void **)"/>
        internal static unsafe win32.System.Com.HRESULT D2D1CreateFactory(win32.Graphics.Direct2D.D2D1_FACTORY_TYPE factoryType, in global::System.Guid riid, win32.Graphics.Direct2D.D2D1_FACTORY_OPTIONS? pFactoryOptions, out void *ppIFactory)
        {
            fixed (void **ppIFactoryLocal = &ppIFactory)
            {
                fixed (global::System.Guid*riidLocal = &riid)
                {
                    win32.Graphics.Direct2D.D2D1_FACTORY_OPTIONS pFactoryOptionsLocal = pFactoryOptions.HasValue ? pFactoryOptions.Value : default(win32.Graphics.Direct2D.D2D1_FACTORY_OPTIONS);
                    win32.System.Com.HRESULT __result = d2d1.D2D1CreateFactory(factoryType, riidLocal, pFactoryOptions.HasValue ? &pFactoryOptionsLocal : null, ppIFactoryLocal);
                    return __result;
                }
            }
        }

        /// <summary>Creates a factory object that can be used to create Direct2D resources.</summary>
        /// <param name = "factoryType">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ne-d2d1-d2d1_factory_type">D2D1_FACTORY_TYPE</a></b></para>
        /// <para>The threading model of the factory and the resources it creates.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1createfactory#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "riid">
        /// <para>Type: <b>REFIID</b></para>
        /// <para>A reference to the IID of <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/nn-d2d1-id2d1factory">ID2D1Factory</a> that is obtained by using `__uuidof(ID2D1Factory)`.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1createfactory#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pFactoryOptions">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/api/d2d1/ns-d2d1-d2d1_factory_options">D2D1_FACTORY_OPTIONS</a>*</b></para>
        /// <para>The level of detail provided to the debugging layer.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1createfactory#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppIFactory">
        /// <para>Type: <b>void**</b></para>
        /// <para>When this method returns, contains the address to a pointer to the new factory.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1createfactory#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: **[HRESULT](/windows/win32/com/structure-of-com-error-codes)**</para>
        /// <para>If the function succeeds, it returns **S_OK**. Otherwise, it returns an [**HRESULT**](/windows/win32/com/structure-of-com-error-codes) [error code](/windows/win32/com/com-error-codes-10).</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1createfactory">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D2D1CreateFactory(win32.Graphics.Direct2D.D2D1_FACTORY_TYPE factoryType, global::System.Guid*riid, [Optional] win32.Graphics.Direct2D.D2D1_FACTORY_OPTIONS*pFactoryOptions, void **ppIFactory);
        /// <inheritdoc cref = "D2D1MakeRotateMatrix(float, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
        internal static unsafe void D2D1MakeRotateMatrix(float angle, win32.Graphics.Direct2D.D2D_POINT_2F center, out win32.Graphics.Direct2D.D2D_MATRIX_3X2_F matrix)
        {
            fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrixLocal = &matrix)
            {
                d2d1.D2D1MakeRotateMatrix(angle, center, matrixLocal);
            }
        }

        /// <summary>Creates a rotation transformation that rotates by the specified angle about the specified point.</summary>
        /// <param name = "angle">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The clockwise rotation angle, in degrees.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makerotatematrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "center">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
        /// <para>The point about which to rotate.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makerotatematrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "matrix">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
        /// <para>When this method returns, contains the new rotation transformation. You must allocate storage for this parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makerotatematrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <remarks>
        /// <para>Rotation occurs in the plane of the 2-D surface.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makerotatematrix#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe void D2D1MakeRotateMatrix(float angle, win32.Graphics.Direct2D.D2D_POINT_2F center, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrix);
        /// <inheritdoc cref = "D2D1MakeSkewMatrix(float, float, win32.Graphics.Direct2D.D2D_POINT_2F, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
        internal static unsafe void D2D1MakeSkewMatrix(float angleX, float angleY, win32.Graphics.Direct2D.D2D_POINT_2F center, out win32.Graphics.Direct2D.D2D_MATRIX_3X2_F matrix)
        {
            fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrixLocal = &matrix)
            {
                d2d1.D2D1MakeSkewMatrix(angleX, angleY, center, matrixLocal);
            }
        }

        /// <summary>Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point.</summary>
        /// <param name = "angleX">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The x-axis skew angle, which is measured in degrees counterclockwise from the y-axis.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makeskewmatrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "angleY">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The y-axis skew angle, which is measured in degrees counterclockwise from the x-axis.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makeskewmatrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "center">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
        /// <para>The center point of the skew operation.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makeskewmatrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "matrix">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
        /// <para>When this method returns, contains the rotation transformation. You must allocate storate for this parameter.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makeskewmatrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1makeskewmatrix">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe void D2D1MakeSkewMatrix(float angleX, float angleY, win32.Graphics.Direct2D.D2D_POINT_2F center, win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrix);
        /// <inheritdoc cref = "D2D1IsMatrixInvertible(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
        internal static unsafe bool D2D1IsMatrixInvertible(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F matrix)
        {
            fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrixLocal = &matrix)
            {
                bool __result = d2d1.D2D1IsMatrixInvertible(matrixLocal);
                return __result;
            }
        }

        /// <summary>Indicates whether the specified matrix is invertible.</summary>
        /// <param name = "matrix">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
        /// <para>The matrix to test.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1ismatrixinvertible#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para><b>true</b> if the matrix was inverted; otherwise, <b>false</b>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1ismatrixinvertible">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe bool D2D1IsMatrixInvertible(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrix);
        /// <inheritdoc cref = "D2D1InvertMatrix(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
        internal static unsafe bool D2D1InvertMatrix(ref win32.Graphics.Direct2D.D2D_MATRIX_3X2_F matrix)
        {
            fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrixLocal = &matrix)
            {
                bool __result = d2d1.D2D1InvertMatrix(matrixLocal);
                return __result;
            }
        }

        /// <summary>Tries to invert the specified matrix.</summary>
        /// <param name = "matrix">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
        /// <para>The matrix to invert.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1invertmatrix#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>BOOL</b></para>
        /// <para><b>true</b> if the matrix was inverted; otherwise, <b>false</b>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1/nf-d2d1-d2d1invertmatrix">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe bool D2D1InvertMatrix(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrix);
        /// <inheritdoc cref = "D2D1CreateDevice(win32.Graphics.Dxgi.IDXGIDevice*, win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES*, win32.Graphics.Direct2D.ID2D1Device**)"/>
        internal static unsafe win32.System.Com.HRESULT D2D1CreateDevice(win32.Graphics.Dxgi.IDXGIDevice*dxgiDevice, win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES? creationProperties, win32.Graphics.Direct2D.ID2D1Device**d2dDevice)
        {
            win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES creationPropertiesLocal = creationProperties.HasValue ? creationProperties.Value : default(win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES);
            win32.System.Com.HRESULT __result = d2d1.D2D1CreateDevice(dxgiDevice, creationProperties.HasValue ? &creationPropertiesLocal : null, d2dDevice);
            return __result;
        }

        /// <summary>Creates a new Direct2D device associated with the provided DXGI device.</summary>
        /// <param name = "dxgiDevice">The DXGI device the Direct2D device is associated with.</param>
        /// <param name = "creationProperties">The properties to apply to the Direct2D device.</param>
        /// <param name = "d2dDevice">When this function returns, contains the address of a pointer to a Direct2D device.</param>
        /// <returns>
        /// <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1createdevice">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D2D1CreateDevice(win32.Graphics.Dxgi.IDXGIDevice*dxgiDevice, [Optional] win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES*creationProperties, win32.Graphics.Direct2D.ID2D1Device**d2dDevice);
        /// <inheritdoc cref = "D2D1CreateDeviceContext(win32.Graphics.Dxgi.IDXGISurface*, win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES*, win32.Graphics.Direct2D.ID2D1DeviceContext**)"/>
        internal static unsafe win32.System.Com.HRESULT D2D1CreateDeviceContext(win32.Graphics.Dxgi.IDXGISurface*dxgiSurface, win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES? creationProperties, win32.Graphics.Direct2D.ID2D1DeviceContext**d2dDeviceContext)
        {
            win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES creationPropertiesLocal = creationProperties.HasValue ? creationProperties.Value : default(win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES);
            win32.System.Com.HRESULT __result = d2d1.D2D1CreateDeviceContext(dxgiSurface, creationProperties.HasValue ? &creationPropertiesLocal : null, d2dDeviceContext);
            return __result;
        }

        /// <summary>Creates a new Direct2D device context associated with a DXGI surface.</summary>
        /// <param name = "dxgiSurface">The DXGI surface the Direct2D device context is associated with.</param>
        /// <param name = "creationProperties">The properties to apply to the Direct2D device context.</param>
        /// <param name = "d2dDeviceContext">When this function returns, contains the address of a pointer to a Direct2D device context.</param>
        /// <returns>
        /// <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1createdevicecontext">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D2D1CreateDeviceContext(win32.Graphics.Dxgi.IDXGISurface*dxgiSurface, [Optional] win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES*creationProperties, win32.Graphics.Direct2D.ID2D1DeviceContext**d2dDeviceContext);
        /// <inheritdoc cref = "D2D1ConvertColorSpace(win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_COLOR_SPACE, win32.Graphics.Direct2D.D2D1_COLOR_F*)"/>
        internal static unsafe win32.Graphics.Direct2D.D2D1_COLOR_F D2D1ConvertColorSpace(win32.Graphics.Direct2D.D2D1_COLOR_SPACE sourceColorSpace, win32.Graphics.Direct2D.D2D1_COLOR_SPACE destinationColorSpace, in win32.Graphics.Direct2D.D2D1_COLOR_F color)
        {
            fixed (win32.Graphics.Direct2D.D2D1_COLOR_F*colorLocal = &color)
            {
                win32.Graphics.Direct2D.D2D1_COLOR_F __result = d2d1.D2D1ConvertColorSpace(sourceColorSpace, destinationColorSpace, colorLocal);
                return __result;
            }
        }

        /// <summary>Converts the given color from one colorspace to another.</summary>
        /// <param name = "sourceColorSpace">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b></para>
        /// <para>The source color space.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1convertcolorspace#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "destinationColorSpace">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_1/ne-d2d1_1-d2d1_color_space">D2D1_COLOR_SPACE</a></b></para>
        /// <para>The destination color space.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1convertcolorspace#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "color">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-color-f">D2D1_COLOR_F</a>*</b></para>
        /// <para>The source color.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1convertcolorspace#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/desktop/Direct2D/d2d1-color-f">D2D1_COLOR_F</a></b></para>
        /// <para>The converted color.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1convertcolorspace">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe win32.Graphics.Direct2D.D2D1_COLOR_F D2D1ConvertColorSpace(win32.Graphics.Direct2D.D2D1_COLOR_SPACE sourceColorSpace, win32.Graphics.Direct2D.D2D1_COLOR_SPACE destinationColorSpace, win32.Graphics.Direct2D.D2D1_COLOR_F*color);
        /// <inheritdoc cref = "D2D1SinCos(float, float *, float *)"/>
        internal static unsafe void D2D1SinCos(float angle, out float s, out float c)
        {
            fixed (float *cLocal = &c)
            {
                fixed (float *sLocal = &s)
                {
                    d2d1.D2D1SinCos(angle, sLocal, cLocal);
                }
            }
        }

        /// <summary>Returns the sine and cosine of an angle.</summary>
        /// <param name = "angle">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The angle to calculate.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1sincos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "s">
        /// <para>Type: <b>FLOAT*</b></para>
        /// <para>The sine of the angle.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1sincos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "c">
        /// <para>Type: <b>FLOAT*</b></para>
        /// <para>The cosine of the angle.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1sincos#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1sincos">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe void D2D1SinCos(float angle, float *s, float *c);
        /// <summary>Returns the tangent of an angle.</summary>
        /// <param name = "angle">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The angle to calculate the tangent for.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1tan#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The tangent of the angle.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1tan">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern float D2D1Tan(float angle);
        /// <summary>Returns the length of a 3 dimensional vector.</summary>
        /// <param name = "x">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The  x value of the vector.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1vec3length#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "y">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The  y value of the vector.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1vec3length#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "z">
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The  z value of the vector.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1vec3length#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b>FLOAT</b></para>
        /// <para>The length of the vector.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_1/nf-d2d1_1-d2d1vec3length">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern float D2D1Vec3Length(float x, float y, float z);
        /// <inheritdoc cref = "D2D1ComputeMaximumScaleFactor(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*)"/>
        internal static unsafe float D2D1ComputeMaximumScaleFactor(in win32.Graphics.Direct2D.D2D_MATRIX_3X2_F matrix)
        {
            fixed (win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrixLocal = &matrix)
            {
                float __result = d2d1.D2D1ComputeMaximumScaleFactor(matrixLocal);
                return __result;
            }
        }

        /// <summary>Computes the maximum factor by which a given transform can stretch any vector.</summary>
        /// <param name = "matrix">The input transform matrix.</param>
        /// <returns>The scale factor.</returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_2/nf-d2d1_2-d2d1computemaximumscalefactor">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe float D2D1ComputeMaximumScaleFactor(win32.Graphics.Direct2D.D2D_MATRIX_3X2_F*matrix);
        /// <inheritdoc cref = "D2D1GetGradientMeshInteriorPointsFromCoonsPatch(win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*, win32.Graphics.Direct2D.D2D_POINT_2F*)"/>
        internal static unsafe void D2D1GetGradientMeshInteriorPointsFromCoonsPatch(in win32.Graphics.Direct2D.D2D_POINT_2F pPoint0, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint1, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint2, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint3, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint4, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint5, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint6, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint7, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint8, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint9, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint10, in win32.Graphics.Direct2D.D2D_POINT_2F pPoint11, out win32.Graphics.Direct2D.D2D_POINT_2F pTensorPoint11, out win32.Graphics.Direct2D.D2D_POINT_2F pTensorPoint12, out win32.Graphics.Direct2D.D2D_POINT_2F pTensorPoint21, out win32.Graphics.Direct2D.D2D_POINT_2F pTensorPoint22)
        {
            fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint22Local = &pTensorPoint22)
            {
                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint21Local = &pTensorPoint21)
                {
                    fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint12Local = &pTensorPoint12)
                    {
                        fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint11Local = &pTensorPoint11)
                        {
                            fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint11Local = &pPoint11)
                            {
                                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint10Local = &pPoint10)
                                {
                                    fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint9Local = &pPoint9)
                                    {
                                        fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint8Local = &pPoint8)
                                        {
                                            fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint7Local = &pPoint7)
                                            {
                                                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint6Local = &pPoint6)
                                                {
                                                    fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint5Local = &pPoint5)
                                                    {
                                                        fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint4Local = &pPoint4)
                                                        {
                                                            fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint3Local = &pPoint3)
                                                            {
                                                                fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint2Local = &pPoint2)
                                                                {
                                                                    fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint1Local = &pPoint1)
                                                                    {
                                                                        fixed (win32.Graphics.Direct2D.D2D_POINT_2F*pPoint0Local = &pPoint0)
                                                                        {
                                                                            d2d1.D2D1GetGradientMeshInteriorPointsFromCoonsPatch(pPoint0Local, pPoint1Local, pPoint2Local, pPoint3Local, pPoint4Local, pPoint5Local, pPoint6Local, pPoint7Local, pPoint8Local, pPoint9Local, pPoint10Local, pPoint11Local, pTensorPoint11Local, pTensorPoint12Local, pTensorPoint21Local, pTensorPoint22Local);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>Returns the interior points for a gradient mesh patch based on the points defining a Coons patch.</summary>
        /// <param name = "pPoint0">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 0.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint1">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 1.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint2">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 2.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint3">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 3.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint4">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 4.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint5">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 5.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint6">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 6.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint7">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 7.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint8">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 8.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint9">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 9.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint10">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 10.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pPoint11">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>The coordinate-space location of the control point at position 11.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pTensorPoint11">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>Returns the interior point for the gradient mesh corresponding to point11 in the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_gradient_mesh_patch">D2D1_GRADIENT_MESH_PATCH</a> structure.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pTensorPoint12">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>Returns the interior point for the gradient mesh corresponding to point12 in the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_gradient_mesh_patch">D2D1_GRADIENT_MESH_PATCH</a> structure.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pTensorPoint21">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>Returns the interior point for the gradient mesh corresponding to point21 in the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_gradient_mesh_patch">D2D1_GRADIENT_MESH_PATCH</a> structure.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pTensorPoint22">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
        /// <para>Returns the interior point for the gradient mesh corresponding to point22 in the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3/ns-d2d1_3-d2d1_gradient_mesh_patch">D2D1_GRADIENT_MESH_PATCH</a> structure.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <remarks>
        /// <para>This function is called by the <a href = "https://docs.microsoft.com/windows/desktop/api/d2d1_3helper/nf-d2d1_3helper-gradientmeshpatchfromcoonspatch">GradientMeshPatchFromCoonsPatch</a> function and is not intended to be used directly.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d2d1_3/nf-d2d1_3-d2d1getgradientmeshinteriorpointsfromcoonspatch#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("d2d1", ExactSpelling = true)]
        internal static extern unsafe void D2D1GetGradientMeshInteriorPointsFromCoonsPatch(win32.Graphics.Direct2D.D2D_POINT_2F*pPoint0, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint1, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint2, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint3, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint4, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint5, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint6, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint7, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint8, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint9, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint10, win32.Graphics.Direct2D.D2D_POINT_2F*pPoint11, win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint11, win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint12, win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint21, win32.Graphics.Direct2D.D2D_POINT_2F*pTensorPoint22);
    }
}