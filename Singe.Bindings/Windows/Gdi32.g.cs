// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    internal static partial class Gdi32
    {
        /// <summary>The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</summary>
        /// <param name = "ho">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
        /// <returns>
        /// <para>If the function succeeds, the return value is nonzero.</para>
        /// <para>If the specified handle is not valid or is currently selected into a DC, the return value is zero.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//wingdi/nf-wingdi-deleteobject">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("Gdi32", ExactSpelling = true)]
        internal static extern win32.System.SystemServices.BOOL DeleteObject(win32.Graphics.Gdi.HGDIOBJ ho);
        /// <summary>
        /// Represents a Win32 handle that can be closed with <see cref = "Gdi32.DeleteObject"/>.
        /// </summary>
        internal class DeleteObjectSafeHandle : SafeHandle
        {
            private static readonly IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);
            internal DeleteObjectSafeHandle(): base(INVALID_HANDLE_VALUE, true)
            {
            }

            internal DeleteObjectSafeHandle(IntPtr preexistingHandle, bool ownsHandle = true): base(INVALID_HANDLE_VALUE, ownsHandle)
            {
                this.SetHandle(preexistingHandle);
            }

            public override bool IsInvalid => this.handle == default(IntPtr) || this.handle == INVALID_HANDLE_VALUE;
            protected override bool ReleaseHandle() => Gdi32.DeleteObject((win32.Graphics.Gdi.HGDIOBJ)this.handle);
        }
    }
}