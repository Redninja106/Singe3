// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    internal static partial class ApiSets
    {
        /// <summary>Decrements the reference count of a string buffer.</summary>
        /// <returns>
        /// <para>Type: <b>HRESULT</b></para>
        /// <para>This function always returns <b>S_OK</b>.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//winstring/nf-winstring-windowsdeletestring">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("api-ms-win-core-winrt-string-l1-1-0", ExactSpelling = true)]
        internal static extern win32.System.Com.HRESULT WindowsDeleteString(win32.System.WinRT.HSTRING @string);
        /// <summary>
        /// Represents a Win32 handle that can be closed with <see cref = "api - ms - win - core - winrt - string  - l1 - 1 - 0 . WindowsDeleteString"/>.
        /// </summary>
        internal class WindowsDeleteStringSafeHandle : SafeHandle
        {
            private static readonly IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);
            internal WindowsDeleteStringSafeHandle(): base(INVALID_HANDLE_VALUE, true)
            {
            }

            internal WindowsDeleteStringSafeHandle(IntPtr preexistingHandle, bool ownsHandle = true): base(INVALID_HANDLE_VALUE, ownsHandle)
            {
                this.SetHandle(preexistingHandle);
            }

            public override bool IsInvalid => this.handle == default(IntPtr) || this.handle == INVALID_HANDLE_VALUE;
            protected override bool ReleaseHandle() => WindowsDeleteString((win32.System.WinRT.HSTRING)this.handle) == Constants.S_OK;
        }
    }
}