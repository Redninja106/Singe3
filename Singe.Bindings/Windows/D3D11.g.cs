// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    internal static partial class D3D11
    {
        /// <inheritdoc cref = "D3D11CreateDevice(win32.Graphics.Dxgi.IDXGIAdapter*, win32.Graphics.Direct3D11.D3D_DRIVER_TYPE, win32.System.SystemServices.HINSTANCE, win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, uint, uint, win32.Graphics.Direct3D11.ID3D11Device**, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, win32.Graphics.Direct3D11.ID3D11DeviceContext**)"/>
        internal static unsafe win32.System.Com.HRESULT D3D11CreateDevice(win32.Graphics.Dxgi.IDXGIAdapter*pAdapter, win32.Graphics.Direct3D11.D3D_DRIVER_TYPE DriverType, SafeHandle Software, win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG Flags, ReadOnlySpan<win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL> pFeatureLevels, uint SDKVersion, win32.Graphics.Direct3D11.ID3D11Device**ppDevice, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevel, win32.Graphics.Direct3D11.ID3D11DeviceContext**ppImmediateContext)
        {
            bool SoftwareAddRef = false;
            try
            {
                fixed (win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevelsLocal = pFeatureLevels)
                {
                    win32.System.SystemServices.HINSTANCE SoftwareLocal;
                    if (Software is object)
                    {
                        Software.DangerousAddRef(ref SoftwareAddRef);
                        SoftwareLocal = (win32.System.SystemServices.HINSTANCE)Software.DangerousGetHandle();
                    }
                    else
                        SoftwareLocal = default(win32.System.SystemServices.HINSTANCE);
                    win32.System.Com.HRESULT __result = D3D11.D3D11CreateDevice(pAdapter, DriverType, SoftwareLocal, Flags, pFeatureLevelsLocal, (uint)pFeatureLevels.Length, SDKVersion, ppDevice, pFeatureLevel, ppImmediateContext);
                    return __result;
                }
            }
            finally
            {
                if (SoftwareAddRef)
                    Software.DangerousRelease();
            }
        }

        /// <summary>Creates a device that represents the display adapter.</summary>
        /// <param name = "pAdapter">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiadapter">IDXGIAdapter</a>*</b></para>
        /// <para>A pointer to the video adapter to use when creating a <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>. Pass <b>NULL</b> to use the default adapter, which is the first adapter that is enumerated by <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgifactory-enumadapters">IDXGIFactory1::EnumAdapters</a>.</para>
        /// <para><div class = "alert"><b>Note</b>  Do not mix the use of DXGI 1.0 (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory">IDXGIFactory</a>) and DXGI 1.1 (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory1">IDXGIFactory1</a>) in an application. Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application. </div> <div> </div></para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "DriverType">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE</a></b></para>
        /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE</a>, which represents the driver type to create.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Software">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HMODULE</a></b></para>
        /// <para>A handle to a DLL that implements a software rasterizer. If <i>DriverType</i> is <i>D3D_DRIVER_TYPE_SOFTWARE</i>, <i>Software</i> must not be <b>NULL</b>. Get the handle by calling <a href = "https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href = "https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a> , or <a href = "https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Flags">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
        /// <para>The runtime <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">layers</a> to enable (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_FLAG</a>); values can be bitwise OR'd together.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pFeatureLevels">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b> A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>s, which determine the order of feature levels to attempt to create. If <i>pFeatureLevels</i> is set to <b>NULL</b>, this function uses the following array of feature levels:</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "FeatureLevels">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
        /// <para>The number of elements in <i>pFeatureLevels</i>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "SDKVersion">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
        /// <para>The SDK version; use <i>D3D11_SDK_VERSION</i>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppDevice">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>**</b></para>
        /// <para>Returns the address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a> object that represents the device created. If this parameter is <b>NULL</b>, no ID3D11Device will be returned.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pFeatureLevel">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b></para>
        /// <para>If successful, returns the first <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a> from the <i>pFeatureLevels</i> array which succeeded. Supply <b>NULL</b> as an input if you don't need to determine which feature level is supported.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppImmediateContext">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>**</b></para>
        /// <para>Returns the address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> object that represents the device context. If this parameter is <b>NULL</b>, no ID3D11DeviceContext will be returned.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method can return one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
        /// <para>This method returns E_INVALIDARG if you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value.</para>
        /// <para>This method returns <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_SDK_COMPONENT_MISSING</a> if you specify <a href = "/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_DEBUG</a> in <i>Flags</i> and the incorrect version of the <a href = "/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> is installed on your computer. Install the latest Windows SDK to get the correct version.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdevice">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D11", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D11CreateDevice([Optional] win32.Graphics.Dxgi.IDXGIAdapter*pAdapter, win32.Graphics.Direct3D11.D3D_DRIVER_TYPE DriverType, win32.System.SystemServices.HINSTANCE Software, win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG Flags, [Optional] win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevels, uint FeatureLevels, uint SDKVersion, [Optional] win32.Graphics.Direct3D11.ID3D11Device**ppDevice, [Optional] win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevel, [Optional] win32.Graphics.Direct3D11.ID3D11DeviceContext**ppImmediateContext);
        /// <inheritdoc cref = "D3D11CreateDeviceAndSwapChain(win32.Graphics.Dxgi.IDXGIAdapter*, win32.Graphics.Direct3D11.D3D_DRIVER_TYPE, win32.System.SystemServices.HINSTANCE, win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, uint, uint, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*, win32.Graphics.Dxgi.IDXGISwapChain**, win32.Graphics.Direct3D11.ID3D11Device**, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, win32.Graphics.Direct3D11.ID3D11DeviceContext**)"/>
        internal static unsafe win32.System.Com.HRESULT D3D11CreateDeviceAndSwapChain(win32.Graphics.Dxgi.IDXGIAdapter*pAdapter, win32.Graphics.Direct3D11.D3D_DRIVER_TYPE DriverType, SafeHandle Software, win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG Flags, ReadOnlySpan<win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL> pFeatureLevels, uint SDKVersion, win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC? pSwapChainDesc, win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain, win32.Graphics.Direct3D11.ID3D11Device**ppDevice, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevel, win32.Graphics.Direct3D11.ID3D11DeviceContext**ppImmediateContext)
        {
            bool SoftwareAddRef = false;
            try
            {
                fixed (win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevelsLocal = pFeatureLevels)
                {
                    win32.System.SystemServices.HINSTANCE SoftwareLocal;
                    if (Software is object)
                    {
                        Software.DangerousAddRef(ref SoftwareAddRef);
                        SoftwareLocal = (win32.System.SystemServices.HINSTANCE)Software.DangerousGetHandle();
                    }
                    else
                        SoftwareLocal = default(win32.System.SystemServices.HINSTANCE);
                    win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC pSwapChainDescLocal = pSwapChainDesc.HasValue ? pSwapChainDesc.Value : default(win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC);
                    win32.System.Com.HRESULT __result = D3D11.D3D11CreateDeviceAndSwapChain(pAdapter, DriverType, SoftwareLocal, Flags, pFeatureLevelsLocal, (uint)pFeatureLevels.Length, SDKVersion, pSwapChainDesc.HasValue ? &pSwapChainDescLocal : null, ppSwapChain, ppDevice, pFeatureLevel, ppImmediateContext);
                    return __result;
                }
            }
            finally
            {
                if (SoftwareAddRef)
                    Software.DangerousRelease();
            }
        }

        /// <summary>Creates a device that represents the display adapter and a swap chain used for rendering.</summary>
        /// <param name = "pAdapter">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiadapter">IDXGIAdapter</a>*</b></para>
        /// <para>A pointer to the video adapter to use when creating a <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>. Pass <b>NULL</b> to use the default adapter, which is the first adapter enumerated by <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgifactory-enumadapters">IDXGIFactory1::EnumAdapters</a>.</para>
        /// <para><div class = "alert"><b>Note</b>  Do not mix the use of DXGI 1.0 (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory">IDXGIFactory</a>) and DXGI 1.1 (<a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory1">IDXGIFactory1</a>) in an application. Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application. </div> <div> </div></para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "DriverType">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE</a></b></para>
        /// <para>The <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE</a>, which represents the driver type to create.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Software">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">HMODULE</a></b></para>
        /// <para>A handle to a DLL that implements a software rasterizer. If <i>DriverType</i> is <i>D3D_DRIVER_TYPE_SOFTWARE</i>, <i>Software</i> must not be <b>NULL</b>. Get the handle by calling <a href = "https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href = "https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a> , or <a href = "https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>. The value should be non-<b>NULL</b>when <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_driver_type">D3D_DRIVER_TYPE</a> is <b>D3D_DRIVER_TYPE_SOFTWARE</b> and <b>NULL</b> otherwise.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Flags">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
        /// <para>The runtime <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">layers</a> to enable (see <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_FLAG</a>); values can be bitwise OR'd together.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pFeatureLevels">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b> A pointer to an array of <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>s, which determine the order of feature levels to attempt to create. If <i>pFeatureLevels</i> is set to <b>NULL</b>, this function uses the following array of feature levels:</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "FeatureLevels">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
        /// <para>The number of elements in <i>pFeatureLevels</i>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "SDKVersion">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
        /// <para>The SDK version; use <i>D3D11_SDK_VERSION</i>.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pSwapChainDesc">
        /// <para>Type: <b>const <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_swap_chain_desc">DXGI_SWAP_CHAIN_DESC</a>*</b></para>
        /// <para>A pointer to a swap chain description (see <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/ns-dxgi-dxgi_swap_chain_desc">DXGI_SWAP_CHAIN_DESC</a>) that contains initialization parameters for the swap chain.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppSwapChain">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiswapchain">IDXGISwapChain</a>**</b></para>
        /// <para>Returns the address of a pointer to the <a href = "https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgiswapchain">IDXGISwapChain</a> object that represents the swap chain used for rendering.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppDevice">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>**</b></para>
        /// <para>Returns the address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a> object that represents the device created. If this parameter is  <b>NULL</b>, no ID3D11Device will be returned'.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pFeatureLevel">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>*</b></para>
        /// <para>Returns a pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>, which represents the first element in an array of feature levels supported by the device. Supply <b>NULL</b> as an input if you don't need to determine which feature level is supported.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppImmediateContext">
        /// <para>Type: <b><a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>**</b></para>
        /// <para>Returns the address of a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a> object that represents the device context. If this parameter is <b>NULL</b>, no ID3D11DeviceContext will be returned.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b> This method can return one of the <a href = "/windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
        /// <para>This method returns <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a> if you call it in a Session 0 process.</para>
        /// <para>This method returns E_INVALIDARG if you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value.</para>
        /// <para>This method returns <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_SDK_COMPONENT_MISSING</a> if you specify <a href = "/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_DEBUG</a> in <i>Flags</i> and the incorrect version of the <a href = "/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> is installed on your computer. Install the latest Windows SDK to get the correct version.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-d3d11createdeviceandswapchain">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D11", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D11CreateDeviceAndSwapChain([Optional] win32.Graphics.Dxgi.IDXGIAdapter*pAdapter, win32.Graphics.Direct3D11.D3D_DRIVER_TYPE DriverType, win32.System.SystemServices.HINSTANCE Software, win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG Flags, [Optional] win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevels, uint FeatureLevels, uint SDKVersion, [Optional] win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC*pSwapChainDesc, [Optional] win32.Graphics.Dxgi.IDXGISwapChain**ppSwapChain, [Optional] win32.Graphics.Direct3D11.ID3D11Device**ppDevice, [Optional] win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevel, [Optional] win32.Graphics.Direct3D11.ID3D11DeviceContext**ppImmediateContext);
        /// <inheritdoc cref = "D3D11On12CreateDevice(win32.System.Com.IUnknown*, uint, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*, uint, win32.System.Com.IUnknown**, uint, uint, win32.Graphics.Direct3D11.ID3D11Device**, win32.Graphics.Direct3D11.ID3D11DeviceContext**, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*)"/>
        internal static unsafe win32.System.Com.HRESULT D3D11On12CreateDevice(win32.System.Com.IUnknown*pDevice, uint Flags, ReadOnlySpan<win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL> pFeatureLevels, win32.System.Com.IUnknown**ppCommandQueues, uint NumQueues, uint NodeMask, win32.Graphics.Direct3D11.ID3D11Device**ppDevice, win32.Graphics.Direct3D11.ID3D11DeviceContext**ppImmediateContext, win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pChosenFeatureLevel)
        {
            fixed (win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevelsLocal = pFeatureLevels)
            {
                win32.System.Com.HRESULT __result = D3D11.D3D11On12CreateDevice(pDevice, Flags, pFeatureLevelsLocal, (uint)pFeatureLevels.Length, ppCommandQueues, NumQueues, NodeMask, ppDevice, ppImmediateContext, pChosenFeatureLevel);
                return __result;
            }
        }

        /// <summary>Creates a device that uses Direct3D 11 functionality in Direct3D 12, specifying a pre-existing Direct3D 12 device to use for Direct3D 11 interop.</summary>
        /// <param name = "pDevice">
        /// <para>Type: <b>IUnknown*</b></para>
        /// <para>Specifies a pre-existing Direct3D 12 device to use for Direct3D 11 interop. May not be NULL.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "Flags">
        /// <para>Type: <b>UINT</b></para>
        /// <para>One or more bitwise OR'd flags from <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_FLAG</a>. These are the same flags as those used by <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-d3d11createdeviceandswapchain">D3D11CreateDeviceAndSwapChain</a>. Specifies which runtime <a href = "https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">layers</a> to enable. <i>Flags</i> must be compatible with device flags, and its <i>NodeMask</i> must be a subset of the <i>NodeMask</i> provided to the present API.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pFeatureLevels">
        /// <para>Type: <b>const D3D_FEATURE_LEVEL*</b></para>
        /// <para>An array of any of the following:</para>
        /// <para></para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "FeatureLevels">
        /// <para>Type: <b>UINT</b></para>
        /// <para>The size of (that is, the number of elements in) the *pFeatureLevels* array.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppCommandQueues">
        /// <para>Type: <b>IUnknown* const *</b></para>
        /// <para>An array of unique queues for D3D11On12 to use. The queues must be of the 3D command queue type.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "NumQueues">
        /// <para>Type: <b>UINT</b></para>
        /// <para>The size of (that is, the number of elements in) the *ppCommandQueues* array.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "NodeMask">
        /// <para>Type: <b>UINT</b></para>
        /// <para>Which node of the Direct3D 12 device to use. Only 1 bit may be set.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppDevice">
        /// <para>Type: <b>ID3D11Device**</b></para>
        /// <para>Pointer to the returned <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11device">ID3D11Device</a>. May be NULL.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "ppImmediateContext">
        /// <para>Type: <b>ID3D11DeviceContext**</b></para>
        /// <para>A pointer to the returned <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nn-d3d11-id3d11devicecontext">ID3D11DeviceContext</a>. May be NULL.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <param name = "pChosenFeatureLevel">
        /// <para>Type: <b>D3D_FEATURE_LEVEL*</b></para>
        /// <para>A pointer to the returned feature level. May be NULL.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice#parameters">Read more on docs.microsoft.com</see>.</para>
        /// </param>
        /// <returns>
        /// <para>Type: <b><a href = "/windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
        /// <para>This method returns one of the <a href = "/windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> that are documented for <a href = "/windows/desktop/api/d3d11/nf-d3d11-d3d11createdevice">D3D11CreateDevice</a>.</para>
        /// <para>This method returns <a href = "/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_SDK_COMPONENT_MISSING</a>if you specify <a href = "/windows/desktop/api/d3d11/ne-d3d11-d3d11_create_device_flag">D3D11_CREATE_DEVICE_DEBUG</a>in <i>Flags</i>and the incorrect version of the <a href = "/windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> is installed on your computer. Install the latest Windows SDK to get the correct version.</para>
        /// </returns>
        /// <remarks>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11on12/nf-d3d11on12-d3d11on12createdevice">Learn more about this API from docs.microsoft.com</see>.</para>
        /// </remarks>
        [DllImport("D3D11", ExactSpelling = true)]
        internal static extern unsafe win32.System.Com.HRESULT D3D11On12CreateDevice(win32.System.Com.IUnknown*pDevice, uint Flags, [Optional] win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pFeatureLevels, uint FeatureLevels, [Optional] win32.System.Com.IUnknown**ppCommandQueues, uint NumQueues, uint NodeMask, [Optional] win32.Graphics.Direct3D11.ID3D11Device**ppDevice, [Optional] win32.Graphics.Direct3D11.ID3D11DeviceContext**ppImmediateContext, [Optional] win32.Graphics.Direct3D11.D3D_FEATURE_LEVEL*pChosenFeatureLevel);
    }
}