// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Storage.StructuredStorage
    {
        /// <summary>Used in the ReadMultiple and WriteMultiple methods of IPropertyStorage to define the type tag and the value of a property in a property set.</summary>
        /// <remarks>
        /// <para>The <b>PROPVARIANT</b> structure can also hold a value of <b>VT_DECIMAL</b>: <pre class = "syntax"xml: space = "preserve"><c>    DECIMAL       decVal;        //VT_DECIMAL</c></pre> However, the value of the <b>DECIMAL</b> structure requires special handling. The <b>DECIMAL</b> structure is the same size as an entire <b>PROPVARIANT</b> structure and does not fit into the union that holds all other types of values. Instead, the value of the <b>DECIMAL</b> structure occupies the entire <b>PROPVARIANT</b> structure, including the reserved fields and the <b>vt</b> member. However, the first member of the <b>DECIMAL</b> structure is not used and is equal in size to the <b>vt</b> member of the <b>PROPVARIANT</b> structure. Therefore, the <b>PROPVARIANT</b> structure declaration in the Propidl.h header file of Win32 defines the <b>decVal</b> member in such a way that it corresponds to the beginning of the <b>PROPVARIANT</b> structure. Therefore, to put the value of the <b>DECIMAL</b> structure into a <b>PROPVARIANT</b> structure, the value must be loaded into the <b>decVal</b> member and the <b>vt</b> member is set to <b>VT_DECIMAL</b>, just as for any other value. <b>PROPVARIANT</b> is the fundamental data type by which property values are read and written through the <a href = "https://docs.microsoft.com/windows/desktop/api/propidl/nn-propidl-ipropertystorage">IPropertyStorage</a> interface. The data type <b>PROPVARIANT</b> is related to the data type <b>VARIANT</b>, defined as part of Automation in OLE2. Several definitions are reused from Automation, as follows: <pre class = "syntax"xml: space = "preserve"><code>typedef struct  tagCY { unsigned long      Lo; long               Hi; } CY; typedef struct  tagDEC { USHORT             wReserved; BYTE               scale; BYTE               sign; ULONG              Hi32; ULONGLONG          Lo64; } DECIMAL; typedef struct  tagSAFEARRAYBOUND { ULONG              cElements; LONG               lLbound; } SAFEARRAYBOUND; typedef struct  tagSAFEARRAY { USHORT             cDims; USHORT             fFeatures; ULONG              cbElements; ULONG              cLocks; PVOID              pvData; SAFEARRAYBOUND     rgsabound [ * ]; } SAFEARRAY; typedef CY             CURRENCY; typedef short          VARIANT_BOOL; typedef unsigned short VARTYPE; typedef double         DATE; typedef OLECHAR*       BSTR;</code></pre> In addition, some types are unique to the <b>PROPVARIANT</b> structure: <pre class = "syntax"xml: space = "preserve"><code>typedef struct  tagCLIPDATA { // cbSize is the size of the buffer pointed to // by pClipData, plus sizeof(ulClipFmt) ULONG              cbSize; long               ulClipFmt; BYTE*              pClipData; } CLIPDATA;</code></pre> Among the unique <b>PROPVARIANT</b> types are several data types that define counted arrays of other data types. The data types of all counted arrays begin with the letters <b>CA</b>, for example <b>CAUB</b>, and have an <b>OR</b> operator <b>vt</b> value (the VarType of the element and an <b>OR</b> operator with <b>VT_VECTOR</b>). The counted array structure has the following form (where <i>name</i> is the specific name of the counted array). <pre class = "syntax"xml: space = "preserve"><code>#define TYPEDEF_CA(type, name) typedef struct tag ## name {\ ULONG cElems;\ type *pElems;\ } name</code></pre> </para>
        /// <para>This doc was truncated.</para>
        /// <para><see href = "https://docs.microsoft.com/windows/win32/api//propidl/ns-propidl-propvariant#">Read more on docs.microsoft.com</see>.</para>
        /// </remarks>
        internal partial struct PROPVARIANT
        {
            internal win32.Storage.StructuredStorage.PROPVARIANT._Anonymous_e__Union Anonymous;
            [StructLayout(LayoutKind.Explicit)]
            internal partial struct _Anonymous_e__Union
            {
                [FieldOffset(0)]
                internal win32.Storage.StructuredStorage.PROPVARIANT._Anonymous_e__Union._Anonymous_e__Struct Anonymous;
                [FieldOffset(0)]
                internal win32.System.SystemServices.DECIMAL decVal;
                internal partial struct _Anonymous_e__Struct
                {
                    internal ushort vt;
                    internal ushort wReserved1;
                    internal ushort wReserved2;
                    internal ushort wReserved3;
                    internal win32.Storage.StructuredStorage.PROPVARIANT._Anonymous_e__Union._Anonymous_e__Struct._Anonymous_e__Union Anonymous;
                    [StructLayout(LayoutKind.Explicit)]
                    internal partial struct _Anonymous_e__Union
                    {
                        [FieldOffset(0)]
                        internal win32.System.SystemServices.CHAR cVal;
                        [FieldOffset(0)]
                        internal byte bVal;
                        [FieldOffset(0)]
                        internal short iVal;
                        [FieldOffset(0)]
                        internal ushort uiVal;
                        [FieldOffset(0)]
                        internal int lVal;
                        [FieldOffset(0)]
                        internal uint ulVal;
                        [FieldOffset(0)]
                        internal int intVal;
                        [FieldOffset(0)]
                        internal uint uintVal;
                        [FieldOffset(0)]
                        internal long hVal;
                        [FieldOffset(0)]
                        internal ulong uhVal;
                        [FieldOffset(0)]
                        internal float fltVal;
                        [FieldOffset(0)]
                        internal double dblVal;
                        [FieldOffset(0)]
                        internal short boolVal;
                        [FieldOffset(0)]
                        internal short __OBSOLETE__VARIANT_BOOL;
                        [FieldOffset(0)]
                        internal int scode;
                        [FieldOffset(0)]
                        internal win32.System.SystemServices.CY cyVal;
                        [FieldOffset(0)]
                        internal double date;
                        [FieldOffset(0)]
                        internal global::System.Runtime.InteropServices.ComTypes.FILETIME filetime;
                        [FieldOffset(0)]
                        internal unsafe global::System.Guid*puuid;
                        [FieldOffset(0)]
                        internal unsafe win32.System.SystemServices.CLIPDATA*pclipdata;
                        [FieldOffset(0)]
                        internal win32.System.OleAutomation.BSTR bstrVal;
                        [FieldOffset(0)]
                        internal win32.System.SystemServices.BSTRBLOB bstrblobVal;
                        [FieldOffset(0)]
                        internal win32.System.Com.BLOB blob;
                        [FieldOffset(0)]
                        internal win32.System.SystemServices.PSTR pszVal;
                        [FieldOffset(0)]
                        internal win32.System.SystemServices.PWSTR pwszVal;
                        [FieldOffset(0)]
                        internal unsafe win32.System.Com.IUnknown*punkVal;
                        [FieldOffset(0)]
                        internal unsafe win32.System.OleAutomation.IDispatch*pdispVal;
                        [FieldOffset(0)]
                        internal unsafe win32.Storage.StructuredStorage.IStream*pStream;
                        [FieldOffset(0)]
                        internal unsafe win32.Storage.StructuredStorage.IStorage*pStorage;
                        [FieldOffset(0)]
                        internal unsafe win32.Storage.StructuredStorage.VERSIONEDSTREAM*pVersionedStream;
                        [FieldOffset(0)]
                        internal unsafe win32.System.OleAutomation.SAFEARRAY*parray;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAC cac;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAUB caub;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAI cai;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAUI caui;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAL cal;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAUL caul;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAH cah;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAUH cauh;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAFLT caflt;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CADBL cadbl;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CABOOL cabool;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CASCODE cascode;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CACY cacy;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CADATE cadate;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAFILETIME cafiletime;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CACLSID cauuid;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CACLIPDATA caclipdata;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CABSTR cabstr;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CABSTRBLOB cabstrblob;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CALPSTR calpstr;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CALPWSTR calpwstr;
                        [FieldOffset(0)]
                        internal win32.Storage.StructuredStorage.CAPROPVARIANT capropvar;
                        [FieldOffset(0)]
                        internal win32.System.SystemServices.PSTR pcVal;
                        [FieldOffset(0)]
                        internal unsafe byte *pbVal;
                        [FieldOffset(0)]
                        internal unsafe short *piVal;
                        [FieldOffset(0)]
                        internal unsafe ushort *puiVal;
                        [FieldOffset(0)]
                        internal unsafe int *plVal;
                        [FieldOffset(0)]
                        internal unsafe uint *pulVal;
                        [FieldOffset(0)]
                        internal unsafe int *pintVal;
                        [FieldOffset(0)]
                        internal unsafe uint *puintVal;
                        [FieldOffset(0)]
                        internal unsafe float *pfltVal;
                        [FieldOffset(0)]
                        internal unsafe double *pdblVal;
                        [FieldOffset(0)]
                        internal unsafe short *pboolVal;
                        [FieldOffset(0)]
                        internal unsafe win32.System.SystemServices.DECIMAL*pdecVal;
                        [FieldOffset(0)]
                        internal unsafe int *pscode;
                        [FieldOffset(0)]
                        internal unsafe win32.System.SystemServices.CY*pcyVal;
                        [FieldOffset(0)]
                        internal unsafe double *pdate;
                        [FieldOffset(0)]
                        internal unsafe win32.System.OleAutomation.BSTR*pbstrVal;
                        [FieldOffset(0)]
                        internal unsafe win32.System.Com.IUnknown**ppunkVal;
                        [FieldOffset(0)]
                        internal unsafe win32.System.OleAutomation.IDispatch**ppdispVal;
                        [FieldOffset(0)]
                        internal unsafe win32.System.OleAutomation.SAFEARRAY**pparray;
                        [FieldOffset(0)]
                        internal unsafe win32.Storage.StructuredStorage.PROPVARIANT*pvarVal;
                    }
                }
            }
        }
    }
}