// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Storage.Xps
    {
        [Guid("1B8EFEC4-3019-4C27-964E-367202156906")]
        internal unsafe struct IPrintDocumentPackageTarget
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (IPrintDocumentPackageTarget*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (IPrintDocumentPackageTarget*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (IPrintDocumentPackageTarget*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            /// <inheritdoc cref = "GetPackageTargetTypes(uint *, global::System.Guid**)"/>
            internal unsafe win32.System.Com.HRESULT GetPackageTargetTypes(out uint targetCount, global::System.Guid**targetTypes)
            {
                fixed (uint *targetCountLocal = &targetCount)
                {
                    win32.System.Com.HRESULT __result = this.GetPackageTargetTypes(targetCountLocal, targetTypes);
                    return __result;
                }
            }

            /// <summary>Enumerates the supported target types.</summary>
            /// <param name = "targetCount">The number of supported target types.</param>
            /// <param name = "targetTypes">The array of supported target types. An array of GUIDs.</param>
            /// <returns>If the <b>GetPackageTargetTypes</b> method completes successfully, it returns an S_OK. Otherwise it returns the appropriate HRESULT error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//documenttarget/nf-documenttarget-iprintdocumentpackagetarget-getpackagetargettypes">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPackageTargetTypes(uint *targetCount, global::System.Guid**targetTypes)
            {
                fixed (IPrintDocumentPackageTarget*pThis = &this)
                    return lpVtbl->GetPackageTargetTypes_4(pThis, targetCount, targetTypes);
            }

            /// <inheritdoc cref = "GetPackageTarget(global::System.Guid*, global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT GetPackageTarget(in global::System.Guid guidTargetType, in global::System.Guid riid, out void *ppvTarget)
            {
                fixed (void **ppvTargetLocal = &ppvTarget)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        fixed (global::System.Guid*guidTargetTypeLocal = &guidTargetType)
                        {
                            win32.System.Com.HRESULT __result = this.GetPackageTarget(guidTargetTypeLocal, riidLocal, ppvTargetLocal);
                            return __result;
                        }
                    }
                }
            }

            /// <summary>Retrieves the pointer to the specific document package target, which allows the client to add a document with the given target type. Clients can call this method multiple times but they always have to use the same target ID.</summary>
            /// <param name = "guidTargetType">The target type GUID obtained from <a href = "https://docs.microsoft.com/windows/desktop/api/documenttarget/nf-documenttarget-iprintdocumentpackagetarget-getpackagetargettypes">GetPackageTargetTypes</a>.</param>
            /// <param name = "riid">The identifier of the interface being requested.</param>
            /// <param name = "ppvTarget">The requested document target interface. The returned pointer is a pointer to an <a href = "https://docs.microsoft.com/windows/desktop/api/xpsobjectmodel_1/nn-xpsobjectmodel_1-ixpsdocumentpackagetarget">IXpsDocumentPackageTarget</a> interface.</param>
            /// <returns>If the <b>GetPackageTarget</b> method completes successfully, it returns an S_OK. Otherwise it returns the appropriate HRESULT error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//documenttarget/nf-documenttarget-iprintdocumentpackagetarget-getpackagetarget">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetPackageTarget(global::System.Guid*guidTargetType, global::System.Guid*riid, void **ppvTarget)
            {
                fixed (IPrintDocumentPackageTarget*pThis = &this)
                    return lpVtbl->GetPackageTarget_5(pThis, guidTargetType, riid, ppvTarget);
            }

            /// <summary>Cancels the current print job.</summary>
            /// <returns>If the <b>Cancel</b> method completes successfully, it returns an S_OK. Otherwise it returns the appropriate HRESULT error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//documenttarget/nf-documenttarget-iprintdocumentpackagetarget-cancel">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal win32.System.Com.HRESULT Cancel()
            {
                fixed (IPrintDocumentPackageTarget*pThis = &this)
                    return lpVtbl->Cancel_6(pThis);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<IPrintDocumentPackageTarget*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<IPrintDocumentPackageTarget*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<IPrintDocumentPackageTarget*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<IPrintDocumentPackageTarget*, uint *, global::System.Guid**, win32.System.Com.HRESULT>GetPackageTargetTypes_4;
                internal delegate *unmanaged[Stdcall]<IPrintDocumentPackageTarget*, global::System.Guid*, global::System.Guid*, void **, win32.System.Com.HRESULT>GetPackageTarget_5;
                internal delegate *unmanaged[Stdcall]<IPrintDocumentPackageTarget*, win32.System.Com.HRESULT>Cancel_6;
            }

            private Vtbl*lpVtbl;
        }
    }
}