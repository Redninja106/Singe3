// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Media.MediaFoundation
    {
        [Guid("3015A308-DCBD-47AA-A747-192486D14D4A")]
        internal unsafe struct ID3D11AuthenticatedChannel
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetDevice(win32.Graphics.Direct3D11.ID3D11Device**ppDevice)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    lpVtbl->GetDevice_4(pThis, ppDevice);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->GetPrivateData_5(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->SetPrivateData_6(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_7(pThis, guid, pData);
            }

            /// <inheritdoc cref = "GetCertificateSize(uint *)"/>
            internal unsafe win32.System.Com.HRESULT GetCertificateSize(out uint pCertificateSize)
            {
                fixed (uint *pCertificateSizeLocal = &pCertificateSize)
                {
                    win32.System.Com.HRESULT __result = this.GetCertificateSize(pCertificateSizeLocal);
                    return __result;
                }
            }

            /// <summary>Gets the size of the driver's certificate chain.</summary>
            /// <param name = "pCertificateSize">Receives the size of the certificate chain, in bytes.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11authenticatedchannel-getcertificatesize">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetCertificateSize(uint *pCertificateSize)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->GetCertificateSize_8(pThis, pCertificateSize);
            }

            /// <inheritdoc cref = "GetCertificate(uint, byte *)"/>
            internal unsafe win32.System.Com.HRESULT GetCertificate(uint CertificateSize, out byte pCertificate)
            {
                fixed (byte *pCertificateLocal = &pCertificate)
                {
                    win32.System.Com.HRESULT __result = this.GetCertificate(CertificateSize, pCertificateLocal);
                    return __result;
                }
            }

            /// <summary>Gets the driver's certificate chain.</summary>
            /// <param name = "CertificateSize">The size of the <i>pCertificate</i> array, in bytes. To get the size of the certificate chain, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11cryptosession-getcertificatesize">ID3D11CryptoSession::GetCertificateSize</a>.</param>
            /// <param name = "pCertificate">A pointer to a byte array that receives the driver's certificate chain. The caller must allocate the array.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11authenticatedchannel-getcertificate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetCertificate(uint CertificateSize, byte *pCertificate)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    return lpVtbl->GetCertificate_9(pThis, CertificateSize, pCertificate);
            }

            /// <inheritdoc cref = "GetChannelHandle(win32.System.SystemServices.HANDLE*)"/>
            internal unsafe void GetChannelHandle(out Microsoft.Win32.SafeHandles.SafeFileHandle pChannelHandle)
            {
                win32.System.SystemServices.HANDLE pChannelHandleLocal;
                this.GetChannelHandle(&pChannelHandleLocal);
                pChannelHandle = new Microsoft.Win32.SafeHandles.SafeFileHandle(pChannelHandleLocal, ownsHandle: true);
            }

            /// <summary>Gets a handle to the authenticated channel.</summary>
            /// <param name = "pChannelHandle">Receives a handle to the channel.</param>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11authenticatedchannel-getchannelhandle">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe void GetChannelHandle(win32.System.SystemServices.HANDLE*pChannelHandle)
            {
                fixed (ID3D11AuthenticatedChannel*pThis = &this)
                    lpVtbl->GetChannelHandle_10(pThis, pChannelHandle);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, win32.Graphics.Direct3D11.ID3D11Device**, void>GetDevice_4;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_7;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint *, win32.System.Com.HRESULT>GetCertificateSize_8;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, uint, byte *, win32.System.Com.HRESULT>GetCertificate_9;
                internal delegate *unmanaged[Stdcall]<ID3D11AuthenticatedChannel*, win32.System.SystemServices.HANDLE*, void>GetChannelHandle_10;
            }

            private Vtbl*lpVtbl;
        }
    }
}