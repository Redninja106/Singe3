// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable CS1591, CS1573, CS0465, CS0649, CS8019, CS1570, CS1584, CS1658
namespace Windows.Win32
{
    using global::System;
    using global::System.Diagnostics;
    using global::System.Runtime.CompilerServices;
    using global::System.Runtime.InteropServices;
    using win32 = global::Windows.Win32;

    namespace Media.MediaFoundation
    {
        [Guid("31627037-53AB-4200-9061-05FAA9AB45F9")]
        internal unsafe struct ID3D11VideoProcessorEnumerator
        {
            /// <inheritdoc cref = "QueryInterface(global::System.Guid*, void **)"/>
            internal unsafe win32.System.Com.HRESULT QueryInterface(in global::System.Guid riid, out void *ppvObject)
            {
                fixed (void **ppvObjectLocal = &ppvObject)
                {
                    fixed (global::System.Guid*riidLocal = &riid)
                    {
                        win32.System.Com.HRESULT __result = this.QueryInterface(riidLocal, ppvObjectLocal);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT QueryInterface(global::System.Guid*riid, void **ppvObject)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->QueryInterface_1(pThis, riid, ppvObject);
            }

            internal uint AddRef()
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->AddRef_2(pThis);
            }

            internal uint Release()
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->Release_3(pThis);
            }

            internal unsafe void GetDevice(win32.Graphics.Direct3D11.ID3D11Device**ppDevice)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    lpVtbl->GetDevice_4(pThis, ppDevice);
            }

            /// <inheritdoc cref = "GetPrivateData(global::System.Guid*, uint *, void *)"/>
            internal unsafe win32.System.Com.HRESULT GetPrivateData(in global::System.Guid guid, ref uint pDataSize, void *pData)
            {
                fixed (uint *pDataSizeLocal = &pDataSize)
                {
                    fixed (global::System.Guid*guidLocal = &guid)
                    {
                        win32.System.Com.HRESULT __result = this.GetPrivateData(guidLocal, pDataSizeLocal, pData);
                        return __result;
                    }
                }
            }

            internal unsafe win32.System.Com.HRESULT GetPrivateData(global::System.Guid*guid, uint *pDataSize, [Optional] void *pData)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->GetPrivateData_5(pThis, guid, pDataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateData(global::System.Guid*, uint, void *)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateData(in global::System.Guid guid, uint DataSize, void *pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateData(guidLocal, DataSize, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateData(global::System.Guid*guid, uint DataSize, [Optional] void *pData)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->SetPrivateData_6(pThis, guid, DataSize, pData);
            }

            /// <inheritdoc cref = "SetPrivateDataInterface(global::System.Guid*, win32.System.Com.IUnknown*)"/>
            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(in global::System.Guid guid, win32.System.Com.IUnknown*pData)
            {
                fixed (global::System.Guid*guidLocal = &guid)
                {
                    win32.System.Com.HRESULT __result = this.SetPrivateDataInterface(guidLocal, pData);
                    return __result;
                }
            }

            internal unsafe win32.System.Com.HRESULT SetPrivateDataInterface(global::System.Guid*guid, [Optional] win32.System.Com.IUnknown*pData)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->SetPrivateDataInterface_7(pThis, guid, pData);
            }

            /// <inheritdoc cref = "GetVideoProcessorContentDesc(win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CONTENT_DESC*)"/>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorContentDesc(out win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CONTENT_DESC pContentDesc)
            {
                fixed (win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CONTENT_DESC*pContentDescLocal = &pContentDesc)
                {
                    win32.System.Com.HRESULT __result = this.GetVideoProcessorContentDesc(pContentDescLocal);
                    return __result;
                }
            }

            /// <summary>Gets the content description that was used to create this enumerator.</summary>
            /// <param name = "pContentDesc">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_content_desc">D3D11_VIDEO_PROCESSOR_CONTENT_DESC</a> structure that receives the content description.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorcontentdesc">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorContentDesc(win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CONTENT_DESC*pContentDesc)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->GetVideoProcessorContentDesc_8(pThis, pContentDesc);
            }

            /// <inheritdoc cref = "CheckVideoProcessorFormat(win32.Graphics.Dxgi.DXGI_FORMAT, uint *)"/>
            internal unsafe win32.System.Com.HRESULT CheckVideoProcessorFormat(win32.Graphics.Dxgi.DXGI_FORMAT Format, out uint pFlags)
            {
                fixed (uint *pFlagsLocal = &pFlags)
                {
                    win32.System.Com.HRESULT __result = this.CheckVideoProcessorFormat(Format, pFlagsLocal);
                    return __result;
                }
            }

            /// <summary>Queries whether the video processor supports a specified video format.</summary>
            /// <param name = "Format">The video format to query, specified as a <a href = "https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> value.</param>
            /// <param name = "pFlags">Receives a bitwise <b>OR</b> of zero or more flags from the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_video_processor_format_support">D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT</a> enumeration.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11videoprocessorenumerator-checkvideoprocessorformat">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT CheckVideoProcessorFormat(win32.Graphics.Dxgi.DXGI_FORMAT Format, uint *pFlags)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->CheckVideoProcessorFormat_9(pThis, Format, pFlags);
            }

            /// <inheritdoc cref = "GetVideoProcessorCaps(win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CAPS*)"/>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorCaps(out win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CAPS pCaps)
            {
                fixed (win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CAPS*pCapsLocal = &pCaps)
                {
                    win32.System.Com.HRESULT __result = this.GetVideoProcessorCaps(pCapsLocal);
                    return __result;
                }
            }

            /// <summary>Gets the capabilities of the video processor.</summary>
            /// <param name = "pCaps">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_caps">D3D11_VIDEO_PROCESSOR_CAPS</a> structure that receives the capabilities.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorcaps">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorCaps(win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CAPS*pCaps)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->GetVideoProcessorCaps_10(pThis, pCaps);
            }

            /// <inheritdoc cref = "GetVideoProcessorRateConversionCaps(uint, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*)"/>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorRateConversionCaps(uint TypeIndex, out win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps)
            {
                fixed (win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*pCapsLocal = &pCaps)
                {
                    win32.System.Com.HRESULT __result = this.GetVideoProcessorRateConversionCaps(TypeIndex, pCapsLocal);
                    return __result;
                }
            }

            /// <summary>Returns a group of video processor capabilities that are associated with frame-rate conversion, including deinterlacing and inverse telecine.</summary>
            /// <param name = "TypeIndex">The zero-based index of the group to retrieve. To get the maximum index, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorcaps">ID3D11VideoProcessorEnumerator::GetVideoProcessorCaps</a> and check the <b>RateConversionCapsCount</b> member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_caps">D3D11_VIDEO_PROCESSOR_CAPS</a> structure.</param>
            /// <param name = "pCaps">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_rate_conversion_caps">D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS</a> structure that receives the frame-rate conversion capabilities.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorrateconversioncaps">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorRateConversionCaps(uint TypeIndex, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*pCaps)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->GetVideoProcessorRateConversionCaps_11(pThis, TypeIndex, pCaps);
            }

            /// <inheritdoc cref = "GetVideoProcessorCustomRate(uint, uint, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*)"/>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorCustomRate(uint TypeIndex, uint CustomRateIndex, out win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CUSTOM_RATE pRate)
            {
                fixed (win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*pRateLocal = &pRate)
                {
                    win32.System.Com.HRESULT __result = this.GetVideoProcessorCustomRate(TypeIndex, CustomRateIndex, pRateLocal);
                    return __result;
                }
            }

            /// <summary>Gets a list of custom frame rates that a video processor supports.</summary>
            /// <param name = "TypeIndex">The zero-based index of the frame-rate capability group. To get the maxmum index, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorcaps">ID3D11VideoProcessorEnumerator::GetVideoProcessorCaps </a> and check the <b>RateConversionCapsCount</b> member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_caps">D3D11_VIDEO_PROCESSOR_CAPS</a> structure.</param>
            /// <param name = "CustomRateIndex">
            /// <para>The zero-based index of the custom rate to retrieve. To get the maximum index, call <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorrateconversioncaps">ID3D11VideoProcessorEnumerator::GetVideoProcessorRateConversionCaps</a> and check the <b>CustomRateCount</b> member of the <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_rate_conversion_caps">D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS</a> structure.</para>
            /// <para>This index value is always relative to the capability group specified in the <i>TypeIndex</i> parameter.</para>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorcustomrate#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <param name = "pRate">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_custom_rate">D3D11_VIDEO_PROCESSOR_CUSTOM_RATE</a> structure that receives the custom rate.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorcustomrate">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorCustomRate(uint TypeIndex, uint CustomRateIndex, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*pRate)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->GetVideoProcessorCustomRate_12(pThis, TypeIndex, CustomRateIndex, pRate);
            }

            /// <inheritdoc cref = "GetVideoProcessorFilterRange(win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER_RANGE*)"/>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorFilterRange(win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER Filter, out win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER_RANGE pRange)
            {
                fixed (win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER_RANGE*pRangeLocal = &pRange)
                {
                    win32.System.Com.HRESULT __result = this.GetVideoProcessorFilterRange(Filter, pRangeLocal);
                    return __result;
                }
            }

            /// <summary>Gets the range of values for an image filter.</summary>
            /// <param name = "Filter">The type of image filter, specified as a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ne-d3d11-d3d11_video_processor_filter">D3D11_VIDEO_PROCESSOR_FILTER</a> value.</param>
            /// <param name = "pRange">A pointer to a <a href = "https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_video_processor_filter_range">D3D11_VIDEO_PROCESSOR_FILTER_RANGE</a> structure. The method fills the structure with the range of values for the specified filter.</param>
            /// <returns>If this method succeeds, it returns <b xmlns: loc = "http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns: loc = "http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            /// <remarks>
            /// <para><see href = "https://docs.microsoft.com/windows/win32/api//d3d11/nf-d3d11-id3d11videoprocessorenumerator-getvideoprocessorfilterrange">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            internal unsafe win32.System.Com.HRESULT GetVideoProcessorFilterRange(win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER Filter, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER_RANGE*pRange)
            {
                fixed (ID3D11VideoProcessorEnumerator*pThis = &this)
                    return lpVtbl->GetVideoProcessorFilterRange_13(pThis, Filter, pRange);
            }

            private struct Vtbl
            {
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, global::System.Guid*, void **, win32.System.Com.HRESULT>QueryInterface_1;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint>AddRef_2;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint>Release_3;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, win32.Graphics.Direct3D11.ID3D11Device**, void>GetDevice_4;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, global::System.Guid*, uint *, void *, win32.System.Com.HRESULT>GetPrivateData_5;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, global::System.Guid*, uint, void *, win32.System.Com.HRESULT>SetPrivateData_6;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, global::System.Guid*, win32.System.Com.IUnknown*, win32.System.Com.HRESULT>SetPrivateDataInterface_7;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, win32.System.Com.HRESULT>GetVideoProcessorContentDesc_8;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, win32.Graphics.Dxgi.DXGI_FORMAT, uint *, win32.System.Com.HRESULT>CheckVideoProcessorFormat_9;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CAPS*, win32.System.Com.HRESULT>GetVideoProcessorCaps_10;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*, win32.System.Com.HRESULT>GetVideoProcessorRateConversionCaps_11;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, uint, uint, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*, win32.System.Com.HRESULT>GetVideoProcessorCustomRate_12;
                internal delegate *unmanaged[Stdcall]<ID3D11VideoProcessorEnumerator*, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER, win32.Media.MediaFoundation.D3D11_VIDEO_PROCESSOR_FILTER_RANGE*, win32.System.Com.HRESULT>GetVideoProcessorFilterRange_13;
            }

            private Vtbl*lpVtbl;
        }
    }
}